var searchIndex = JSON.parse('{\
"aead":{"doc":"Authenticated Encryption with Associated Data (AEAD) traits","t":"IIIIIIQNDGIQIGQNDDGGQMLLLLLLLLLLLLAKKLLKKLKKLLKKLLKLLLLLLLLLLCLLLLLLLMKLLLLCLLLKLLLLLLLLLLDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Aead","AeadCore","AeadInPlace","AeadMut","AeadMutInPlace","Buffer","CiphertextOverhead","Err","Error","Key","KeyInit","KeySize","KeySizeUser","Nonce","NonceSize","Ok","OsRng","Payload","Result","Tag","TagSize","aad","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","consts","decrypt","decrypt","decrypt_in_place","decrypt_in_place","decrypt_in_place_detached","decrypt_in_place_detached","default","encrypt","encrypt","encrypt_in_place","encrypt_in_place","encrypt_in_place_detached","encrypt_in_place_detached","eq","equivalent","extend_from_slice","fill_bytes","fmt","fmt","fmt","from","from","from","from","generate_key","generate_nonce","generic_array","hash","into","into","into","is_empty","key_size","len","msg","new","new_from_slice","next_u32","next_u64","partial_cmp","rand_core","to_owned","to_owned","to_string","truncate","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"aead"],[90,"aead::consts"],[3480,"rand_core"],[3481,"core::cmp"],[3482,"alloc::vec"],[3483,"core::convert"],[3484,"core::fmt"],[3485,"core::fmt"],[3486,"generic_array"],[3487,"rand_core"],[3488,"crypto_common"],[3489,"core::option"],[3490,"alloc::string"],[3491,"rand_core::error"],[3492,"core::any"],[3493,"typenum::marker_traits"],[3494,"typenum::marker_traits"],[3495,"typenum::marker_traits"],[3496,"typenum::array"]],"d":["Authenticated Encryption with Associated Data (AEAD) …","Authenticated Encryption with Associated Data (AEAD) …","In-place stateless AEAD trait.","Stateful Authenticated Encryption with Associated Data …","In-place stateful AEAD trait.","In-place encryption/decryption byte buffers.","The upper bound amount of additional space required to …","Contains the error value","Error type.","Key used by <code>KeySizeUser</code> implementors.","Types which can be initialized from key.","Key size in bytes.","Types which use key for initialization.","Nonce: single-use value for ensuring ciphertexts are unique","The length of a nonce.","Contains the success value","A random number generator that retrieves randomness from …","AEAD payloads (message + AAD).","Result type alias with <code>Error</code>.","Tag: authentication code which ensures ciphertexts are …","The maximum length of the nonce.","Optional “additional associated data” to authenticate …","","","","","","","","","","","","","Type aliases for many constants.","Decrypt the given ciphertext slice, and return the …","Decrypt the given ciphertext slice, and return the …","Decrypt the message in-place, returning an error in the …","Decrypt the message in-place, returning an error in the …","Decrypt the message in-place, returning an error in the …","Decrypt the data in-place, returning an error in the event …","","Encrypt the given plaintext payload, and return the …","Encrypt the given plaintext slice, and return the …","Encrypt the given buffer containing a plaintext message …","Encrypt the given buffer containing a plaintext message …","Encrypt the data in-place, returning the authentication tag","Encrypt the data in-place, returning the authentication tag","","","Extend this buffer from the given slice","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Generate random key using the provided <code>CryptoRng</code>.","Generate a random nonce for this AEAD algorithm.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the buffer empty?","Return key size in bytes.","Get the length of the buffer","Message to be encrypted/decrypted","Create new value from fixed size key.","Create new value from variable size key.","","","","","","","","Truncate this buffer to the given size","","","","","","","","","","","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,47,9,0,0,0,48,0,0,47,9,0,0,0,0,47,10,3,10,2,3,10,2,3,2,3,2,3,2,0,49,50,51,52,51,52,3,49,50,51,52,51,52,2,2,13,3,2,2,3,10,10,2,3,53,47,0,2,10,2,3,13,48,13,10,53,53,3,3,2,0,2,3,2,13,3,10,2,3,10,2,3,10,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,33,35,35,33,33,35,33,33,35,35,33,35,31,33,35,31,33,35,31,33,35,31,33,35,31,33,35,31,31,33,35,31,33,35,31,33,35,31,33,35,31,33,35,31,33,35,31,33,33,35,35,31,31,31,33,33,35,35,31,31,31,31,31,31,31,33,33,35,35,31,33,35,33,35,31,31,31,31,31,31,31,31,31,33,35,31,31,31,31,31,31,31,31,31,33,35,31,33,35,33,35,31,33,35,31,33,35,31],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[2,2],5],0,[[-1,[6,[-1]],-2],[[9,[[8,[7]]]]],[],[[11,[10]]]],[[-1,[6,[-1]],-2],[[9,[[8,[7]]]]],[],[[11,[10]]]],[[-1,[6,[-1]],[12,[7]],13],[[9,[4]]],[]],[[-1,[6,[-1]],[12,[7]],-2],[[9,[4]]],[],13],[[-1,[6,[-1]],[12,[7]],[12,[7]],[14,[-1]]],[[9,[4]]],[]],[[-1,[6,[-1]],[12,[7]],[12,[7]],[14,[-1]]],[[9,[4]]],[]],[[],3],[[-1,[6,[-1]],-2],[[9,[[8,[7]]]]],[],[[11,[10]]]],[[-1,[6,[-1]],-2],[[9,[[8,[7]]]]],[],[[11,[10]]]],[[-1,[6,[-1]],[12,[7]],13],[[9,[4]]],[]],[[-1,[6,[-1]],[12,[7]],-2],[[9,[4]]],[],13],[[-1,[6,[-1]],[12,[7]],[12,[7]]],[[9,[[14,[-1]]]]],[]],[[-1,[6,[-1]],[12,[7]],[12,[7]]],[[9,[[14,[-1]]]]],[]],[[2,2],15],[[-1,-2],15,[],[]],[[-1,[12,[7]]],[[9,[4]]],[]],[[3,[12,[7]]],4],[[2,16],17],[[2,16],17],[[3,16],[[19,[4,18]]]],[-1,-1,[]],[[[12,[7]]],10],[-1,-1,[]],[-1,-1,[]],[-1,[[20,[7]]],[21,1]],[-1,[[6,[-2]]],[21,1],[]],0,[[2,-1],4,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[[],23],[-1,23,[]],0,[[[20,[7]]],-1,[]],[[[12,[7]]],[[19,[-1,24]]],[]],[3,25],[3,26],[[2,2],[[27,[5]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[[-1,23],4,[]],[[3,[12,[7]]],[[19,[4,29]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[31,-1],[],32],[[33,-1],[],34],[[35,35]],[[35,33]],[[33,33]],[[33,35]],[[35,-1],[],34],[[33,35]],[[33,33]],[[35,33]],[[35,35]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[35,35],[31,31],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[33,33],5],[[35,35],5],[[31,31],5],[[],33],[[],35],[[],31],[[31,-1],[],[32,36]],[[33,33],15],[[35,35],15],[[31,31],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[33,16],[[19,[4,18]]]],[[35,16],[[19,[4,18]]]],[[31,16],[[19,[4,18]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[33,-1],4,22],[[35,-1],4,22],[[31,-1],4,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[33,33],33],[[33,35],35],[[35,35],35],[[35,33],35],[[31,[37,[-1]]],[],[38,36]],[[31,31]],[[31,[39,[-1]]],[],[38,36]],[[33,33],33],[[33,35],33],[[35,35],35],[[35,33],33],[[31,31]],[[31,[39,[-1]]],[],[38,36]],[[31,[37,[-1]]],[],[38,36]],[[31,-1],[],32],[[31,[40,[-1,-2]]],[],[],[]],[[31,41]],[31],[[],33],[[],33],[[],35],[[],35],[[],31],[33],[35],[[33,33],[[27,[5]]]],[[35,35],[[27,[5]]]],[[31,31],[[27,[5]]]],[[-1,-2],[],[],[]],[[31,[37,[-1]]],[],[38,36]],[[31,[39,[-1]]],[],[38,36]],[[31,31]],[[31,-1],[],[32,36]],[[31,[39,[-1]]],[],[38,36]],[[31,[37,[-1]]],[],[38,36]],[[31,31]],[[],15],[[],15],[[],42],[[],43],[[],44],[[],45],[[],44],[[],45],[[],42],[[],43],[[],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],7],[[],7],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]]],"c":[],"p":[[8,"RngCore",3480],[3,"Error",0],[3,"OsRng",0],[15,"tuple"],[4,"Ordering",3481],[6,"Nonce",0],[15,"u8"],[3,"Vec",3482],[6,"Result",0],[3,"Payload",0],[8,"Into",3483],[15,"slice"],[8,"Buffer",0],[6,"Tag",0],[15,"bool"],[3,"Formatter",3484],[6,"Result",3484],[3,"Error",3484],[4,"Result",3485],[3,"GenericArray",3486],[8,"CryptoRng",3480],[8,"Hasher",3487],[15,"usize"],[3,"InvalidLength",3488],[15,"u32"],[15,"u64"],[4,"Option",3489],[3,"String",3490],[3,"Error",3491],[3,"TypeId",3492],[3,"Z0",90],[8,"Integer",3493],[3,"B0",90],[8,"Bit",3493],[3,"B1",90],[8,"NonZero",3493],[3,"PInt",3494],[8,"Unsigned",3493],[3,"NInt",3494],[3,"TArr",3495],[3,"ATerm",3495],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[8,"AeadCore",0],[8,"KeySizeUser",0],[8,"Aead",0],[8,"AeadMut",0],[8,"AeadInPlace",0],[8,"AeadMutInPlace",0],[8,"KeyInit",0]]},\
"aes":{"doc":"Pure Rust implementation of the Advanced Encryption …","t":"DDDDDDDDDGGLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Aes128","Aes128Dec","Aes128Enc","Aes192","Aes192Dec","Aes192Enc","Aes256","Aes256Dec","Aes256Enc","Block","Block8","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cipher","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decrypt_with_backend","decrypt_with_backend","decrypt_with_backend","decrypt_with_backend","decrypt_with_backend","decrypt_with_backend","decrypt_with_backend_mut","decrypt_with_backend_mut","decrypt_with_backend_mut","decrypt_with_backend_mut","decrypt_with_backend_mut","decrypt_with_backend_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","encrypt_with_backend","encrypt_with_backend","encrypt_with_backend","encrypt_with_backend","encrypt_with_backend","encrypt_with_backend","encrypt_with_backend_mut","encrypt_with_backend_mut","encrypt_with_backend_mut","encrypt_with_backend_mut","encrypt_with_backend_mut","encrypt_with_backend_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name"],"q":[[0,"aes"],[174,"cipher::block"],[175,"core::fmt"],[176,"core::fmt"],[177,"crypto_common"],[178,"core::any"],[179,"core::fmt"]],"d":["AES-128 block cipher","AES-128 block cipher (decrypt-only)","AES-128 block cipher (encrypt-only)","AES-192 block cipher","AES-192 block cipher (decrypt-only)","AES-192 block cipher (encrypt-only)","AES-256 block cipher","AES-256 block cipher (decrypt-only)","AES-256 block cipher (encrypt-only)","128-bit AES block","Eight 128-bit AES blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,3,4,6,7,9,1,3,4,6,7,9,1,2,3,4,5,6,7,8,9,1,2,4,5,7,8,1,2,4,5,7,8,1,2,3,4,5,6,7,8,9,1,1,1,2,3,3,3,4,4,4,5,6,6,6,7,7,7,8,9,9,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[1,-1],10,11],[[3,-1],10,11],[[4,-1],10,11],[[6,-1],10,11],[[7,-1],10,11],[[9,-1],10,11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[[1,-1],10,11],[[2,-1],10,11],[[4,-1],10,11],[[5,-1],10,11],[[7,-1],10,11],[[8,-1],10,11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[-1,-2],10,[],11],[[1,12],[[14,[10,13]]]],[[2,12],[[14,[10,13]]]],[[3,12],[[14,[10,13]]]],[[4,12],[[14,[10,13]]]],[[5,12],[[14,[10,13]]]],[[6,12],[[14,[10,13]]]],[[7,12],[[14,[10,13]]]],[[8,12],[[14,[10,13]]]],[[9,12],[[14,[10,13]]]],[-1,-1,[]],[2,1],[2,1],[-1,-1,[]],[2,3],[2,3],[-1,-1,[]],[-1,-1,[]],[5,4],[5,4],[-1,-1,[]],[5,6],[5,6],[-1,-1,[]],[8,7],[8,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,9],[8,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[1]]],1],[[[15,[2]]],2],[[[15,[3]]],3],[[[15,[4]]],4],[[[15,[5]]],5],[[[15,[6]]],6],[[[15,[7]]],7],[[[15,[8]]],8],[[[15,[9]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[12,17],[12,17],[12,17],[12,17],[12,17],[12,17],[12,17],[12,17],[12,17]],"c":[],"p":[[3,"Aes128",0],[3,"Aes128Enc",0],[3,"Aes128Dec",0],[3,"Aes192",0],[3,"Aes192Enc",0],[3,"Aes192Dec",0],[3,"Aes256",0],[3,"Aes256Enc",0],[3,"Aes256Dec",0],[15,"tuple"],[8,"BlockClosure",174],[3,"Formatter",175],[3,"Error",175],[4,"Result",176],[6,"Key",177],[3,"TypeId",178],[6,"Result",175]]},\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","t":"DDEENNDNNDDDNNSNNSDDEENNDDSDNEDNNNNNSLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMIEDDSSNNDNDSDDDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKKKKKLLLLLLKLLKKKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDNNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AhoCorasick","AhoCorasickBuilder","AhoCorasickKind","Anchored","Anchored","Both","BuildError","ContiguousNFA","DFA","FindIter","FindOverlappingIter","Input","InvalidInputAnchored","InvalidInputUnanchored","LIMIT","LeftmostFirst","LeftmostLongest","MAX","Match","MatchError","MatchErrorKind","MatchKind","No","NoncontiguousNFA","PatternID","PatternIDError","SIZE","Span","Standard","StartKind","StreamFindIter","Unanchored","UnsupportedEmpty","UnsupportedOverlapping","UnsupportedStream","Yes","ZERO","anchored","as_i32","as_u32","as_u64","as_usize","ascii_case_insensitive","attempted","automaton","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","byte_classes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","dense_depth","dfa","earliest","end","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find","find_iter","find_overlapping","find_overlapping_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ne_bytes","from_ne_bytes_unchecked","from_u32_unchecked","get_anchored","get_earliest","get_range","get_span","hash","hash","hash","haystack","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","invalid_input_anchored","invalid_input_unanchored","is_anchored","is_done","is_empty","is_empty","is_match","kind","kind","kind","len","len","match_kind","match_kind","max_pattern_len","memory_usage","min_pattern_len","must","must","new","new","new","new","new","new","new_unchecked","next","next","next","nfa","offset","offset","one_more","packed","partial_cmp","pattern","patterns_len","prefilter","range","range","range","replace_all","replace_all_bytes","replace_all_with","replace_all_with_bytes","set_anchored","set_earliest","set_end","set_range","set_span","set_start","span","span","start","start","start","start_kind","start_kind","stream_find_iter","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_find","try_find_iter","try_find_overlapping","try_find_overlapping_iter","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_replace_all","try_replace_all_bytes","try_replace_all_with","try_replace_all_with_bytes","try_stream_find_iter","try_stream_replace_all","try_stream_replace_all_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsupported_empty","unsupported_overlapping","unsupported_stream","got","got","Automaton","Candidate","FindIter","FindOverlappingIter","LIMIT","MAX","Match","None","OverlappingState","PossibleStartOfMatch","Prefilter","SIZE","StateID","StateIDError","StreamFindIter","ZERO","as_i32","as_u32","as_u64","as_usize","attempted","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","eq","eq","equivalent","equivalent","find_in","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ne_bytes","from_ne_bytes_unchecked","from_u32_unchecked","get_match","hash","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_option","is_dead","is_match","is_special","is_start","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","must","new","new_unchecked","next","next","next","next_state","one_more","partial_cmp","pattern_len","patterns_len","prefilter","start","start_state","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_find","try_find_iter","try_find_overlapping","try_find_overlapping_iter","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_replace_all","try_replace_all_bytes","try_replace_all_with","try_replace_all_with_bytes","try_stream_find_iter","try_stream_replace_all","try_stream_replace_all_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Builder","DFA","ascii_case_insensitive","borrow","borrow","borrow_mut","borrow_mut","build","build_from_noncontiguous","builder","byte_classes","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","into","into","is_dead","is_match","is_special","is_start","match_kind","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","new","new","next_state","pattern_len","patterns_len","prefilter","prefilter","start_kind","start_state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","contiguous","noncontiguous","Builder","NFA","ascii_case_insensitive","borrow","borrow","borrow_mut","borrow_mut","build","build_from_noncontiguous","builder","byte_classes","clone","clone","clone_into","clone_into","default","dense_depth","fmt","fmt","from","from","into","into","is_dead","is_match","is_special","is_start","match_kind","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","new","new","next_state","pattern_len","patterns_len","prefilter","prefilter","start_state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Builder","NFA","ascii_case_insensitive","borrow","borrow","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","default","dense_depth","fmt","fmt","from","from","into","into","is_dead","is_match","is_special","is_start","match_kind","match_kind","match_len","match_pattern","max_pattern_len","memory_usage","min_pattern_len","new","new","next_state","pattern_len","patterns_len","prefilter","prefilter","start_state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Builder","Config","FindIter","LeftmostFirst","LeftmostLongest","MatchKind","Searcher","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","default","default","default","eq","equivalent","extend","find","find_in","find_iter","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","heuristic_pattern_limits","into","into","into","into","into","into_iter","len","match_kind","match_kind","memory_usage","minimum_len","minimum_len","new","new","new","next","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"aho_corasick"],[364,"aho_corasick::MatchErrorKind"],[366,"aho_corasick::automaton"],[525,"aho_corasick::dfa"],[575,"aho_corasick::nfa"],[577,"aho_corasick::nfa::contiguous"],[627,"aho_corasick::nfa::noncontiguous"],[675,"aho_corasick::packed"],[760,"core::result"],[761,"core::iter::traits::collect"],[762,"core::cmp"],[763,"core::ops::range"],[764,"core::option"],[765,"core::convert"],[766,"core::fmt"],[767,"core::fmt"],[768,"core::convert"],[769,"std::io::error"],[770,"std::io"],[771,"core::ops::range"],[772,"alloc::vec"],[773,"core::ops::function"],[774,"std::io"],[775,"std::io::error"]],"d":["An automaton for searching multiple strings in linear time.","A builder for configuring an Aho-Corasick automaton.","The type of Aho-Corasick implementation to use in an …","The type of anchored search to perform.","Support only anchored searches. Requesting an unanchored …","Support both anchored and unanchored searches.","An error that occurred during the construction of an …","Use a contiguous NFA.","Use a DFA. Warning: DFAs typically use a large amount of …","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","The configuration and the haystack to use for an …","An error indicating that an anchored search was requested, …","An error indicating that an unanchored search was …","The total number of values that can be represented.","Use leftmost-first match semantics, which reports leftmost …","Use leftmost-longest match semantics, which reports …","The maximum value.","A representation of a match reported by an Aho-Corasick …","An error that occurred during an Aho-Corasick search.","The underlying kind of a <code>MatchError</code>.","A knob for controlling the match semantics of an …","Run an unanchored search. This means a match may occur …","Use a noncontiguous NFA.","The identifier of a pattern in an Aho-Corasick automaton.","This error occurs when an ID could not be constructed.","The number of bytes that a single value uses in memory.","A representation of a range in a haystack.","Use standard match semantics, which support overlapping …","The kind of anchored starting configurations to support in …","An iterator that reports Aho-Corasick matches in a stream.","Support only unanchored searches. Requesting an anchored …","An error indicating that the operation requested doesn’t …","An error indicating that an overlapping search was …","An error indicating that a stream search was attempted on …","Run an anchored search. This means that a match must begin …","The zero value.","Sets the anchor mode of a search.","Return the internal value as a <code>i32</code>. This is guaranteed to …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>usize</code>. This is guaranteed to","Enable ASCII-aware case insensitive matching.","Returns the value that could not be converted to an ID.","Provides <code>Automaton</code> trait for abstracting over Aho-Corasick …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build an Aho-Corasick automaton using the configuration …","A convenience method for returning a new Aho-Corasick …","A debug settting for whether to attempt to shrink the size …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true when the given offset is contained within …","","","","","Set the limit on how many states use a dense …","Provides direct access to a DFA implementation of …","Whether to execute an “earliest” search or not.","Return the end position of this search.","The ending position of the match.","The end offset of the span, exclusive.","","","","","","","","","","","","","","","","","","","","","","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns the location of the first overlapping match in the …","Returns an iterator of overlapping matches. Stated …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Create a new value from a <code>u32</code> without checking whether the …","Return the anchored mode for this search configuration.","Return whether this search should execute in “earliest”…","Return the span as a range for this search configuration.","Return the span for this search configuration.","","","","Return a borrow of the underlying haystack as a slice of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new “invalid anchored search” error. This …","Create a new “invalid unanchored search” error. This …","Returns true if and only if this anchor mode corresponds …","Return true if this input has been exhausted, which in …","Returns true when this span is empty. That is, when …","Returns true when the span in this match is empty.","Returns true if and only if this automaton matches the …","Returns the kind of the Aho-Corasick automaton used by …","Choose the type of underlying automaton to use.","Returns a reference to the underlying error kind.","Returns the length of this span.","Returns the length of this match.","Returns the match kind used by this automaton.","Set the desired match semantics.","Returns the length of the longest pattern matched by this …","Returns the approximate total amount of heap used by this …","Returns the length of the shortest pattern matched by this …","Like <code>new</code>, but panics if the given value is not valid.","Create a new match from a pattern ID and a byte offset …","Create a new Aho-Corasick automaton using the default …","Create a new builder for configuring an Aho-Corasick …","Create a new error value with the given kind.","Create a new value that is represented by a “small index.…","Create a new search configuration for the given haystack.","Create a new match from a pattern ID and a span.","Create a new value without checking whether the given …","","","","Provides direct access to NFA implementations of …","Returns a new span with <code>offset</code> added to this span’s <code>start</code>…","Returns a new match with <code>offset</code> added to its span’s <code>start</code>…","Returns one more than this value as a usize.","Provides packed multiple substring search, principally for …","","Returns the ID of the pattern that matched.","Return the total number of patterns matched by this …","Enable heuristic prefilter optimizations.","Like <code>Input::span</code>, but accepts any range instead.","Returns this span as a range.","Returns the match span as a range.","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","Set the anchor mode of a search.","Set whether the search should execute in “earliest” …","Set the ending offset for the span for this search …","Set the span for this search configuration given any range.","Set the span for this search configuration.","Set the starting offset for the span for this search …","Set the span for this search.","Returns the span for this match.","Return the start position of this search.","The starting position of the match.","The start offset of the span, inclusive.","Returns the type of starting search configuration …","Sets the starting state configuration for the automaton.","Returns an iterator of non-overlapping matches in the given","Return the underlying integer as raw bytes in native endian","","","","","","","","","","","","","","","","","","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns the location of the first overlapping match in the …","Returns an iterator of overlapping matches.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","Returns an iterator of non-overlapping matches in the given","Search for and replace all matches of this automaton in …","Search the given reader and replace all matches of this …","","","","","","","","","","","","","","","","","","Create a new “unsupported empty pattern” error. This …","Create a new “unsupported overlapping search” error. …","Create a new “unsupported stream search” error. This …","The match semantics for the automaton that was used.","The match semantics for the automaton that was used.","A trait that abstracts over Aho-Corasick automata.","A candidate is the result of running a prefilter on a …","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","The total number of values that can be represented.","The maximum value.","A confirmed match was found. Callers do not need to …","No match was found. Since false negatives are not …","Represents the current state of an overlapping search.","The start of a possible match was found. Callers must …","A prefilter for accelerating a search.","The number of bytes that a single value uses in memory.","The identifier of a finite automaton state.","This error occurs when an ID could not be constructed.","An iterator that reports matches in a stream.","The zero value.","Return the internal value as a <code>i32</code>. This is guaranteed to …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>usize</code>. This is guaranteed to","Returns the value that could not be converted to an ID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute a search in the haystack within the span given. If …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Create a new value from a <code>u32</code> without checking whether the …","Return the match result of the most recent search to …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Convert this candidate into an option. This is useful when …","Returns true if the given ID represents a dead state.","Returns true if the given ID represents a match state.","Returns true if the given ID represents a “special” …","Returns true if the given ID represents a start state.","Returns the match semantics that this automaton was built …","Returns the total number of matches for the given state ID.","Returns the pattern ID for the match state given by <code>sid</code> at …","Returns the length, in bytes, of the longest pattern in …","Returns the heap memory usage, in bytes, used by this …","Returns the length, in bytes, of the shortest pattern in …","Like <code>new</code>, but panics if the given value is not valid.","Create a new value that is represented by a “small index.…","Create a new value without checking whether the given …","","","","Performs a state transition from <code>sid</code> for <code>byte</code> and returns …","Returns one more than this value as a usize.","","Returns the length of the pattern for the given ID.","Returns the total number of patterns compiled into this …","Returns a prefilter, if available, that can be used to …","Create a new overlapping state that begins at the start …","Returns the starting state for the given anchor mode.","Return the underlying integer as raw bytes in native endian","","","","","","","Executes a non-overlapping search with this automaton …","Returns an iterator of non-overlapping matches with this …","Executes a overlapping search with this automaton using …","Returns an iterator of overlapping matches with this …","","","","","","","","","","","","","","","","","","","","","Replaces all non-overlapping matches in <code>haystack</code> with …","Replaces all non-overlapping matches in <code>haystack</code> with …","Replaces all non-overlapping matches in <code>haystack</code> by …","Replaces all non-overlapping matches in <code>haystack</code> by …","Returns an iterator of non-overlapping matches with this …","Replaces all non-overlapping matches in <code>rdr</code> with strings …","Replaces all non-overlapping matches in <code>rdr</code> by calling the …","","","","","","","","","A builder for configuring an Aho-Corasick DFA.","A DFA implementation of Aho-Corasick.","Enable ASCII-aware case insensitive matching.","","","","","Build an Aho-Corasick DFA from the given iterator of …","Build an Aho-Corasick DFA from the given noncontiguous NFA.","A convenience method for returning a new Aho-Corasick DFA …","A debug setting for whether to attempt to shrink the size …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the desired match semantics.","","","","","","Create a new Aho-Corasick DFA using the default …","Create a new builder for configuring an Aho-Corasick DFA.","","","","","Enable heuristic prefilter optimizations.","Sets the starting state configuration for the automaton.","","","","","","","","","","Provides a contiguous NFA implementation of Aho-Corasick.","Provides a noncontiguous NFA implementation of …","A builder for configuring an Aho-Corasick contiguous NFA.","A contiguous NFA implementation of Aho-Corasick.","Enable ASCII-aware case insensitive matching.","","","","","Build an Aho-Corasick contiguous NFA from the given …","Build an Aho-Corasick contiguous NFA from the given …","A convenience method for returning a new Aho-Corasick …","A debug setting for whether to attempt to shrink the size …","","","","","","Set the limit on how many states use a dense …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the desired match semantics.","","","","","","Create a new Aho-Corasick contiguous NFA using the default …","Create a new builder for configuring an Aho-Corasick …","","","","","Enable heuristic prefilter optimizations.","","","","","","","","","","A builder for configuring an Aho-Corasick noncontiguous …","A noncontiguous NFA implementation of Aho-Corasick.","Enable ASCII-aware case insensitive matching.","","","","","Build an Aho-Corasick noncontiguous NFA from the given …","A convenience method for returning a new Aho-Corasick …","","","","","","Set the limit on how many states use a dense …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the desired match semantics.","","","","","","Create a new Aho-Corasick noncontiguous NFA using the …","Create a new builder for configuring an Aho-Corasick …","","","","","Enable heuristic prefilter optimizations.","","","","","","","","","","A builder for constructing a packed searcher from a …","The configuration for a packed multiple pattern searcher.","An iterator over non-overlapping matches from a packed …","Use leftmost-first match semantics, which reports leftmost …","Use leftmost-longest match semantics, which reports …","A knob for controlling the match semantics of a packed …","A packed searcher for quickly finding occurrences of …","Add the given pattern to this set to match.","","","","","","","","","","","Build a searcher from the patterns added to this builder …","Create a packed builder from this configuration. The …","A convenience function for calling <code>Builder::new()</code>.","","","","","","","","","A convenience function for calling <code>Config::new()</code>.","","","","","","Add the given iterator of patterns to this set to match.","Return the first occurrence of any of the patterns in this …","Return the first occurrence of any of the patterns in this …","Return an iterator of non-overlapping occurrences of the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Request that heuristic limitations on the number of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the number of patterns added to this builder.","Set the match semantics for this configuration.","Returns the match kind used by this packed searcher.","Returns the approximate total amount of heap used by this …","Returns the length, in bytes, of the shortest pattern …","Returns the minimum length of a haystack that is required …","Create a new default configuration. A default …","Create a new builder for constructing a multi-pattern …","A convenience function for constructing a searcher from an …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,21,21,0,15,15,0,0,0,17,17,3,20,20,3,0,0,0,0,2,15,0,0,3,0,20,0,0,21,17,17,17,2,3,1,3,3,3,3,8,10,0,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,8,11,8,11,8,15,12,16,17,3,10,1,18,2,19,20,21,11,8,15,12,16,17,3,10,1,18,2,19,20,21,3,18,8,3,20,21,8,0,1,1,19,18,15,16,17,3,10,18,18,2,19,20,21,15,16,17,3,10,18,2,19,20,21,11,11,11,11,11,27,29,32,8,15,12,12,16,16,17,3,10,10,1,18,2,19,20,21,11,27,29,32,8,15,12,16,17,3,3,10,1,1,18,18,2,19,20,21,3,3,3,1,1,1,1,3,18,19,1,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,27,29,32,16,16,2,1,18,19,11,11,8,16,18,19,11,8,11,11,11,3,19,11,8,16,3,1,19,3,27,29,32,0,18,19,3,0,3,19,11,8,1,18,19,11,11,11,11,1,1,1,1,1,1,1,19,1,19,18,11,8,11,3,11,8,15,12,16,17,3,10,1,18,2,19,20,21,12,16,10,11,11,11,11,11,27,29,32,8,15,12,16,17,3,3,3,3,3,10,1,18,2,19,20,21,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,11,11,11,11,11,11,11,11,27,29,32,8,15,12,16,17,3,10,1,18,2,19,20,21,16,16,16,70,71,0,0,0,0,50,50,53,53,0,53,0,50,0,0,0,50,50,50,50,50,51,28,54,55,56,52,53,50,51,28,54,55,56,52,53,50,51,28,52,53,50,51,28,52,53,50,51,50,50,50,51,50,51,52,28,54,55,56,52,53,50,51,51,28,54,55,56,52,53,50,50,51,50,50,50,28,50,28,54,55,56,52,53,50,51,54,55,56,53,57,57,57,57,57,57,57,57,57,57,50,50,50,54,55,56,57,50,50,57,57,57,28,57,50,28,52,53,50,51,51,57,57,57,57,28,54,55,56,52,53,50,50,50,50,50,51,28,54,55,56,52,53,50,51,57,57,57,57,57,57,57,28,54,55,56,52,53,50,51,0,0,59,60,59,60,59,59,59,60,59,60,59,60,59,59,60,59,60,59,60,59,60,60,60,60,60,59,60,60,60,60,60,60,59,60,60,60,60,59,59,60,60,59,60,59,60,59,60,59,0,0,0,0,62,63,62,63,62,62,62,63,62,63,62,63,62,62,62,63,62,63,62,63,62,63,63,63,63,63,62,63,63,63,63,63,63,62,63,63,63,63,62,63,63,62,63,62,63,62,63,62,0,0,64,61,64,61,64,64,61,61,64,61,64,64,64,61,64,61,64,61,64,61,61,61,61,61,64,61,61,61,61,61,61,64,61,61,61,61,64,61,61,64,61,64,61,64,61,64,0,0,0,68,68,0,0,65,68,67,65,66,69,68,67,65,66,69,65,67,66,68,67,65,66,68,67,65,66,66,68,67,65,68,68,65,66,66,66,68,67,65,66,69,68,67,65,66,69,67,68,67,65,66,69,69,65,67,66,66,65,66,67,65,66,69,68,67,65,66,68,67,65,66,69,68,67,65,66,69,68,67,65,66,69],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[3,4],[3,5],[3,6],[3,7],[[8,9],8],[10,6],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,-1],[[13,[11,12]]],14],[[],8],[[8,9],8],[11,11],[8,8],[15,15],[12,12],[16,16],[17,17],[3,3],[10,10],[1,1],[18,18],[2,2],[19,19],[20,20],[21,21],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[3,3],23],[[18,7],9],[[],8],[[],3],[[],20],[[],21],[[8,7],8],0,[[1,9],1],[1,7],[19,7],0,[[15,15],9],[[16,16],9],[[17,17],9],[[3,3],9],[[10,10],9],[[18,18],9],[[18,[24,[7]]],9],[[2,2],9],[[19,19],9],[[20,20],9],[[21,21],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[11,-1],[[25,[19]]],[[26,[1]]]],[[11,-1],27,[[26,[1]]]],[[11,-1,28],22,[[26,[1]]]],[[11,-1],29,[[26,[1]]]],[[11,30],31],[[27,30],31],[[29,30],31],[[[32,[-1]],30],31,33],[[8,30],31],[[15,30],31],[[12,30],31],[[12,30],31],[[16,30],31],[[16,30],31],[[17,30],31],[[3,30],31],[[10,30],31],[[10,30],31],[[1,30],31],[[18,30],31],[[2,30],31],[[19,30],31],[[20,30],31],[[21,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,3],[-1,-1,[]],[-1,-1,[]],[-1,1,[35,[37,[[36,[34]]]]]],[-1,-1,[]],[-1,-1,[]],[[[24,[7]]],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[38,[34]]],[[13,[3,10]]]],[[[38,[34]]],3],[5,3],[1,2],[1,9],[1,[[24,[7]]]],[1,18],[[3,-1],22,39],[[18,-1],22,39],[[19,-1],22,39],[1,[[36,[34]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[[],16],[2,9],[1,9],[18,9],[19,9],[[11,-1],9,[[26,[1]]]],[11,15],[[8,[25,[15]]],8],[16,17],[18,7],[19,7],[11,20],[[8,20],8],[11,7],[11,7],[11,7],[7,3],[[7,-1],19,[[26,[18]]]],[-1,[[13,[11,12]]],14],[[],8],[17,16],[7,[[13,[3,10]]]],[-1,1,[35,[37,[[36,[34]]]]]],[[3,-1],19,[[26,[18]]]],[7,3],[27,[[25,[19]]]],[29,[[25,[19]]]],[[[32,[-1]]],[[25,[[13,[19,40]]]]],41],0,[[18,7],18],[[19,7],19],[3,7],0,[[3,3],[[25,[23]]]],[19,3],[11,7],[[8,9],8],[[1,-1],1,[[42,[7]]]],[18,[[24,[7]]]],[19,[[24,[7]]]],[[11,43,[36,[-1]]],44,[[37,[43]]]],[[11,[36,[34]],[36,[-1]]],[[45,[34]]],[[37,[[36,[34]]]]]],[[11,43,44,-1],22,46],[[11,[36,[34]],[45,[34]],-1],22,46],[[1,2],22],[[1,9],22],[[1,7],22],[[1,-1],22,[[42,[7]]]],[[1,-1],22,[[26,[18]]]],[[1,7],22],[[1,-1],1,[[26,[18]]]],[19,18],[1,7],[19,7],0,[11,21],[[8,21],8],[[11,-1],[[32,[-1]]],41],[3,[[38,[34]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[[11,-1],[[13,[[25,[19]],16]]],[[26,[1]]]],[[11,-1],[[13,[27,16]]],[[26,[1]]]],[[11,-1,28],[[13,[22,16]]],[[26,[1]]]],[[11,-1],[[13,[29,16]]],[[26,[1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[7,[[13,[3,10]]]],[6,[[13,[3,10]]]],[-1,[[13,[-2]]],[],[]],[47,[[13,[3,10]]]],[5,[[13,[3,10]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[11,43,[36,[-1]]],[[13,[44,16]]],[[37,[43]]]],[[11,[36,[34]],[36,[-1]]],[[13,[[45,[34]],16]]],[[37,[[36,[34]]]]]],[[11,43,44,-1],[[13,[22,16]]],46],[[11,[36,[34]],[45,[34]],-1],[[13,[22,16]]],46],[[11,-1],[[13,[[32,[-1]],16]]],41],[[11,-1,-2,[36,[-3]]],[[13,[22,40]]],41,48,[[37,[[36,[34]]]]]],[[11,-1,-2,-3],[[13,[22,40]]],41,48,46],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[[],16],[20,16],[20,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[50,4],[50,5],[50,6],[50,7],[51,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[52,52],[53,53],[50,50],[51,51],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[50,50],23],[[],50],[[50,50],9],[[51,51],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[52,[36,[34]],18],53],[[28,30],31],[[[54,[-1]],30],31,33],[[[55,[-1]],30],31,33],[[[56,[-1,-2]],30],31,33,33],[[52,30],31],[[53,30],31],[[50,30],31],[[51,30],31],[[51,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,50],[-1,-1,[]],[[[38,[34]]],[[13,[50,51]]]],[[[38,[34]]],50],[5,50],[28,[[25,[19]]]],[[50,-1],22,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,[[25,[7]]]],[[-1,50],9,[]],[[-1,50],9,[]],[[-1,50],9,[]],[[-1,50],9,[]],[-1,20,[]],[[-1,50],7,[]],[[-1,50,7],3,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[7,50],[7,[[13,[50,51]]]],[7,50],[[[54,[-1]]],[[25,[19]]],57],[[[55,[-1]]],[[25,[19]]],57],[[[56,[-1,-2]]],[[25,[[58,[19]]]]],57,41],[[-1,2,50,34],50,[]],[50,7],[[50,50],[[25,[23]]]],[[-1,3],7,[]],[-1,7,[]],[-1,[[25,[52]]],[]],[[],28],[[-1,2],[[13,[50,16]]],[]],[50,[[38,[34]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[[-1,1],[[13,[[25,[19]],16]]],[]],[[-1,1],[[13,[[54,[-1]],16]]],35],[[-1,1,28],[[13,[22,16]]],[]],[[-1,1],[[13,[[55,[-1]],16]]],35],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[6,[[13,[50,51]]]],[47,[[13,[50,51]]]],[7,[[13,[50,51]]]],[5,[[13,[50,51]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[-1,43,[36,[-2]]],[[13,[44,16]]],35,[[37,[43]]]],[[-1,[36,[34]],[36,[-2]]],[[13,[[45,[34]],16]]],35,[[37,[[36,[34]]]]]],[[-1,43,44,-2],[[13,[22,16]]],35,46],[[-1,[36,[34]],[45,[34]],-2],[[13,[22,16]]],35,46],[[-1,-2],[[13,[[56,[-1,-2]],16]]],35,41],[[-1,-2,-3,[36,[-4]]],[[58,[22]]],35,41,48,[[37,[[36,[34]]]]]],[[-1,-2,-3,-4],[[58,[22]]],35,41,48,46],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],0,0,[[59,9],59],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[59,-1],[[13,[60,12]]],14],[[59,61],[[13,[60,12]]]],[[],59],[[59,9],59],[60,60],[59,59],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],59],[[60,30],31],[[59,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[60,50],9],[[60,50],9],[[60,50],9],[[60,50],9],[60,20],[[59,20],59],[[60,50],7],[[60,50,7],3],[60,7],[60,7],[60,7],[-1,[[13,[60,12]]],14],[[],59],[[60,2,50,34],50],[[60,3],7],[60,7],[60,[[25,[52]]]],[[59,9],59],[[59,21],59],[[60,2],[[13,[50,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],0,0,0,0,[[62,9],62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[62,-1],[[13,[63,12]]],14],[[62,61],[[13,[63,12]]]],[[],62],[[62,9],62],[63,63],[62,62],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],62],[[62,7],62],[[63,30],31],[[62,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[63,50],9],[[63,50],9],[[63,50],9],[[63,50],9],[63,20],[[62,20],62],[[63,50],7],[[63,50,7],3],[63,7],[63,7],[63,7],[-1,[[13,[63,12]]],14],[[],62],[[63,2,50,34],50],[[63,3],7],[63,7],[63,[[25,[52]]]],[[62,9],62],[[63,2],[[13,[50,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],0,0,[[64,9],64],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[64,-1],[[13,[61,12]]],14],[[],64],[61,61],[64,64],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],64],[[64,7],64],[[61,30],31],[[64,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[61,50],9],[[61,50],9],[[61,50],9],[[61,50],9],[61,20],[[64,20],64],[[61,50],7],[[61,50,7],3],[61,7],[61,7],[61,7],[-1,[[13,[61,12]]],14],[[],64],[[61,2,50,34],50],[[61,3],7],[61,7],[61,[[25,[52]]]],[[64,9],64],[[61,2],[[13,[50,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],0,0,0,0,0,0,0,[[65,-1],65,[[37,[[36,[34]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,[[25,[66]]]],[67,65],[[],65],[68,68],[67,67],[65,65],[66,66],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],67],[[],68],[[],67],[[],65],[[68,68],9],[[-1,-2],9,[],[]],[[65,-1],65,14],[[66,-1],[[25,[19]]],[[37,[[36,[34]]]]]],[[66,-1,18],[[25,[19]]],[[37,[[36,[34]]]]]],[[66,-1],69,[35,[37,[[36,[34]]]]]],[[68,30],31],[[67,30],31],[[65,30],31],[[66,30],31],[[69,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[67,9],67],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,7],[[67,68],67],[66,68],[66,7],[65,7],[66,7],[[],67],[[],65],[-1,[[25,[66]]],14],[69,[[25,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]]],"c":[],"p":[[3,"Input",0],[4,"Anchored",0],[3,"PatternID",0],[15,"i32"],[15,"u32"],[15,"u64"],[15,"usize"],[3,"AhoCorasickBuilder",0],[15,"bool"],[3,"PatternIDError",0],[3,"AhoCorasick",0],[3,"BuildError",0],[4,"Result",760],[8,"IntoIterator",761],[4,"AhoCorasickKind",0],[3,"MatchError",0],[4,"MatchErrorKind",0],[3,"Span",0],[3,"Match",0],[4,"MatchKind",0],[4,"StartKind",0],[15,"tuple"],[4,"Ordering",762],[3,"Range",763],[4,"Option",764],[8,"Into",765],[3,"FindIter",0],[3,"OverlappingState",366],[3,"FindOverlappingIter",0],[3,"Formatter",766],[6,"Result",766],[3,"StreamFindIter",0],[8,"Debug",766],[15,"u8"],[8,"Sized",767],[15,"slice"],[8,"AsRef",765],[15,"array"],[8,"Hasher",768],[3,"Error",769],[8,"Read",770],[8,"RangeBounds",763],[15,"str"],[3,"String",771],[3,"Vec",772],[8,"FnMut",773],[15,"u16"],[8,"Write",770],[3,"TypeId",774],[3,"StateID",366],[3,"StateIDError",366],[3,"Prefilter",366],[4,"Candidate",366],[3,"FindIter",366],[3,"FindOverlappingIter",366],[3,"StreamFindIter",366],[8,"Automaton",366],[6,"Result",769],[3,"Builder",525],[3,"DFA",525],[3,"NFA",627],[3,"Builder",577],[3,"NFA",577],[3,"Builder",627],[3,"Builder",675],[3,"Searcher",675],[3,"Config",675],[4,"MatchKind",675],[3,"FindIter",675],[13,"UnsupportedStream",364],[13,"UnsupportedOverlapping",364]]},\
"base16ct":{"doc":"Pure Rust implementation of Base16 (RFC 4648, a.k.a. hex).","t":"NEDNNNGLLLLLLLLFFLLLLLLLLLLLLAALLLLLLLLLLAFFFFFFFFFFFF","n":["Err","Error","HexDisplay","InvalidEncoding","InvalidLength","Ok","Result","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decoded_len","encoded_len","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","lower","mixed","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upper","decode","decode_vec","encode","encode_str","encode_string","decode","decode_vec","decode","decode_vec","encode","encode_str","encode_string"],"q":[[0,"base16ct"],[42,"base16ct::lower"],[47,"base16ct::mixed"],[49,"base16ct::upper"],[54,"core::fmt"],[55,"core::fmt"],[56,"core::result"],[57,"core::any"],[58,"core::convert"],[59,"alloc::vec"]],"d":["Contains the error value","Error type","<code>core::fmt</code> presenter for binary data encoded as hexadecimal …","Invalid encoding of provided Base16 string.","Insufficient output buffer length.","Contains the success value","Result type with the <code>base16ct</code> crate’s <code>Error</code> type.","","","","","","","","","Compute decoded length of the given hex-encoded input.","Get the length of Base16 (hex) produced by encoding the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Function for decoding and encoding lower Base16 (hex)","Function for decoding mixed Base16 (hex)","","","","","","","","","","","Function for decoding and encoding upper Base16 (hex)","Decode a lower Base16 (hex) string into the provided …","Decode a lower Base16 (hex) string into a byte vector.","Encode the input byte slice as lower Base16.","Encode input byte slice into a <code>&amp;str</code> containing lower …","Encode input byte slice into a <code>String</code> containing lower …","Decode a mixed Base16 (hex) string into the provided …","Decode a mixed Base16 (hex) string into a byte vector.","Decode an upper Base16 (hex) string into the provided …","Decode an upper Base16 (hex) string into a byte vector.","Encode the input byte slice as upper Base16.","Encode input byte slice into a <code>&amp;str</code> containing upper …","Encode input byte slice into a <code>String</code> containing upper …"],"i":[7,0,0,2,2,7,0,1,2,1,2,1,2,1,2,0,0,1,2,1,1,1,1,2,2,1,2,1,2,0,0,1,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[5,[4]]],[[7,[6]]]],[[[5,[4]]],6],[[1,1],8],[[2,2],8],[[1,9],10],[[1,9],10],[[1,9],10],[[1,9],10],[[2,9],10],[[2,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,11,[]],[-1,11,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,[[-1,[5,[4]]],[[12,[[5,[4]],2]]],[[14,[[5,[4]]]]]],[-1,[[12,[[15,[4]],2]]],[[14,[[5,[4]]]]]],[[[5,[4]],[5,[4]]],[[12,[[5,[4]],2]]]],[[[5,[4]],[5,[4]]],[[12,[16,2]]]],[[[5,[4]]],11],[[-1,[5,[4]]],[[12,[[5,[4]],2]]],[[14,[[5,[4]]]]]],[-1,[[12,[[15,[4]],2]]],[[14,[[5,[4]]]]]],[[-1,[5,[4]]],[[12,[[5,[4]],2]]],[[14,[[5,[4]]]]]],[-1,[[12,[[15,[4]],2]]],[[14,[[5,[4]]]]]],[[[5,[4]],[5,[4]]],[[12,[[5,[4]],2]]]],[[[5,[4]],[5,[4]]],[[12,[16,2]]]],[[[5,[4]]],11]],"c":[],"p":[[3,"HexDisplay",0],[4,"Error",0],[15,"tuple"],[15,"u8"],[15,"slice"],[15,"usize"],[6,"Result",0],[15,"bool"],[3,"Formatter",54],[6,"Result",54],[3,"String",55],[4,"Result",56],[3,"TypeId",57],[8,"AsRef",58],[3,"Vec",59],[15,"str"]]},\
"base64":{"doc":"Getting started","t":"ENEECNNNNNNALLLLLLLLLLLLFFFFFAFFFFFALLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLADRRRNRNENRRNLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLIQIQDEICCNNNLLLLLLKLLLLKLKLLLLLLLLLLALLLLLLLLLDDCRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCDLLLLLLLLLLLDDILLLLKLLLLLLLLLLLLLLLLLLLLLL","n":["DecodeError","DecodeError","DecodeSliceError","EncodeSliceError","Engine","InvalidByte","InvalidLastSymbol","InvalidLength","InvalidPadding","OutputSliceTooSmall","OutputSliceTooSmall","alphabet","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode_engine","decode_engine_slice","decode_engine_vec","decoded_len_estimate","display","encode","encode_engine","encode_engine_slice","encode_engine_string","encoded_len","engine","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","prelude","read","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","Alphabet","BCRYPT","BIN_HEX","CRYPT","DuplicatedByte","IMAP_MUTF7","InvalidLength","ParseAlphabetError","ReservedByte","STANDARD","URL_SAFE","UnprintableByte","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","into","into","new","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Base64Display","borrow","borrow_mut","fmt","from","into","new","to_string","try_from","try_into","type_id","Config","Config","DecodeEstimate","DecodeEstimate","DecodeMetadata","DecodePaddingMode","Engine","GeneralPurpose","GeneralPurposeConfig","Indifferent","RequireCanonical","RequireNone","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","config","decode","decode_slice","decode_slice_unchecked","decode_vec","decoded_len_estimate","encode","encode_padding","encode_slice","encode_string","eq","eq","equivalent","equivalent","fmt","fmt","from","from","general_purpose","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","GeneralPurpose","GeneralPurposeConfig","GeneralPurposeEstimate","NO_PAD","PAD","STANDARD","STANDARD_NO_PAD","URL_SAFE","URL_SAFE_NO_PAD","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","default","encode_padding","fmt","fmt","from","from","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_decode_allow_trailing_bits","with_decode_padding_mode","with_encode_padding","BASE64_STANDARD","BASE64_STANDARD_NO_PAD","BASE64_URL_SAFE","BASE64_URL_SAFE_NO_PAD","Engine","DecoderReader","borrow","borrow_mut","fmt","from","into","into_inner","new","read","try_from","try_into","type_id","EncoderStringWriter","EncoderWriter","StrConsumer","borrow","borrow","borrow_mut","borrow_mut","consume","drop","finish","flush","flush","fmt","from","from","from_consumer","into","into","into_inner","into_inner","new","new","try_from","try_from","try_into","try_into","type_id","type_id","write","write"],"q":[[0,"base64"],[74,"base64::alphabet"],[113,"base64::display"],[124,"base64::engine"],[170,"base64::engine::general_purpose"],[209,"base64::prelude"],[214,"base64::read"],[226,"base64::write"],[256,"alloc::vec"],[257,"core::result"],[258,"core::convert"],[259,"alloc::string"],[260,"core::option"],[261,"core::fmt"],[262,"core::fmt"],[263,"core::any"],[264,"core::fmt"],[265,"std::io::error"],[266,"std::io"]],"d":["Errors that can occur while decoding.","A DecodeError occurred","Errors that can occur while decoding into a slice.","Errors that can occur while encoding into a slice.","","An invalid byte was found in the input. The offset and …","The last non-padding input symbol’s encoded 6 bits have …","The length of the input is invalid. A typical cause of …","The nature of the padding was not as configured: absent or …","The provided slice is too small.","The provided slice <em>may</em> be too small.","Provides Alphabet and constants for alphabets commonly …","","","","","","","","","","","","","Decode base64 using the <code>STANDARD</code> engine.","Decode from string reference as octets using the specified …","Decode the input into the provided output slice.","Decode from string reference as octets.","Returns a conservative estimate of the decoded size of …","Enables base64’d output anywhere you might use a <code>Display</code> …","Encode arbitrary octets as base64 using the <code>STANDARD</code> engine…","Encode arbitrary octets as base64 using the provided <code>Engine</code>…","Encode arbitrary octets as base64 into a supplied slice.","Encode arbitrary octets as base64 into a supplied <code>String</code>.","Calculate the base64 encoded length for a given input …","Provides the Engine abstraction and out of the box …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Preconfigured engines for common use cases.","Implementations of <code>io::Read</code> to transparently decode base64.","","","","","","","","","","","","","","","","","Implementations of <code>io::Write</code> to transparently handle …","An alphabet defines the 64 ASCII characters (symbols) used …","The bcrypt alphabet.","The alphabet used in BinHex 4.0 files.","The <code>crypt(3)</code> alphabet (uses <code>.</code> and <code>/</code> as the first two …","All bytes must be unique","The alphabet used in IMAP-modified UTF-7 (uses <code>+</code> and <code>,</code>).","Alphabets must be 64 ASCII bytes","Possible errors when constructing an Alphabet from a <code>str</code>.","<code>=</code> cannot be used","The standard alphabet (uses <code>+</code> and <code>/</code>).","The URL safe alphabet (uses <code>-</code> and <code>_</code>).","All bytes must be printable (in the range <code>[32, 126]</code>).","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an <code>Alphabet</code> from a string of 64 unique printable …","","","","","","","","","","A convenience wrapper for base64’ing bytes into a format …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>Base64Display</code> with the provided engine.","","","","","The minimal level of configuration that engines must …","The config type used by this engine","The decode estimate used by an engine implementation. …","The decode estimate used by this engine","Metadata about the result of a decode operation","Controls how pad bytes are handled when decoding.","An <code>Engine</code> provides low-level encoding and decoding …","","","Canonical padding is allowed, but any fewer padding bytes …","Padding must be canonical (0, 1, or 2 <code>=</code> as needed to …","Padding must be absent – for when you want predictable …","","","","","","","Returns the config for this engine.","Decode the input into a new <code>Vec</code>.","Decode the input into the provided output slice.","Decode the input into the provided output slice.","Decode the <code>input</code> into the supplied <code>buffer</code>.","Returns a conservative (err on the side of too big) …","Encode arbitrary octets as base64 using the provided <code>Engine</code>…","Returns <code>true</code> if padding should be added after the encoded …","Encode arbitrary octets as base64 into a supplied slice. …","Encode arbitrary octets as base64 into a supplied <code>String</code>. …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Provides the GeneralPurpose engine and associated config …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","A general-purpose base64 engine.","Contains configuration parameters for base64 encoding and …","","Don’t add padding when encoding, and require no padding …","Include padding bytes when encoding, and require that they …","A GeneralPurpose engine using the alphabet::STANDARD …","A GeneralPurpose engine using the alphabet::STANDARD …","A GeneralPurpose engine using the alphabet::URL_SAFE …","A GeneralPurpose engine using the alphabet::URL_SAFE …","","","","","","","","","","Delegates to GeneralPurposeConfig::new.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a <code>GeneralPurpose</code> engine from an Alphabet.","Create a new config with <code>padding</code> = <code>true</code>, …","","","","","","","","","Create a new config based on <code>self</code> with an updated …","Create a new config based on <code>self</code> with an updated …","Create a new config based on <code>self</code> with an updated <code>padding</code> …","","","","","","A <code>Read</code> implementation that decodes base64 data read from …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Unwraps this <code>DecoderReader</code>, returning the base reader …","Create a new decoder that will read from the provided …","Decode input from the wrapped reader.","","","","A <code>Write</code> implementation that base64-encodes data using the …","A <code>Write</code> implementation that base64 encodes data before …","An abstraction around consuming <code>str</code>s produced by base64 …","","","","","Consume the base64 encoded data in <code>buf</code>","","Encode all remaining buffered data and write it, including …","Because this is usually treated as OK to call multiple …","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a EncoderStringWriter that will append to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>EncoderWriter</code>, returning the base writer it …","Encode all remaining buffered data, including any trailing …","Create a new encoder that will write to the provided …","Create a EncoderStringWriter that will encode into a new …","","","","","","","Encode input and then write to the delegate writer.",""],"i":[0,3,0,0,0,2,2,2,2,1,3,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,1,2,2,3,3,1,2,3,3,1,2,3,0,0,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,20,0,20,0,20,0,0,20,19,20,19,20,19,19,19,20,19,20,19,20,20,19,20,19,20,19,19,20,19,19,20,19,20,19,20,0,22,22,22,22,22,22,22,22,22,22,0,10,0,10,0,0,0,0,0,24,24,24,24,25,24,25,24,24,10,10,10,10,10,35,10,36,10,10,24,25,24,25,24,25,24,25,0,24,25,24,24,25,24,25,24,25,0,0,0,0,0,0,0,0,0,26,27,26,27,26,27,26,27,26,27,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,27,27,27,0,0,0,0,0,0,28,28,28,28,28,28,28,28,28,28,28,0,0,0,31,33,31,33,34,31,31,31,33,31,31,33,33,31,33,31,33,31,33,31,33,31,33,31,33,31,33],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[-1,[[7,[[6,[5]],2]]],[[9,[[8,[5]]]]]],[[-1,-2],[[7,[[6,[5]],2]]],[[9,[[8,[5]]]]],10],[[-1,[8,[5]],-2],[[7,[11,3]]],[[9,[[8,[5]]]]],10],[[-1,[6,[5]],-2],[[7,[4,2]]],[[9,[[8,[5]]]]],10],[11,11],0,[-1,12,[[9,[[8,[5]]]]]],[[-1,-2],12,[[9,[[8,[5]]]]],10],[[-1,[8,[5]],-2],[[7,[11,1]]],[[9,[[8,[5]]]]],10],[[-1,12,-2],4,[[9,[[8,[5]]]]],10],[[11,13],[[14,[11]]]],0,[[1,1],13],[[2,2],13],[[3,3],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[1,15],16],[[1,15],16],[[2,15],16],[[2,15],16],[[3,15],16],[[3,15],16],[-1,-1,[]],[-1,-1,[]],[2,3],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[3,[[14,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[[-1,-2],4,[],[]],[[19,19],13],[[20,20],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[19,15],16],[[20,15],16],[[20,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[7,[19,20]]]],[-1,-2,[],[]],[-1,12,[]],[21,[[7,[19]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]],15],[[7,[4,23]]],10],[-1,-1,[]],[-1,-2,[],[]],[[[8,[5]],-1],[[22,[-1]]],10],[-1,12,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],4,[],[]],[-1,[],[]],[[-1,-2],[[7,[[6,[5]],2]]],[],[[9,[[8,[5]]]]]],[[-1,-2,[8,[5]]],[[7,[11,3]]],[],[[9,[[8,[5]]]]]],[[-1,-2,[8,[5]]],[[7,[11,2]]],[],[[9,[[8,[5]]]]]],[[-1,-2,[6,[5]]],[[7,[4,2]]],[],[[9,[[8,[5]]]]]],[-1,11,[]],[[-1,-2],12,[],[[9,[[8,[5]]]]]],[-1,13,[]],[[-1,-2,[8,[5]]],[[7,[11,1]]],[],[[9,[[8,[5]]]]]],[[-1,-2,12],4,[],[[9,[[8,[5]]]]]],[[24,24],13],[[25,25],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[24,15],16],[[25,15],16],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[27,27],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[26],[[],27],[27,13],[[26,15],16],[[27,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[19,27],26],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[27,13],27],[[27,24],27],[[27,13],27],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1,-2]],15],16,10,29],[-1,-1,[]],[-1,-2,[],[]],[[[28,[-1,-2]]],-2,10,29],[[-1,-2],[[28,[-2,-1]]],29,10],[[[28,[-1,-2]],[8,[5]]],[[30,[11]]],10,29],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,21],4,[]],[[[31,[-1,-2]]],4,10,32],[[[31,[-1,-2]]],[[30,[-2]]],10,32],[[[31,[-1,-2]]],[[30,[4]]],10,32],[[[33,[-1,-2]]],[[30,[4]]],10,34],[[[31,[-1,-2]],15],16,10,32],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[33,[-2,-1]]],34,10],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[-1,-2]]],-2,10,32],[[[33,[-1,-2]]],-2,10,34],[[-1,-2],[[31,[-2,-1]]],32,10],[-1,[[33,[-1,12]]],10],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[[31,[-1,-2]],[8,[5]]],[[30,[11]]],10,32],[[[33,[-1,-2]],[8,[5]]],[[30,[11]]],10,34]],"c":[24,25,26,27,30,31,32,33],"p":[[4,"EncodeSliceError",0],[4,"DecodeError",0],[4,"DecodeSliceError",0],[15,"tuple"],[15,"u8"],[3,"Vec",256],[4,"Result",257],[15,"slice"],[8,"AsRef",258],[8,"Engine",124],[15,"usize"],[3,"String",259],[15,"bool"],[4,"Option",260],[3,"Formatter",261],[6,"Result",261],[8,"Error",262],[3,"TypeId",263],[3,"Alphabet",74],[4,"ParseAlphabetError",74],[15,"str"],[3,"Base64Display",113],[3,"Error",261],[4,"DecodePaddingMode",124],[3,"DecodeMetadata",124],[3,"GeneralPurpose",170],[3,"GeneralPurposeConfig",170],[3,"DecoderReader",214],[8,"Read",264],[6,"Result",265],[3,"EncoderWriter",226],[8,"Write",264],[3,"EncoderStringWriter",226],[8,"StrConsumer",226],[8,"DecodeEstimate",124],[8,"Config",124]]},\
"base64ct":{"doc":"RustCrypto: Constant-Time Base64","t":"DDDDDDDNNDDIENDNDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Base64","Base64Bcrypt","Base64Crypt","Base64ShaCrypt","Base64Unpadded","Base64Url","Base64UrlUnpadded","CR","CRLF","Decoder","Encoder","Encoding","Error","InvalidEncoding","InvalidEncodingError","InvalidLength","InvalidLengthError","LF","LineEnding","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_in_place","decode_in_place","decode_in_place","decode_in_place","decode_in_place","decode_in_place","decode_in_place","decode_in_place","decode_to_end","decode_vec","decode_vec","decode_vec","decode_vec","decode_vec","decode_vec","decode_vec","decode_vec","default","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_string","encode_string","encode_string","encode_string","encode_string","encode_string","encode_string","encode_string","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finish","finish_with_remaining","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","is_finished","len","new","new","new_wrapped","new_wrapped","partial_cmp","position","read","read_exact","read_to_end","remaining_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write"],"q":[[0,"base64ct"],[258,"core::clone"],[259,"core::cmp"],[260,"core::result"],[261,"core::convert"],[262,"alloc::vec"],[263,"alloc::alloc"],[264,"alloc::string"],[265,"std::io::error"],[266,"core::fmt"],[267,"core::fmt"],[268,"core::option"],[269,"core::any"]],"d":["Standard Base64 encoding with <code>=</code> padding.","bcrypt Base64 encoding.","<code>crypt(3)</code> Base64 encoding.","<code>crypt(3)</code> Base64 encoding for the following schemes.","Standard Base64 encoding <em>without</em> padding.","URL-safe Base64 encoding with <code>=</code> padding.","URL-safe Base64 encoding <em>without</em> padding.","Carriage return: <code>\\\\r</code> (Pre-OS X Macintosh)","Carriage return + line feed: <code>\\\\r\\\\n</code> (Windows)","Stateful Base64 decoder with support for buffered, …","Stateful Base64 encoder with support for buffered, …","Base64 encoding trait.","Generic error, union of <code>InvalidLengthError</code> and …","Invalid encoding of provided Base64 string.","Invalid encoding of provided Base64 string.","Insufficient output buffer length.","Insufficient output buffer length.","Line feed: <code>\\\\n</code> (Unix OSes)","Line endings: variants of newline characters that can be …","Get the byte serialization of this <code>LineEnding</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decode a Base64 string into the provided destination …","","","","","","","","Fill the provided buffer with data decoded from Base64.","Decode a Base64 string in-place.","","","","","","","","Decode all remaining Base64 data, placing the result into …","Decode a Base64 string into a byte vector.","","","","","","","","","Encode the input byte slice as Base64.","Encode the provided buffer as Base64, writing it to the …","","","","","","","","Encode input byte slice into a <code>String</code> containing Base64.","","","","","","","","Get the length of Base64 produced by encoding the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Finish encoding data, returning the resulting Base64 as a …","Finish encoding data, returning the resulting Base64 as a …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Has all of the input data been decoded?","Get the encoded length of this <code>LineEnding</code>.","Create a new encoder which writes output to the given byte …","Create a new decoder for a byte slice containing contiguous","Create a new encoder which writes line-wrapped output to …","Create a new decoder for a byte slice containing Base64 …","","Get the position inside of the output buffer where the …","","","","Get the length of the remaining data after Base64 decoding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,0,0,0,0,16,0,16,0,1,0,1,24,4,5,6,7,8,9,10,11,14,15,16,1,24,4,5,6,7,8,9,10,11,14,15,16,1,4,5,6,7,8,9,10,11,14,15,16,1,4,5,6,7,8,9,10,11,14,15,16,1,1,13,4,5,6,7,8,9,10,11,13,4,5,6,7,8,9,10,11,13,4,5,6,7,8,9,10,1,13,24,4,5,6,7,8,9,10,13,4,5,6,7,8,9,10,13,4,5,6,7,8,9,10,4,5,6,7,8,9,10,14,15,16,1,4,5,6,7,8,9,10,14,15,16,1,24,24,24,4,5,6,7,8,9,10,14,14,15,15,16,16,1,24,4,5,6,7,8,9,10,11,14,15,16,16,16,16,1,24,4,5,6,7,8,9,10,11,14,15,16,1,11,1,24,11,24,11,1,24,11,11,11,11,4,5,6,7,8,9,10,11,14,15,16,1,14,15,16,24,4,5,6,7,8,9,10,11,14,15,16,1,24,4,5,6,7,8,9,10,11,14,15,16,1,24,4,5,6,7,8,9,10,11,14,15,16,1,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[[11,[-1]]],[[11,[-1]]],[12,13]],[14,14],[15,15],[16,16],[1,1],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[1,1],18],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[-1,[3,[2]]],[[19,[[3,[2]],16]]],[[20,[[3,[2]]]]]],[[[11,[-1]],[3,[2]]],[[19,[[3,[2]],16]]],13],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[3,[2]]],[[19,[[3,[2]],15]]]],[[[11,[-1]],[21,[2]]],[[19,[[3,[2]],16]]],13],[22,[[19,[[21,[2]],16]]]],[22,[[19,[[21,[2,23]],16]]]],[22,[[19,[[21,[2,23]],16]]]],[22,[[19,[[21,[2,23]],16]]]],[22,[[19,[[21,[2,23]],16]]]],[22,[[19,[[21,[2,23]],16]]]],[22,[[19,[[21,[2,23]],16]]]],[22,[[19,[[21,[2,23]],16]]]],[[],1],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[24,[-1]],[3,[2]]],[[19,[17,16]]],13],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[3,[2]],[3,[2]]],[[19,[22,14]]]],[[[3,[2]]],25],[[[3,[2]]],25],[[[3,[2]]],25],[[[3,[2]]],25],[[[3,[2]]],25],[[[3,[2]]],25],[[[3,[2]]],25],[[[3,[2]]],25],[[[3,[2]]],26],[[[3,[2]]],26],[[[3,[2]]],26],[[[3,[2]]],26],[[[3,[2]]],26],[[[3,[2]]],26],[[[3,[2]]],26],[[[3,[2]]],26],[[4,4],27],[[5,5],27],[[6,6],27],[[7,7],27],[[8,8],27],[[9,9],27],[[10,10],27],[[14,14],27],[[15,15],27],[[16,16],27],[[1,1],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[[24,[-1]]],[[19,[22,16]]],13],[[[24,[-1]]],[[19,[[17,[22,[3,[2]]]],16]]],13],[[[24,[-1]]],[[28,[17]]],13],[[4,29],30],[[5,29],30],[[6,29],30],[[7,29],30],[[8,29],30],[[9,29],30],[[10,29],30],[[14,29],30],[[14,29],[[19,[17,31]]]],[[15,29],[[19,[17,31]]]],[[15,29],30],[[16,29],30],[[16,29],[[19,[17,31]]]],[[1,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,16],[15,16],[14,16],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1]]],27,13],[1,26],[[[3,[2]]],[[19,[[24,[-1]],16]]],13],[[[3,[2]]],[[19,[[11,[-1]],16]]],13],[[[3,[2]],26,1],[[19,[[24,[-1]],16]]],13],[[[3,[2]],26],[[19,[[11,[-1]],16]]],13],[[1,1],[[33,[18]]]],[[[24,[-1]]],26,13],[[[11,[-1]],[3,[2]]],[[28,[26]]],13],[[[11,[-1]],[3,[2]]],[[28,[17]]],13],[[[11,[-1]],[21,[2]]],[[28,[26]]],13],[[[11,[-1]]],26,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[[24,[-1]],[3,[2]]],[[28,[26]]],13]],"c":[],"p":[[4,"LineEnding",0],[15,"u8"],[15,"slice"],[3,"Base64Bcrypt",0],[3,"Base64Crypt",0],[3,"Base64ShaCrypt",0],[3,"Base64",0],[3,"Base64Unpadded",0],[3,"Base64Url",0],[3,"Base64UrlUnpadded",0],[3,"Decoder",0],[8,"Clone",258],[8,"Encoding",0],[3,"InvalidLengthError",0],[3,"InvalidEncodingError",0],[4,"Error",0],[15,"tuple"],[4,"Ordering",259],[4,"Result",260],[8,"AsRef",261],[3,"Vec",262],[15,"str"],[3,"Global",263],[3,"Encoder",0],[3,"String",264],[15,"usize"],[15,"bool"],[6,"Result",265],[3,"Formatter",266],[6,"Result",266],[3,"Error",266],[3,"Utf8Error",267],[4,"Option",268],[3,"TypeId",269]]},\
"bech32":{"doc":"Encoding and decoding of the Bech32 format","t":"INDNIQQQEINNNNNNNIEILKLLLLLLLLKLLLLLLLLLFFFLLLFFFFLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLKKL","n":["Base32Len","Bech32","Bech32Writer","Bech32m","CheckBase32","Err","Err","Err","Error","FromBase32","InvalidChar","InvalidChecksum","InvalidData","InvalidLength","InvalidPadding","MissingSeparator","MixedCase","ToBase32","Variant","WriteBase32","as_ref","base32_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_base32","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","convert_bits","decode","decode_without_checksum","default","description","drop","encode","encode_to_fmt","encode_without_checksum","encode_without_checksum_to_fmt","eq","eq","eq","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","from","from","from","from","from_base32","hash","hash","hash","into","into","into","into","new","partial_cmp","partial_cmp","partial_cmp","to_base32","to_char","to_owned","to_owned","to_owned","to_string","to_u8","try_from","try_from","try_from","try_from","try_from_u8","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u5","write","write_base32","write_u5","write_u5"],"q":[[0,"bech32"],[102,"core::result"],[103,"core::cmp"],[104,"alloc::vec"],[105,"core::convert"],[106,"core::marker"],[107,"alloc::string"],[108,"core::convert"],[109,"core::fmt"],[110,"core::fmt"],[111,"core::any"]],"d":["Interface to calculate the length of the base32 …","The original Bech32 described in BIP-0173","Allocationless Bech32 writer that accumulates the checksum …","The improved Bech32m variant described in BIP-0350","A trait to convert between u8 arrays and u5 arrays without …","Write error","The associated error which can be returned from parsing …","Error type if conversion fails","Error types for Bech32 encoding / decoding","Parse/convert base32 slice to <code>Self</code>. It is the reciprocal of","Some part of the string contains an invalid character","The checksum does not match the rest of the data","Some part of the data has an invalid value","The data or human-readable part is too long or too short","The bit conversion failed due to a padding issue","String does not contain the separator character","The whole string must be of one case","A trait for converting a value to a type <code>T</code> that represents …","Used for encode/decode operations for the two variants of …","Interface to write <code>u5</code>s into a sink","","Calculate the base32 serialized length","","","","","","","","","Check if all values are in range and return array-like …","","","","","","","","","","Convert between bit sizes","Decode a bech32 string into the raw HRP and the data bytes.","Decode a bech32 string into the raw HRP and the data …","","","","Encode a bech32 payload to string.","Encode a bech32 payload to an fmt::Write. This method is …","Encode a bech32 payload to string without the checksum.","Encode a bech32 payload without a checksum to an fmt::Write…","","","","","","","Write out the checksum at the end. If this method isn’t …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a base32 slice to <code>Self</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new writer that can write a bech32 string …","","","","Convert <code>Self</code> to base32 vector","Get char representing this 5 bit value as defined in BIP173","","","","","Returns a copy of the underlying <code>u8</code> value","","","","","Convert a <code>u8</code> to <code>u5</code> if in range, return <code>Error</code> otherwise","","","","","","","","","Integer in the range <code>0..32</code>","Write a <code>u5</code> slice","Encode as base32 and write it to the supplied writer …","Write a single <code>u5</code>","Writes a single 5 bit value of the data part"],"i":[0,5,0,5,0,27,28,29,0,0,6,6,6,6,6,6,6,0,0,0,1,30,17,1,5,6,17,1,5,6,29,1,5,6,1,5,6,1,5,6,0,0,0,1,6,17,0,0,0,0,1,5,6,1,5,6,17,1,5,6,6,17,1,5,6,28,1,5,6,17,1,5,6,17,1,5,6,31,1,1,5,6,6,1,17,1,5,6,1,17,1,5,6,17,1,5,6,0,27,31,27,17],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[1,1],[5,5],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[1,1],8],[[5,5],8],[[6,6],8],[[[9,[-1]],10,10,11],[[4,[[12,[2]],6]]],[[13,[2]],14]],[15,[[4,[[7,[16,[12,[1]],5]],6]]]],[15,[[4,[[7,[16,[12,[1]]]],6]]]],[[],1],[6,15],[17,7],[[15,-1,5],[[4,[16,6]]],[[18,[[9,[1]]]]]],[[19,15,-1,5],[[4,[20,6]]],[[18,[[9,[1]]]]]],[[15,-1],[[4,[16,6]]],[[18,[[9,[1]]]]]],[[19,15,-1],[[4,[20,6]]],[[18,[[9,[1]]]]]],[[1,1],11],[[5,5],11],[[6,6],11],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[17,20],[[1,21],20],[[5,21],20],[[6,21],20],[[6,21],20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[9,[1]]],[[4,[-1]]],[]],[[1,-1],7,22],[[5,-1],7,22],[[6,-1],7,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,5,19],[[4,[17,23]]]],[[1,1],[[24,[8]]]],[[5,5],[[24,[8]]]],[[6,6],[[24,[8]]]],[-1,[[12,[1]]],[]],[1,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[1,2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[2,[[4,[1,6]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],0,[[-1,[9,[1]]],[[4,[7]]],[]],[[-1,-2],[[4,[7]]],[],27],[[-1,1],[[4,[7]]],[]],[[17,1],20]],"c":[],"p":[[3,"u5",0],[15,"u8"],[15,"usize"],[4,"Result",102],[4,"Variant",0],[4,"Error",0],[15,"tuple"],[4,"Ordering",103],[15,"slice"],[15,"u32"],[15,"bool"],[3,"Vec",104],[8,"Into",105],[8,"Copy",106],[15,"str"],[3,"String",107],[3,"Bech32Writer",0],[8,"AsRef",105],[8,"Write",108],[6,"Result",108],[3,"Formatter",108],[8,"Hasher",109],[3,"Error",108],[4,"Option",110],[15,"char"],[3,"TypeId",111],[8,"WriteBase32",0],[8,"FromBase32",0],[8,"CheckBase32",0],[8,"Base32Len",0],[8,"ToBase32",0]]},\
"bitcoin":{"doc":"Rust Bitcoin Library","t":"CCCCCCCCCCDCCCCCCCCCCCCCCCCCCCDLLLLLLLLCALLLLLLLLLLALLCLLLLALLLLLLLLLLLLLLLLLLLACLLCALLACLLCCLLLLLLLLLLLLLLLLLALAAAAAAAEDDNNNLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMLMLLLLMLLLLLLLLLLMLLLLLMLLLRDRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLFLLLLLLFFLLLLLLLLLNNDEDNRENEDNNDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDEENNNHHHHNNNNNNALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDNEEDNNNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNSSEENNSDNNNNDEEDGNDNNNNNDDDNNNNSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMMMLLMLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCCCAACDIIENNRNNNNINNNDILLLLLLLLLLLLLLLKLLFFKKKKKKKKKKLLLLLLLLLLLLLLLLKKKKKKKKKKFFLLLLLLLLLLLLLMMMMMMDMMMMMLLLLLLLLMMLMMMMMLLLLDLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCAAAAAAAAEDDNNNNNNNMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLMLLLLLLLLLLLLLLSNSSSSSERNDNNSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNDDNNNNNNNNNNNNNNRRNNENNNDNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMNNNDDENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMLLLLLLLLLLLLMMMMNEDDNNLLLLLLLLLLLLLLLLLLLLMLLLLLLMMLLLLLLMLLLLLLLLLLLLMLLLDDDDLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLMLLLLMDDDDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNDEDLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLMMMMMMMMLLLLLLLLLLLLMMRRRRRRRRFINNNEAAAAAAAKKLLALLLALAKAAKAAALALKLLLAKDDENNNENNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNELLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDNNIEDNNNSSNNNNNSSSSENNNDNNNSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNLLFFLLLFLLLLFLFLLLLLLLLLDDLLLLLLLLLLLLLMMMLLLLLLLLLLLLLDDEDNDDDNLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLMLLLLLLLMMLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLDDDDDEDDNNLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDEDDEDDDNNINNNGNNNNLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLMMLLLMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLFFNENNDDDDNDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDENNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLLRNNNDENLLLLLLMLLLLLLLLLLLLLLLFLMFLLLLLLLLLNNNENNEDNNNNNNNNNNDDCGDNDNNNMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLMMMLLLMMMMMAMMMLLLALLMMLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLMMLLLLLLLLLLLLLLMMIIKKNNGDENIQQDDGGGLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLKLLLLLLLLLLLLLLLLLLLLLLLLNNNDNCENNNNNNNNENEDDCNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDNNNDNNNNNNNNEDNNDRRRRRRRDDDDNDDDDDEEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Address","AddressType","Amount","Block","BlockHeader","Denomination","EcdsaSig","EcdsaSigError","EcdsaSighashType","Error","KeyPair","LockTime","MerkleBlock","Network","OutPoint","PackedLockTime","PrivateKey","PublicKey","SchnorrSig","SchnorrSigError","SchnorrSighashType","Script","Sequence","SigHashType","SignedAmount","Transaction","TxIn","TxOut","VarInt","Witness","XOnlyPublicKey","add_tweak","add_xonly_tweak","as_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","bech32","blockdata","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","consensus","deserialize","display_secret","ecdsa","eq","eq","equivalent","equivalent","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_keypair","from_seckey_slice","from_seckey_str","from_secret_key","from_slice","from_str","from_str","hash","hash","hash_types","hashes","into","into","locktime","network","partial_cmp","partial_cmp","policy","psbt","public_key","public_key","schnorr","secp256k1","secret_bytes","secret_key","serialize","serialize","to_hex","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tweak_add_assign","tweak_add_assign","tweak_add_check","type_id","type_id","util","x_only_public_key","block","constants","locktime","opcodes","script","transaction","witness","Bip34Error","Block","BlockHeader","NotPresent","UnexpectedPush","Unsupported","bip34_block_height","bits","block_hash","block_hash","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_merkle_root","check_witness_commitment","clone","clone","clone","clone_into","clone_into","clone_into","cmp","coinbase","compact_target_from_u256","compute_merkle_root","compute_witness_commitment","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","difficulty","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_size","get_strippedsize","get_weight","hash","header","into","into","into","merkle_root","merkle_root","nonce","partial_cmp","prev_blockhash","size","source","strippedsize","target","time","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","txdata","type_id","type_id","type_id","u256_from_compact_target","validate_pow","version","weight","witness_root","work","COIN_VALUE","ChainHash","DIFFCHANGE_INTERVAL","DIFFCHANGE_TIMESPAN","MAX_BLOCK_SIGOPS_COST","MAX_BLOCK_WEIGHT","MAX_SCRIPTNUM_VALUE","MAX_SCRIPT_ELEMENT_SIZE","MIN_TRANSACTION_WEIGHT","PUBKEY_ADDRESS_PREFIX_MAIN","PUBKEY_ADDRESS_PREFIX_TEST","SCRIPT_ADDRESS_PREFIX_MAIN","SCRIPT_ADDRESS_PREFIX_TEST","SUBSIDY_HALVING_INTERVAL","TARGET_BLOCK_SPACING","WITNESS_SCALE_FACTOR","as_bytes","as_mut_ptr","as_ptr","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","fmt","from","from","from_byte_iter","from_str","genesis_block","hash","index","into","into_bytes","is_empty","len","max_money","max_target","partial_cmp","to_bytes","to_hex","to_owned","to_string","try_from","try_into","type_id","using_genesis_block","Blocks","Conversion","ConversionError","Error","Height","InvalidComparison","LOCK_TIME_THRESHOLD","LockTime","Operation","OperationError","PackedLockTime","Parse","Seconds","Time","ZERO","ZERO","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","consensus_decode","consensus_decode","consensus_encode","consensus_encode","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_consensus","from_consensus","from_consensus","from_height","from_str","from_str","from_str","from_str","from_time","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","is_block_height","is_block_time","is_same_unit","is_satisfied_by","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","source","to_consensus_u32","to_consensus_u32","to_consensus_u32","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u32","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","All","Class","ClassifyContext","IllegalOp","Legacy","NoOp","OP_FALSE","OP_NOP2","OP_NOP3","OP_TRUE","Ordinary","PushBytes","PushNum","ReturnOp","SuccessOp","TapScript","all","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","classify","clone","clone","clone","clone_into","clone_into","clone_into","cmp","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into_u8","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","OP_0NOTEQUAL","OP_1ADD","OP_1SUB","OP_2DIV","OP_2DROP","OP_2DUP","OP_2MUL","OP_2OVER","OP_2ROT","OP_2SWAP","OP_3DUP","OP_ABS","OP_ADD","OP_AND","OP_BOOLAND","OP_BOOLOR","OP_CAT","OP_CHECKMULTISIG","OP_CHECKMULTISIGVERIFY","OP_CHECKSIG","OP_CHECKSIGADD","OP_CHECKSIGVERIFY","OP_CLTV","OP_CODESEPARATOR","OP_CSV","OP_DEPTH","OP_DIV","OP_DROP","OP_DUP","OP_ELSE","OP_ENDIF","OP_EQUAL","OP_EQUALVERIFY","OP_FROMALTSTACK","OP_GREATERTHAN","OP_GREATERTHANOREQUAL","OP_HASH160","OP_HASH256","OP_IF","OP_IFDUP","OP_INVALIDOPCODE","OP_INVERT","OP_LEFT","OP_LESSTHAN","OP_LESSTHANOREQUAL","OP_LSHIFT","OP_MAX","OP_MIN","OP_MOD","OP_MUL","OP_NEGATE","OP_NIP","OP_NOP","OP_NOP1","OP_NOP10","OP_NOP4","OP_NOP5","OP_NOP6","OP_NOP7","OP_NOP8","OP_NOP9","OP_NOT","OP_NOTIF","OP_NUMEQUAL","OP_NUMEQUALVERIFY","OP_NUMNOTEQUAL","OP_OR","OP_OVER","OP_PICK","OP_PUSHBYTES_0","OP_PUSHBYTES_1","OP_PUSHBYTES_10","OP_PUSHBYTES_11","OP_PUSHBYTES_12","OP_PUSHBYTES_13","OP_PUSHBYTES_14","OP_PUSHBYTES_15","OP_PUSHBYTES_16","OP_PUSHBYTES_17","OP_PUSHBYTES_18","OP_PUSHBYTES_19","OP_PUSHBYTES_2","OP_PUSHBYTES_20","OP_PUSHBYTES_21","OP_PUSHBYTES_22","OP_PUSHBYTES_23","OP_PUSHBYTES_24","OP_PUSHBYTES_25","OP_PUSHBYTES_26","OP_PUSHBYTES_27","OP_PUSHBYTES_28","OP_PUSHBYTES_29","OP_PUSHBYTES_3","OP_PUSHBYTES_30","OP_PUSHBYTES_31","OP_PUSHBYTES_32","OP_PUSHBYTES_33","OP_PUSHBYTES_34","OP_PUSHBYTES_35","OP_PUSHBYTES_36","OP_PUSHBYTES_37","OP_PUSHBYTES_38","OP_PUSHBYTES_39","OP_PUSHBYTES_4","OP_PUSHBYTES_40","OP_PUSHBYTES_41","OP_PUSHBYTES_42","OP_PUSHBYTES_43","OP_PUSHBYTES_44","OP_PUSHBYTES_45","OP_PUSHBYTES_46","OP_PUSHBYTES_47","OP_PUSHBYTES_48","OP_PUSHBYTES_49","OP_PUSHBYTES_5","OP_PUSHBYTES_50","OP_PUSHBYTES_51","OP_PUSHBYTES_52","OP_PUSHBYTES_53","OP_PUSHBYTES_54","OP_PUSHBYTES_55","OP_PUSHBYTES_56","OP_PUSHBYTES_57","OP_PUSHBYTES_58","OP_PUSHBYTES_59","OP_PUSHBYTES_6","OP_PUSHBYTES_60","OP_PUSHBYTES_61","OP_PUSHBYTES_62","OP_PUSHBYTES_63","OP_PUSHBYTES_64","OP_PUSHBYTES_65","OP_PUSHBYTES_66","OP_PUSHBYTES_67","OP_PUSHBYTES_68","OP_PUSHBYTES_69","OP_PUSHBYTES_7","OP_PUSHBYTES_70","OP_PUSHBYTES_71","OP_PUSHBYTES_72","OP_PUSHBYTES_73","OP_PUSHBYTES_74","OP_PUSHBYTES_75","OP_PUSHBYTES_8","OP_PUSHBYTES_9","OP_PUSHDATA1","OP_PUSHDATA2","OP_PUSHDATA4","OP_PUSHNUM_1","OP_PUSHNUM_10","OP_PUSHNUM_11","OP_PUSHNUM_12","OP_PUSHNUM_13","OP_PUSHNUM_14","OP_PUSHNUM_15","OP_PUSHNUM_16","OP_PUSHNUM_2","OP_PUSHNUM_3","OP_PUSHNUM_4","OP_PUSHNUM_5","OP_PUSHNUM_6","OP_PUSHNUM_7","OP_PUSHNUM_8","OP_PUSHNUM_9","OP_PUSHNUM_NEG1","OP_RESERVED","OP_RESERVED1","OP_RESERVED2","OP_RETURN","OP_RETURN_187","OP_RETURN_188","OP_RETURN_189","OP_RETURN_190","OP_RETURN_191","OP_RETURN_192","OP_RETURN_193","OP_RETURN_194","OP_RETURN_195","OP_RETURN_196","OP_RETURN_197","OP_RETURN_198","OP_RETURN_199","OP_RETURN_200","OP_RETURN_201","OP_RETURN_202","OP_RETURN_203","OP_RETURN_204","OP_RETURN_205","OP_RETURN_206","OP_RETURN_207","OP_RETURN_208","OP_RETURN_209","OP_RETURN_210","OP_RETURN_211","OP_RETURN_212","OP_RETURN_213","OP_RETURN_214","OP_RETURN_215","OP_RETURN_216","OP_RETURN_217","OP_RETURN_218","OP_RETURN_219","OP_RETURN_220","OP_RETURN_221","OP_RETURN_222","OP_RETURN_223","OP_RETURN_224","OP_RETURN_225","OP_RETURN_226","OP_RETURN_227","OP_RETURN_228","OP_RETURN_229","OP_RETURN_230","OP_RETURN_231","OP_RETURN_232","OP_RETURN_233","OP_RETURN_234","OP_RETURN_235","OP_RETURN_236","OP_RETURN_237","OP_RETURN_238","OP_RETURN_239","OP_RETURN_240","OP_RETURN_241","OP_RETURN_242","OP_RETURN_243","OP_RETURN_244","OP_RETURN_245","OP_RETURN_246","OP_RETURN_247","OP_RETURN_248","OP_RETURN_249","OP_RETURN_250","OP_RETURN_251","OP_RETURN_252","OP_RETURN_253","OP_RETURN_254","OP_RIGHT","OP_RIPEMD160","OP_ROLL","OP_ROT","OP_RSHIFT","OP_SHA1","OP_SHA256","OP_SIZE","OP_SUB","OP_SUBSTR","OP_SWAP","OP_TOALTSTACK","OP_TUCK","OP_VER","OP_VERIF","OP_VERIFY","OP_VERNOTIF","OP_WITHIN","OP_XOR","Builder","EarlyEndOfScript","Error","Instruction","Instructions","NonMinimalPush","NumericOverflow","Op","PushBytes","Script","Serialization","UnknownSpentOutput","as_bytes","as_ref","asm","base32_len","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_to_asm","bytes_to_asm_fmt","check_base32","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","consensus_decode_from_finite_reader","consensus_encode","default","default","deserialize","dust_value","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_asm","from","from","from","from","from","from","from","from_byte_iter","from_str","hash","hash","index","index","instructions","instructions_minimal","into","into","into","into","into","into_bytes","into_iter","into_script","is_empty","is_empty","is_op_return","is_p2pk","is_p2pkh","is_p2sh","is_provably_unspendable","is_v0_p2wpkh","is_v0_p2wsh","is_v1_p2tr","is_witness_program","len","len","new","new","new_op_return","new_p2pk","new_p2pkh","new_p2sh","new_v0_p2wpkh","new_v0_p2wsh","new_v0_wpkh","new_v0_wsh","new_v1_p2tr","new_v1_p2tr_tweaked","new_witness_program","next","p2wpkh_script_code","partial_cmp","partial_cmp","push_int","push_key","push_opcode","push_scriptint","push_slice","push_verify","push_x_only_key","read_scriptbool","read_scriptint","read_uint","script_hash","serialize","source","to_bytes","to_hex","to_owned","to_owned","to_owned","to_owned","to_p2sh","to_string","to_string","to_string","to_v0_p2wsh","to_v1_p2tr","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","witness_version","write_base32","wscript_hash","All","All","AllPlusAnyoneCanPay","AllPlusAnyoneCanPay","ENABLE_LOCKTIME_NO_RBF","ENABLE_RBF_NO_LOCKTIME","EcdsaSighashType","EncodeSigningDataResult","Format","IntegerOverflow","MAX","NonStandardSighashType","None","None","NonePlusAnyoneCanPay","NonePlusAnyoneCanPay","OutPoint","ParseOutPointError","RelativeLockTimeError","Sequence","SigHashType","SighashSingleBug","SighashTypeParseError","Single","Single","SinglePlusAnyoneCanPay","SinglePlusAnyoneCanPay","TooLong","Transaction","TxIn","TxOut","Txid","Vout","VoutNotCanonical","WriteResult","ZERO","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","consensus_decode","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","default","default","default","default","deserialize","deserialize","enables_absolute_lock_time","enables_lock_time","encode_signing_data_to","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_512_second_intervals","from_consensus","from_consensus","from_height","from_seconds_ceil","from_seconds_floor","from_standard","from_str","from_str","from_str","from_u32_consensus","from_u32_standard","get_size","get_strippedsize","get_vsize","get_weight","hash","hash","hash","hash","hash","hash","hash","input","into","into","into","into","into","into","into","into","into","into","into","is_absolute_timelock_satisfied","is_coin_base","is_explicitly_rbf","is_final","is_height_locked","is_lock_time_enabled","is_null","is_rbf","is_relative_lock_time","is_sighash_single_bug","is_time_locked","lock_time","map_err","new","ntxid","null","output","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","previous_output","script_pubkey","script_sig","sequence","serialize","serialize","signature_hash","size","source","source","source","source","strippedsize","to_consensus_u32","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u32","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txid","txid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unrecognized","value","version","vout","vsize","weight","witness","wtxid","Iter","Witness","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","consensus_decode","consensus_encode","default","deserialize","eq","equivalent","fmt","from","from","from_vec","hash","into","into","into_iter","is_empty","iter","last","len","new","next","partial_cmp","push","push_bitcoin_signature","second_to_last","serialize","serialized_len","size_hint","to_owned","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","Decodable","Encodable","Params","ReadExt","WriteExt","deserialize","deserialize_partial","encode","params","serialize","CheckedData","Decodable","Encodable","Error","InvalidChecksum","Io","MAX_VEC_SIZE","NonMinimalVarInt","OversizedVectorAllocation","ParseFailed","Psbt","ReadExt","UnexpectedNetworkMagic","UnknownNetworkMagic","UnsupportedSegwitFlag","VarInt","WriteExt","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","deserialize","deserialize_partial","emit_bool","emit_i16","emit_i32","emit_i64","emit_i8","emit_slice","emit_u16","emit_u32","emit_u64","emit_u8","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","into","into","into","len","partial_cmp","read_bool","read_i16","read_i32","read_i64","read_i8","read_slice","read_u16","read_u32","read_u64","read_u8","serialize","serialize_hex","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","actual","actual","expected","expected","max","requested","Params","allow_min_difficulty_blocks","bip16_time","bip34_height","bip65_height","bip66_height","borrow","borrow_mut","clone","clone_into","difficulty_adjustment_interval","fmt","from","into","miner_confirmation_window","network","new","no_pow_retargeting","pow_limit","pow_target_spacing","pow_target_timespan","rule_change_activation_threshold","to_owned","try_from","try_into","type_id","ParseIntError","as_ref","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","input","into","source","to_owned","to_string","try_from","try_into","type_id","BlockHash","FilterHash","FilterHeader","PubkeyHash","ScriptHash","Sighash","TxMerkleNode","Txid","WPubkeyHash","WScriptHash","WitnessCommitment","WitnessMerkleNode","Wtxid","XpubIdentifier","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","all_zeros","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_hash","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_inner","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","check_base32","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","engine","engine","engine","engine","engine","engine","engine","engine","engine","engine","engine","engine","engine","engine","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","filter_header","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_engine","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_hash","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","Address","address","constants","message","message_blockdata","message_bloom","message_compact_blocks","message_filter","message_network","AddrV2","AddrV2Message","Address","Cjdns","I2p","Ipv4","Ipv6","TorV2","TorV3","Unknown","addr","address","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","consensus_decode","consensus_decode","consensus_decode","consensus_encode","consensus_encode","consensus_encode","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","new","port","port","services","services","socket_addr","socket_addr","time","to_owned","to_owned","to_owned","to_socket_addrs","to_socket_addrs","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BLOOM","Bitcoin","COMPACT_FILTERS","GETUTXO","NETWORK","NETWORK_LIMITED","NONE","Network","PROTOCOL_VERSION","Regtest","ServiceFlags","Signet","Testnet","WITNESS","add","as_u64","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","consensus_decode","consensus_encode","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_magic","from_str","has","hash","hash","into","into","magic","partial_cmp","partial_cmp","remove","to_hex","to_owned","to_owned","to_string","to_string","to_u64","try_from","try_from","try_into","try_into","type_id","type_id","Addr","AddrV2","Alert","Block","BlockTxn","CFCheckpt","CFHeaders","CFilter","CmpctBlock","CommandString","CommandStringError","FeeFilter","FilterAdd","FilterClear","FilterLoad","GetAddr","GetBlockTxn","GetBlocks","GetCFCheckpt","GetCFHeaders","GetCFilters","GetData","GetHeaders","Headers","Inv","MAX_INV_SIZE","MAX_MSG_SIZE","MemPool","MerkleBlock","NetworkMessage","NotFound","Ping","Pong","RawNetworkMessage","Reject","SendAddrV2","SendCmpct","SendHeaders","Tx","Unknown","Verack","Version","WtxidRelay","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmd","cmd","command","command","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","into","into","into","into","magic","payload","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_static","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","command","payload","Block","CompactBlock","Error","GetBlocksMessage","GetHeadersMessage","Inventory","Transaction","Unknown","WTx","WitnessBlock","WitnessTransaction","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","consensus_decode","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","into","into","into","locator_hashes","locator_hashes","new","new","partial_cmp","stop_hash","stop_hash","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version","hash","inv_type","All","BloomFlags","FilterAdd","FilterLoad","None","PubkeyOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","consensus_decode","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","data","eq","eq","eq","equivalent","equivalent","equivalent","filter","flags","fmt","fmt","fmt","from","from","from","hash_funcs","into","into","into","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tweak","type_id","type_id","type_id","BlockTxn","CmpctBlock","GetBlockTxn","SendCmpct","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","compact_block","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","consensus_encode","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","send_compact","to_owned","to_owned","to_owned","to_owned","transactions","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","txs_request","type_id","type_id","type_id","type_id","version","CFCheckpt","CFHeaders","CFilter","GetCFCheckpt","GetCFHeaders","GetCFilters","block_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","filter","filter_hashes","filter_headers","filter_type","filter_type","filter_type","filter_type","filter_type","filter_type","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","previous_filter_header","start_height","start_height","stop_hash","stop_hash","stop_hash","stop_hash","stop_hash","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Checkpoint","Duplicate","Dust","Fee","Invalid","Malformed","NonStandard","Obsolete","Reject","RejectReason","VersionMessage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ccode","clone","clone","clone","clone_into","clone_into","clone_into","consensus_decode","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","into","into","into","message","new","nonce","reason","receiver","relay","sender","services","start_height","timestamp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user_agent","version","DEFAULT_BYTES_PER_SIGOP","DEFAULT_INCREMENTAL_RELAY_FEE","DEFAULT_MEMPOOL_EXPIRY","DEFAULT_MIN_RELAY_TX_FEE","DUST_RELAY_TX_FEE","MAX_STANDARD_TX_SIGOPS_COST","MAX_STANDARD_TX_WEIGHT","MIN_STANDARD_TX_NONWITNESS_SIZE","get_virtual_tx_size","BitArray","BlockBadProofOfWork","BlockBadTarget","Encode","Error","address","amount","base58","bip143","bip152","bip158","bip32","bit","bit_slice","borrow","borrow_mut","ecdsa","fmt","fmt","from","hash","into","key","mask","merkleblock","misc","one","psbt","schnorr","sighash","source","taproot","to_string","trailing_zeros","try_from","try_into","type_id","uint","zero","Address","AddressEncoding","AddressType","Base58","Bech32","EmptyBech32Payload","Error","ExcessiveScriptSize","InvalidBech32Variant","InvalidSegwitV0ProgramLength","InvalidWitnessProgramLength","InvalidWitnessVersion","MalformedWitnessVersion","P2pkh","P2sh","P2tr","P2wpkh","P2wsh","Payload","PubkeyHash","ScriptHash","UncompressedPubkey","UnknownAddressType","UnparsableWitnessVersion","UnrecognizedScript","V0","V1","V10","V11","V12","V13","V14","V15","V16","V2","V3","V4","V5","V6","V7","V8","V9","WitnessProgram","WitnessVersion","address_type","as_bytes","bech32_hrp","bech32_variant","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_instruction","from_num","from_opcode","from_script","from_script","from_str","from_str","from_str","from_u5","hash","hash","hash","hash","into","into","into","into","into","into","into_num","is_related_to_pubkey","is_related_to_xonly_pubkey","is_standard","is_valid_for_network","network","p2pkh","p2pkh","p2pkh_prefix","p2sh","p2sh","p2sh_prefix","p2shwpkh","p2shwpkh","p2shwsh","p2shwsh","p2tr","p2tr","p2tr_tweaked","p2tr_tweaked","p2wpkh","p2wpkh","p2wsh","p2wsh","partial_cmp","partial_cmp","partial_cmp","partial_cmp","payload","payload","script_pubkey","script_pubkey","source","to_num","to_owned","to_owned","to_owned","to_owned","to_owned","to_qr_uri","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","expected","found","program","version","Amount","Bit","Bitcoin","CheckedSum","Denomination","Display","InputTooLarge","InvalidCharacter","InvalidFormat","MAX_MONEY","MAX_MONEY","MicroBitcoin","MilliBitcoin","MilliSatoshi","NanoBitcoin","Negative","ONE_BTC","ONE_BTC","ONE_SAT","ONE_SAT","ParseAmountError","PicoBitcoin","PossiblyConfusingDenomination","Satoshi","SignedAmount","TooBig","TooPrecise","UnknownDenomination","ZERO","ZERO","abs","add","add","add_assign","add_assign","as_btc","as_btc","as_sat","as_sat","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_add","checked_add","checked_div","checked_div","checked_mul","checked_mul","checked_rem","checked_rem","checked_sub","checked_sub","checked_sum","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","display_dynamic","display_dynamic","display_in","display_in","div","div","div_assign","div_assign","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_value_in","fmt_value_in","from","from","from","from","from","from_btc","from_btc","from_float_in","from_float_in","from_sat","from_sat","from_str","from_str","from_str","from_str_in","from_str_in","from_str_with_denomination","from_str_with_denomination","hash","hash","hash","into","into","into","into","into","is_negative","is_positive","max_value","max_value","min_value","min_value","mul","mul","mul_assign","mul_assign","partial_cmp","partial_cmp","positive_sub","rem","rem","rem_assign","rem_assign","show_denomination","signum","source","sub","sub","sub_assign","sub_assign","sum","sum","to_btc","to_btc","to_float_in","to_float_in","to_owned","to_owned","to_owned","to_owned","to_owned","to_sat","to_sat","to_signed","to_string","to_string","to_string","to_string","to_string","to_string_in","to_string_in","to_string_with_denomination","to_string_with_denomination","to_unsigned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BadByte","BadChecksum","Error","Hex","InvalidAddressVersion","InvalidExtendedKeyVersion","InvalidLength","Secp256k1","TooShort","borrow","borrow_mut","check_encode_slice","check_encode_slice_to_fmt","clone","clone_into","cmp","encode_slice","eq","equivalent","fmt","fmt","from","from","from_check","hash","into","partial_cmp","source","to_owned","to_string","try_from","try_into","type_id","SigHashCache","SighashComponents","access_witness","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","encode_signing_data_to","eq","equivalent","fmt","from","from","hash_outputs","hash_prevouts","hash_sequence","into","into","new","new","sighash_all","signature_hash","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BlockTransactions","BlockTransactionsRequest","Error","HeaderAndShortIds","InvalidPrefill","PrefilledTransaction","ShortId","TxIndexOutOfRangeError","UnknownVersion","as_bytes","as_mut_ptr","as_ptr","as_ref","block_hash","block_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_siphash_keys","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","consensus_encode","consensus_encode","default","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_block","from_byte_iter","from_request","from_str","hash","hash","hash","hash","hash","hash","hash","header","idx","index","indexes","into","into","into","into","into","into","into","into_bytes","is_empty","len","nonce","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prefilled_txs","short_ids","to_bytes","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_siphash_keys","BitStreamReader","BitStreamWriter","BlockFilter","BlockFilterReader","BlockFilterWriter","Error","GCSFilterReader","GCSFilterWriter","Io","UtxoMissing","add_element","add_element","add_input_scripts","add_output_scripts","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","content","eq","equivalent","filter_header","finish","finish","flush","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","match_all","match_all","match_all","match_any","match_any","match_any","new","new","new","new","new","new","new","new_script_filter","read","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","Base58","CannotDeriveFromHardenedKey","ChainCode","ChildNumber","DerivationPath","DerivationPathIterator","Error","ExtendedPrivKey","ExtendedPubKey","Fingerprint","Hardened","Hex","IntoDerivationPath","InvalidChildNumber","InvalidChildNumberFormat","InvalidDerivationPathFormat","KeySource","Normal","Secp256k1","UnknownVersion","WrongExtendedKeyLength","as_bytes","as_bytes","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_code","chain_code","child","child_number","child_number","children_from","ckd_priv","ckd_pub","ckd_pub_tweak","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","decode","decode","default","default","depth","depth","derive_priv","derive_pub","deserialize","encode","encode","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","fingerprint","fingerprint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte_iter","from_byte_iter","from_hardened_idx","from_iter","from_normal_idx","from_priv","from_private","from_str","from_str","from_str","from_str","from_str","from_str","hardened_children","hash","hash","hash","hash","hash","hash","identifier","identifier","increment","index","index","index","into","into","into","into","into","into","into","into","into_bytes","into_bytes","into_child","into_derivation_path","into_derivation_path","into_iter","into_iter","is_empty","is_empty","is_empty","is_hardened","is_master","is_normal","len","len","len","master","network","network","new_master","next","normal_children","parent_fingerprint","parent_fingerprint","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","private_key","public_key","serialize","source","start_from","to_bytes","to_bytes","to_hex","to_hex","to_keypair","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_priv","to_pub","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_x_only_pub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","index","index","EcdsaSig","EcdsaSigError","EmptySignature","HexEncoding","NonStandardSighashType","Secp256k1","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from_slice","from_str","hash","hash","hash_ty","into","into","partial_cmp","serialize","sig","sighash_all","source","to_owned","to_owned","to_string","to_string","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","bitcoin_merkle_root","bitcoin_merkle_root_inline","Base58","Error","Hex","InvalidKeyPrefix","KeyPair","PrivateKey","PublicKey","Secp256k1","Secp256k1","SortKey","XOnlyPublicKey","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compressed","compressed","ctx","default","deserialize","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_wif","from","from","from","from","from","from_private_key","from_raw_all","from_raw_signining_only","from_raw_verification_only","from_slice","from_slice","from_str","from_str","from_wif","gen_new","hash","hash","hash","index","inner","inner","into","into","into","into","into","network","new","new","new","new_uncompressed","new_uncompressed","partial_cmp","partial_cmp","partial_cmp","preallocate_signing_size","preallocate_size","preallocate_size_gen","preallocate_verification_size","preallocated_gen_new","preallocated_new","preallocated_signing_only","preallocated_verification_only","pubkey_hash","public_key","read_from","recover","recover_ecdsa","schnorrsig_sign_no_aux_rand","schnorrsig_sign_with_aux_rand","schnorrsig_verify","secp256k1","seeded_randomize","serialize","sign","sign_ecdsa","sign_ecdsa_grind_r","sign_ecdsa_low_r","sign_ecdsa_recoverable","sign_ecdsa_recoverable_with_noncedata","sign_ecdsa_with_noncedata","sign_grind_r","sign_low_r","sign_recoverable","sign_schnorr_no_aux_rand","sign_schnorr_with_aux_rand","signing_only","source","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_sort_key","to_string","to_string","to_string","to_wif","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verification_only","verify","verify_ecdsa","verify_schnorr","wpubkey_hash","write_into","BadFormat","MerkleBlock","MerkleBlockError","MerkleRootMismatch","NoTransactions","PartialMerkleTree","TooManyTransactions","bits","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","consensus_decode","consensus_decode","consensus_encode","consensus_encode","eq","eq","eq","equivalent","equivalent","equivalent","extract_matches","extract_matches","fmt","fmt","fmt","from","from","from","from_block","from_block_with_predicate","from_header_txids","from_header_txids_with_predicate","from_txids","hashes","header","into","into","into","num_transactions","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","txn","type_id","type_id","type_id","BITCOIN_SIGNED_MSG_PREFIX","InvalidBase64","InvalidEncoding","InvalidLength","MessageSignature","MessageSignatureError","UnsupportedAddressType","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compressed","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_slice","into","into","is_signed_by_address","new","recover_pubkey","script_find_and_remove","serialize","signature","signed_msg_hash","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","CombineInconsistentKeySources","ConsensusEncoding","DuplicateKey","Error","HashParse","HiddenParts","IncompleteTapTree","Input","InvalidKey","InvalidMagic","InvalidPreimageHashPair","InvalidProprietaryKey","InvalidSeparator","MissingUtxo","MustHaveUnsignedTx","NoMorePairs","NonStandardSighashType","NotFinalized","Output","PartiallySignedTransaction","Prevouts","Psbt","PsbtSighashType","PsbtUtxoOutOfbounds","TapTree","UnexpectedUnsignedTx","UnsignedTxHasScriptSigs","UnsignedTxHasScriptWitnesses","bip32_derivation","bip32_derivation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","combine","combine","combine","consensus_decode","consensus_decode","consensus_decode_from_finite_reader","consensus_encode","consensus_encode","consensus_encode","default","default","deserialize","deserialize","ecdsa_hash_ty","ecdsa_hash_ty","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extract_tx","final_script_sig","final_script_witness","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_builder","from_str","from_u32","from_unsigned_tx","hash","hash","hash","hash","hash","hash","hash","hash160_preimages","hash256_preimages","inputs","inputs","into","into","into","into","into","into","into","into_builder","into_builder","iter_funding_utxos","node_info","non_witness_utxo","outputs","outputs","partial_cmp","partial_cmp","partial_cmp","partial_sigs","proprietary","proprietary","proprietary","proprietary","raw","redeem_script","redeem_script","ripemd160_preimages","schnorr_hash_ty","schnorr_hash_ty","script_leaves","serialize","serialize","serialize","sha256_preimages","sighash_type","source","source","tap_internal_key","tap_internal_key","tap_key_origins","tap_key_origins","tap_key_sig","tap_merkle_root","tap_script_sigs","tap_scripts","tap_tree","to_builder","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_u32","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","unknown","unknown","unknown","unsigned_tx","unsigned_tx","version","version","witness_script","witness_script","witness_utxo","xpub","xpub","actual","expected","hash","hash_type","preimage","Key","Pair","ProprietaryKey","ProprietaryType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","consensus_decode","consensus_decode","consensus_decode","consensus_encode","consensus_encode","consensus_encode","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_key","hash","hash","into","into","into","key","key","key","partial_cmp","partial_cmp","prefix","subtype","to_key","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_value","value","Deserialize","Serialize","deserialize","serialize","InvalidSchnorrSigSize","InvalidSighashType","KeyPair","SchnorrSig","SchnorrSigError","Secp256k1","TapTweak","TweakedAux","TweakedKey","TweakedKeyPair","TweakedPublicKey","UntweakedKeyPair","UntweakedPublicKey","XOnlyPublicKey","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","dangerous_assume_tweaked","dangerous_assume_tweaked","dangerous_assume_tweaked","dangerous_assume_tweaked","dangerous_assume_tweaked","deserialize","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_slice","hash","hash","hash","hash","hash_ty","into","into","into","into","into_inner","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","sig","source","tap_tweak","tap_tweak","tap_tweak","to_hex","to_inner","to_inner","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","All","All","AllPlusAnyoneCanPay","Annex","Default","EcdsaSighashType","Error","IndexOutOfInputsBounds","InvalidSighashType","Io","None","NonePlusAnyoneCanPay","One","PrevoutIndex","PrevoutKind","Prevouts","PrevoutsSize","SchnorrSighashType","ScriptPath","SighashCache","SighashTypeParseError","Single","SinglePlusAnyoneCanPay","SingleWithoutCorrespondingOutput","WrongAnnex","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","consensus_encode","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_consensus_u8","from_str","from_u8","hash","hash","hash","hash","hash","into","into","into","into","into","into","leaf_hash","legacy_encode_signing_data_to","legacy_signature_hash","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","segwit_encode_signing_data_to","segwit_signature_hash","source","taproot_encode_signing_data_to","taproot_key_spend_signature_hash","taproot_script_spend_signature_hash","taproot_signature_hash","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_defaults","witness_mut","index","index","inputs_size","outputs_size","ControlBlock","EmptyTree","EmptyTree","Future","FutureLeafVersion","InvalidControlBlockSize","InvalidInternalKey","InvalidInternalKey","InvalidMerkleBranchSize","InvalidMerkleTreeDepth","InvalidMerkleTreeDepth","InvalidParity","InvalidTaprootLeafVersion","LeafVersion","NodeInfo","NodeNotInDfsOrder","OverCompleteTree","ScriptLeaf","TAPROOT_ANNEX_PREFIX","TAPROOT_CONTROL_BASE_SIZE","TAPROOT_CONTROL_MAX_NODE_COUNT","TAPROOT_CONTROL_MAX_SIZE","TAPROOT_CONTROL_NODE_SIZE","TAPROOT_LEAF_MASK","TAPROOT_LEAF_TAPSCRIPT","TapBranchHash","TapBranchTag","TapLeafHash","TapLeafTag","TapScript","TapSighashHash","TapSighashTag","TapTweakHash","TapTweakTag","TaprootBuilder","TaprootBuilderError","TaprootError","TaprootMerkleBranch","TaprootSpendInfo","add_hidden_node","add_leaf","add_leaf_with_ver","all_zeros","all_zeros","all_zeros","all_zeros","as_hash","as_hash","as_hash","as_hash","as_inner","as_inner","as_inner","as_inner","as_inner","as_ref","as_ref","as_ref","as_ref","as_script_map","base32_len","base32_len","base32_len","base32_len","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_base32","check_base32","check_base32","check_base32","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","combine","consensus_decode","consensus_encode","control_block","default","default","default","default","default","default","depth","deref","deref","deref","deref","deserialize","deserialize","deserialize","encode","encode","engine","engine","engine","engine","engine","engine","engine","engine","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte_iter","from_byte_iter","from_byte_iter","from_byte_iter","from_consensus","from_engine","from_engine","from_engine","from_engine","from_hash","from_hash","from_hash","from_hash","from_inner","from_inner","from_inner","from_inner","from_inner","from_key_and_tweak","from_node_hashes","from_node_info","from_script","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_str","has_hidden_nodes","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","internal_key","internal_key","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_32","into_inner","into_inner","into_inner","into_inner","into_inner","is_finalizable","leaf_hash","leaf_version","leaf_version","merkle_branch","merkle_branch","merkle_root","new","new_hidden_node","new_key_spend","new_leaf_with_ver","output_key","output_key_parity","output_key_parity","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","script","serialize","serialize","serialize","serialize","serialize","size","source","source","tap_tweak","to_consensus","to_consensus","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_taproot_commitment","with_huffman_tree","with_huffman_tree","write_base32","write_base32","write_base32","write_base32","ParseLengthError","Uint128","Uint256","actual","add","add","as_bytes","as_bytes","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","bit","bit","bit_slice","bit_slice","bitand","bitand","bitor","bitor","bits","bits","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","consensus_decode","consensus_decode","consensus_encode","consensus_encode","default","default","div","div","eq","eq","eq","equivalent","equivalent","equivalent","expected","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_be_bytes","from_be_bytes","from_be_slice","from_be_slice","from_i64","from_i64","from_u64","from_u64","hash","hash","hash","increment","increment","index","index","into","into","into","into_bytes","into_bytes","is_empty","is_empty","len","len","low_128","low_u32","low_u32","low_u64","low_u64","mask","mask","mul","mul","mul_u32","mul_u32","not","not","one","one","partial_cmp","partial_cmp","partial_cmp","rem","rem","shl","shl","shr","shr","source","sub","sub","to_be_bytes","to_be_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","to_string","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero","zero"],"q":[[0,"bitcoin"],[112,"bitcoin::blockdata"],[119,"bitcoin::blockdata::block"],[206,"bitcoin::blockdata::constants"],[257,"bitcoin::blockdata::locktime"],[437,"bitcoin::blockdata::opcodes"],[505,"bitcoin::blockdata::opcodes::all"],[761,"bitcoin::blockdata::script"],[920,"bitcoin::blockdata::transaction"],[1209,"bitcoin::blockdata::witness"],[1254,"bitcoin::consensus"],[1264,"bitcoin::consensus::encode"],[1352,"bitcoin::consensus::encode::Error"],[1358,"bitcoin::consensus::params"],[1384,"bitcoin::error"],[1403,"bitcoin::hash_types"],[1980,"bitcoin::network"],[1989,"bitcoin::network::address"],[2059,"bitcoin::network::constants"],[2127,"bitcoin::network::message"],[2243,"bitcoin::network::message::NetworkMessage"],[2245,"bitcoin::network::message_blockdata"],[2314,"bitcoin::network::message_blockdata::Inventory"],[2316,"bitcoin::network::message_bloom"],[2374,"bitcoin::network::message_compact_blocks"],[2459,"bitcoin::network::message_filter"],[2579,"bitcoin::network::message_network"],[2651,"bitcoin::policy"],[2660,"bitcoin::util"],[2699,"bitcoin::util::address"],[2885,"bitcoin::util::address::Error"],[2887,"bitcoin::util::address::Payload"],[2889,"bitcoin::util::amount"],[3081,"bitcoin::util::base58"],[3114,"bitcoin::util::bip143"],[3145,"bitcoin::util::bip152"],[3313,"bitcoin::util::bip158"],[3415,"bitcoin::util::bip32"],[3663,"bitcoin::util::bip32::ChildNumber"],[3665,"bitcoin::util::ecdsa"],[3717,"bitcoin::util::hash"],[3719,"bitcoin::util::key"],[3879,"bitcoin::util::merkleblock"],[3941,"bitcoin::util::misc"],[3983,"bitcoin::util::psbt"],[4203,"bitcoin::util::psbt::Error"],[4208,"bitcoin::util::psbt::raw"],[4272,"bitcoin::util::psbt::serialize"],[4276,"bitcoin::util::schnorr"],[4380,"bitcoin::util::sighash"],[4517,"bitcoin::util::sighash::Error"],[4521,"bitcoin::util::taproot"],[5024,"bitcoin::util::uint"],[5163,"secp256k1::scalar"],[5164,"secp256k1::key"],[5165,"secp256k1"],[5166,"core::result"],[5167,"secp256k1::context"],[5168,"secp256k1_sys"],[5169,"secp256k1_sys"],[5170,"secp256k1::secret"],[5171,"core::fmt"],[5172,"core::fmt"],[5173,"core::option"],[5174,"alloc::vec"],[5175,"alloc::string"],[5176,"core::any"],[5177,"std::io"],[5178,"core::marker"],[5179,"std::io::error"],[5180,"std::io"],[5181,"bitcoin_hashes::hex"],[5182,"core::iter::traits::iterator"],[5183,"core::iter::traits::exact_size"],[5184,"core::iter::traits::double_ended"],[5185,"alloc::boxed"],[5186,"core::fmt"],[5187,"alloc::alloc"],[5188,"bech32"],[5189,"core::ops::function"],[5190,"bitcoin_hashes::sha256d"],[5191,"core::convert"],[5192,"core::num::error"],[5193,"bitcoin_hashes::hash160"],[5194,"bitcoin_hashes::sha256"],[5195,"bitcoin_hashes::error"],[5196,"core::slice::index"],[5197,"core::net::socket_addr"],[5198,"alloc::borrow"],[5199,"bech32"],[5200,"core::ops::deref"],[5201,"secp256k1::ecdsa"],[5202,"bitcoin_hashes"],[5203,"secp256k1::context"],[5204,"secp256k1::context"],[5205,"secp256k1::context"],[5206,"secp256k1_sys::types"],[5207,"secp256k1::context"],[5208,"secp256k1::schnorr"],[5209,"secp256k1::context::alloc_only"],[5210,"core::marker"],[5211,"core::cmp"],[5212,"bitcoin_hashes::sha256t"],[5213,"alloc::collections::btree::set"],[5214,"alloc::collections::btree::map"],[5215,"std::io::error"]],"d":["","","","","","","","","","","Opaque data structure that holds a keypair consisting of a …","","","","","","","","","","","","","","","","","","","","An x-only public key, used for verification of Schnorr …","Tweaks an <code>XOnlyPublicKey</code> by adding the generator …","Tweaks a keypair by first converting the public key to an …","","","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","","Bitcoin block data.","","","","","","","","","","","Bitcoin consensus.","","Formats the explicit byte value of the secret key kept …","","","","","","Contains error types and other error handling tools.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for <code>keypair</code>.","Creates a <code>KeyPair</code> directly from a secret key slice.","Creates a <code>KeyPair</code> directly from a secret key string.","Creates a <code>KeyPair</code> directly from a Secp256k1 secret key.","Creates a Schnorr public key directly from a slice.","","","","","Bitcoin hash types.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Bitcoin network support.","","","Bitcoin policy.","","Returns the <code>PublicKey</code> for this <code>KeyPair</code>.","Returns the <code>PublicKey</code> for this <code>XOnlyPublicKey</code>.","","","Returns the secret bytes for this key pair.","Returns the <code>SecretKey</code> for this <code>KeyPair</code>.","Serializes the key as a byte-encoded x coordinate value …","","Outputs the hash in hexadecimal form.","","","","","","","","Tweaks a keypair by adding the given tweak to the secret …","Tweaks an x-only PublicKey by adding the generator …","Verifies that a tweak produced by …","","","Utility functions.","Returns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …","Bitcoin blocks.","Blockdata constants.","Provides type <code>LockTime</code> that implements the logic around …","Bitcoin script opcodes.","Bitcoin scripts.","Bitcoin transactions.","Witness","An error when looking up a BIP34 block height.","Bitcoin block.","Bitcoin block header.","No push was present where the BIP34 push was expected.","The BIP34 push was larger than 8 bytes.","The block does not support BIP34 yet.","Returns the block height, as encoded in the coinbase …","The target value below which the blockhash must lie, …","Returns the block hash.","Returns the block hash.","","","","","","","check if merkle root of header matches merkle root of the …","Checks if witness commitment in coinbase matches the …","","","","","","","","Returns the coinbase transaction, if one is present.","Computes the target value in float format from Uint256 …","Computes the transaction merkle root.","Computes the witness commitment for the block’s …","","","","","","","Computes the popular “difficulty” measure for mining.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the size of the block.","Returns the strippedsize of the block.","Returns the weight of the block.","","The block header","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calculate the transaction merkle root.","The root hash of the merkle tree of transactions in the …","The nonce, selected to obtain a low enough blockhash.","","Reference to the previous block in the chain.","Returns the size of the block.","","Returns the strippedsize of the block.","Computes the target [0, T] that a blockhash must land in …","The timestamp of the block, as claimed by the miner.","","","","","","","","","","","List of transactions contained in the block","","","","Computes the target value in <code>Uint256</code> format, from a …","Checks that the proof-of-work for the block is valid, …","Originally protocol version, but repurposed for soft-fork …","Returns the weight of the block.","Computes the merkle root of transactions hashed for …","Returns the total work of the block.","How many satoshis are in “one bitcoin”","The uniquely identifying hash of the target blockchain.","How many blocks between diffchanges","How much time on average should occur between diffchanges","The maximum allowed number of signature check operations …","The maximum allowed weight for a block, see BIP 141 …","Maximum allowed value for an integer in Script.","The maximum allowed script size.","The minimum transaction weight for a valid serialized …","Mainnet (bitcoin) pubkey address prefix.","Test (tesnet, signet, regtest) pubkey address prefix.","Mainnet (bitcoin) script address prefix.","Test (tesnet, signet, regtest) script address prefix.","How may blocks between halvings.","How many seconds between blocks we expect on average","The factor that non-witness serialization data is …","Returns the underlying bytes.","Converts the object to a mutable raw pointer","Converts the object to a raw pointer","","","","","","","","","","","Returns the argument unchanged.","","","","Constructs and returns the genesis block","","","Calls <code>U::from(self)</code>.","Returns the underlying bytes.","Returns whether the object, as an array, is empty. Always …","Returns the length of the object as an array","The maximum value allowed in an output (useful for sanity …","In Bitcoind this is insanely described as ~((u256)0 &gt;&gt; 32)","","Returns the underlying bytes.","Outputs the hash in hexadecimal form.","","","","","","Returns the hash of the <code>network</code> genesis block for use as a …","A block height lock time value.","An error occurred while converting a <code>u32</code> to a lock time …","An error that occurs when converting a <code>u32</code> to a lock time …","Catchall type for errors that relate to time locks.","An absolute block height, guaranteed to always contain a …","Cannot compare different lock time units (height vs time).","The Threshold for deciding whether a lock time value is a …","A lock time value, representing either a block height or a …","An error occurred while operating on lock times.","Errors than occur when operating on lock times.","Packed lock time wraps a <code>LockTime</code> consensus value i.e., …","An error occurred while parsing a string into an <code>u32</code>.","A UNIX timestamp lock time value.","A UNIX timestamp, seconds since epoch, guaranteed to …","If <code>crate::Transaction::lock_time</code> is set to zero it is …","If <code>crate::Transaction::lock_time</code> is set to zero it is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>LockTime</code> from an nLockTime value or the …","Constructs a new block height.","Constructs a new block time.","Constructs a <code>LockTime</code> from <code>n</code>, expecting <code>n</code> to be a valid …","","","","","Constructs a <code>LockTime</code> from <code>n</code>, expecting <code>n</code> to be a valid …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this lock time value is a block height.","Returns true if this lock time value is a block time (UNIX …","Returns true if both lock times use the same unit i.e., …","Returns true if this timelock constraint is satisfied by …","","","","","","","Returns the inner <code>u32</code> value. This is the value used when …","Converts this <code>Height</code> to its inner <code>u32</code> value.","Converts this <code>Time</code> to its inner <code>u32</code> value.","Outputs the hash in hexadecimal form.","","","","","","","","","","","","","","","Returns the inner <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A script Opcode.","Broad categories of opcodes with similar behavior.","Classification context for the opcode.","Fails the script even if not executed.","Opcode used in legacy context.","Does nothing.","Empty stack is also FALSE.","Previously called OP_NOP2.","Previously called OP_NOP3.","Number 1 is also TRUE.","Any opcode not covered above.","Pushes the given number of bytes onto the stack.","Pushes the given number onto the stack.","Fails the script if executed.","Succeeds the script even if not executed.","Opcode used in tapscript context.","Constants associated with All type","","","","","","","Classifies an Opcode into a broad class.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts <code>WitnessVersion</code> instance into corresponding …","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Encode as a byte","","","","","","","Encodes <code>All</code> as a byte.","","","","","","","","","","Map 0 to 0 and everything else to 1, in place.","Increment the top stack element in place.","Decrement the top stack element in place.","Fail the script unconditionally, does not even need to be …","Drops the top two stack items.","Duplicates the top two stack items as AB -&gt; ABAB.","Fail the script unconditionally, does not even need to be …","Copies the two stack items of items two spaces back to the …","Moves the two stack items four spaces back to the front, …","Swaps the top two pairs, as ABCD -&gt; CDAB.","Duplicates the two three stack items as ABC -&gt; ABCABC.","Absolute value the top stack item in place.","Pop two stack items and push their sum.","Fail the script unconditionally, does not even need to be …","Pop the top two stack items and push 1 if both are …","Pop the top two stack items and push 1 if either is …","Fail the script unconditionally, does not even need to be …","Pop N, N pubkeys, M, M signatures, a dummy (due to bug in …","Like the above but return success/failure.","https://en.bitcoin.it/wiki/OP_CHECKSIG pushing 1/0 for …","OP_CHECKSIGADD post tapscript.","https://en.bitcoin.it/wiki/OP_CHECKSIG returning …","…","Ignore this and everything preceding when deciding what to …","…","Push the current number of stack items onto the stack.","Fail the script unconditionally, does not even need to be …","Drops the top stack item.","Duplicates the top stack item.","Execute statements if those after the previous OP_IF were …","Pop and execute the next statements if a zero element was …","Pushes 1 if the inputs are exactly equal, 0 otherwise.","Returns success if the inputs are exactly equal, failure …","Pop one element from the alt stack onto the main stack.","Pop the top two items; push 1 if the second is greater …","Pop the top two items; push 1 if the second is &gt;= the top, …","Pop the top stack item and push its RIPEMD(SHA256) hash.","Pop the top stack item and push its SHA256(SHA256) hash.","Pop and execute the next statements if a nonzero element …","Duplicate the top stack element unless it is zero.","Synonym for OP_RETURN.","Fail the script unconditionally, does not even need to be …","Fail the script unconditionally, does not even need to be …","Pop the top two items; push 1 if the second is less than …","Pop the top two items; push 1 if the second is &lt;= the top, …","Fail the script unconditionally, does not even need to be …","Pop the top two items; push the larger.","Pop the top two items; push the smaller.","Fail the script unconditionally, does not even need to be …","Fail the script unconditionally, does not even need to be …","Multiply the top stack item by -1 in place.","Drops the second-to-top stack item.","Does nothing.","Does nothing.","Does nothing.","Does nothing.","Does nothing.","Does nothing.","Does nothing.","Does nothing.","Does nothing.","Map 0 to 1 and everything else to 0, in place.","Pop and execute the next statements if a zero element was …","Pop the top two stack items and push 1 if both are …","Pop the top two stack items and return success if both are …","Pop the top two stack items and push 0 if both are …","Fail the script unconditionally, does not even need to be …","Copies the second-to-top stack item, as xA -&gt; AxA.","Pop the top stack element as N. Copy the Nth stack element …","Push an empty array onto the stack.","Push the next byte as an array onto the stack.","Push the next 10 bytes as an array onto the stack.","Push the next 11 bytes as an array onto the stack.","Push the next 12 bytes as an array onto the stack.","Push the next 13 bytes as an array onto the stack.","Push the next 14 bytes as an array onto the stack.","Push the next 15 bytes as an array onto the stack.","Push the next 16 bytes as an array onto the stack.","Push the next 17 bytes as an array onto the stack.","Push the next 18 bytes as an array onto the stack.","Push the next 19 bytes as an array onto the stack.","Push the next 2 bytes as an array onto the stack.","Push the next 20 bytes as an array onto the stack.","Push the next 21 bytes as an array onto the stack.","Push the next 22 bytes as an array onto the stack.","Push the next 23 bytes as an array onto the stack.","Push the next 24 bytes as an array onto the stack.","Push the next 25 bytes as an array onto the stack.","Push the next 26 bytes as an array onto the stack.","Push the next 27 bytes as an array onto the stack.","Push the next 28 bytes as an array onto the stack.","Push the next 29 bytes as an array onto the stack.","Push the next 2 bytes as an array onto the stack.","Push the next 30 bytes as an array onto the stack.","Push the next 31 bytes as an array onto the stack.","Push the next 32 bytes as an array onto the stack.","Push the next 33 bytes as an array onto the stack.","Push the next 34 bytes as an array onto the stack.","Push the next 35 bytes as an array onto the stack.","Push the next 36 bytes as an array onto the stack.","Push the next 37 bytes as an array onto the stack.","Push the next 38 bytes as an array onto the stack.","Push the next 39 bytes as an array onto the stack.","Push the next 4 bytes as an array onto the stack.","Push the next 40 bytes as an array onto the stack.","Push the next 41 bytes as an array onto the stack.","Push the next 42 bytes as an array onto the stack.","Push the next 43 bytes as an array onto the stack.","Push the next 44 bytes as an array onto the stack.","Push the next 45 bytes as an array onto the stack.","Push the next 46 bytes as an array onto the stack.","Push the next 47 bytes as an array onto the stack.","Push the next 48 bytes as an array onto the stack.","Push the next 49 bytes as an array onto the stack.","Push the next 5 bytes as an array onto the stack.","Push the next 50 bytes as an array onto the stack.","Push the next 51 bytes as an array onto the stack.","Push the next 52 bytes as an array onto the stack.","Push the next 53 bytes as an array onto the stack.","Push the next 54 bytes as an array onto the stack.","Push the next 55 bytes as an array onto the stack.","Push the next 56 bytes as an array onto the stack.","Push the next 57 bytes as an array onto the stack.","Push the next 58 bytes as an array onto the stack.","Push the next 59 bytes as an array onto the stack.","Push the next 6 bytes as an array onto the stack.","Push the next 60 bytes as an array onto the stack.","Push the next 61 bytes as an array onto the stack.","Push the next 62 bytes as an array onto the stack.","Push the next 63 bytes as an array onto the stack.","Push the next 64 bytes as an array onto the stack.","Push the next 65 bytes as an array onto the stack.","Push the next 66 bytes as an array onto the stack.","Push the next 67 bytes as an array onto the stack.","Push the next 68 bytes as an array onto the stack.","Push the next 69 bytes as an array onto the stack.","Push the next 7 bytes as an array onto the stack.","Push the next 70 bytes as an array onto the stack.","Push the next 71 bytes as an array onto the stack.","Push the next 72 bytes as an array onto the stack.","Push the next 73 bytes as an array onto the stack.","Push the next 74 bytes as an array onto the stack.","Push the next 75 bytes as an array onto the stack.","Push the next 8 bytes as an array onto the stack.","Push the next 9 bytes as an array onto the stack.","Read the next byte as N; push the next N bytes as an array …","Read the next 2 bytes as N; push the next N bytes as an …","Read the next 4 bytes as N; push the next N bytes as an …","Push the array <code>0x01</code> onto the stack.","Push the array <code>0x0a</code> onto the stack.","Push the array <code>0x0b</code> onto the stack.","Push the array <code>0x0c</code> onto the stack.","Push the array <code>0x0d</code> onto the stack.","Push the array <code>0x0e</code> onto the stack.","Push the array <code>0x0f</code> onto the stack.","Push the array <code>0x10</code> onto the stack.","Push the array <code>0x02</code> onto the stack.","Push the array <code>0x03</code> onto the stack.","Push the array <code>0x04</code> onto the stack.","Push the array <code>0x05</code> onto the stack.","Push the array <code>0x06</code> onto the stack.","Push the array <code>0x07</code> onto the stack.","Push the array <code>0x08</code> onto the stack.","Push the array <code>0x09</code> onto the stack.","Push the array <code>0x81</code> onto the stack.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Fail the script immediately. (Must be executed.).","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Synonym for OP_RETURN.","Fail the script unconditionally, does not even need to be …","Pop the top stack item and push its RIPEMD160 hash.","Pop the top stack element as N. Move the Nth stack element …","Rotate the top three stack items, as [top next1 next2] -&gt; […","Fail the script unconditionally, does not even need to be …","Pop the top stack item and push its SHA1 hash.","Pop the top stack item and push its SHA256 hash.","Pushes the length of the top stack item onto the stack.","Pop two stack items and push the second minus the top.","Fail the script unconditionally, does not even need to be …","Swap the top two stack items.","Pop one element from the main stack onto the alt stack.","Copy the top stack item to before the second item, as [top …","Synonym for OP_RETURN.","Fail the script unconditionally, does not even need to be …","If the top value is zero or the stack is empty, fail; …","Fail the script unconditionally, does not even need to be …","Pop the top three items; if the top is &gt;= the second and &lt; …","Fail the script unconditionally, does not even need to be …","An object which can be used to construct a script piece by …","Some opcode expected a parameter, but it was missing or …","Ways that a script might fail. Not everything is split up …","A “parsed opcode” which allows iterating over a <code>Script</code> …","Iterator over a script returning parsed opcodes.","Something did a non-minimal push; for more information see …","Tried to read an array off the stack as a number when it …","Some non-push opcode.","Push a bunch of data.","Bitcoin script.","Can not serialize the spending transaction","Can not find the spent output","Returns the script data as a byte slice.","","Returns the assembly decoding of the script.","","","","","","","","","","","","Creates an assembly decoding of the script in the given …","Writes the assembly decoding of the script bytes to the …","","","","","","","","","","","","","","","","","Returns the minimum value an output with this script …","","","","","","","","","","","","","","","","","","Writes the assembly decoding of the script to the …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Iterates over the script in the form of <code>Instruction</code>s, …","Iterates over the script in the form of <code>Instruction</code>s while …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the script into a byte vector.","","Converts the <code>Builder</code> into an unmodifiable <code>Script</code>.","Returns whether the script is the empty script.","Checks whether the script is the empty script.","Check if this is an OP_RETURN output.","Checks whether a script pubkey is a P2PK output.","Checks whether a script pubkey is a P2PKH output.","Checks whether a script pubkey is a P2SH output.","Checks whether a script can be proven to have no …","Checks whether a script pubkey is a P2WPKH output.","Checks whether a script pubkey is a P2WSH output.","Checks whether a script pubkey is a P2TR output.","Checks whether a script pubkey is a Segregated Witness …","Returns the length in bytes of the script.","Returns the length in bytes of the script.","Creates a new empty script.","Creates a new empty script.","Generates OP_RETURN-type of scriptPubkey for the given …","Generates P2PK-type of scriptPubkey.","Generates P2PKH-type of scriptPubkey.","Generates P2SH-type of scriptPubkey with a given hash of …","Generates P2WPKH-type of scriptPubkey.","Generates P2WSH-type of scriptPubkey with a given hash of …","Generates P2WPKH-type of scriptPubkey.","Generates P2WSH-type of scriptPubkey with a given hash of …","Generates P2TR for script spending path using an internal …","Generates P2TR for key spending path for a known …","Generates P2WSH-type of scriptPubkey with a given hash of …","","Returns the script code used for spending a P2WPKH output …","","","Adds instructions to push an integer onto the stack. …","Adds instructions to push a public key onto the stack.","Adds a single opcode to the script.","Adds instructions to push an integer onto the stack, using …","Adds instructions to push some arbitrary data onto the …","Adds an <code>OP_VERIFY</code> to the script, unless the …","Adds instructions to push an XOnly public key onto the …","This is like “<code>read_scriptint</code> then map 0 to false and …","Helper to decode an integer in script format Notice that …","Read a script-encoded unsigned integer","Returns 160-bit hash of the script.","","","Returns a copy of the script data.","Outputs the hash in hexadecimal form.","","","","","Computes the P2SH output corresponding to this redeem …","","","","Computes the P2WSH output corresponding to this …","Computes P2TR output with a given internal key and a …","","","","","","","","","","","","","","","","Returns witness version of the script, if any, assuming …","","Returns 256-bit hash of the script for P2WSH outputs.","0x1: Sign all outputs.","0x1: Sign all outputs.","0x81: Sign all outputs but only this input.","0x81: Sign all outputs but only this input.","The sequence number that enables absolute lock-time but …","The sequence number that enables replace-by-fee and …","Hashtype of an input’s signature, encoded in the last …","Result of <code>Transaction::encode_signing_data_to</code>.","Error in general format.","The input was too large","The maximum allowable sequence number.","This type is consensus valid but an input including it …","0x2: Sign no outputs — anyone can choose the destination.","0x2: Sign no outputs — anyone can choose the destination.","0x82: Sign no outputs and only this input.","0x82: Sign no outputs and only this input.","A reference to a transaction output.","An error in parsing an OutPoint.","An error in creating relative lock-times.","Bitcoin transaction input sequence number.","Legacy Hashtype of an input’s signature","Input data is an instance of <code>SIGHASH_SINGLE</code> bug","Error returned for failure during parsing one of the …","0x3: Sign the output whose index matches this input’s …","0x3: Sign the output whose index matches this input’s …","0x83: Sign one output and only this input (see <code>Single</code> for …","0x83: Sign one output and only this input (see <code>Single</code> for …","Size exceeds max.","Bitcoin transaction.","Bitcoin transaction input.","Bitcoin transaction output.","Error in TXID part.","Error in vout part.","Vout part is not strictly numeric without leading zeroes.","Operation performed normally.","Zero value sequence.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default value of sequence is 0xffffffff.","","","","Returns <code>true</code> if the sequence number enables absolute …","Returns true if this input enables the <code>LockTime</code>  (aka …","Encodes the signing data from which a signature hash for a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a relative lock-time using time intervals where …","Create a sequence from a u32 value.","Creates a <code>EcdsaSighashType</code> from a raw <code>u32</code>.","Create a relative lock-time using block height.","Create a relative lock-time from seconds, converting the …","Create a relative lock-time from seconds, converting the …","Creates a <code>EcdsaSighashType</code> from a raw <code>u32</code>.","","","","Creates a <code>EcdsaSighashType</code> from a raw <code>u32</code>.","Creates a <code>EcdsaSighashType</code> from a raw <code>u32</code>.","Returns the regular byte-wise consensus-serialized size of …","Returns the size of this transaction excluding the witness …","Returns the “virtual size” (vsize) of this transaction.","Returns the “weight” of this transaction, as defined …","","","","","","","","List of transaction inputs.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this <code>Transaction</code>’s absolute timelock is …","Is this a coin base transaction?","Returns <code>true</code> if the transaction itself opted in to be …","Retuns <code>true</code> if the sequence number indicates that the …","Returns <code>true</code> if the sequence number encodes a block based …","Returns <code>true</code> if this transactions nLockTime is enabled (…","Checks if an <code>OutPoint</code> is “null”.","Returns true if the transaction opted-in to BIP125 …","Returns <code>true</code> if the sequence has a relative lock-time.","Checks for SIGHASH_SINGLE bug returning error if the …","Returns <code>true</code> if the sequene number encodes a time interval …","Block height or timestamp. Transaction cannot be included …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Creates a new <code>OutPoint</code>.","Computes a “normalized TXID” which does not include …","Creates a “null” <code>OutPoint</code>.","List of transaction outputs.","","","","","","","The reference to the previous output that is being used an …","The script which must be satisfied for the output to be …","The script which pushes values on the stack which will …","The sequence number, which suggests to miners which of two …","","","Computes a signature hash for a given input index with a …","Returns the regular byte-wise consensus-serialized size of …","","","","","Returns the size of this transaction excluding the witness …","Returns the inner 32bit integer value of Sequence.","Outputs the hash in hexadecimal form.","","","","","","","","","","","","","","","","","","Converts <code>EcdsaSighashType</code> to a <code>u32</code> sighash flag.","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the txid. For non-segwit transactions this will …","The referenced transaction’s txid.","","","","","","","","","","","","The unrecognized string we attempted to parse.","The value of the output, in satoshis.","The protocol version, is currently expected to be 1 or 2 …","The index of the referenced output in its transaction’s …","Returns the “virtual size” (vsize) of this transaction.","Returns the “weight” of this transaction, as defined …","Witness data: an array of byte-arrays. Note that this …","Computes SegWit-version of the transaction id (wtxid). For …","Support structure to allow efficient and convenient …","The Witness is the data used to unlock bitcoins since the …","","","","","Clear the witness","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Witness</code> object from an array of byte-arrays","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the witness contains no element","Returns a struct implementing <code>Iterator</code>","Return the last element in the witness, if any","Returns the number of elements this witness holds","Create a new empty <code>Witness</code>","","","Push a new element on the witness, requires an allocation","Pushes a DER-encoded ECDSA signature with a signature hash …","Return the second-to-last element in the witness, if any","","Returns the bytes required when this Witness is consensus …","","","Convenience method to create an array of byte-arrays from …","","","","","","","","","","","","","","Bitcoin consensus-encodable types.","Bitcoin consensus parameters.","","Data which must be preceded by a 4-byte checksum","Data which can be encoded in a consensus-consistent way","Data which can be encoded in a consensus-consistent way","Encoding error","Checksum was invalid","And I/O error","Maximum size, in bytes, of a vector we are allowed to …","VarInt was encoded in a non-minimal way","Tried to allocate an oversized vector","Parsing error","PSBT-related error","Extensions of <code>Read</code> to decode data as per Bitcoin consensus","Network magic was not expected","Network magic was unknown","Unsupported Segwit flag","A variable-length unsigned integer","Extensions of <code>Write</code> to encode data as per Bitcoin consensus","","","","","","","","","","","","Decode an object with a well-defined format.","","Decode <code>Self</code> from a size-limited reader.","","Encode an object with a well-defined format. Returns the …","","","Deserialize an object from a vector, will error if said …","Deserialize an object from a vector, but will not report …","Output a boolean","Output a 16-bit int","Output a 32-bit int","Output a 64-bit int","Output a 8-bit int","Output a byte slice","Output a 16-bit uint","Output a 32-bit uint","Output a 64-bit uint","Output a 8-bit uint","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the length of this VarInt when encoded. Returns 1 for …","","Read a boolean","Read a 16-bit int","Read a 32-bit int","Read a 64-bit int","Read a 8-bit int","Read a byte slice","Read a 16-bit uint","Read a 32-bit uint","Read a 64-bit uint","Read a 8-bit uint","Encode an object into a vector","Encode an object into a hex-encoded string","","","","","","","","","","","","","","The unexpected network magic","The invalid checksum","The expected network magic","The expected checksum","The maximum capacity","The capacity requested","Parameters that influence chain consensus.","Determines whether minimal difficulty may be used for …","Time when BIP16 becomes active.","Block height at which BIP34 becomes active.","Block height at which BIP65 becomes active.","Block height at which BIP66 becomes active.","","","","","Calculates the number of blocks between difficulty …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Number of blocks with the same set of rules.","Network for which parameters are valid.","Creates parameters set for the given network.","Determines whether retargeting is disabled for this …","Proof of work limit value. It contains the lowest possible …","Expected amount of time to mine one block.","Difficulty recalculation interval.","Minimum blocks including miner confirmation of the total …","","","","","Error with rich context returned when a string can’t be …","","","","","","","","","","Returns the argument unchanged.","Returns the input that was attempted to be parsed.","Calls <code>U::from(self)</code>.","","","","","","","A bitcoin block hash.","Filter hash, as defined in BIP-157","Filter header, as defined in BIP-157","A hash of a public key.","A hash of Bitcoin Script bytecode.","Hash of the transaction according to the signature …","A hash of the Merkle tree branch or root for transactions","A bitcoin transaction hash/transaction ID.","SegWit version of a public key hash.","SegWit version of a Bitcoin Script bytecode hash.","A hash corresponding to the witness structure commitment …","A hash corresponding to the Merkle tree root for witness …","A bitcoin witness transaction ID.","XpubIdentifier as defined in BIP-32.","","","","","","","","","","","","","","","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash typecompute the filter header from a filter hash and previous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bitcoin network addresses.","Bitcoin network constants.","Bitcoin network messages.","Bitcoin blockdata network messages.","Bitcoin Connection Bloom filtering network messages.","BIP152  Compact Blocks network messages","Bitcoin Client Side Block Filtering network messages.","Bitcoin network-related network messages.","Supported networks for use in BIP155 addrv2 message","Address received from BIP155 addrv2 message","A message which can be sent on the Bitcoin network","CJDNS","I2P","IPV4","IPV6","TORV2","TORV3","Unknown","Network ID + Network Address","Network byte-order ipv6 address, or ipv4-mapped ipv6 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an address message for a socket","Network port","Network port, 0 if not applicable","Services provided by the peer whose address this is","Service bits","Extract socket address from an Address message. This will …","Extract socket address from an AddrV2Message message. This …","Time that this node was last seen as connected to the …","","","","","","","","","","","","","","","BLOOM means the node is capable and willing to handle …","Classic Bitcoin","COMPACT_FILTERS means the node will service basic block …","GETUTXO means the node is capable of responding to the …","NETWORK means that the node is capable of serving the …","NETWORK_LIMITED means the same as NODE_NETWORK with the …","NONE means no services supported.","The cryptocurrency to act on","Version of the protocol as appearing in network message …","Bitcoin’s regtest","Flags to indicate which network services a node supports.","Bitcoin’s signet","Bitcoin’s testnet","WITNESS indicates that a node can be asked for blocks and …","Add ServiceFlags together.","Get the integer representation of this ServiceFlags.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Network</code> from the magic bytes.","","Check whether ServiceFlags are included in this one.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the network magic bytes, which should be encoded …","","","Remove ServiceFlags from this.","Outputs the hash in hexadecimal form.","","","","","Gets the integer representation of this <code>ServiceFlags</code>.","","","","","","","<code>addr</code>","<code>addrv2</code>","<code>alert</code>","<code>block</code>","BIP152 blocktxn","BIP157 cfcheckpt","BIP157 cfheaders","BIP157 cfilter","BIP152 cmpctblock","Serializer for command string","Error returned when a command string is invalid.","<code>feefilter</code>","BIP 37 <code>filteradd</code>","BIP 37 <code>filterclear</code>","BIP 37 <code>filterload</code>","<code>getaddr</code>","BIP152 getblocktxn","<code>getblocks</code>","BIP157 getcfcheckpt","BIP157 getcfheaders","BIP157 getcfilters","<code>getdata</code>","<code>getheaders</code>","<code>headers</code>","<code>inv</code>","The maximum number of super::message_blockdata::Inventory …","Maximum size, in bytes, of an encoded message This by …","<code>mempool</code>","<code>merkleblock</code>","A Network message payload. Proper documentation is …","<code>notfound</code>","<code>ping</code>","<code>pong</code>","A Network message","<code>reject</code>","<code>sendaddrv2</code>","BIP152 sendcmpct","<code>sendheaders</code>","tx","Any other message.","<code>verack</code>","<code>version</code>","<code>wtxidrelay</code>","","","","","","","","","","","","","","","","","","Return the message command as a static string reference.","Return the message command as a static string reference.","Return the CommandString for the message command.","Return the CommandString for the message command.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Magic bytes to identify the network these messages are …","The actual message data","","","","","","","","","","","Convert from various string types into a CommandString.","","","","","Convert <code>&amp;&#39;static str</code> to <code>CommandString</code>","","","","","","","","","The command of this message.","The payload of this message.","Block","Compact Block","Error — these inventories can be ignored","The <code>getblocks</code> message","The <code>getheaders</code> message","An inventory item.","Transaction","Unknown inventory type","Witness Transaction by Wtxid","Witness Block","Witness Transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Locator hashes — ordered newest to oldest. The remote …","Locator hashes — ordered newest to oldest. The remote …","Construct a new <code>getblocks</code> message","Construct a new <code>getheaders</code> message","","References the block to stop at, or zero to just fetch the …","References the header to stop at, or zero to just fetch …","","","","","","","","","","","","","The protocol version","The protocol version","The hash of the inventory item","The inventory item type.","Always update the filter with outpoints.","Bloom filter update flags","<code>filteradd</code> message updates the current filter with new data","<code>filterload</code> message sets the current bloom filter","Never update the filter with outpoints.","Only update the filter with outpoints if it is P2PK or P2MS","","","","","","","","","","","","","","","","","","","","","The data element to add to the current filter.","","","","","","","The filter itself","Controls how matched items are added to the filter","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The number of hash functions to use","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","A random value","","","","blocktxn message","cmpctblock message","getblocktxn message","sendcmpct message","","","","","","","","","","","","","","","","","","","","","The Compact Block.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Request to be send compact blocks.","","","","","The requested block transactions.","","","","","","","","","The block transactions request.","","","","","Compact Blocks protocol version number.","cfcheckpt message","cfheaders message","cfilter message","getcfcheckpt message","getcfheaders message","getcfilters message","Block hash of the Bitcoin block for which the filter is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized compact filter for this block","The filter hashes for each block in the requested range","The filter headers at intervals of 1,000","Filter type for which headers are requested","Byte identifying the type of filter being returned","Byte identifying the type of filter being returned","Filter type for which headers are requested","Filter type for which headers are requested","Filter type for which headers are requested","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The filter header preceding the first block in the …","The height of the first block in the requested range","The height of the first block in the requested range","The hash of the last block in the requested range","The hash of the last block in the requested range","The hash of the last block in the requested range","The hash of the last block in the requested range","The hash of the last block in the requested range","","","","","","","","","","","","","","","","","","","","","","","","","checkpoint","duplicate message","an output is below dust limit","insufficient fee","invalid message","malformed message","nonstandard transaction","obsolete message","Reject message might be sent by peers rejecting one of our …","message rejection reason as a code","Some simple messages The <code>version</code> message","","","","","","","reason of rejection as code","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","reference to rejected item","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","message type rejected","Constructs a new <code>version</code> message with <code>relay</code> set to false","A random nonce used to detect loops in the network","reason of rejectection","The network address of the peer receiving the message","Whether the receiving peer should relay messages to the …","The network address of the peer sending the message","A bitmask describing the services supported by this node","The height of the maximum-work blockchain that the peer is …","The time at which the <code>version</code> message was sent","","","","","","","","","","","","","A string describing the peer’s software","The P2P network protocol version","The number of bytes equivalent per signature operation. …","The minimum incremental <em>feerate</em> (despite the name), in …","Default number of hours for an unconfirmed transaction to …","Minimum feerate, in sats per virtual kilobyte, for a …","The minimum feerate, in sats per kilo-virtualbyte, for …","Maximum number of sigops in a standard tx.","Maximum weight of a transaction for it to be relayed by …","Minimum non-witness size for a standard transaction (1 …","The virtual transaction size, as computed by default by …","A trait which allows numbers to act as fixed-size bit …","The header hash is not below the target","The <code>target</code> field of a block header did not match the …","Encoding error","A general error code, other errors should implement …","Bitcoin addresses.","Bitcoin amounts.","Base58 encoder and decoder.","BIP143 implementation.","BIP152 Compact Blocks","BIP158 Compact Block Filters for light clients.","BIP32 implementation.","Is bit set?","Returns an array which is just the bits from start to end","","","ECDSA Bitcoin signatures.","","","Returns the argument unchanged.","Bitcoin hash functions.","Calls <code>U::from(self)</code>.","Bitcoin keys.","Bitwise and with <code>n</code> ones","Merkle Block and Partial Merkle Tree.","Miscellaneous functions.","Create value representing one","Partially Signed Bitcoin Transactions.","Schnorr Bitcoin keys.","Generalized, efficient, signature hash implementation.","","Bitcoin Taproot.","","Trailing zeros","","","","Big unsigned integer types.","Create all-zeros value","A Bitcoin address.","A utility struct to encode an address payload with the …","The different types of addresses.","Base58 encoding error.","Bech32 encoding error.","The bech32 payload was empty.","Address error.","Address size more than 520 bytes is not allowed.","The wrong checksum algorithm was used. See BIP-0350.","A v0 witness program must be either of length 20 or 32.","The witness program must be between 2 and 40 bytes in …","Script version must be 0 to 16 inclusive.","Bitcoin script opcode does not match any known witness …","Pay to pubkey hash.","Pay to script hash.","Pay to taproot.","Pay to witness pubkey hash.","Pay to witness script hash.","The method used to produce an address.","P2PKH address.","P2SH address.","An uncompressed pubkey was used where it is not allowed.","Address type is either invalid or not supported in …","Unable to parse witness version from string.","Script is not a p2pkh, p2sh or witness program.","Initial version of witness program. Used for P2WPKH and …","Version of witness program used for Taproot P2TR outputs.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Future (unsupported) version of witness program.","Segwit address.","Version of the witness program.","Gets the address type of the address.","Returns a byte slice of the payload","hrp used in bech32 addresss (e.g. “bc” for “bc1…”…","Determines the checksum variant. See BIP-0350 for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts bitcoin script <code>Instruction</code> (parsed opcode) into …","Converts an 8-bit unsigned integer value into …","Converts bitcoin script opcode into <code>WitnessVersion</code> variant.","Constructs a Payload from an output script (<code>scriptPubkey</code>).","Constructs an <code>Address</code> from an output script (<code>scriptPubkey</code>).","","","","Converts 5-bit unsigned integer value matching single …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns integer version number representation for a given …","Returns true if the given pubkey is directly related to …","Returns true if the supplied xonly public key can be used …","Checks whether or not the address is following Bitcoin …","Parsed addresses do not always have <em>one</em> network. The …","The network on which this address is usable.","Creates a pay to (compressed) public key hash payload from …","Creates a pay to (compressed) public key hash address from …","base58 version byte for p2pkh payloads (e.g. 0x00 for “1…","Creates a pay to script hash P2SH payload from a script","Creates a pay to script hash P2SH address from a script.","base58 version byte for p2sh payloads (e.g. 0x05 for “3…","Create a pay to script payload that embeds a witness pay …","Creates a pay to script address that embeds a witness pay …","Create a pay to script payload that embeds a witness pay …","Creates a pay to script address that embeds a witness pay …","Create a pay to taproot payload from untweaked key","Creates a pay to taproot address from an untweaked key.","Create a pay to taproot payload from a pre-tweaked output …","Creates a pay to taproot address from a pre-tweaked output …","Create a witness pay to public key payload from a public …","Creates a witness pay to public key address from a public …","Create a witness pay to script hash payload.","Creates a witness pay to script hash address.","","","","","The address payload to encode.","The type of the address.","Generates a script pubkey spending to this Payload.","Generates a script pubkey spending to this address.","","Returns integer version number representation for a given …","","","","","","Creates a URI string <em>bitcoin:address</em> optimized to be …","","","","","","","","","Converts an 8-bit unsigned integer value into …","Converts bitcoin script opcode into <code>WitnessVersion</code> variant.","Converts 5-bit unsigned integer value matching single …","","Converts bitcoin script <code>Instruction</code> (parsed opcode) into …","","","","","","","","","","","","","","","Bech32 variant that is required by the used Witness …","The actual Bech32 variant encoded in the address …","The witness program.","The witness program version.","Amount","bits","BTC","Calculate the sum over the iterator using checked …","A set of denominations in which amounts can be expressed.","A helper/builder that displays amount with specified …","Input string was too large.","Invalid character in input.","Invalid number format.","The maximum value allowed as an amount. Useful for sanity …","The maximum value allowed as an amount. Useful for sanity …","uBTC","mBTC","msat","nBTC","Amount is negative.","Exactly one bitcoin.","Exactly one bitcoin.","Exactly one satoshi.","Exactly one satoshi.","An error during amount parsing.","pBTC","The denomination has multiple possible interpretations.","satoshi","SignedAmount","Amount is too big to fit inside the type.","Amount has higher precision than supported by the type.","The denomination was unknown.","The zero amount.","The zero amount.","Get the absolute value of this SignedAmount.","","","","","Express this Amount as a floating-point value in Bitcoin.","Express this SignedAmount as a floating-point value in …","Get the number of satoshis in this Amount.","Get the number of satoshis in this SignedAmount.","","","","","","","","","","","Get the absolute value of this SignedAmount. Returns None …","Checked addition. Returns None if overflow occurred.","Checked addition. Returns None if overflow occurred.","Checked integer division. Be aware that integer division …","Checked integer division. Be aware that integer division …","Checked multiplication. Returns None if overflow occurred.","Checked multiplication. Returns None if overflow occurred.","Checked remainder. Returns None if overflow occurred.","Checked remainder. Returns None if overflow occurred.","Checked subtraction. Returns None if overflow occurred.","Checked subtraction. Returns None if overflow occurred.","Calculate the sum over the iterator using checked …","","","","","","","","","","","","","","","Create an object that implements <code>fmt::Display</code> dynamically …","Create an object that implements <code>fmt::Display</code> dynamically …","Create an object that implements <code>fmt::Display</code> using …","Create an object that implements <code>fmt::Display</code> using …","","","","","","","","","","","","","","","","","","","","","","","Format the value of this Amount in the given denomination.","Format the value of this SignedAmount in the given …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a value expressing bitcoins to an Amount.","Convert from a value expressing bitcoins to an SignedAmount…","Convert this Amount in floating-point notation with a given","Convert this SignedAmount in floating-point notation with …","Create an Amount with satoshi precision and the given …","Create an SignedAmount with satoshi precision and the …","Convert from a str to Denomination.","","","Parse a decimal string as a value in the given …","Parse a decimal string as a value in the given …","Parses amounts with denomination suffix like they are …","Parses amounts with denomination suffix like they are …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this SignedAmount is negative and <code>false</code> if …","Returns <code>true</code> if this SignedAmount is positive and <code>false</code> if …","The maximum value of an Amount.","The maximum value of an SignedAmount.","The minimum value of an Amount.","The minimum value of an SignedAmount.","","","","","","","Subtraction that doesn’t allow negative SignedAmounts. …","","","","","Makes subsequent calls to <code>Display::fmt</code> display …","Returns a number representing sign of this SignedAmount.","","","","","","","","Express this <code>Amount</code> as a floating-point value in Bitcoin.","Express this <code>SignedAmount</code> as a floating-point value in …","Express this Amount as a floating-point value in the given …","Express this SignedAmount as a floating-point value in the …","","","","","","Gets the number of satoshis in this <code>Amount</code>.","Gets the number of satoshis in this <code>SignedAmount</code>.","Convert to a signed amount.","","","","","","Get a string number of this Amount in the given …","Get a string number of this SignedAmount in the given …","Get a formatted string of this Amount in the given …","Get a formatted string of this SignedAmount in the given …","Convert to an unsigned amount.","","","","","","","","","","","","","","","","Invalid character encountered","Checksum was not correct (expected, actual)","An error that might occur during base58 decoding","Hex decoding error","Address version byte were not recognized","Extended Key version byte(s) were not recognized","The length (in bytes) of the object was not correct Note …","Secp256k1 error while parsing a secret key","Checked data was less than 4 bytes","","","Obtain a string with the base58check encoding of a slice …","Obtain a string with the base58check encoding of a slice …","","","","Directly encode a slice as base58","","","","","Decode base58-encoded string into a byte vector","Returns the argument unchanged.","Decode a base58check-encoded string","","Calls <code>U::from(self)</code>.","","","","","","","","A replacement for SigHashComponents which supports all …","Parts of a sighash which are common across inputs or …","When the SigHashCache is initialized with a mutable …","","","","","","","Encode the BIP143 signing data for any flag type into a …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Hash of all the outputs in this transaction","Hash of all the previous outputs","Hash of all the input sequence nos","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Compute the sighash components from an unsigned …","Compute the sighash components from an unsigned …","Compute the BIP143 sighash for a <code>SIGHASH_ALL</code> signature for …","Compute the BIP143 sighash for any flag type. See …","","","","","","","","A BlockTransactions structure is used to provide some of …","A BlockTransactionsRequest structure is used to list …","A BIP-152 error","A HeaderAndShortIds structure is used to relay a block …","The prefill slice provided was invalid.","A PrefilledTransaction structure is used in …","Short transaction IDs are used to represent a transaction …","A transaction index is requested that is out of range from …","An unknown version number was used.","Returns the underlying bytes.","Converts the object to a mutable raw pointer","Converts the object to a raw pointer","","The blockhash of the block which the transactions being …","The blockhash of the block which the transactions being …","","","","","","","","","","","","","","","Calculate the SipHash24 keys used to calculate short IDs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new HeaderAndShortIds from a full block.","","Construct a BlockTransactions from a …","","","","","","","","","The header of the block being provided.","The index of the transaction in the block.","","The indexes of the transactions being requested in the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying bytes.","Returns whether the object, as an array, is empty. Always …","Returns the length of the object as an array","A nonce for use in short transaction ID calculations.","","","","","","","","Used to provide the coinbase transaction and a select few …","The short transaction IDs calculated from the transactions …","Returns the underlying bytes.","Outputs the hash in hexadecimal form.","","","","","","","","","","","The transactions provided.","","","","","","","","","","","","","","","The actual transaction.","","","","","","","","Calculate the short ID with the given (w)txid and using …","Bitwise stream reader","Bitwise stream writer","a computed or read block filter","Reads and interpret a block filter","Compiles and writes a block filter","Errors for blockfilter","Golomb-Rice encoded filter reader","Colomb-Rice encoded filter writer","some IO error reading or writing binary serialization of …","missing UTXO, can not calculate script filter","Add arbitrary element to a filter","Add some data to the filter","Add consumed output scripts of a block to filter","Add output scripts of the block - excluding OP_RETURN …","","","","","","","","","","","","","","","","","","","Golomb encoded filter","","","compute this filter’s id in a chain of filters","Write block filter","write the filter to the wrapped writer","flush bits not yet written","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","match all query pattern","match all query pattern","match all query pattern","match any query pattern","match any query pattern","match any query pattern","Create a block filter writer","Create a block filter reader","Create a new filter reader with specific seed to siphash","Create a new GCS writer wrapping a generic writer, with …","Create a new BitStreamReader that reads bitwise from a …","Create a new BitStreamWriter that writes bitwise to a …","create a new filter from pre-computed data","Compute a SCRIPT_FILTER that contains spent and output …","Read nbit bits","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write nbits bits from data","Base58 encoding error","A pk-&gt;pk derivation was attempted on a hardened key","A chain code","A child number for a derived key","A BIP-32 derivation path.","An iterator over children of a DerivationPath.","A BIP32 error","Extended private key","Extended public key","A fingerprint","Hardened key","Hexadecimal decoding error","Trait that allows possibly failable conversion from a type …","A child number was provided that was out of range","Invalid childnumber format.","Invalid derivation path format.","Full information on the used extended public key: …","Non-hardened key","A secp256k1 error occurred","Unknown version magic bytes","Encoded extended key data has wrong length","Returns the underlying bytes.","Returns the underlying bytes.","Converts the object to a mutable raw pointer","Converts the object to a mutable raw pointer","Converts the object to a raw pointer","Converts the object to a raw pointer","","","","","","","","","","","","","","","","","","Chain code","Chain code","Create a new DerivationPath that is a child of this one.","Child number of the key used to derive from parent (0 for …","Child number of the key used to derive from parent (0 for …","Get an Iterator over the children of this DerivationPath …","Private-&gt;Private child key derivation","Public-&gt;Public child key derivation","Compute the scalar tweak added to this key to get a child …","","","","","","","","","","","","","","","","","","","","","Decoding extended private key from binary data according …","Decoding extended public key from binary data according to …","","","How many derivations this key is from the master (which is …","How many derivations this key is from the master (which is …","Attempts to derive an extended private key from a path.","Attempts to derive an extended public key from a path.","","Extended private key binary encoding according to BIP 32","Extended public key binary encoding according to BIP 32","","","","","","","","","","","","","","","Concatenate <code>self</code> with <code>path</code> and return the resulting new …","Returns the first four bytes of the identifier","Returns the first four bytes of the identifier","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Create a <code>Hardened</code> from an index, returns an error if the …","","Create a <code>Normal</code> from an index, returns an error if the …","Derives a public key from a private key","Derives a public key from a private key","","","","","","","Get an Iterator over the hardened children of this …","","","","","","","Returns the HASH160 of the public key belonging to the …","Returns the HASH160 of the chaincode","Returns the child number that is a single increment from …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying bytes.","Returns the underlying bytes.","Convert into a DerivationPath that is a child of this one.","Convers a given type into a <code>DerivationPath</code> with possible …","","","","Returns whether the object, as an array, is empty. Always …","Returns whether the object, as an array, is empty. Always …","Returns <code>true</code> if the derivation path is empty","Returns <code>true</code> if the child number is a <code>Hardened</code> value.","Returns whether derivation path represents master key …","Returns <code>true</code> if the child number is a <code>Normal</code> value.","Returns the length of the object as an array","Returns the length of the object as an array","Returns length of the derivation path","Returns derivation path for a master key (i.e. empty …","The network this key is to be used on","The network this key is to be used on","Construct a new master key from a seed value","","Get an Iterator over the unhardened children of this …","Fingerprint of the parent key (0 for master)","Fingerprint of the parent key","","","","","","","Private key","Public key","","","Start a new DerivationPathIterator at the given child.","Returns the underlying bytes.","Returns the underlying bytes.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Constructs BIP340 keypair for Schnorr signatures and …","","","","","","","","Constructs ECDSA compressed private key matching internal …","Constructs ECDSA compressed public key matching internal …","","","","","","","","Constructs BIP340 x-only public key for BIP-340 signatures …","","","","","","","","","","","","","","","","","","","","","","","","","Key index, within [0, 2^31 - 1]","Key index, within [0, 2^31 - 1]","An ECDSA signature with the corresponding hash type.","A key-related error.","Empty Signature","Hex encoding error","Base58 encoding error","secp256k1-related error","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Deserializes from slice following the standardness rules …","","","","The corresponding hash type","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The underlying ECDSA Signature","Constructs an ECDSA bitcoin signature for …","","","","","","Serializes an ECDSA signature (inner secp256k1 signature …","","","","","","","Calculates the merkle root of an iterator of <em>hashes</em>.","Calculates the merkle root of a list of <em>hashes</em>, inline (in …","Base58 encoding error","A key-related error.","Hex decoding error","Invalid key prefix error","Opaque data structure that holds a keypair consisting of a …","A Bitcoin ECDSA private key","A Bitcoin ECDSA public key","The secp256k1 engine, used to execute all signature …","secp256k1-related error","An opaque return type for PublicKey::to_sort_key","An x-only public key, used for verification of Schnorr …","","","","","","","","","","","","","","","","","","","","","","","","Whether this public key should be serialized as compressed","Whether this private key should be serialized as compressed","Getter for the raw pointer to the underlying secp256k1 …","","","","","","","","","","","","","","","","","","","","","","Format the private key to WIF format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Computes the public key as supposed to be used with this …","Create a context from a raw context.","Create a context from a raw context.","Create a context from a raw context.","Deserialize a public key from a slice","Deserialize a private key from a slice","","","Parse WIF encoded private key.","Lets you create a context in a generic manner …","","","","","The actual ECDSA key","The actual ECDSA key","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The network on which this key should be used","Creates a new Secp256k1 context with all capabilities.","Constructs compressed ECDSA public key from the provided …","Constructs compressed ECDSA private key from the provided …","Constructs uncompressed (legacy) ECDSA public key from the …","Constructs uncompressed (legacy) ECDSA private key from …","","","","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Returns the required memory for a preallocated context …","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Lets you create a context with a preallocated buffer in a …","Creates a new Secp256k1 context with all capabilities","Creates a new Secp256k1 context that can only be used for …","Creates a new Secp256k1 context that can only be used for …","Returns bitcoin 160-bit hash of the public key","Creates a public key from this private key","Read the public key from a reader","Determines the public key for which <code>sig</code> is a valid …","Determines the public key for which <code>sig</code> is a valid …","Create a schnorr signature without using any auxiliary …","Create a Schnorr signature using the given auxiliary …","Verify a Schnorr signature.","","(Re)randomizes the Secp256k1 context for extra sidechannel …","","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Create a schnorr signature without using any auxiliary …","Create a Schnorr signature using the given auxiliary …","Creates a new Secp256k1 context that can only be used for …","","Serialize the public key to bytes","Serialize the private key to bytes","","","","","","Serialize the public key into a <code>SortKey</code>.","","","","Get WIF encoding of this private key.","","","","","","","","","","","","","","","","Creates a new Secp256k1 context that can only be used for …","Checks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …","Checks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …","Verify a Schnorr signature.","Returns bitcoin 160-bit hash of the public key for witness …","Write the public key into a writer","General format error","Data structure that represents a block header paired to a …","An error when verifying the merkle block","When header merkle root don’t match to the root …","When partial merkle tree contains no transactions","Data structure that represents a partial merkle tree.","When there are too many transactions","Returns the node-is-parent-of-matched-txid bits of the …","","","","","","","","","","","","","","","","","","","","","","","Extract the matching txid’s represented by this partial …","Extract the matching txid’s represented by this partial …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a MerkleBlock from a block, that contains proofs …","Create a MerkleBlock from a block, that contains proofs …","Create a MerkleBlock from the block’s header and txids, …","Create a MerkleBlock from the block’s header and txids, …","Construct a partial merkle tree The <code>txids</code> are the …","Returns the transaction ids and internal hashes of the …","The block header","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the total number of transactions in the block.","","","","","","","","","","Transactions making up a partial merkle tree","","","","The prefix for signed messages using Bitcoin’s message …","Invalid base64 encoding.","The signature is invalidly constructed.","Signature is expected to be 65 bytes.","A signature on a Bitcoin Signed Message.","An error used for dealing with Bitcoin Signed Messages.","Unsupported Address Type","","","","","","","Whether or not this signature was created with a …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create from a byte slice.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Verify that the signature signs the message and was signed …","Create a new MessageSignature.","Attempt to recover a public key from the signature and the …","Search for <code>needle</code> in the vector <code>haystack</code> and remove every …","Serialize to bytes.","The inner recoverable signature.","Hash message for signature using Bitcoin’s message …","","","","","","","","","","Conflicting data during combine procedure: global extended …","Serialization error in bitcoin consensus-encoded structures","Keys within key-value map should never be duplicated.","Ways that a Partially Signed Transaction might fail.","Parsing errors from bitcoin_hashes","Indicates an attempt to construct a tap tree from a …","Error happening when <code>TapTree</code> is constructed from a …","A key-value map for an input of the corresponding index in …","Known keys must be according to spec.","Magic bytes for a PSBT must be the ASCII for “psbt” …","The pre-image must hash to the correponding psbt hash","Non-proprietary key type found when proprietary key was …","The separator for a PSBT must be <code>0xff</code>.","Missing both the witness and non-witness utxo.","A PSBT must have an unsigned transaction.","Signals that there are no more key-value pairs in a …","Unable to parse as a standard sighash type.","Indicates an attempt to construct a tap tree from a …","A key-value map for an output of the corresponding index …","A Partially Signed Transaction.","","Partially signed transaction, commonly referred to as a …","A Signature hash type for the corresponding input. As of …","Returned when output index is out of bounds in relation to …","Taproot Tree representing a finalized <code>TaprootBuilder</code> (a …","Attempting to combine with a PSBT describing a different …","The scriptSigs for the unsigned transaction must be empty.","The scriptWitnesses for the unsigned transaction must be …","A map from public keys needed to sign this input to their …","A map from public keys needed to spend this output to their","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines this <code>Input</code> with <code>other</code> <code>Input</code> (as described by BIP …","Combines this <code>Output</code> with <code>other</code> <code>Output</code> (as described by …","Combines this <code>PartiallySignedTransaction</code> with <code>other</code> PSBT …","","","","","","","","","","","Obtains the <code>EcdsaSighashType</code> for this input if one is …","Returns the <code>EcdsaSighashType</code> if the <code>PsbtSighashType</code> can be …","","","","","","","","","","","","","","","Extracts the <code>Transaction</code> from a PSBT by filling in the …","The finalized, fully-constructed scriptSig with signatures …","The finalized, fully-constructed scriptWitness with …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs <code>TapTree</code> from a <code>TaprootBuilder</code> if it is complete …","","Creates a <code>PsbtSighashType</code> from a raw <code>u32</code>.","Creates a PSBT from an unsigned transaction.","","","","","","","","HSAH160 hash to preimage map.","HAS256 hash to preimage map.","The corresponding key-value map for each input in the …","The corresponding key-value map for each input in the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts error into the original incomplete <code>TaprootBuilder</code> …","Converts self into builder <code>TaprootBuilder</code>. The builder is …","Returns an iterator for the funding UTXOs of the psbt","Gets the inner node info as the builder is finalized.","The non-witness transaction this input spends from. Should …","The corresponding key-value map for each output in the …","The corresponding key-value map for each output in the …","","","","A map from public keys to their corresponding signature as …","Global proprietary key-value pairs.","Proprietary key-value pairs for this input.","Proprietary key-value pairs for this output.","Global proprietary key-value pairs.","Raw PSBT key-value pairs.","The redeem script for this input.","The redeem script for this output.","TODO: Proof of reserves commitment RIPEMD160 hash to …","Obtains the <code>SchnorrSighashType</code> for this input if one is …","Returns the <code>SchnorrSighashType</code> if the <code>PsbtSighashType</code> can …","Returns [<code>TapTreeIter&lt;&#39;_&gt;</code>] iterator for a taproot script …","PSBT serialization.","","","SHA256 hash to preimage map.","The sighash type to be used for this input. Signatures for …","","","Taproot Internal key.","The internal pubkey.","Map of tap root x only keys to origin info and leaf hashes …","Map of tap root x only keys to origin info and leaf hashes …","Serialized schnorr signature with sighash type for key …","Taproot Merkle root.","Map of | with signature.","Map of Control blocks to Script version pair.","Taproot Output tree.","Constructs <code>TaprootBuilder</code> by internally cloning the <code>self</code>. …","","","","","","","","","","","Converts <code>PsbtSighashType</code> to a raw <code>u32</code> sighash flag.","","","","","","Constructs <code>TapTree</code> from a <code>TaprootBuilder</code> if it is complete …","","","","","","","","","","","","","","","","","Unknown global key-value pairs.","Unknown key-value pairs for this input.","Unknown key-value pairs for this output.","Unknown global key-value pairs.","The unsigned transaction, scriptSigs and witnesses for …","The unsigned transaction, scriptSigs and witnesses for …","The version number of this PSBT. If omitted, the version …","The version number of this PSBT. If omitted, the version …","The witness script for this input.","The witness script for this output.","The transaction output this input spends from. Should only …","A global map from extended public keys to the used key …","A global map from extended public keys to the used key …","Actual","Expected","Hash value","Hash-type","Pre-image","A PSBT key in its raw byte form.","A PSBT key-value pair in its raw byte form.","Proprietary keys (i.e. keys starting with 0xFC byte) with …","Default implementation for proprietary key subtyping","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs ProprietaryKey from Key; returns …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key itself in raw byte form.","The key of this key-value pair.","Additional key bytes (like serialized public key data etc)","","","Proprietary type prefix used for grouping together keys …","Custom proprietary subtype","Constructs full Key corresponding to this proprietary key …","","","","","","","Constructs a <code>ProprietaryKey</code> from a <code>Key</code>.","","","","","","","The type of this PSBT key.","The value of this key-value pair in raw byte form.","A trait for deserializing a value from raw data in PSBT …","A trait for serializing a value as raw data for insertion …","Deserialize a value from raw data.","Serialize a value as raw data.","Invalid schnorr signature size","Base58 encoding error","Deprecated re-export of <code>secp256k1::KeyPair</code>","A BIP340-341 serialized schnorr signature with the …","A schnorr sig related error.","Signature has valid size but does not parse correctly","A trait for tweaking BIP340 key types (x-only public keys …","Tweaked key type with optional auxiliary information","Tweaked key type","Tweaked BIP-340 key pair","Tweaked BIP-340 X-coord-only public key","Untweaked BIP-340 key pair","Untweaked BIP-340 X-coord-only public key","Deprecated re-export of <code>secp256k1::XOnlyPublicKey</code>","","","","","","","","","","","","","","","","","","","","","Directly converts an <code>UntweakedPublicKey</code> to a …","","","Creates a new <code>TweakedPublicKey</code> from a <code>XOnlyPublicKey</code>. No …","Creates a new <code>TweakedKeyPair</code> from a <code>KeyPair</code>. No tweak is …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Deserialize from slice","","","","","The corresponding hash type","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying key pair","","","","","Serialize the key as a byte-encoded pair of values. In …","","The underlying schnorr signature","","Tweaks an untweaked key with corresponding public key …","Tweaks an untweaked public key with corresponding public …","Tweaks private and public keys within an untweaked <code>KeyPair</code> …","Outputs the hash in hexadecimal form.","Returns the underlying public key.","Returns the underlying key pair.","","","","","","","Serialize SchnorrSig","","","","","","","","","","","","","When <code>SIGHASH_ANYONECANPAY</code> is not provided, or when the …","0x1: Sign all outputs.","0x81: Sign all outputs but only this input.","The <code>Annex</code> struct is a slice wrapper enforcing first byte …","0x0: Used when not explicitly specified, defaults to …","","Possible errors in computing the signature message.","Requested index is greater or equal than the number of …","Invalid Sighash type.","Could happen only by using <code>*_encode_signing_*</code> methods with …","0x2: Sign no outputs — anyone can choose the destination.","0x82: Sign no outputs and only this input.","<code>One</code> variant allows provision of the single prevout needed. …","Requested a prevout index which is greater than the number …","A single prevout has been provided but all prevouts are …","Contains outputs of previous transactions. In the case …","There are mismatches in the number of prevouts provided …","Hashtype of an input’s signature, encoded in the last …","Information related to the script path spending.","Efficiently calculates signature hash message for legacy, …","","0x3: Sign the output whose index matches this input’s …","0x83: Sign one output and only this input (see <code>Single</code> for …","Using <code>SIGHASH_SINGLE</code> without a “corresponding output” …","Annex must be at least one byte long and the first bytes …","Returns the Annex bytes data (including first byte <code>0x50</code>).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>SchnorrSighashType</code> from a raw <code>u8</code>.","","Creates a <code>SchnorrSighashType</code> from raw <code>u8</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the leaf hash for this <code>ScriptPath</code>.","Encodes the legacy signing data for any flag type into a …","Computes the legacy sighash for any <code>sighash_type</code>.","Constructs a new <code>SighashCache</code> from an unsigned transaction.","Creates a new <code>ScriptPath</code> structure.","Creates a new <code>Annex</code> struct checking the first byte is <code>0x50</code>.","","","","","Encodes the BIP143 signing data for any flag type into a …","Computes the BIP143 sighash for any flag type.","","Encodes the BIP341 signing data for any flag type into a …","Computes the BIP341 sighash for a key spend.","Computes the BIP341 sighash for a script spend.","Computes the BIP341 sighash for any flag type.","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>ScriptPath</code> structure using default leaf …","When the <code>SighashCache</code> is initialized with a mutable …","Requested index.","Requested index.","Number of transaction inputs.","Number of transaction outputs.","Control block data structure used in Tapscript …","Called finalize on a empty tree.","Empty tap tree.","Future leaf version.","Inner type representing future (non-tapscript) leaf …","Invalid control block size.","Invalid taproot internal key.","Invalid taproot internal key.","Proof size must be a multiple of 32.","Merkle tree depth must not be more than 128.","Merkle tree depth must not be more than 128.","Invalid parity for internal key.","The last bit of tapleaf version must be zero.","The leaf version for tapleafs.","Represents the node information in taproot tree.","Nodes must be added specified in DFS walk order.","Two nodes at depth 0 are not allowed.","Store information about taproot leaf node.","Taproot annex prefix.","Tapscript control base size.","Maximum depth of a taproot tree script spend path.","Tapscript control max size.","Size of a taproot control node.","Tapleaf mask for getting the leaf version from first byte …","Tapscript leaf version.","Taproot-tagged hash for tapscript Merkle tree branches","The tag used for  TapBranchHash ","Taproot-tagged hash for tapscript Merkle tree leafs","The tag used for  TapLeafHash ","BIP-342 tapscript.","Taproot-tagged hash for the taproot signature hash","The tag used for  TapSighashHash ","Taproot-tagged hash for public key tweaks","The tag used for  TapTweakHash ","Builder for building taproot iteratively. Users can …","Detailed error type for taproot builder.","Detailed error type for taproot utilities.","The merkle proof for inclusion of a tree in a taptree hash.","Represents taproot spending information.","Adds a hidden/omitted node at <code>depth</code> to the builder. Errors …","Adds a leaf script at <code>depth</code> to the builder with default …","Adds a leaf script at <code>depth</code> to the builder with script …","","","","","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","Converts this type into the inner hash type.","","","","","Returns a reference to the inner vector of hashes.","","","","","Returns the internal script map.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines two <code>NodeInfo</code> to create a new parent.","","","Constructs a <code>ControlBlock</code> for particular script with the …","","","","","","","Returns the depth of this script leaf in the tap tree.","","","","","","","","Serializes to a writer.","Serializes to a writer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>TaprootSpendInfo</code> with the given internal key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Creates a <code>LeafVersion</code> from consensus byte representation.","","","","","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","Creates this type from the inner hash type.","","","","","Creates a merkle proof from list of hashes.","Creates a new BIP341 <code>TapTweakHash</code> from key and tweak. …","Computes branch hash given two hashes of the nodes …","Computes the <code>TaprootSpendInfo</code> from <code>internal_key</code> and <code>node</code>.","Computes the leaf hash from components.","","","","","Creates a merkle proof from raw data representing a list …","Constructs a <code>ControlBlock</code> from slice. This is an extra …","","","","","Checks if the builder has hidden nodes.","","","","","","","","","","","","","","","","","","","","","","","Returns the internal key for this <code>TaprootSpendInfo</code>.","The internal key.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns the inner list of hashes.","Checks if the builder has finalized building a tree.","Computes a leaf hash for this <code>ScriptLeaf</code>.","Returns leaf version of the script.","The tapleaf version.","Returns reference to the merkle proof (hashing partners) …","The merkle proof of a script associated with this leaf.","Returns the merkle root for this <code>TaprootSpendInfo</code>.","Creates a new instance of <code>TaprootBuilder</code>.","Creates a new <code>NodeInfo</code> with omitted/hidden info.","Creates a new key spend with <code>internal_key</code> and <code>merkle_root</code>. …","Creates a new leaf <code>NodeInfo</code> with given <code>Script</code> and …","Returns the output key (the key used in script pubkey) for …","Returns the parity of the output key. See also …","The parity of the output key (NOT THE INTERNAL KEY WHICH …","","","","","","","","","","","","","","","","","","","Returns reference to the leaf script.","","","Serializes <code>self</code> as bytes.","Serializes the control block.","","Returns the size of control block. Faster and more …","","","Returns the <code>TapTweakHash</code> for this <code>TaprootSpendInfo</code> i.e., …","Returns the consensus representation of this …","Returns the consensus representation of this <code>LeafVersion</code>.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","Outputs the hash in hexadecimal form.","","","","","","","","","","","","","","","","","","","Converts a <code>TapTweakHash</code> into a <code>Scalar</code> ready for use with …","","","","","","","","","","","","","","","","","","","","","Creates a merkle proof from list of hashes.","Creates a merkle proof from list of hashes.","","Creates a merkle proof from list of hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that a control block is correct proof for a given …","Creates a new <code>TaprootSpendInfo</code> from a list of scripts …","Creates a new <code>TaprootSpendInfo</code> from a list of scripts …","","","","","Invalid slice length.","Little-endian large integer type","Little-endian large integer type","The length of the slice de-facto","","","Returns the underlying bytes.","Returns the underlying bytes.","Converts the object to a mutable raw pointer","Converts the object to a mutable raw pointer","Converts the object to a raw pointer","Converts the object to a raw pointer","","","","","","","","","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The required length of the slice","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates big integer value from a byte array using …","Creates big integer value from a byte array using …","Creates big integer value from a byte slice using …","Creates big integer value from a byte slice using …","Create an object from a given signed 64-bit integer","Create an object from a given signed 64-bit integer","Create an object from a given unsigned 64-bit integer","Create an object from a given unsigned 64-bit integer","","","","Increment by 1","Increment by 1","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying bytes.","Returns the underlying bytes.","Returns whether the object, as an array, is empty. Always …","Returns whether the object, as an array, is empty. Always …","Returns the length of the object as an array","Returns the length of the object as an array","Decay to a uint128","Conversion to u32","Conversion to u32","Conversion to u64","Conversion to u64","","","","","Multiplication by u32","Multiplication by u32","","","","","","","","","","","","","","","","","Convert a big integer into a byte array using big-endian …","Convert a big integer into a byte array using big-endian …","Returns the underlying bytes.","Returns the underlying bytes.","","","","","","","","","","","","","","","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[2,[-1]],3],[[7,[[5,[1,4]],6]]],8],[[9,[2,[-1]],3],[[7,[9,6]]],8],[1],[1],[9,10],[1,11],[9,10],[1,11],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[1,1],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[9,9],12],[[1,1],12],0,[[[14,[13]]],[[7,[1,15]]]],[9,16],0,[[9,9],17],[[1,1],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,[[9,18],[[7,[5,19]]]],[[1,18],[[7,[5,19]]]],[[1,18],[[7,[5,19]]]],[[1,18],[[7,[5,19]]]],[20,9],[-1,-1,[]],[21,1],[22,1],[11,1],[-1,-1,[]],[9,[[5,[1,4]]]],[[[2,[-1]],[14,[13]]],[[7,[9,6]]],23],[[[2,[-1]],24],[[7,[9,6]]],23],[[[2,[-1]],25],9,23],[[[14,[13]]],[[7,[1,6]]]],[24,[[7,[9]]]],[24,[[7,[1,6]]]],[[9,-1],5,26],[[1,-1],5,26],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[9,9],[[27,[12]]]],[[1,1],[[27,[12]]]],0,0,[9,22],[[1,4],22],0,0,[9,[[28,[13]]]],[9,25],[1,[[28,[13]]]],[1,[[29,[13]]]],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[[9,[2,[-1]],3],[[7,[5,6]]],8],[[1,[2,[-1]],3],[[7,[4,6]]],8],[[1,[2,[-1]],1,4,3],17,8],[-1,31,[]],[-1,31,[]],0,[9,[[5,[1,4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[32,[[7,[33,34]]]],0,[35,36],[32,36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,17],[32,17],[35,35],[32,32],[34,34],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[35,35],12],[32,[[27,[37]]]],[38,39],[32,[[27,[40]]]],[[41,[14,[13]]],42],[-1,[[7,[35,15]]],[43,44]],[-1,[[7,[32,15]]],[43,44]],[-1,[[7,[35,15]]],[43,44]],[-1,[[7,[32,15]]],[43,44]],[[35,-1],[[7,[45,46]]],[47,44]],[[32,-1],[[7,[45,46]]],[47,44]],[[35,48],33],[[35,35],17],[[32,32],17],[[34,34],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[35,18],49],[[32,18],49],[[34,18],49],[[34,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,45],[32,45],[32,45],[[35,-1],5,26],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,[[27,[40]]]],0,0,[[35,35],[[27,[12]]]],0,[32,45],[34,[[27,[50]]]],[32,45],[35,38],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],[39,38],[[35,38],[[7,[36,51]]]],0,[32,45],[32,[[27,[41]]]],[35,38],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[52,[[28,[13]]]],[52,13],[52,13],[-1,-2,[],[]],[-1,-2,[],[]],[52,52],[[-1,-2],5,[],[]],[[52,52],12],[[52,52],17],[[-1,-2],17,[],[]],[[52,18],49],[[52,18],49],[[52,18],49],[-1,-1,[]],[[[14,[13]]],52],[-1,[[7,[52,53]]],[54,55,56]],[24,[[7,[52]]]],[48,32],[[52,-1],5,26],[[52,-1],[],[]],[-1,-2,[],[]],[52,[[28,[13]]]],[52,17],[52,45],[48,33],[48,38],[[52,52],[[27,[12]]]],[52,[[28,[13]]]],[-1,30,[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[48,52],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[57,57],12],[[59,59],12],[[60,60],12],[[63,63],12],[-1,[[7,[57,15]]],[43,44]],[-1,[[7,[58,15]]],[43,44]],[[57,-1],[[7,[45,46]]],[47,44]],[[58,-1],[[7,[45,46]]],[47,44]],[[57,57],17],[[58,58],17],[[59,59],17],[[60,60],17],[[61,61],17],[[62,62],17],[[63,63],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[57,18],49],[[57,18],49],[[57,18],49],[[57,18],49],[[58,18],49],[[58,18],49],[[59,18],49],[[59,18],49],[[60,18],49],[[60,18],49],[[61,18],49],[[61,18],49],[[62,18],49],[[62,18],49],[[63,18],49],[[63,18],49],[58,57],[-1,-1,[]],[58,57],[57,58],[57,58],[60,58],[-1,-1,[]],[59,58],[-1,-1,[]],[-1,-1,[]],[62,61],[63,61],[-1,-1,[]],[64,61],[-1,-1,[]],[-1,-1,[]],[39,58],[39,[[7,[59,61]]]],[39,[[7,[60,61]]]],[39,[[7,[58,61]]]],[24,[[7,[57]]]],[24,[[7,[58]]]],[24,[[7,[59]]]],[24,[[7,[60]]]],[39,[[7,[58,61]]]],[[57,-1],5,26],[[58,-1],5,26],[[59,-1],5,26],[[60,-1],5,26],[[62,-1],5,26],[[63,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,17],[58,17],[[58,58],17],[[58,59,60],17],[[57,57],[[27,[12]]]],[[58,58],[[27,[12]]]],[[59,59],[[27,[12]]]],[[60,60],[[27,[12]]]],[[63,63],[[27,[12]]]],[61,[[27,[50]]]],[58,39],[59,39],[60,39],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[57,39],[24,[[7,[57]]]],[30,[[7,[57]]]],[-1,[[7,[-2]]],[],[]],[[[65,[24]]],[[7,[57]]]],[30,[[7,[58]]]],[24,[[7,[58]]]],[[[65,[24]]],[[7,[58]]]],[-1,[[7,[-2]]],[],[]],[30,[[7,[59]]]],[-1,[[7,[-2]]],[],[]],[24,[[7,[59]]]],[-1,[[7,[-2]]],[],[]],[30,[[7,[60]]]],[24,[[7,[60]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[66,67],68],[66,66],[67,67],[68,68],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[67,67],12],[[66,66],17],[[67,67],17],[[68,68],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[66,18],49],[[66,18],[[7,[5,19]]]],[[67,18],49],[[68,18],[[7,[5,19]]]],[[68,18],49],[-1,-1,[]],[69,66],[13,66],[-1,-1,[]],[-1,-1,[]],[[67,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,13],[[67,67],[[27,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[66,13],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[70,[[14,[13]]]],[70,[[14,[13]]]],[70,30],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[13]]],30],[[[14,[13]],71],49],[-1,[[7,[[29,[72,73]]]]],[]],[70,70],[74,74],[75,75],[76,76],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[70,70],12],[[75,75],12],[-1,[[7,[70,15]]],[43,44]],[[70,-1],[[7,[45,46]]],[47,44]],[[],70],[[],74],[[[14,[13]]],[[7,[70,15]]]],[70,77],[[70,70],17],[[74,74],17],[[75,75],17],[[76,76],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[70,18],49],[[70,18],49],[[70,18],49],[[70,18],49],[[74,18],[[7,[5,19]]]],[[74,18],49],[[75,18],49],[[75,18],49],[[76,18],49],[[70,71],49],[-1,-1,[]],[-1,-1,[]],[[[29,[13]]],70],[-1,-1,[]],[[[29,[13]]],74],[-1,-1,[]],[-1,-1,[]],[-1,[[7,[70,53]]],[54,55,56]],[24,[[7,[70,53]]]],[[70,-1],5,26],[[75,-1],5,26],[[70,-1],[],[]],[[74,-1],[],[]],[70,78],[70,78],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[70,[[29,[13]]]],[-1,-2,[],[]],[74,70],[70,17],[74,17],[70,17],[70,17],[70,17],[70,17],[70,17],[70,17],[70,17],[70,17],[70,17],[70,45],[74,45],[[],70],[[],74],[[[14,[13]]],70],[79,70],[80,70],[81,70],[82,70],[83,70],[82,70],[83,70],[[[2,[-1]],84,[27,[85]]],70,8],[21,70],[[69,[14,[13]]],70],[78,[[27,[[7,[76,75]]]]]],[70,[[27,[70]]]],[[70,70],[[27,[12]]]],[[75,75],[[27,[12]]]],[[74,86],74],[[74,79],74],[[74,66],74],[[74,86],74],[[74,[14,[13]]],74],[74,74],[[74,1],74],[[[14,[13]]],17],[[[14,[13]]],[[7,[86,75]]]],[[[14,[13]],45],[[7,[45,75]]]],[70,81],[70,[[29,[13]]]],[75,[[27,[50]]]],[70,[[29,[13]]]],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[70,70],[-1,30,[]],[-1,30,[]],[-1,30,[]],[70,70],[[70,[2,[-1]],84],70,8],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[70,[[27,[69]]]],[[-1,-2],[[7,[5]]],[],87],[70,83],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[37,37],[94,94],[95,95],[96,96],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[88,88],12],[[90,90],12],[[91,91],12],[[93,93],12],[[37,37],12],[[94,94],12],[-1,[[7,[88,15]]],[43,44]],[-1,[[7,[91,15]]],[43,44]],[-1,[[7,[93,15]]],[43,44]],[-1,[[7,[90,15]]],[43,44]],[-1,[[7,[93,15]]],[43,44]],[-1,[[7,[37,15]]],[43,44]],[[88,-1],[[7,[45,46]]],[47,44]],[[90,-1],[[7,[45,46]]],[47,44]],[[91,-1],[[7,[45,46]]],[47,44]],[[93,-1],[[7,[45,46]]],[47,44]],[[37,-1],[[7,[45,46]]],[47,44]],[[],88],[[],90],[[],91],[[],93],[[[14,[13]]],[[7,[93,15]]]],[[[14,[13]]],[[7,[37,15]]]],[91,17],[90,17],[[37,-1,45,70,-2],[[97,[46]]],47,[[98,[39]]]],[[88,88],17],[[89,89],17],[[90,90],17],[[91,91],17],[[92,92],17],[[93,93],17],[[37,37],17],[[94,94],17],[[95,95],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[88,18],49],[[88,18],49],[[89,18],49],[[89,18],49],[[90,18],49],[[91,18],49],[[91,18],49],[[91,18],49],[[91,18],49],[[92,18],49],[[92,18],49],[[93,18],49],[[37,18],49],[[94,18],49],[[94,18],49],[[95,18],49],[[95,18],49],[[96,18],49],[[96,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[99,91],[39,91],[39,95],[99,91],[39,[[7,[91,92]]]],[39,[[7,[91,92]]]],[39,[[7,[95,94]]]],[24,[[7,[88]]]],[24,[[7,[91]]]],[24,[[7,[95]]]],[39,95],[39,[[7,[95,94]]]],[37,45],[37,45],[37,45],[37,45],[[88,-1],5,26],[[90,-1],5,26],[[91,-1],5,26],[[93,-1],5,26],[[37,-1],5,26],[[94,-1],5,26],[[95,-1],5,26],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,59,60],17],[37,17],[37,17],[91,17],[91,17],[37,17],[88,17],[91,17],[91,17],[[[97,[-1]]],[[7,[17,-1]]],[]],[91,17],0,[[[97,[-1]],-2],[[97,[-3]]],[],100,[]],[[101,39],88],[37,102],[[],88],0,[[88,88],[[27,[12]]]],[[90,90],[[27,[12]]]],[[91,91],[[27,[12]]]],[[93,93],[[27,[12]]]],[[37,37],[[27,[12]]]],[[94,94],[[27,[12]]]],0,0,0,0,[93,[[29,[13]]]],[37,[[29,[13]]]],[[37,45,70,39],103],[37,45],[89,[[27,[50]]]],[92,[[27,[50]]]],[94,[[27,[50]]]],[96,[[27,[50]]]],[37,45],[91,39],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[95,39],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[30,[[7,[91]]]],[[[65,[24]]],[[7,[91]]]],[-1,[[7,[-2]]],[],[]],[24,[[7,[91]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[37,101],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,[37,45],[37,45],0,[37,104],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,5],[105,105],[[-1,-2],5,[],[]],[[105,105],12],[-1,[[7,[105,15]]],[43,44]],[[105,-1],[[7,[45,46]]],[47,44]],[[],105],[[[14,[13]]],[[7,[105,15]]]],[[105,105],17],[[-1,-2],17,[],[]],[[105,18],49],[-1,-1,[]],[-1,-1,[]],[[[29,[[29,[13]]]]],105],[[105,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,17],[105,106],[105,[[27,[[14,[13]]]]]],[105,45],[[],105],[106,27],[[105,105],[[27,[12]]]],[[105,-1],5,[[107,[[14,[13]]]]]],[[105,108,95],5],[105,[[27,[[14,[13]]]]]],[105,[[29,[13]]]],[105,45],[106,[[5,[45,[27,[45]]]]]],[-1,-2,[],[]],[105,[[29,[[29,[13]]]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[109,109],[110,110],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[109,109],12],[-1,[[7,[-2,15]]],[43,44],[]],[-1,[[7,[109,15]]],[43,44]],[-1,[[7,[-2,15]]],[43,44],[]],[-1,[[7,[110,15]]],[43,44]],[[-1,-2],[[7,[45,46]]],[],[47,44]],[[109,-1],[[7,[45,46]]],[47,44]],[[110,-1],[[7,[45,46]]],[47,44]],[[[14,[13]]],[[7,[-1,15]]],111],[[[14,[13]]],[[7,[[5,[-1,45]],15]]],111],[[-1,17],[[7,[5,46]]],[]],[[-1,112],[[7,[5,46]]],[]],[[-1,113],[[7,[5,46]]],[]],[[-1,86],[[7,[5,46]]],[]],[[-1,114],[[7,[5,46]]],[]],[[-1,[14,[13]]],[[7,[5,46]]],[]],[[-1,99],[[7,[5,46]]],[]],[[-1,39],[[7,[5,46]]],[]],[[-1,33],[[7,[5,46]]],[]],[[-1,13],[[7,[5,46]]],[]],[[109,109],17],[[110,110],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[15,18],49],[[15,18],49],[[109,18],49],[[110,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[109,45],[[109,109],[[27,[12]]]],[-1,[[7,[17,15]]],[]],[-1,[[7,[112,15]]],[]],[-1,[[7,[113,15]]],[]],[-1,[[7,[86,15]]],[]],[-1,[[7,[114,15]]],[]],[[-1,[14,[13]]],[[7,[5,15]]],[]],[-1,[[7,[99,15]]],[]],[-1,[[7,[39,15]]],[]],[-1,[[7,[33,15]]],[]],[-1,[[7,[13,15]]],[]],[-1,[[29,[13]]],[115,44]],[-1,30,[115,44]],[15,[[27,[50]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[[-1,-2],5,[],[]],[116,33],[[116,18],49],[-1,-1,[]],[-1,-2,[],[]],0,0,[48,116],0,0,0,0,0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],0,[64,117],[-1,-2,[],[]],[-1,-2,[],[]],[64,64],[[-1,-2],5,[],[]],[[64,64],17],[[-1,-2],17,[],[]],[[64,18],49],[[64,18],49],[-1,-1,[]],[64,24],[-1,-2,[],[]],[64,[[27,[50]]]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],118],[[],119],[[],120],[[],42],[[],41],[[],40],[[],83],[[],82],[[],81],[[],80],[[],103],[[],36],[[],104],[[],101],[118,102],[119,102],[120,121],[42,102],[41,102],[40,102],[83,122],[82,121],[81,121],[80,121],[103,102],[36,102],[104,102],[101,102],[118],[119],[120],[42],[41],[40],[83],[82],[81],[80],[103],[36],[104],[101],[118,[[14,[13]]]],[119,[[14,[13]]]],[120,[[14,[13]]]],[42,[[14,[13]]]],[41,[[14,[13]]]],[40,[[14,[13]]]],[83,[[14,[13]]]],[82,[[14,[13]]]],[81,[[14,[13]]]],[80,[[14,[13]]]],[103,[[14,[13]]]],[36,[[14,[13]]]],[104,[[14,[13]]]],[101,[[14,[13]]]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[118,[[14,[13]]]],[119,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[120,[[14,[13]]]],[42,[[14,[13]]]],[-1,-2,[],[]],[41,[[14,[13]]]],[-1,-2,[],[]],[40,[[14,[13]]]],[-1,-2,[],[]],[83,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[82,[[14,[13]]]],[81,[[14,[13]]]],[-1,-2,[],[]],[80,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[103,[[14,[13]]]],[-1,-2,[],[]],[36,[[14,[13]]]],[104,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[101,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[118,118],[119,119],[120,120],[42,42],[41,41],[40,40],[83,83],[82,82],[81,81],[80,80],[103,103],[36,36],[104,104],[101,101],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[118,118],12],[[119,119],12],[[120,120],12],[[42,42],12],[[41,41],12],[[40,40],12],[[83,83],12],[[82,82],12],[[81,81],12],[[80,80],12],[[103,103],12],[[36,36],12],[[104,104],12],[[101,101],12],[-1,[[7,[118,15]]],[43,44]],[-1,[[7,[119,15]]],[43,44]],[-1,[[7,[41,15]]],[43,44]],[-1,[[7,[40,15]]],[43,44]],[-1,[[7,[103,15]]],[43,44]],[-1,[[7,[36,15]]],[43,44]],[-1,[[7,[104,15]]],[43,44]],[-1,[[7,[101,15]]],[43,44]],[[118,-1],[[7,[45,46]]],[47,44]],[[119,-1],[[7,[45,46]]],[47,44]],[[41,-1],[[7,[45,46]]],[47,44]],[[40,-1],[[7,[45,46]]],[47,44]],[[103,-1],[[7,[45,46]]],[47,44]],[[36,-1],[[7,[45,46]]],[47,44]],[[104,-1],[[7,[45,46]]],[47,44]],[[101,-1],[[7,[45,46]]],[47,44]],[118],[119],[120],[42],[41],[40],[83],[82],[81],[80],[103],[36],[104],[101],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[118,118],17],[[119,119],17],[[120,120],17],[[42,42],17],[[41,41],17],[[40,40],17],[[83,83],17],[[82,82],17],[[81,81],17],[[80,80],17],[[103,103],17],[[36,36],17],[[104,104],17],[[101,101],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[119,118],118],[[118,18],49],[[118,18],49],[[118,18],49],[[119,18],49],[[119,18],49],[[119,18],49],[[120,18],49],[[120,18],49],[[120,18],49],[[42,18],49],[[42,18],49],[[42,18],49],[[41,18],49],[[41,18],49],[[41,18],49],[[40,18],49],[[40,18],49],[[40,18],49],[[83,18],49],[[83,18],49],[[83,18],49],[[82,18],49],[[82,18],49],[[82,18],49],[[81,18],49],[[81,18],49],[[81,18],49],[[80,18],49],[[80,18],49],[[80,18],49],[[103,18],49],[[103,18],49],[[103,18],49],[[36,18],49],[[36,18],49],[[36,18],49],[[104,18],49],[[104,18],49],[[104,18],49],[[101,18],49],[[101,18],49],[[101,18],49],[102,118],[-1,-1,[]],[-1,-1,[]],[102,119],[121,120],[-1,-1,[]],[102,42],[-1,-1,[]],[-1,-1,[]],[102,41],[102,40],[-1,-1,[]],[-1,-1,[]],[122,83],[121,82],[-1,-1,[]],[-1,-1,[]],[121,81],[-1,-1,[]],[121,80],[102,103],[-1,-1,[]],[102,36],[-1,-1,[]],[102,104],[-1,-1,[]],[-1,-1,[]],[102,101],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[[],118],[[],119],[[],120],[[],42],[[],41],[[],40],[[],83],[[],82],[[],81],[[],80],[[],103],[[],36],[[],104],[[],101],[102,118],[102,119],[121,120],[102,42],[102,41],[102,40],[122,83],[121,82],[121,81],[121,80],[102,103],[102,36],[102,104],[102,101],[[],118],[[],119],[[],120],[[],42],[[],41],[[],40],[[],83],[[],82],[[],81],[[],80],[[],103],[[],36],[[],104],[[],101],[[[14,[13]]],[[7,[118,123]]]],[[[14,[13]]],[[7,[119,123]]]],[[[14,[13]]],[[7,[120,123]]]],[[[14,[13]]],[[7,[42,123]]]],[[[14,[13]]],[[7,[41,123]]]],[[[14,[13]]],[[7,[40,123]]]],[[[14,[13]]],[[7,[83,123]]]],[[[14,[13]]],[[7,[82,123]]]],[[[14,[13]]],[[7,[81,123]]]],[[[14,[13]]],[[7,[80,123]]]],[[[14,[13]]],[[7,[103,123]]]],[[[14,[13]]],[[7,[36,123]]]],[[[14,[13]]],[[7,[104,123]]]],[[[14,[13]]],[[7,[101,123]]]],[24,[[7,[118]]]],[24,[[7,[119]]]],[24,[[7,[120]]]],[24,[[7,[42]]]],[24,[[7,[41]]]],[24,[[7,[40]]]],[24,[[7,[83]]]],[24,[[7,[82]]]],[24,[[7,[81]]]],[24,[[7,[80]]]],[24,[[7,[103]]]],[24,[[7,[36]]]],[24,[[7,[104]]]],[24,[[7,[101]]]],[[118,-1],5,26],[[119,-1],5,26],[[120,-1],5,26],[[42,-1],5,26],[[41,-1],5,26],[[40,-1],5,26],[[83,-1],5,26],[[82,-1],5,26],[[81,-1],5,26],[[80,-1],5,26],[[103,-1],5,26],[[36,-1],5,26],[[104,-1],5,26],[[101,-1],5,26],[[118,-1],[],[[124,[[14,[13]]]]]],[[119,-1],[],[[124,[[14,[13]]]]]],[[120,-1],[],[[124,[[14,[13]]]]]],[[42,-1],[],[[124,[[14,[13]]]]]],[[41,-1],[],[[124,[[14,[13]]]]]],[[40,-1],[],[[124,[[14,[13]]]]]],[[83,-1],[],[[124,[[14,[13]]]]]],[[82,-1],[],[[124,[[14,[13]]]]]],[[81,-1],[],[[124,[[14,[13]]]]]],[[80,-1],[],[[124,[[14,[13]]]]]],[[103,-1],[],[[124,[[14,[13]]]]]],[[36,-1],[],[[124,[[14,[13]]]]]],[[104,-1],[],[[124,[[14,[13]]]]]],[[101,-1],[],[[124,[[14,[13]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[118],[119],[120],[42],[41],[40],[83],[82],[81],[80],[103],[36],[104],[101],[[118,118],[[27,[12]]]],[[119,119],[[27,[12]]]],[[120,120],[[27,[12]]]],[[42,42],[[27,[12]]]],[[41,41],[[27,[12]]]],[[40,40],[[27,[12]]]],[[83,83],[[27,[12]]]],[[82,82],[[27,[12]]]],[[81,81],[[27,[12]]]],[[80,80],[[27,[12]]]],[[103,103],[[27,[12]]]],[[36,36],[[27,[12]]]],[[104,104],[[27,[12]]]],[[101,101],[[27,[12]]]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[125,125],[126,126],[127,127],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,[[7,[125,15]]],[43,44]],[-1,[[7,[126,15]]],[43,44]],[-1,[[7,[127,15]]],[43,44]],[[125,-1],[[7,[45,46]]],[47,44]],[[126,-1],[[7,[45,46]]],[47,44]],[[127,-1],[[7,[45,46]]],[47,44]],[[125,125],17],[[126,126],17],[[127,127],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[125,18],49],[[126,18],49],[[127,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[125,-1],5,26],[[126,-1],5,26],[[127,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[128,129],125],0,0,0,0,[125,[[7,[128,46]]]],[127,[[7,[128,46]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[125,[[7,[46]]]],[127,[[7,[46]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[129,129],129],[129,33],[[129,129],129],[[129,129],5],[[129,129],129],[[129,129],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[129,129],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[48,48],12],[[129,129],12],[-1,[[7,[129,15]]],[43,44]],[[129,-1],[[7,[45,46]]],[47,44]],[[48,48],17],[[129,129],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[48,18],49],[[48,18],49],[[129,18],49],[[129,18],49],[[129,18],49],[[129,18],49],[-1,-1,[]],[-1,-1,[]],[33,129],[39,[[27,[48]]]],[24,[[7,[48]]]],[[129,129],17],[[48,-1],5,26],[[129,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[48,39],[[48,48],[[27,[12]]]],[[129,129],[[27,[12]]]],[[129,129],129],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[129,33],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[130,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,130],[131,131],[132,132],[133,133],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[132,24],[133,24],[132,130],[133,130],[-1,[[7,[130,15]]],[43,44]],[-1,[[7,[132,15]]],[43,44]],[-1,[[7,[132,15]]],[43,44]],[[130,-1],[[7,[45,46]]],[47,44]],[[132,-1],[[7,[45,46]]],[47,44]],[[130,130],17],[[132,132],17],[[133,133],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[130,18],49],[[130,18],49],[[131,18],49],[[131,18],49],[[132,18],49],[[133,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[24,[[7,[130]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[131,[[27,[50]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[24,[[7,[130]]]],[30,[[7,[130]]]],[[[65,[24]]],[[7,[130]]]],[-1,[[7,[130,131]]],[[98,[[134,[24]]]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[24,[[7,[130,131]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[135,135],[136,136],[137,137],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[135,135],12],[-1,[[7,[135,15]]],[43,44]],[-1,[[7,[136,15]]],[43,44]],[-1,[[7,[137,15]]],[43,44]],[-1,[[7,[136,15]]],[43,44]],[-1,[[7,[137,15]]],[43,44]],[[135,-1],[[7,[45,46]]],[47,44]],[[136,-1],[[7,[45,46]]],[47,44]],[[137,-1],[[7,[45,46]]],[47,44]],[[135,135],17],[[136,136],17],[[137,137],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[135,18],49],[[136,18],49],[[137,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[135,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[29,[36]],36],136],[[[29,[36]],36],137],[[135,135],[[27,[12]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[138,138],[139,139],[140,140],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,[[7,[138,15]]],[43,44]],[-1,[[7,[139,15]]],[43,44]],[-1,[[7,[140,15]]],[43,44]],[-1,[[7,[138,15]]],[43,44]],[-1,[[7,[140,15]]],[43,44]],[[138,-1],[[7,[45,46]]],[47,44]],[[139,-1],[[7,[45,46]]],[47,44]],[[140,-1],[[7,[45,46]]],[47,44]],0,[[138,138],17],[[139,139],17],[[140,140],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,0,[[138,18],49],[[139,18],49],[[140,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[141,141],[142,142],[143,143],[144,144],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[141,141],12],[[142,142],12],[[143,143],12],[[144,144],12],0,[-1,[[7,[141,15]]],[43,44]],[-1,[[7,[142,15]]],[43,44]],[-1,[[7,[143,15]]],[43,44]],[-1,[[7,[144,15]]],[43,44]],[-1,[[7,[141,15]]],[43,44]],[-1,[[7,[142,15]]],[43,44]],[-1,[[7,[143,15]]],[43,44]],[-1,[[7,[144,15]]],[43,44]],[[141,-1],[[7,[45,46]]],[47,44]],[[142,-1],[[7,[45,46]]],[47,44]],[[143,-1],[[7,[45,46]]],[47,44]],[[144,-1],[[7,[45,46]]],[47,44]],[[141,141],17],[[142,142],17],[[143,143],17],[[144,144],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[141,18],49],[[142,18],49],[[143,18],49],[[144,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[141,-1],5,26],[[142,-1],5,26],[[143,-1],5,26],[[144,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[141,141],[[27,[12]]]],[[142,142],[[27,[12]]]],[[143,143],[[27,[12]]]],[[144,144],[[27,[12]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,[[7,[145,15]]],[43,44]],[-1,[[7,[146,15]]],[43,44]],[-1,[[7,[147,15]]],[43,44]],[-1,[[7,[148,15]]],[43,44]],[-1,[[7,[149,15]]],[43,44]],[-1,[[7,[150,15]]],[43,44]],[-1,[[7,[145,15]]],[43,44]],[-1,[[7,[146,15]]],[43,44]],[-1,[[7,[147,15]]],[43,44]],[-1,[[7,[148,15]]],[43,44]],[-1,[[7,[149,15]]],[43,44]],[-1,[[7,[150,15]]],[43,44]],[[145,-1],[[7,[45,46]]],[47,44]],[[146,-1],[[7,[45,46]]],[47,44]],[[147,-1],[[7,[45,46]]],[47,44]],[[148,-1],[[7,[45,46]]],[47,44]],[[149,-1],[[7,[45,46]]],[47,44]],[[150,-1],[[7,[45,46]]],[47,44]],[[145,145],17],[[146,146],17],[[147,147],17],[[148,148],17],[[149,149],17],[[150,150],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,0,0,0,0,0,0,0,0,[[145,18],49],[[146,18],49],[[147,18],49],[[148,18],49],[[149,18],49],[[150,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[151,151],[152,152],[153,153],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,[[7,[151,15]]],[43,44]],[-1,[[7,[152,15]]],[43,44]],[-1,[[7,[153,15]]],[43,44]],[-1,[[7,[151,15]]],[43,44]],[-1,[[7,[153,15]]],[43,44]],[[151,-1],[[7,[45,46]]],[47,44]],[[152,-1],[[7,[45,46]]],[47,44]],[[153,-1],[[7,[45,46]]],[47,44]],[[151,151],17],[[152,152],17],[[153,153],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[151,18],49],[[152,18],49],[[153,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[129,86,125,125,33,30,113],151],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,[[86,86],86],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,45],17,[]],[[-1,45,45],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[51,18],49],[[51,18],49],[-1,-1,[]],0,[-1,-2,[],[]],0,[[-1,45],-1,[]],0,0,[[],-1,[]],0,0,0,[51,[[27,[50]]]],0,[-1,30,[]],[-1,45,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],0,[[],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[154,[[27,[155]]]],[156,[[14,[13]]]],0,[69,157],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[158,158],[155,155],[69,69],[156,156],[154,154],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[155,155],12],[[69,69],12],[[156,156],12],[[154,154],12],[[158,158],17],[[155,155],17],[[69,69],17],[[156,156],17],[[154,154],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[159,18],49],[[158,18],49],[[158,18],49],[[155,18],49],[[155,18],49],[[69,18],49],[[69,18],49],[[156,18],49],[[154,18],49],[[154,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[76,[[7,[69,158]]]],[13,[[7,[69,158]]]],[66,[[7,[69,158]]]],[70,[[7,[156,158]]]],[[70,48],[[7,[154,158]]]],[24,[[7,[155]]]],[24,[[7,[69]]]],[24,[[7,[154,158]]]],[72,[[7,[69,158]]]],[[155,-1],5,26],[[69,-1],5,26],[[156,-1],5,26],[[154,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,13],[[154,79],17],[[154,1],17],[154,17],[[154,48],17],0,[79,156],[[79,48],154],0,[70,[[7,[156,158]]]],[[70,48],[[7,[154,158]]]],0,[79,[[7,[156,158]]]],[[79,48],[[7,[154,158]]]],[70,156],[[70,48],154],[[[2,[-1]],84,[27,[85]]],156,8],[[[2,[-1]],84,[27,[85]],48],154,8],[21,156],[[21,48],154],[79,[[7,[156,158]]]],[[79,48],[[7,[154,158]]]],[70,156],[[70,48],154],[[155,155],[[27,[12]]]],[[69,69],[[27,[12]]]],[[156,156],[[27,[12]]]],[[154,154],[[27,[12]]]],0,0,[156,70],[154,70],[158,[[27,[50]]]],[69,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[154,30],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[13,[[7,[69]]]],[66,[[7,[69]]]],[72,[[7,[69]]]],[-1,[[7,[-2]]],[],[]],[76,[[7,[69]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[160,160],[[77,77]],[[160,160]],[[77,77],5],[[160,160],5],[77,161],[160,161],[77,33],[160,86],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[160,[[27,[160]]]],[[77,77],[[27,[77]]]],[[160,160],[[27,[160]]]],[[77,33],[[27,[77]]]],[[160,86],[[27,[160]]]],[[77,33],[[27,[77]]]],[[160,86],[[27,[160]]]],[[77,33],[[27,[77]]]],[[160,86],[[27,[160]]]],[[77,77],[[27,[77]]]],[[160,160],[[27,[160]]]],[-1,[[27,[-2]]],[],[]],[162,162],[163,163],[77,77],[164,164],[160,160],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[77,77],12],[[160,160],12],[[],77],[[],160],[77,164],[160,164],[[77,162],164],[[160,162],164],[[77,33]],[[160,86]],[[77,33],5],[[160,86],5],[[162,162],17],[[163,163],17],[[77,77],17],[[160,160],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[162,18],49],[[162,18],49],[[163,18],49],[[163,18],49],[[77,18],49],[[77,18],49],[[164,18],49],[[164,18],49],[[160,18],49],[[160,18],49],[[77,71,162],49],[[160,71,162],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[161,[[7,[77,163]]]],[161,[[7,[160,163]]]],[[161,162],[[7,[77,163]]]],[[161,162],[[7,[160,163]]]],[33,77],[86,160],[24,[[7,[162]]]],[24,[[7,[77]]]],[24,[[7,[160]]]],[[24,162],[[7,[77,163]]]],[[24,162],[[7,[160,163]]]],[24,[[7,[77,163]]]],[24,[[7,[160,163]]]],[[162,-1],5,26],[[77,-1],5,26],[[160,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[160,17],[160,17],[[],77],[[],160],[[],77],[[],160],[[77,33]],[[160,86]],[[77,33],5],[[160,86],5],[[77,77],[[27,[12]]]],[[160,160],[[27,[12]]]],[[160,160],[[27,[160]]]],[[77,33],77],[[160,86],160],[[77,33],5],[[160,86],5],[164,164],[160,86],[163,[[27,[50]]]],[[77,77]],[[160,160]],[[77,77],5],[[160,160],5],[-1,77,54],[-1,160,54],[77,161],[160,161],[[77,162],161],[[160,162],161],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,33],[160,86],[77,[[7,[160,163]]]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[77,162],30],[[160,162],30],[[77,162],30],[[160,162],30],[160,[[7,[77,163]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[13]]],30],[[18,[14,[13]]],49],[165,165],[[-1,-2],5,[],[]],[[165,165],12],[[[14,[13]]],30],[[165,165],17],[[-1,-2],17,[],[]],[[165,18],49],[[165,18],49],[24,[[7,[[29,[13]],165]]]],[-1,-1,[]],[24,[[7,[[29,[13]],165]]]],[[165,-1],5,26],[-1,-2,[],[]],[[165,165],[[27,[12]]]],[165,[[27,[50]]]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],0,0,[[[166,[-1]],45],105,167],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[168,168],[[-1,-2],5,[],[]],[[[166,[-1]],-2,45,70,33,95],[[7,[5,15]]],169,47],[[168,168],17],[[-1,-2],17,[],[]],[[168,18],49],[-1,-1,[]],[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[166,[-1]]],169],[37,168],[[168,90,70,33],103],[[[166,[-1]],45,70,33,95],103,169],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,[170,[[28,[13]]]],[170,13],[170,13],[171,37],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,33],[[5,[33,33]]]],[172,172],[171,171],[170,170],[173,173],[174,174],[175,175],[176,176],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[172,172],12],[[171,171],12],[[170,170],12],[[173,173],12],[[174,174],12],[[175,175],12],[[176,176],12],[-1,[[7,[171,15]]],[43,44]],[-1,[[7,[170,15]]],[43,44]],[-1,[[7,[173,15]]],[43,44]],[-1,[[7,[174,15]]],[43,44]],[-1,[[7,[176,15]]],[43,44]],[-1,[[7,[173,15]]],[43,44]],[-1,[[7,[176,15]]],[43,44]],[[171,-1],[[7,[45,46]]],[47,44]],[[170,-1],[[7,[45,46]]],[47,44]],[[173,-1],[[7,[45,46]]],[47,44]],[[174,-1],[[7,[45,46]]],[47,44]],[[176,-1],[[7,[45,46]]],[47,44]],[[],170],[[172,172],17],[[171,171],17],[[170,170],17],[[173,173],17],[[174,174],17],[[175,175],17],[[176,176],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[172,18],49],[[172,18],49],[[171,18],49],[[170,18],49],[[170,18],49],[[170,18],49],[[173,18],49],[[174,18],49],[[175,18],49],[[175,18],49],[[176,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[14,[13]]],170],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[32,33,39,[14,[45]]],[[7,[173,172]]]],[-1,[[7,[170,53]]],[54,55,56]],[[174,32],[[7,[176,175]]]],[24,[[7,[170]]]],[[172,-1],5,26],[[171,-1],5,26],[[170,-1],5,26],[[173,-1],5,26],[[174,-1],5,26],[[175,-1],5,26],[[176,-1],5,26],0,0,[[170,-1],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[170,[[28,[13]]]],[170,17],[170,45],0,[[172,172],[[27,[12]]]],[[171,171],[[27,[12]]]],[[170,170],[[27,[12]]]],[[173,173],[[27,[12]]]],[[174,174],[[27,[12]]]],[[175,175],[[27,[12]]]],[[176,176],[[27,[12]]]],0,0,[170,[[28,[13]]]],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[-1,[5,[33,33]]],170,[[107,[[14,[13]]]]]],0,0,0,0,0,0,0,0,0,0,[[177,[14,[13]]],5],[[178,[14,[13]]],5],[[177,-1],[[7,[5,179]]],180],[177,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[181,181],[[-1,-2],5,[],[]],0,[[181,181],17],[[-1,-2],17,[],[]],[[181,118],118],[177,[[7,[45,46]]]],[178,[[7,[45,46]]]],[182,[[7,[45,46]]]],[[179,18],49],[[179,18],[[7,[5,19]]]],[[181,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[46,179],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[183,43,54],[[7,[17,179]]]],[[184,43,54],[[7,[17,179]]]],[[181,36,54],[[7,[17,179]]]],[[183,43,54],[[7,[17,179]]]],[[184,43,54],[[7,[17,179]]]],[[181,36,54],[[7,[17,179]]]],[[47,32],177],[36,183],[[33,33,33,13],184],[[47,33,33,33,13],178],[43,185],[47,182],[[[14,[13]]],181],[[32,-1],[[7,[181,179]]],180],[[185,13],[[7,[33,46]]]],[179,[[27,[50]]]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[182,33,13],[[7,[45,46]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[186,[[28,[13]]]],[187,[[28,[13]]]],[186,13],[187,13],[186,13],[187,13],[188,[[14,[189]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[188,189],188],0,0,[[188,189],190],[[191,[2,[-1]],189],[[7,[191,192]]],23],[[193,[2,[-1]],189],[[7,[193,192]]],8],[[193,189],[[7,[[5,[25,186]],192]]]],[186,186],[187,187],[191,191],[193,193],[189,189],[188,188],[192,192],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[186,186],12],[[187,187],12],[[193,193],12],[[189,189],12],[[188,188],12],[[192,192],12],[[[14,[13]]],[[7,[191,192]]]],[[[14,[13]]],[[7,[193,192]]]],[[],187],[[],188],0,0,[[191,[2,[-1]],-2],[[7,[191,192]]],23,[[107,[[14,[189]]]]]],[[193,[2,[-1]],-2],[[7,[193,192]]],8,[[107,[[14,[189]]]]]],[[[14,[13]]],[[7,[194,15]]]],[191,[[28,[13]]]],[193,[[28,[13]]]],[[186,186],17],[[187,187],17],[[191,191],17],[[193,193],17],[[189,189],17],[[188,188],17],[[192,192],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[188,-1],188,[[107,[[14,[189]]]]]],[[191,[2,[-1]]],187,23],[193,187],[[186,18],49],[[186,18],49],[[186,18],49],[[187,18],49],[[187,18],49],[[187,18],49],[[191,18],49],[[191,18],49],[[193,18],49],[[193,18],49],[[189,18],49],[[189,18],49],[[188,18],49],[[188,18],49],[[192,18],49],[[192,18],49],[-1,-1,[]],[[[14,[13]]],186],[-1,-1,[]],[-1,-1,[]],[[[14,[13]]],187],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[39,189],[[[29,[189]]],188],[-1,-1,[]],[[[14,[189]]],188],[-1,-1,[]],[165,192],[195,192],[6,192],[-1,[[7,[186,53]]],[54,55,56]],[-1,[[7,[187,53]]],[54,55,56]],[39,[[7,[189,192]]]],[-1,188,196],[39,[[7,[189,192]]]],[[[2,[-1]],191],193,23],[[[2,[-1]],191],193,23],[24,[[7,[186]]]],[24,[[7,[187]]]],[24,[[7,[191,192]]]],[24,[[7,[193,192]]]],[24,[[7,[189,192]]]],[24,[[7,[188,192]]]],[188,190],[[186,-1],5,26],[[187,-1],5,26],[[193,-1],5,26],[[189,-1],5,26],[[188,-1],5,26],[[192,-1],5,26],[[191,[2,[-1]]],120,23],[193,120],[189,[[7,[189,192]]]],[[186,-1],[],[]],[[187,-1],[],[]],[[188,-1],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[186,[[28,[13]]]],[187,[[28,[13]]]],[[188,189],188],[-1,[[7,[188,192]]],[]],[-1,[[7,[188,192]]],[]],[-1,-2,[],[]],[188],[186,17],[187,17],[188,17],[189,17],[188,17],[189,17],[186,45],[187,45],[188,45],[[],188],0,0,[[48,[14,[13]]],[[7,[191,192]]]],[190,27],[188,190],0,0,[[186,186],[[27,[12]]]],[[187,187],[[27,[12]]]],[[193,193],[[27,[12]]]],[[189,189],[[27,[12]]]],[[188,188],[[27,[12]]]],[[192,192],[[27,[12]]]],0,0,[194,[[29,[13]]]],[192,[[27,[50]]]],[[188,189],190],[186,[[28,[13]]]],[187,[[28,[13]]]],[-1,30,[]],[-1,30,[]],[[191,[2,[-1]]],9,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[191,197],[193,79],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[193,1],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[198,198],[199,199],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[199,199],12],[[[14,[13]]],[[7,[198,15]]]],[[198,198],17],[[199,199],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[198,18],49],[[198,18],49],[[199,18],49],[[199,18],49],[-1,-1,[]],[6,199],[94,199],[53,199],[-1,-1,[]],[[[14,[13]]],[[7,[198,199]]]],[24,[[7,[198]]]],[[198,-1],5,26],[[199,-1],5,26],0,[-1,-2,[],[]],[-1,-2,[],[]],[[199,199],[[27,[12]]]],[198,[[29,[13]]]],0,[200,198],[199,[[27,[50]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[198,[[29,[13]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,[[27,[-2]]],54,[201,115]],[[[14,[-1]]],[[27,[-1]]],[201,115]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-1]]],202],[195,195],[79,79],[203,203],[197,197],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[195,195],12],[[79,79],12],[[203,203],12],0,0,[[[2,[-1]]],204,202],[[],[[2,[205]]]],[[[14,[13]]],[[7,[79,15]]]],[[[2,[-1]]],5,202],[[[2,[-1]],[2,[-1]]],17,202],[[195,195],17],[[79,79],17],[[203,203],17],[[197,197],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[[2,[-1]],18],[[7,[5,19]]],202],[[195,18],49],[[195,18],49],[[79,18],49],[[79,18],49],[[203,18],49],[[197,18],49],[[197,18],49],[[197,71],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],197],79,23],[204,[[207,[[2,[206]]]]]],[204,[[207,[[2,[208]]]]]],[204,[[207,[[2,[209]]]]]],[[[14,[13]]],[[7,[79,195]]]],[[[14,[13]],48],[[7,[197,195]]]],[24,[[7,[79,195]]]],[24,[[7,[197,195]]]],[24,[[7,[197,195]]]],[[],[[2,[-1]]],202],[[195,-1],5,26],[[79,-1],5,26],[[203,-1],5,26],[[197,210],[[14,[13]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[2,[205]]]],[22,79],[[25,48],197],[22,79],[[25,48],197],[[195,195],[[27,[12]]]],[[79,79],[[27,[12]]]],[[203,203],[[27,[12]]]],[[],45],[[],45],[[],45],[[],45],[[[14,[211]]],[[7,[[2,[-1]],6]]],[202,212]],[[[14,[211]]],[[7,[[2,[206]],6]]]],[[[14,[211]]],[[7,[[2,[208]],6]]]],[[[14,[211]]],[[7,[[2,[209]],6]]]],[79,80],[[197,[2,[-1]]],79,23],[-1,[[7,[79,46]]],43],[[[2,[-1]],213,214],[[7,[22,6]]],8],[[[2,[-1]],213,214],[[7,[22,6]]],8],[[[2,[-1]],213,9],215,23],[[[2,[-1]],213,9,[28,[13]]],215,23],[[[2,[-1]],215,213,1],[[7,[5,6]]],8],0,[[[2,[-1]],[28,[13]]],5,202],[79,[[29,[13]]]],[[[2,[-1]],213,25],200,23],[[[2,[-1]],213,25],200,23],[[[2,[-1]],213,25,45],200,23],[[[2,[-1]],213,25],200,23],[[[2,[-1]],213,25],214,23],[[[2,[-1]],213,25,[28,[13]]],214,23],[[[2,[-1]],213,25,[28,[13]]],200,23],[[[2,[-1]],213,25,45],200,23],[[[2,[-1]],213,25],200,23],[[[2,[-1]],213,25],214,23],[[[2,[-1]],213,9],215,23],[[[2,[-1]],213,9,[28,[13]]],215,23],[[],[[2,[216]]]],[195,[[27,[50]]]],[79,[[29,[13]]]],[197,[[29,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,203],[-1,30,[]],[-1,30,[]],[-1,30,[]],[197,30],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[],[[2,[217]]]],[[[2,[-1]],213,200,22],[[7,[5,6]]],8],[[[2,[-1]],213,200,22],[[7,[5,6]]],8],[[[2,[-1]],215,213,1],[[7,[5,6]]],8],[79,[[27,[82]]]],[[79,-1],[[7,[5,46]]],47],0,0,0,0,0,0,0,[218,[[29,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[219,219],[218,218],[220,220],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,[[7,[218,15]]],[43,44]],[-1,[[7,[220,15]]],[43,44]],[[218,-1],[[7,[45,46]]],[47,44]],[[220,-1],[[7,[45,46]]],[47,44]],[[219,219],17],[[218,218],17],[[220,220],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[218,[29,[101]],[29,[39]]],[[7,[40,219]]]],[[220,[29,[101]],[29,[39]]],[[7,[5,219]]]],[[219,18],49],[[218,18],49],[[220,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[32,[221,[101]]],220],[[32,-1],220,180],[[35,[14,[101]],[221,[101]]],220],[[35,[14,[101]],-1],220,180],[[[14,[101]],[14,[17]]],218],[218,[[29,[40]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[218,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[222,222],[[-1,-2],5,[],[]],0,[[223,223],17],[[222,222],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[223,18],49],[[223,18],49],[[222,18],49],[-1,-1,[]],[-1,-1,[]],[[[14,[13]]],[[7,[222,223]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[222,[2,[-1]],154,102],[[7,[17,223]]],8],[[214,17],222],[[222,[2,[-1]],102],[[7,[79,223]]],8],[[[29,[13]],[14,[13]]],45],[222,[[28,[13]]]],0,[24,102],[223,[[27,[50]]]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[224,224],12],[[226,226],12],[[228,228],12],[[225,225],5],[[227,227],5],[[230,230],[[7,[5,224]]]],[-1,[[7,[225,15]]],[43,44]],[-1,[[7,[227,15]]],[43,44]],[-1,[[7,[230,15]]],[43,44]],[[225,-1],[[7,[45,46]]],[47,44]],[[227,-1],[[7,[45,46]]],[47,44]],[[230,-1],[[7,[45,46]]],[47,44]],[[],225],[[],227],[[[14,[13]]],[[7,[226,15]]]],[[[14,[13]]],[[7,[229,15]]]],[225,[[7,[95,94]]]],[226,[[7,[95,94]]]],[[224,224],17],[[225,225],17],[[226,226],17],[[227,227],17],[[228,228],17],[[229,229],17],[[230,230],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[230,37],0,0,[[224,18],49],[[224,18],49],[[225,18],49],[[226,18],49],[[226,18],49],[[227,18],49],[[228,18],49],[[228,18],49],[[229,18],49],[[230,18],49],[15,224],[-1,-1,[]],[-1,-1,[]],[231,226],[-1,-1,[]],[95,226],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[232,[[7,[229,228]]]],[24,[[7,[226]]]],[39,226],[37,[[7,[230,224]]]],[[224,-1],5,26],[[225,-1],5,26],[[226,-1],5,26],[[227,-1],5,26],[[228,-1],5,26],[[229,-1],5,26],[[230,-1],5,26],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[228,232],[229,232],[230,[[0,[54]]]],[229,233],0,0,0,[[224,224],[[27,[12]]]],[[226,226],[[27,[12]]]],[[228,228],[[27,[12]]]],0,0,0,0,0,0,0,0,0,[225,[[7,[231,234]]]],[226,[[7,[231,234]]]],0,0,[226,[[29,[13]]]],[229,[[29,[13]]]],0,0,[224,[[27,[50]]]],[228,[[27,[50]]]],0,0,0,0,0,0,0,0,0,[229,232],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[226,39],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[232,[[7,[229]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[235,235],[[[236,[-1]]],[[236,[-1]]],[237,[238,[13]],[98,[13]],239]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[235,235],12],[[[236,[-1]],[236,[-1]]],12,[237,[238,[13]],[98,[13]],240]],[-1,[[7,[235,15]]],[43,44]],[-1,[[7,[241,15]]],[43,44]],[-1,[[7,[[236,[-2]],15]]],[43,44],[237,[238,[13]],[98,[13]]]],[[235,-1],[[7,[45,46]]],[47,44]],[[241,-1],[[7,[45,46]]],[47,44]],[[[236,[-1]],-2],[[7,[45,46]]],[237,[238,[13]],[98,[13]]],[47,44]],[[235,235],17],[[241,241],17],[[[236,[-1]],[236,[-1]]],17,[237,[238,[13]],[98,[13]],242]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[235,18],49],[[235,18],49],[[241,18],49],[[[236,[-1]],18],49,[237,[238,[13]],[98,[13]],243]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[235,[[7,[[236,[-1]],224]]],[237,[238,[13]],[98,[13]]]],[[235,-1],5,26],[[[236,[-1]],-2],5,[237,[238,[13]],[98,[13]],244],26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[235,235],[[27,[12]]]],[[[236,[-1]],[236,[-1]]],[[27,[12]]],[237,[238,[13]],[98,[13]],245]],0,0,[[[236,[-1]]],235,[237,[238,[13]],[98,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[235,[[7,[[236,[-1]]]]],[237,[238,[13]],[98,[13]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,[[[14,[13]]],[[7,[-1,15]]],[]],[-1,[[29,[13]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[20,20],[246,246],[247,247],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[21,21],12],[[20,20],12],[[246,246],12],[[247,247],12],[-1,[],[]],[84,21],[248,20],[1,21],[9,20],[[[14,[13]]],[[7,[246,15]]]],[[21,21],17],[[20,20],17],[[246,246],17],[[247,247],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[21,18],49],[[21,18],49],[[21,18],49],[[20,18],49],[[246,18],49],[[247,18],49],[[247,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,247],[[[14,[13]]],[[7,[246,247]]]],[[21,-1],5,26],[[20,-1],5,26],[[246,-1],5,26],[[247,-1],5,26],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,9],[[21,21],[[27,[12]]]],[[20,20],[[27,[12]]]],[[246,246],[[27,[12]]]],[[247,247],[[27,[12]]]],[21,[[28,[13]]]],[246,[[29,[13]]]],0,[247,[[27,[50]]]],[[-1,[2,[-2]],[27,[85]]],[],[],8],[[84,[2,[-1]],[27,[85]]],[[5,[21,4]]],8],[[248,[2,[-1]],[27,[85]]],20,8],[-1,30,[]],[21,1],[20,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[246,[[29,[13]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[249,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[250,[-1]]],[[250,[-1]]],[[251,[93]],239]],[252,252],[231,231],[234,234],[249,249],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[250,[-1]],[250,[-1]]],12,[[251,[93]],240]],[[252,252],12],[[231,231],12],[[234,234],12],[[249,-1],[[7,[45,46]]],[47,44]],[[[250,[-1]],[250,[-1]]],17,[[251,[93]],242]],[[252,252],17],[[231,231],17],[[234,234],17],[[249,249],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[[253,[-1]],18],49,[243,169]],[[[250,[-1]],18],49,[[251,[93]],243]],[[252,18],49],[[231,18],49],[[231,18],49],[[234,18],49],[[234,18],49],[[249,18],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[95,231],[46,234],[-1,-1,[]],[-1,-1,[]],[13,[[7,[231,234]]]],[24,[[7,[231]]]],[13,[[7,[231,234]]]],[[[250,[-1]],-2],5,[[251,[93]],244],26],[[252,-1],5,26],[[231,-1],5,26],[[234,-1],5,26],[[249,-1],5,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[252,254],[[[253,[-1]],-2,45,70,-3],[[97,[234]]],169,47,[[98,[39]]]],[[[253,[-1]],45,70,39],[[7,[103,234]]],169],[-1,[[253,[-1]]],169],[[70,255],252],[[[14,[13]]],[[7,[249,234]]]],[[[250,[-1]],[250,[-1]]],[[27,[12]]],[[251,[93]],245]],[[252,252],[[27,[12]]]],[[231,231],[[27,[12]]]],[[234,234],[[27,[12]]]],[[[253,[-1]],-2,45,70,33,95],[[7,[5,234]]],169,47],[[[253,[-1]],45,70,33,95],[[7,[103,234]]],169],[234,[[27,[50]]]],[[[253,[-1]],-2,45,[250,[-3]],[27,[249]],[27,[[5,[254,39]]]],231],[[7,[5,234]]],169,47,[[251,[93]]]],[[[253,[-1]],45,[250,[-2]],231],[[7,[256,234]]],169,[[251,[93]]]],[[[253,[-1]],45,[250,[-2]],-3,231],[[7,[256,234]]],169,[[251,[93]]],[[98,[254]]]],[[[253,[-1]],45,[250,[-2]],[27,[249]],[27,[[5,[254,39]]]],231],[[7,[256,234]]],169,[[251,[93]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[70,252],[[[253,[-1]],45],[[27,[105]]],167],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[232,13,122],[[7,[232,257]]]],[[232,13,70],[[7,[232,257]]]],[[232,13,70,255],[[7,[232,257]]]],[[],254],[[],85],[[],258],[[],256],[254,[[260,[259]]]],[85,[[260,[261]]]],[258,[[260,[262]]]],[256,[[260,[263]]]],[254],[85],[258],[256],[264,[[14,[122]]]],[254,[[14,[13]]]],[85,[[14,[13]]]],[258,[[14,[13]]]],[256,[[14,[13]]]],[265,[[267,[[5,[70,255]],[266,[264]]]]]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],[254,[[14,[13]]]],[-1,-2,[],[]],[85,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[258,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[256,[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[-1,[[7,[[29,[72,73]]]]],[]],[259,259],[254,254],[261,261],[85,85],[262,262],[258,258],[263,263],[256,256],[265,265],[232,232],[233,233],[268,268],[264,264],[269,269],[270,270],[255,255],[257,257],[271,271],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[259,259],12],[[254,254],12],[[261,261],12],[[85,85],12],[[262,262],12],[[258,258],12],[[263,263],12],[[256,256],12],[[265,265],12],[[232,232],12],[[233,233],12],[[268,268],12],[[264,264],12],[[269,269],12],[[270,270],12],[[255,255],12],[[257,257],12],[[271,271],12],[[233,233],[[7,[233,257]]]],[-1,[[7,[254,15]]],[43,44]],[[254,-1],[[7,[45,46]]],[47,44]],[[265,[5,[70,255]]],[[27,[269]]]],[[],259],[[],261],[[],262],[[],263],[[],232],[[],264],[268,13],[254],[85],[258],[256],[[[14,[13]]],[[7,[254,15]]]],[[[14,[13]]],[[7,[85,15]]]],[[[14,[13]]],[[7,[269,15]]]],[[264,-1],[[272,[45]]],47],[[269,-1],[[272,[45]]],47],[[],273],[[]],[[],273],[[]],[[],273],[[]],[[],273],[[]],[[259,259],17],[[254,254],17],[[261,261],17],[[85,85],17],[[262,262],17],[[258,258],17],[[263,263],17],[[256,256],17],[[265,265],17],[[232,232],17],[[233,233],17],[[268,268],17],[[264,264],17],[[269,269],17],[[270,270],17],[[255,255],17],[[257,257],17],[[271,271],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[232,[2,[-1]],84],[[7,[265,232]]],8],[[254,18],49],[[254,18],49],[[254,18],49],[[85,18],49],[[85,18],49],[[85,18],49],[[258,18],49],[[258,18],49],[[258,18],49],[[256,18],49],[[256,18],49],[[256,18],49],[[265,18],49],[[232,18],49],[[233,18],49],[[268,18],49],[[264,18],49],[[269,18],49],[[270,18],49],[[270,18],49],[[270,18],49],[[270,18],49],[[255,18],49],[[255,18],49],[[255,18],49],[[255,18],49],[[257,18],49],[[257,18],49],[[271,18],49],[[271,18],49],[-1,-1,[]],[252,254],[-1,-1,[]],[[[260,[259]]],254],[-1,-1,[]],[-1,-1,[]],[[[260,[261]]],85],[-1,-1,[]],[[[260,[262]]],258],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[260,[263]]],256],[-1,-1,[]],[229,232],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[-1,[[7,[-2,53]]],[54,55,56],[]],[13,[[7,[255,271]]]],[[],254],[[],85],[[],258],[[],256],[[[260,[259]]],254],[[[260,[261]]],85],[[[260,[262]]],258],[[[260,[263]]],256],[[],254],[[],85],[[],258],[[],256],[[[29,[122]]],[[7,[264,271]]]],[[84,[27,[85]]],258],[[122,122],85],[[[2,[-1]],84,233],265,8],[[70,255],254],[[[14,[13]]],[[7,[254,123]]]],[[[14,[13]]],[[7,[85,123]]]],[[[14,[13]]],[[7,[258,123]]]],[[[14,[13]]],[[7,[256,123]]]],[[[14,[13]]],[[7,[264,271]]]],[[[14,[13]]],[[7,[269,271]]]],[24,[[7,[254]]]],[24,[[7,[85]]]],[24,[[7,[258]]]],[24,[[7,[256]]]],[232,17],[[259,-1],5,26],[[254,-1],5,26],[[261,-1],5,26],[[85,-1],5,26],[[262,-1],5,26],[[258,-1],5,26],[[263,-1],5,26],[[256,-1],5,26],[[265,-1],5,26],[[232,-1],5,26],[[233,-1],5,26],[[268,-1],5,26],[[264,-1],5,26],[[269,-1],5,26],[[270,-1],5,26],[[255,-1],5,26],[[257,-1],5,26],[[271,-1],5,26],[[254,-1],[],[[124,[[14,[13]]]]]],[[85,-1],[],[[124,[[14,[13]]]]]],[[258,-1],[],[[124,[[14,[13]]]]]],[[256,-1],[],[[124,[[14,[13]]]]]],[265,84],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[256,[[28,[13]]]],[254],[85],[258],[256],[264,[[29,[122]]]],[232,17],[268,254],[268,255],0,[268,264],0,[265,[[27,[85]]]],[[],232],[122,233],[[[2,[-1]],84,[27,[85]]],265,8],[[70,255],233],[265,21],[265,4],0,[[259,259],[[27,[12]]]],[[254,254],[[27,[12]]]],[[261,261],[[27,[12]]]],[[85,85],[[27,[12]]]],[[262,262],[[27,[12]]]],[[258,258],[[27,[12]]]],[[263,263],[[27,[12]]]],[[256,256],[[27,[12]]]],[[265,265],[[27,[12]]]],[[232,232],[[27,[12]]]],[[233,233],[[27,[12]]]],[[268,268],[[27,[12]]]],[[264,264],[[27,[12]]]],[[269,269],[[27,[12]]]],[[270,270],[[27,[12]]]],[[255,255],[[27,[12]]]],[[257,257],[[27,[12]]]],[[271,271],[[27,[12]]]],[268,70],[254,[[29,[13]]]],[85,[[29,[13]]]],[264,[[29,[13]]]],[269,[[29,[13]]]],[269,[[29,[13]]]],[269,45],[257,[[27,[50]]]],[271,[[27,[50]]]],[265,258],[270,13],[255,13],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[258,3],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[[[65,[[14,[122]]]]],[[7,[264]]]],[[[29,[122]]],[[7,[264]]]],[-1,[[7,[-2]]],[],[]],[[[14,[122]]],[[7,[264]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[269,[2,[-1]],1,70],17,8],[[[2,[-1]],84,-2],[[7,[265,257]]],8,196],[-1,[[7,[232,257]]],196],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],[[-1,-2],[[7,[5]]],[],87],0,0,0,0,[[38,38],38],[[274,274],274],[38,[[28,[33]]]],[274,[[28,[33]]]],[38,33],[274,33],[38,33],[274,33],[[38,45],17],[[274,45],17],[[38,45,45],38],[[274,45,45],274],[[38,38],38],[[274,274],274],[[38,38],38],[[274,274],274],[38,45],[274,45],[[38,38],38],[[274,274],274],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,38],[274,274],[275,275],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[38,38],12],[[274,274],12],[[275,275],12],[-1,[[7,[38,15]]],[43,44]],[-1,[[7,[274,15]]],[43,44]],[[38,-1],[[7,[45,46]]],[47,44]],[[274,-1],[[7,[45,46]]],[47,44]],[[],38],[[],274],[[38,38],38],[[274,274],274],[[38,38],17],[[274,274],17],[[275,275],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,[[38,18],[[7,[5,19]]]],[[38,18],49],[[274,18],49],[[274,18],[[7,[5,19]]]],[[275,18],49],[[275,18],49],[-1,-1,[]],[[[14,[33]]],38],[-1,-1,[]],[[[14,[33]]],274],[-1,-1,[]],[[[28,[13]]],38],[[[28,[13]]],274],[[[14,[13]]],[[7,[38,275]]]],[[[14,[13]]],[[7,[274,275]]]],[86,[[27,[38]]]],[86,[[27,[274]]]],[33,[[27,[38]]]],[33,[[27,[274]]]],[[38,-1],5,26],[[274,-1],5,26],[[275,-1],5,26],[38,5],[274,5],[[38,-1],[],[]],[[274,-1],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,[[28,[33]]]],[274,[[28,[33]]]],[38,17],[274,17],[38,45],[274,45],[38,274],[38,39],[274,39],[38,33],[274,33],[[38,45],38],[[274,45],274],[[38,38],38],[[274,274],274],[[38,39],38],[[274,39],274],[38,38],[274,274],[[],38],[[],274],[[38,38],[[27,[12]]]],[[274,274],[[27,[12]]]],[[275,275],[[27,[12]]]],[[38,38],38],[[274,274],274],[[38,45],38],[[274,45],274],[[38,45],38],[[274,45],274],[275,[[27,[50]]]],[[38,38],38],[[274,274],274],[38,[[28,[13]]]],[274,[[28,[13]]]],[38,[[28,[33]]]],[274,[[28,[33]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[38,45],[274,45],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[],38],[[],274]],"c":[105,106,168,169,170,176,488,868,869,940,1082,1083,1084,1085,1086,1087,2074,2229,2799,2800,2801,2807,2818,2924,2925,2926,2927,3114,3115,3129,3130,3131,3554,3824,3826,3827,3828,3832,3839,3840,3841,3874,3917,3919,4096,4243,4278,4289,4346,4461,4819],"p":[[3,"XOnlyPublicKey",0],[3,"Secp256k1",3719],[3,"Scalar",5163],[4,"Parity",5164],[15,"tuple"],[4,"Error",5165],[4,"Result",5166],[8,"Verification",5167],[3,"KeyPair",0],[3,"KeyPair",5168],[3,"XOnlyPublicKey",5168],[4,"Ordering",5169],[15,"u8"],[15,"slice"],[4,"Error",1264],[3,"DisplaySecret",5170],[15,"bool"],[3,"Formatter",5171],[3,"Error",5171],[3,"TweakedKeyPair",4276],[3,"TweakedPublicKey",4276],[3,"PublicKey",5164],[8,"Signing",5167],[15,"str"],[3,"SecretKey",5164],[8,"Hasher",5172],[4,"Option",5173],[15,"array"],[3,"Vec",5174],[3,"String",5175],[3,"TypeId",5176],[3,"Block",119],[15,"u64"],[4,"Bip34Error",119],[3,"BlockHeader",119],[3,"BlockHash",1403],[3,"Transaction",920],[3,"Uint256",5024],[15,"u32"],[3,"TxMerkleNode",1403],[3,"WitnessMerkleNode",1403],[3,"WitnessCommitment",1403],[8,"Read",5177],[8,"Sized",5178],[15,"usize"],[3,"Error",5179],[8,"Write",5177],[4,"Network",2059],[6,"Result",5171],[8,"Error",5180],[4,"Error",2660],[3,"ChainHash",206],[4,"Error",5181],[8,"Iterator",5182],[8,"ExactSizeIterator",5183],[8,"DoubleEndedIterator",5184],[3,"PackedLockTime",257],[4,"LockTime",257],[3,"Height",257],[3,"Time",257],[4,"Error",257],[3,"ConversionError",257],[4,"OperationError",257],[3,"ParseIntError",1384],[3,"Box",5185],[3,"All",437],[4,"ClassifyContext",437],[4,"Class",437],[4,"WitnessVersion",2699],[3,"Script",761],[8,"Write",5171],[3,"u5",5186],[3,"Global",5187],[3,"Builder",761],[4,"Error",761],[4,"Instruction",761],[3,"Amount",2889],[3,"Instructions",761],[3,"PublicKey",3719],[3,"PubkeyHash",1403],[3,"ScriptHash",1403],[3,"WPubkeyHash",1403],[3,"WScriptHash",1403],[6,"UntweakedPublicKey",4276],[3,"TapBranchHash",4521],[15,"i64"],[8,"WriteBase32",5186],[3,"OutPoint",920],[4,"ParseOutPointError",920],[3,"TxIn",920],[3,"Sequence",920],[4,"RelativeLockTimeError",920],[3,"TxOut",920],[3,"NonStandardSighashType",920],[4,"EcdsaSighashType",920],[3,"SighashTypeParseError",920],[4,"EncodeSigningDataResult",920],[8,"Into",5188],[15,"u16"],[8,"FnOnce",5189],[3,"Txid",1403],[3,"Hash",5190],[3,"Sighash",1403],[3,"Wtxid",1403],[3,"Witness",1209],[3,"Iter",1209],[8,"AsRef",5188],[3,"SerializedSignature",5191],[3,"VarInt",1264],[3,"CheckedData",1264],[8,"Decodable",1264],[15,"i16"],[15,"i32"],[15,"i8"],[8,"Encodable",1264],[3,"Params",1358],[3,"ParseIntError",5192],[3,"FilterHeader",1403],[3,"FilterHash",1403],[3,"XpubIdentifier",1403],[3,"Hash",5193],[3,"Hash",5194],[4,"Error",5195],[8,"SliceIndex",5196],[3,"Address",1989],[4,"AddrV2",1989],[3,"AddrV2Message",1989],[4,"SocketAddr",5197],[3,"ServiceFlags",2059],[3,"CommandString",2127],[3,"CommandStringError",2127],[3,"RawNetworkMessage",2127],[4,"NetworkMessage",2127],[4,"Cow",5198],[4,"Inventory",2245],[3,"GetBlocksMessage",2245],[3,"GetHeadersMessage",2245],[3,"FilterLoad",2316],[4,"BloomFlags",2316],[3,"FilterAdd",2316],[3,"SendCmpct",2374],[3,"CmpctBlock",2374],[3,"GetBlockTxn",2374],[3,"BlockTxn",2374],[3,"GetCFilters",2459],[3,"CFilter",2459],[3,"GetCFHeaders",2459],[3,"CFHeaders",2459],[3,"GetCFCheckpt",2459],[3,"CFCheckpt",2459],[3,"VersionMessage",2579],[4,"RejectReason",2579],[3,"Reject",2579],[3,"Address",2699],[4,"AddressType",2699],[4,"Payload",2699],[4,"Variant",5186],[4,"Error",2699],[3,"AddressEncoding",2699],[3,"SignedAmount",2889],[15,"f64"],[4,"Denomination",2889],[4,"ParseAmountError",2889],[3,"Display",2889],[4,"Error",3081],[3,"SigHashCache",3114],[8,"DerefMut",5199],[3,"SighashComponents",3114],[8,"Deref",5199],[3,"ShortId",3145],[3,"PrefilledTransaction",3145],[4,"Error",3145],[3,"HeaderAndShortIds",3145],[3,"BlockTransactionsRequest",3145],[3,"TxIndexOutOfRangeError",3145],[3,"BlockTransactions",3145],[3,"BlockFilterWriter",3313],[3,"GCSFilterWriter",3313],[4,"Error",3313],[8,"Fn",5189],[3,"BlockFilter",3313],[3,"BitStreamWriter",3313],[3,"BlockFilterReader",3313],[3,"GCSFilterReader",3313],[3,"BitStreamReader",3313],[3,"ChainCode",3415],[3,"Fingerprint",3415],[3,"DerivationPath",3415],[4,"ChildNumber",3415],[3,"DerivationPathIterator",3415],[3,"ExtendedPrivKey",3415],[4,"Error",3415],[3,"ExtendedPubKey",3415],[6,"KeySource",3415],[4,"Error",3719],[8,"IntoIterator",5200],[3,"PrivateKey",3719],[3,"EcdsaSig",3665],[4,"EcdsaSigError",3665],[3,"Signature",5201],[8,"Hash",5202],[8,"Context",5167],[3,"SortKey",3719],[3,"Context",5168],[4,"All",5203],[3,"AllPreallocated",5167],[3,"ManuallyDrop",5204],[3,"SignOnlyPreallocated",5167],[3,"VerifyOnlyPreallocated",5167],[3,"RangeFull",5205],[3,"AlignedType",5206],[8,"PreallocatedContext",5167],[3,"Message",5165],[3,"RecoverableSignature",5207],[3,"Signature",5208],[4,"SignOnly",5203],[4,"VerifyOnly",5203],[3,"PartialMerkleTree",3879],[4,"MerkleBlockError",3879],[3,"MerkleBlock",3879],[3,"HashSet",5209],[3,"MessageSignature",3941],[4,"MessageSignatureError",3941],[4,"Error",3983],[3,"Input",3983],[3,"PsbtSighashType",3983],[3,"Output",3983],[4,"IncompleteTapTree",3983],[3,"TapTree",3983],[3,"PartiallySignedTransaction",3983],[4,"SchnorrSighashType",4380],[3,"TaprootBuilder",4521],[3,"NodeInfo",4521],[4,"Error",4380],[3,"Key",4208],[3,"ProprietaryKey",4208],[8,"Copy",5178],[8,"From",5188],[8,"Clone",5210],[8,"Ord",5169],[3,"Pair",4208],[8,"PartialEq",5169],[8,"Debug",5171],[8,"Hash",5172],[8,"PartialOrd",5169],[3,"SchnorrSig",4276],[4,"SchnorrSigError",4276],[6,"UntweakedKeyPair",4276],[3,"Annex",4380],[4,"Prevouts",4380],[8,"Borrow",5211],[3,"ScriptPath",4380],[3,"SighashCache",4380],[3,"TapLeafHash",4521],[4,"LeafVersion",4521],[3,"TapSighashHash",4521],[4,"TaprootBuilderError",4521],[3,"TapTweakHash",4521],[3,"TapLeafTag",4521],[3,"Hash",5212],[3,"TapBranchTag",4521],[3,"TapTweakTag",4521],[3,"TapSighashTag",4521],[3,"TaprootMerkleBranch",4521],[3,"TaprootSpendInfo",4521],[3,"BTreeSet",5213],[3,"BTreeMap",5214],[3,"ScriptLeaf",4521],[3,"ControlBlock",4521],[3,"FutureLeafVersion",4521],[4,"TaprootError",4521],[6,"Result",5179],[3,"HashEngine",5194],[3,"Uint128",5024],[3,"ParseLengthError",5024],[6,"SigHashType",920],[8,"WriteExt",1264],[8,"ReadExt",1264],[13,"UnexpectedNetworkMagic",1352],[13,"InvalidChecksum",1352],[13,"OversizedVectorAllocation",1352],[13,"Unknown",2243],[13,"Unknown",2314],[8,"BitArray",2660],[13,"InvalidBech32Variant",2885],[13,"WitnessProgram",2887],[8,"CheckedSum",2889],[8,"IntoDerivationPath",3415],[13,"Normal",3663],[13,"Hardened",3663],[6,"Psbt",3983],[13,"UnexpectedUnsignedTx",4203],[13,"InvalidPreimageHashPair",4203],[8,"Deserialize",4272],[8,"Serialize",4272],[8,"TapTweak",4276],[13,"IndexOutOfInputsBounds",4517],[13,"SingleWithoutCorrespondingOutput",4517]]},\
"bitcoin_hashes":{"doc":"Rust hashes library.","t":"SQSQCIICCSQKKOALAKKKLAOAOAKKKAOAAAAAOAAAKFENLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEIDNNNLLLLLLLLLLLKLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BLOCK_SIZE","Bytes","DISPLAY_BACKWARD","Engine","Error","Hash","HashEngine","Hmac","HmacEngine","LEN","MidState","all_zeros","as_byte_array","borrow_slice_impl","cmp","engine","error","from_byte_array","from_engine","from_slice","hash","hash160","hash_newtype","hex","hex_fmt_impl","hmac","input","midstate","n_bytes_hashed","ripemd160","serde_impl","serde_macros","sha1","sha256","sha256d","sha256t","sha256t_hash_newtype","sha512","sha512_256","siphash24","to_byte_array","fixed_time_eq","Error","InvalidLength","borrow","borrow_mut","clone","cmp","eq","fmt","fmt","from","hash","into","partial_cmp","try_from","try_into","type_id","Hash","all_zeros","as_byte_array","as_ref","as_ref","backward_hex","borrow","borrow","borrow_mut","clone","cmp","engine","eq","fmt","fmt","fmt","fmt","forward_hex","from","from_byte_array","from_engine","from_slice","from_str","hash","index","into","partial_cmp","to_byte_array","try_from","try_into","type_id","Error","FromHex","HexIterator","InvalidChar","InvalidLength","OddLengthString","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","eq","fmt","fmt","from","from","from_byte_iter","from_hex","hash","into","into","into_iter","new","next","next_back","partial_cmp","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","Hmac","HmacEngine","HmacMidState","all_zeros","as_byte_array","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","default","eq","fmt","fmt","fmt","from","from","from","from_byte_array","from_engine","from_inner_engines","from_slice","from_str","hash","index","index","index","index","index","inner","input","into","into","into","midstate","n_bytes_hashed","new","outer","partial_cmp","to_byte_array","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Hash","HashEngine","all_zeros","as_byte_array","as_ref","as_ref","backward_hex","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","default","engine","eq","fmt","fmt","fmt","fmt","forward_hex","from","from","from_byte_array","from_engine","from_slice","from_str","hash","index","input","into","into","midstate","n_bytes_hashed","partial_cmp","to_byte_array","try_from","try_from","try_into","try_into","type_id","type_id","Hash","HashEngine","all_zeros","as_byte_array","as_ref","as_ref","backward_hex","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","default","engine","eq","fmt","fmt","fmt","fmt","forward_hex","from","from","from_byte_array","from_engine","from_slice","from_str","hash","index","input","into","into","midstate","n_bytes_hashed","partial_cmp","to_byte_array","try_from","try_from","try_into","try_into","type_id","type_id","Hash","HashEngine","Midstate","all_zeros","as_byte_array","as_ref","as_ref","as_ref","backward_hex","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","default","default","engine","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_hex","from","from","from","from_byte_array","from_byte_array","from_byte_iter","from_engine","from_midstate","from_slice","from_slice","from_str","from_str","hash","hash","hash_again","index","index","input","into","into","into","midstate","n_bytes_hashed","partial_cmp","partial_cmp","to_byte_array","to_byte_array","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Hash","all_zeros","as_byte_array","as_ref","as_ref","backward_hex","borrow","borrow","borrow_mut","clone","cmp","engine","eq","fmt","fmt","fmt","fmt","forward_hex","from","from_byte_array","from_engine","from_slice","from_str","hash","index","into","partial_cmp","to_byte_array","try_from","try_into","type_id","Hash","Tag","all_zeros","as_byte_array","as_ref","as_ref","backward_hex","borrow","borrow","borrow_mut","clone","cmp","default","engine","engine","eq","fmt","fmt","fmt","fmt","forward_hex","from","from_byte_array","from_engine","from_slice","from_str","hash","index","into","partial_cmp","to_byte_array","try_from","try_into","type_id","Hash","HashEngine","all_zeros","as_byte_array","as_ref","as_ref","backward_hex","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","default","default","engine","eq","fmt","fmt","fmt","fmt","forward_hex","from","from","from_byte_array","from_engine","from_slice","from_str","hash","index","input","into","into","midstate","n_bytes_hashed","partial_cmp","to_byte_array","try_from","try_from","try_into","try_into","type_id","type_id","Hash","HashEngine","all_zeros","as_byte_array","as_ref","as_ref","backward_hex","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","default","engine","eq","fmt","fmt","fmt","fmt","forward_hex","from","from","from_byte_array","from_engine","from_slice","from_str","hash","index","input","into","into","midstate","n_bytes_hashed","partial_cmp","to_byte_array","try_from","try_from","try_into","try_into","type_id","type_id","Hash","HashEngine","State","all_zeros","as_byte_array","as_ref","as_ref","as_u64","backward_hex","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","default","engine","eq","fmt","fmt","fmt","fmt","fmt","fmt","forward_hex","from","from","from","from_byte_array","from_engine","from_engine_to_u64","from_slice","from_str","from_u64","hash","hash_to_u64_with_keys","hash_with_keys","index","input","into","into","into","keys","midstate","n_bytes_hashed","new","partial_cmp","to_byte_array","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_keys"],"q":[[0,"bitcoin_hashes"],[41,"bitcoin_hashes::cmp"],[42,"bitcoin_hashes::error"],[58,"bitcoin_hashes::hash160"],[89,"bitcoin_hashes::hex"],[123,"bitcoin_hashes::hmac"],[177,"bitcoin_hashes::ripemd160"],[221,"bitcoin_hashes::sha1"],[265,"bitcoin_hashes::sha256"],[337,"bitcoin_hashes::sha256d"],[368,"bitcoin_hashes::sha256t"],[402,"bitcoin_hashes::sha512"],[447,"bitcoin_hashes::sha512_256"],[491,"bitcoin_hashes::siphash24"],[554,"core::result"],[555,"core::cmp"],[556,"core::fmt"],[557,"core::fmt"],[558,"core::option"],[559,"core::any"],[560,"core::fmt"],[561,"core::iter::traits::iterator"],[562,"core::iter::traits::exact_size"],[563,"core::iter::traits::double_ended"],[564,"core::clone"],[565,"core::cmp"],[566,"core::hash"],[567,"core::ops::range"]],"d":["Length of the hash’s internal block size, in bytes.","The byte array that represents the hash internally.","Flag indicating whether user-visible serializations of …","A hashing engine which bytes can be serialized into. It is …","","Trait which applies to hashes of all types.","A hashing engine which bytes can be serialized into.","","","Length of the hash, in bytes.","Byte array representing the internal state of the hash …","Returns an all zero hash.","Returns a reference to the underlying byte array.","Adds slicing traits implementations to a given type <code>$ty</code>","Useful comparison functions.","Constructs a new engine.","Crate error type.","Constructs a hash from the underlying byte array.","Produces a hash from the current state of a given engine.","Copies a byte slice into a hash object.","Hashes some bytes.","HASH160 (SHA256 then RIPEMD160) implementation.","Creates a new newtype around a <code>Hash</code> type.","Hex encoding and decoding.","Adds hexadecimal formatting implementation of a trait <code>$imp</code> …","Hash-based Message Authentication Code (HMAC).","Add data to the hash engine.","Outputs the midstate of the hash engine. This function …","Return the number of bytes already …","RIPEMD160 implementation.","Does an “empty” serde implementation for the …","Macros for serde trait implementations, and supporting …","SHA1 implementation.","SHA256 implementation.","SHA256d implementation (double SHA256).","SHA256t implementation (tagged SHA256).","Macro used to define a newtype tagged hash. It creates two …","SHA512 implementation.","SHA512_256 implementation.","SipHash 2-4 implementation.","Returns the underlying byte array.","Compare two slices for equality in fixed time. Panics if …","Crate error type.","Tried to create a fixed-length hash from a slice with the …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Output of the Bitcoin HASH160 hash function. …","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Hex decoding error.","Trait for objects that can be deserialized from hex …","Iterator over a hex-encoded string slice which decodes hex …","Non-hexadecimal character.","Tried to parse fixed-length hash from a string with the …","Purported hex string had odd length.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Produces an object from a byte iterator.","Produces an object from a hex string.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a new <code>HexIterator</code> from a string slice.","","","","","","","","","","","A hash computed from a RFC 2104 HMAC. Parameterized by the …","Pair of underyling hash engines, used for the inner and …","Pair of underlying hash midstates which represent the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","A special constructor giving direct access to the …","","","","","","","","","Midstate of the inner hash engine","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a new keyed HMAC from <code>key</code>.","Midstate of the outer hash engine","","","","","","","","","","","","Output of the RIPEMD160 hash function.","Engine to compute RIPEMD160 hash function.","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Output of the SHA1 hash function.","Engine to compute SHA1 hash function.","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Output of the SHA256 hash function.","Engine to compute SHA256 hash function.","Output of the SHA256 hash function.","","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","","","","","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct a new <code>Midstate</code> from the inner value.","","","Create a new <code>HashEngine</code> from a <code>Midstate</code>.","","Copies a byte slice into the <code>Midstate</code> object.","","","","","Iterate the sha256 algorithm to turn a sha256 hash into a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Unwraps the <code>Midstate</code> and returns the underlying byte array.","","","","","","","","","","Output of the SHA256d hash function.","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Output of the SHA256t hash function.","Trait representing a tag that can be used as a context for …","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","Returns a hash engine that is pre-tagged and is ready to …","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Output of the SHA512 hash function.","Engine to compute SHA512 hash function.","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Output of the SHA512/256 hash function.","Engine to compute SHA512/256 hash function.","","","","","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Output of the SipHash24 hash function.","Engine to compute the SipHash24 hash function.","Internal state of the <code>HashEngine</code>.","","","","","Returns the (little endian) 64-bit integer representation …","Displays hex backwards, regardless of how this type would …","","","","","","","","","","","","","","","","","","","","","Displays hex forwards, regardless of how this type would …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Produces a hash as <code>u64</code> from the current state of a given …","","","Creates a hash from its (little endian) 64-bit integer …","","Hashes the given data directly to u64 with an engine with …","Hashes the given data with an engine with the provided …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves the keys of this engine.","","","Creates a new SipHash24 engine.","","","","","","","","","","","","Creates a new SipHash24 engine with keys."],"i":[56,27,27,27,0,0,0,0,0,27,56,27,27,0,0,27,0,27,27,27,27,0,0,0,0,0,56,56,56,0,0,0,0,0,0,0,0,0,0,0,27,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,21,21,21,25,21,25,21,21,21,21,21,21,25,21,57,57,21,25,21,25,25,25,25,21,25,25,21,25,21,25,21,0,0,0,26,26,58,26,26,29,58,26,29,26,29,26,29,26,26,26,26,58,26,29,26,26,29,26,26,26,26,26,26,26,26,58,29,58,26,29,29,29,29,58,26,26,58,26,29,58,26,29,58,26,29,0,0,39,39,39,39,39,39,39,40,39,40,39,40,39,40,39,39,39,39,39,39,39,39,40,39,39,39,39,39,39,40,39,40,40,40,39,39,39,40,39,40,39,40,0,0,41,41,41,41,41,41,41,42,41,42,41,42,41,42,41,41,41,41,41,41,41,41,42,41,41,41,41,41,41,42,41,42,42,42,41,41,41,42,41,42,41,42,0,0,0,43,43,43,43,44,43,43,43,18,44,44,43,18,44,43,18,44,43,44,18,44,43,43,44,43,43,43,43,44,44,44,44,43,43,18,44,43,44,44,43,18,43,44,43,44,43,44,43,43,44,18,43,18,44,18,18,43,44,43,44,43,18,44,43,18,44,43,18,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,48,48,48,48,48,48,48,49,48,49,48,49,48,48,49,48,48,48,48,48,48,48,48,49,48,48,48,48,48,48,49,48,49,49,49,48,48,48,49,48,49,48,49,0,0,50,50,50,50,50,51,50,50,51,50,51,50,50,51,50,50,50,50,50,50,50,51,50,50,50,50,50,50,50,51,51,50,51,51,50,50,51,50,51,50,51,50,0,0,0,52,52,52,52,52,52,52,52,54,55,52,54,55,52,54,55,52,55,52,52,52,52,52,52,54,55,52,52,54,55,52,52,52,52,52,52,52,52,52,52,55,52,54,55,55,55,55,55,52,52,52,54,55,52,54,55,52,54,55,55],"f":[0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[-1,[],[]],0,0,[[]],0,[[],-1,[]],[[],-1,[]],[[[2,[1]]],[[4,[-1,3]]],[]],[[[2,[1]]],-1,[]],0,0,0,0,0,[[-1,[2,[1]]],5,[]],[-1,[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,[],[]],[[[2,[1]],[2,[1]]],7],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[3,3],8],[[3,3],7],[[3,9],10],[[3,9],10],[-1,-1,[]],[[3,-1],5,11],[-1,-2,[],[]],[[3,3],[[12,[8]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],0,[[],14],[14],[14,[[15,[1]]]],[14,[[2,[1]]]],[14,[[0,[16,17]]]],[-1,-2,[],[]],[14,[[2,[1]]]],[-1,-2,[],[]],[14,14],[[14,14],8],[[]],[[14,14],7],[[14,9],10],[[14,9],10],[[14,9],10],[[14,9],10],[14,[[0,[16,17]]]],[-1,-1,[]],[[],14],[18,14],[[[2,[1]]],[[4,[14,3]]]],[19,[[4,[14]]]],[[14,-1],5,11],[[14,-1],[],[[20,[[2,[1]]]]]],[-1,-2,[],[]],[[14,14],[[12,[8]]]],[14],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[[21,21],8],[[21,21],7],[[21,9],10],[[21,9],10],[-1,-1,[]],[-1,-1,[]],[-1,[[4,[-2,21]]],[22,23,24],[]],[19,[[4,[-1,21]]],[]],[[21,-1],5,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,[[4,[25,21]]]],[25,[[12,[[4,[1,21]]]]]],[25,[[12,[[4,[1,21]]]]]],[[21,21],[[12,[8]]]],[25,[[5,[6,[12,[6]]]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,[[],[[26,[-1]]],27],[[[26,[-1]]],[],27],[-1,-2,[],[]],[[[26,[-1]]],[[2,[1]]],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[26,[-1]]],[28,27]],[[[29,[-1]]],[[29,[-1]]],[28,27]],[[[26,[-1]],[26,[-1]]],8,[30,27]],[[],[[29,[-1]]],27],[[[26,[-1]],[26,[-1]]],7,[31,27]],[[[26,[-1]],9],10,27],[[[26,[-1]],9],10,27],[[[26,[-1]],9],10,27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[26,[-1]]],27],[[[29,[-1]]],[[26,[-1]]],27],[[],[[29,[-1]]],27],[[[2,[1]]],[[4,[[26,[-1]],3]]],27],[19,[[4,[[26,[-1]]]]],[27,32]],[[[26,[-1]],-2],5,[33,27],11],[[[26,[-1]],[34,[6]]],[[2,[1]]],27],[[[26,[-1]],[35,[6]]],[[2,[1]]],27],[[[26,[-1]],[36,[6]]],[[2,[1]]],27],[[[26,[-1]],37],[[2,[1]]],27],[[[26,[-1]],6],1,27],0,[[[29,[-1]],[2,[1]]],5,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1]]],[],27],[[[29,[-1]]],6,27],[[[2,[1]]],[[29,[-1]]],27],0,[[[26,[-1]],[26,[-1]]],[[12,[8]]],[38,27]],[[[26,[-1]]],[],27],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,[[],39],[39],[39,[[2,[1]]]],[39,[[15,[1]]]],[39,[[0,[16,17]]]],[-1,-2,[],[]],[39,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,39],[40,40],[[39,39],8],[[],40],[[]],[[39,39],7],[[39,9],10],[[39,9],10],[[39,9],10],[[39,9],10],[39,[[0,[16,17]]]],[-1,-1,[]],[-1,-1,[]],[[],39],[40,39],[[[2,[1]]],[[4,[39,3]]]],[19,[[4,[39]]]],[[39,-1],5,11],[[39,-1],[],[[20,[[2,[1]]]]]],[[40,[2,[1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[40,[[15,[1]]]],[40,6],[[39,39],[[12,[8]]]],[39],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,[[],41],[41],[41,[[2,[1]]]],[41,[[15,[1]]]],[41,[[0,[16,17]]]],[41,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[42,42],[[41,41],8],[[],42],[[]],[[41,41],7],[[41,9],10],[[41,9],10],[[41,9],10],[[41,9],10],[41,[[0,[16,17]]]],[-1,-1,[]],[-1,-1,[]],[[],41],[42,41],[[[2,[1]]],[[4,[41,3]]]],[19,[[4,[41]]]],[[41,-1],5,11],[[41,-1],[],[[20,[[2,[1]]]]]],[[42,[2,[1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[42,[[15,[1]]]],[42,6],[[41,41],[[12,[8]]]],[41],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,[[],43],[43],[43,[[15,[1]]]],[43,[[2,[1]]]],[44,[[2,[1]]]],[43,[[0,[16,17]]]],[43,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[44,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,43],[18,18],[44,44],[[43,43],8],[[44,44],8],[[],18],[[],44],[[]],[[43,43],7],[[44,44],7],[[43,9],10],[[43,9],10],[[43,9],10],[[43,9],10],[[44,9],10],[[44,9],10],[[44,9],10],[[44,9],10],[43,[[0,[16,17]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],43],[[[15,[1]]],44],[-1,[[4,[44,21]]],[22,23,24]],[18,43],[[44,6],18],[[[2,[1]]],[[4,[43,3]]]],[[[2,[1]]],[[4,[44,3]]]],[19,[[4,[43]]]],[19,[[4,[44]]]],[[43,-1],5,11],[[44,-1],5,11],[43,45],[[43,-1],[],[[20,[[2,[1]]]]]],[[44,-1],[],[[20,[[2,[1]]]]]],[[18,[2,[1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,44],[18,6],[[43,43],[[12,[8]]]],[[44,44],[[12,[8]]]],[43],[44,[[15,[1]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[[],45],[45],[45,[[2,[1]]]],[45,[[15,[1]]]],[45,[[0,[16,17]]]],[45,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[45,45],[[45,45],8],[[]],[[45,45],7],[[45,9],10],[[45,9],10],[[45,9],10],[[45,9],10],[45,[[0,[16,17]]]],[-1,-1,[]],[[],45],[18,45],[[[2,[1]]],[[4,[45,3]]]],[19,[[4,[45]]]],[[45,-1],5,11],[[45,-1],[],[[20,[[2,[1]]]]]],[-1,-2,[],[]],[[45,45],[[12,[8]]]],[45],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],0,0,[[],[[46,[-1]]],47],[[[46,[-1]]],[],47],[[[46,[-1]]],[[15,[1]]],47],[[[46,[-1]]],[[2,[1]]],47],[[[46,[-1]]],[[0,[16,17]]],47],[[[46,[-1]]],[[2,[1]]],47],[-1,-2,[],[]],[-1,-2,[],[]],[[[46,[-1]]],[[46,[-1]]],47],[[[46,[-1]],[46,[-1]]],8,47],[[],[[46,[-1]]],47],[[],18],[[]],[[[46,[-1]],[46,[-1]]],7,47],[[[46,[-1]],9],10,47],[[[46,[-1]],9],10,47],[[[46,[-1]],9],10,47],[[[46,[-1]],9],10,47],[[[46,[-1]]],[[0,[16,17]]],47],[-1,-1,[]],[[],[[46,[-1]]],47],[18,[[46,[-1]]],47],[[[2,[1]]],[[4,[[46,[-1]],3]]],47],[19,[[4,[[46,[-1]]]]],47],[[[46,[-1]],-2],5,47,11],[[[46,[-1]],-2],[],47,[[20,[[2,[1]]]]]],[-1,-2,[],[]],[[[46,[-1]],[46,[-1]]],[[12,[8]]],47],[[[46,[-1]]],[],47],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],0,0,[[],48],[48],[48,[[2,[1]]]],[48,[[15,[1]]]],[48,[[0,[16,17]]]],[-1,-2,[],[]],[48,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[49,49],[[48,48],8],[[],48],[[],49],[[]],[[48,48],7],[[48,9],10],[[48,9],10],[[48,9],10],[[48,9],10],[48,[[0,[16,17]]]],[-1,-1,[]],[-1,-1,[]],[[],48],[49,48],[[[2,[1]]],[[4,[48,3]]]],[19,[[4,[48]]]],[[48,-1],5,11],[[48,-1],[],[[20,[[2,[1]]]]]],[[49,[2,[1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[49,[[15,[1]]]],[49,6],[[48,48],[[12,[8]]]],[48],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,[[],50],[50],[50,[[15,[1]]]],[50,[[2,[1]]]],[50,[[0,[16,17]]]],[-1,-2,[],[]],[50,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[51,51],[50,50],[[50,50],8],[[],51],[[]],[[50,50],7],[[50,9],10],[[50,9],10],[[50,9],10],[[50,9],10],[50,[[0,[16,17]]]],[-1,-1,[]],[-1,-1,[]],[[],50],[51,50],[[[2,[1]]],[[4,[50,3]]]],[19,[[4,[50]]]],[[50,-1],5,11],[[50,-1],[],[[20,[[2,[1]]]]]],[[51,[2,[1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[51,[[15,[1]]]],[51,6],[[50,50],[[12,[8]]]],[50],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,[[],52],[52],[52,[[2,[1]]]],[52,[[15,[1]]]],[52,53],[52,[[0,[16,17]]]],[52,[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52,52],[54,54],[55,55],[[52,52],8],[[],55],[[]],[[52,52],7],[[52,9],10],[[52,9],10],[[52,9],10],[[52,9],10],[[54,9],10],[[55,9],10],[52,[[0,[16,17]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],52],[55,52],[55,53],[[[2,[1]]],[[4,[52,3]]]],[19,[[4,[52]]]],[53,52],[[52,-1],5,11],[[53,53,[2,[1]]],53],[[53,53,[2,[1]]],52],[[52,-1],[],[[20,[[2,[1]]]]]],[[55,[2,[1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,[[5,[53,53]]]],[55,54],[55,6],[[],55],[[52,52],[[12,[8]]]],[52],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[53,53],55]],"c":[],"p":[[15,"u8"],[15,"slice"],[4,"Error",42],[4,"Result",554],[15,"tuple"],[15,"usize"],[15,"bool"],[4,"Ordering",555],[3,"Formatter",556],[6,"Result",556],[8,"Hasher",557],[4,"Option",558],[3,"TypeId",559],[3,"Hash",58],[15,"array"],[8,"LowerHex",556],[8,"UpperHex",556],[3,"HashEngine",265],[15,"str"],[8,"SliceIndex",560],[4,"Error",89],[8,"Iterator",561],[8,"ExactSizeIterator",562],[8,"DoubleEndedIterator",563],[3,"HexIterator",89],[3,"Hmac",123],[8,"Hash",0],[8,"Clone",564],[3,"HmacEngine",123],[8,"Ord",555],[8,"PartialEq",555],[8,"FromStr",565],[8,"Hash",557],[3,"RangeTo",566],[3,"Range",566],[3,"RangeFrom",566],[3,"RangeFull",566],[8,"PartialOrd",555],[3,"Hash",177],[3,"HashEngine",177],[3,"Hash",221],[3,"HashEngine",221],[3,"Hash",265],[3,"Midstate",265],[3,"Hash",337],[3,"Hash",368],[8,"Tag",368],[3,"Hash",402],[3,"HashEngine",402],[3,"Hash",447],[3,"HashEngine",447],[3,"Hash",491],[15,"u64"],[3,"State",491],[3,"HashEngine",491],[8,"HashEngine",0],[8,"FromHex",89],[3,"HmacMidState",123]]},\
"bitcoin_private":{"doc":"Rust Bitcoin Internal","t":"OOAOAOAOCENNLLALLALALLLLLLLIDIDKLKLLLLLLLLLLLLLLLLLLLKQDDIKLLLLLLLLOLLLLLLLLLLLLC","n":["const_assert","debug_from_display","error","fmt_hex_exact","hex","impl_array_newtype","macros","write_err","BufEncoder","Case","Lower","Upper","borrow","borrow_mut","buf_encoder","clone","default","display","eq","exts","fmt","from","hash","into","try_from","try_into","type_id","AsOutBytes","BufEncoder","FixedLenBuf","OutBytes","as_mut_out_bytes","as_mut_out_bytes","as_out_bytes","as_out_bytes","as_str","borrow","borrow","borrow_mut","borrow_mut","clear","from","into","is_full","new","put_byte","put_bytes","put_bytes_min","space_remaining","try_from","try_into","type_id","type_id","uninit","Display","DisplayArray","DisplayByteSlice","DisplayHex","as_hex","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt_hex_exact","from","from","hex_reserve_suggestion","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","DisplayHex"],"q":[[0,"bitcoin_private"],[8,"bitcoin_private::hex"],[27,"bitcoin_private::hex::buf_encoder"],[54,"bitcoin_private::hex::display"],[80,"bitcoin_private::hex::exts"],[81,"core::fmt"],[82,"core::fmt"],[83,"core::result"],[84,"core::any"],[85,"core::iter::traits::collect"],[86,"core::clone"]],"d":["Asserts a boolean expression at compile time.","Implements <code>Debug</code> by calling through to <code>Display</code>.","Error","Format known-length array as hex.","Helpers for encoding bytes as hex strings.","Implements standard array methods for a given wrapper type.","Various macros used by the Rust Bitcoin ecosystem.","Formats error.","","Possible case of hex.","Produce lower-case chars (<code>[0-9a-f]</code>).","Produce upper-case chars (<code>[0-9A-F]</code>).","","","Implements a buffered encoder.","","","Helpers for displaying bytes as hex strings.","","Reexports of extension traits.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Trait for types that can be soundly converted to <code>OutBytes</code>.","Hex-encodes bytes into the provided buffer.","A buffer with compile-time-known length.","A byte buffer that can only be written-into.","Performs the conversion.","","Performs the conversion.","","Returns the written bytes as a hex <code>str</code>.","","","","","Resets the buffer to become empty.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if no more bytes can be written into the …","Creates an empty <code>BufEncoder</code>.","Encodes <code>byte</code> as hex in given <code>case</code> and appends it to the …","Encodes <code>bytes</code> as hex in given <code>case</code> and appends them to the …","Encodes as many <code>bytes</code> as fit into the buffer as hex and …","How many bytes can be written to this buffer.","","","","","Creates an uninitialized buffer.","The type providing <code>fmt::Display</code> implementation.","Displays byte array as hex.","Displays byte slice as hex.","Extension trait for types that can be displayed as hex.","Display <code>Self</code> as a continuous sequence of ASCII hex chars.","","","","","","","","","Format known-length array as hex.","Returns the argument unchanged.","Returns the argument unchanged.","Hints how much bytes to reserve when creating a <code>String</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates the wrapper.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,12,9,12,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,9,10,20,21,0,0,0,21,17,18,17,18,17,17,18,18,0,17,18,21,17,18,18,17,18,17,18,17,18,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[[],1],0,[[1,1],2],0,[[1,3],4],[-1,-1,[]],[[1,-1],5,6],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,[-1,9,[]],[9,9],[-1,9,[]],[9,9],[[[10,[-1]]],11,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],5,12],[-1,-1,[]],[-1,-2,[],[]],[[[10,[-1]]],2,12],[-1,[[10,[-1]]],12],[[[10,[-1]],13,1],5,12],[[[10,[-1]],-2,1],5,12,14],[[[10,[-1]],[15,[13]],1],[[15,[13]]],12],[[[10,[-1]]],16,12],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[[],-1,[]],0,0,0,0,[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,3],4],[[17,3],4],[[[18,[-1,-2]],3],4,[19,14],20],[[[18,[-1,-2]],3],4,[19,14],20],0,[-1,-1,[]],[-1,-1,[]],[-1,16,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[18,[-1,-2]]],[19,14],20],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],0],"c":[],"p":[[4,"Case",8],[15,"bool"],[3,"Formatter",81],[6,"Result",81],[15,"tuple"],[8,"Hasher",82],[4,"Result",83],[3,"TypeId",84],[3,"OutBytes",27],[3,"BufEncoder",27],[15,"str"],[8,"AsOutBytes",27],[15,"u8"],[8,"IntoIterator",85],[15,"slice"],[15,"usize"],[3,"DisplayByteSlice",54],[3,"DisplayArray",54],[8,"Clone",86],[8,"FixedLenBuf",27],[8,"DisplayHex",54]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"block_buffer":{"doc":"Fixed size buffer for block processing of data.","t":"GDIDGDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Block","BlockBuffer","BufferKind","Eager","EagerBuffer","Error","Lazy","LazyBuffer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","digest_blocks","digest_pad","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","generic_array","get_data","get_pos","into","into","into","into","len128_padding_be","len64_padding_be","len64_padding_le","new","pad_with_zeros","remaining","reset","set","set_data","size","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id"],"q":[[0,"block_buffer"],[74,"generic_array"],[75,"typenum::generated::consts"],[76,"typenum::type_operators"],[77,"core::ops::function"],[78,"core::fmt"],[79,"core::fmt"],[80,"core::fmt"],[81,"core::any"]],"d":["Block on which <code>BlockBuffer</code> operates.","Buffer for block processing of data.","Trait for buffer kinds.","Eager block buffer kind, which guarantees that buffer …","Eager block buffer.","Block buffer error.","Lazy block buffer kind, which guarantees that buffer …","Lazy block buffer.","","","","","","","","","","","","","","","","","","","","Digest data in <code>input</code> in blocks of size <code>BlockSize</code> using the …","Compress remaining data after padding it with <code>delim</code>, zeros …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return slice of data stored inside the buffer.","Return current cursor position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pad message with 0x80, zeros and 128-bit message length …","Pad message with 0x80, zeros and 64-bit message length …","Pad message with 0x80, zeros and 64-bit message length …","Create new buffer from slice.","Pad remaining data with zeros and return resulting block.","Return number of remaining bytes in the internal buffer.","Reset buffer by setting cursor position to zero.","Set buffer content and cursor position.","Set <code>data</code> to generated blocks.","Return size of the internal buffer in bytes.","","","","","","","","","","","","","","Create new buffer from slice.","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,4,4,4,3,1,2,3,3,4,1,2,3,4,0,4,4,1,2,3,4,4,4,4,4,4,4,4,4,4,4,1,2,3,4,3,1,2,3,4,1,2,3,4,4,1,2,3,4],"f":[0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[[4,[-1,-2]]],[[4,[-1,-2]]],[[6,[5]],[8,[7]]],9],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[],1],[[],2],[[],[[4,[-1,-2]]],[[6,[5]],[8,[7]]],9],[[[4,[-1,-2]],[11,[5]],-3],10,[[6,[5]],[8,[7]]],9,12],[[[4,[-1,1]],5,[11,[5]],-2],10,[[6,[5]],[8,[7]]],12],[[3,3],13],[[1,14],15],[[2,14],15],[[3,14],[[17,[10,16]]]],[[3,14],15],[[[4,[-1,-2]],14],15,[[6,[5]],[8,[7]],18],[9,18]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[4,[-1,-2]]],[[11,[5]]],[[6,[5]],[8,[7]]],9],[[[4,[-1,-2]]],19,[[6,[5]],[8,[7]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1,1]],20,-2],10,[[6,[5]],[8,[7]]],12],[[[4,[-1,1]],21,-2],10,[[6,[5]],[8,[7]]],12],[[[4,[-1,1]],21,-2],10,[[6,[5]],[8,[7]]],12],[[[11,[5]]],[[4,[-1,-2]]],[[6,[5]],[8,[7]]],9],[[[4,[-1,-2]]],[[22,[-1]]],[[6,[5]],[8,[7]]],9],[[[4,[-1,-2]]],19,[[6,[5]],[8,[7]]],9],[[[4,[-1,-2]]],10,[[6,[5]],[8,[7]]],9],[[[4,[-1,-2]],[22,[-1]],19],10,[[6,[5]],[8,[7]]],9],[[[4,[-1,1]],[11,[5]],-2],10,[[6,[5]],[8,[7]]],12],[[[4,[-1,-2]]],19,[[6,[5]],[8,[7]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[[11,[5]]],[[17,[[4,[-1,-2]],3]]],[[6,[5]],[8,[7]]],9],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]]],"c":[],"p":[[3,"Eager",0],[3,"Lazy",0],[3,"Error",0],[3,"BlockBuffer",0],[15,"u8"],[8,"ArrayLength",74],[6,"U256",75],[8,"IsLess",76],[8,"BufferKind",0],[15,"tuple"],[15,"slice"],[8,"FnMut",77],[15,"bool"],[3,"Formatter",78],[6,"Result",78],[3,"Error",78],[4,"Result",79],[8,"Debug",78],[15,"usize"],[15,"u128"],[15,"u64"],[6,"Block",0],[3,"String",80],[3,"TypeId",81]]},\
"block_padding":{"doc":"Padding and unpadding of messages divided into blocks.","t":"NDGDDDNEIDINSSDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLKLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLL","n":["Ambiguous","AnsiX923","Block","Iso10126","Iso7816","NoPadding","NoPadding","PadType","Padding","Pkcs7","RawPadding","Reversible","TYPE","TYPE","UnpadError","ZeroPadding","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generic_array","into","into","into","into","into","into","into","into","pad","pad","pad","pad","pad","pad","pad","raw_pad","raw_pad","raw_pad","raw_pad","raw_pad","raw_pad","raw_pad","raw_unpad","raw_unpad","raw_unpad","raw_unpad","raw_unpad","raw_unpad","raw_unpad","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpad","unpad","unpad","unpad","unpad","unpad","unpad","unpad_blocks"],"q":[[0,"block_padding"],[138,"core::fmt"],[139,"core::fmt"],[140,"generic_array"],[141,"alloc::string"],[142,"core::any"]],"d":["Ambiguous padding","Pad block with zeros except the last byte which will be …","Block size.","Pad block with arbitrary bytes ending with value equal to …","Pad block with byte sequence <code>\\\\x80 00...00 00</code>.","Don’t pad the data. Useful for key wrapping.","No padding, message must be multiple of block size","Padding types","Trait for padding messages divided into blocks","Pad block with bytes with value equal to the number of …","Trait for padding messages divided into blocks of …","Reversible padding","Padding type","Padding type","Failed unpadding operation error.","Pad block with zeros.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pads <code>block</code> filled with data up to <code>pos</code> (i.e length of a …","","","","","","","Pads <code>block</code> filled with data up to <code>pos</code> (i.e length of a …","","","","","","","Unpad data in the <code>block</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unpad data in the <code>block</code>.","","","","","","","Unpad data in the <code>blocks</code>."],"i":[1,0,0,0,0,0,1,0,0,0,0,1,22,23,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,1,1,2,3,4,5,6,7,8,8,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,23,2,3,4,5,6,7,22,2,3,4,5,6,7,22,2,3,4,5,6,7,1,2,3,4,5,6,7,8,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,23,2,3,4,5,6,7,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[1,1],10],[[-1,-2],10,[],[]],[[1,11],12],[[2,11],12],[[3,11],12],[[4,11],12],[[5,11],12],[[6,11],12],[[7,11],12],[[8,11],[[14,[9,13]]]],[[8,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]],16],9,[]],[[[18,[17,-1]],16],9,[]],[[[18,[17,-1]],16],9,[]],[[[18,[17,-1]],16],9,[]],[[[18,[17,-1]],16],9,[]],[[[18,[17,-1]],16],9,[]],[[[18,[17,-1]],16],9,[]],[[[19,[17]],16],9],[[[19,[17]],16],9],[[[19,[17]],16],9],[[[19,[17]],16],9],[[[19,[17]],16],9],[[[19,[17]],16],9],[[[19,[17]],16],9],[[[19,[17]]],[[14,[[19,[17]],8]]]],[[[19,[17]]],[[14,[[19,[17]],8]]]],[[[19,[17]]],[[14,[[19,[17]],8]]]],[[[19,[17]]],[[14,[[19,[17]],8]]]],[[[19,[17]]],[[14,[[19,[17]],8]]]],[[[19,[17]]],[[14,[[19,[17]],8]]]],[[[19,[17]]],[[14,[[19,[17]],8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[15,[-1]]],[[14,[[19,[17]],8]]],[]],[[[18,[17,-1]]],[[14,[[19,[17]],8]]],[]],[[[18,[17,-1]]],[[14,[[19,[17]],8]]],[]],[[[18,[17,-1]]],[[14,[[19,[17]],8]]],[]],[[[18,[17,-1]]],[[14,[[19,[17]],8]]],[]],[[[18,[17,-1]]],[[14,[[19,[17]],8]]],[]],[[[18,[17,-1]]],[[14,[[19,[17]],8]]],[]],[[[19,[[15,[-1]]]]],[[14,[[19,[17]],8]]],[]]],"c":[],"p":[[4,"PadType",0],[3,"ZeroPadding",0],[3,"Pkcs7",0],[3,"Iso10126",0],[3,"AnsiX923",0],[3,"Iso7816",0],[3,"NoPadding",0],[3,"UnpadError",0],[15,"tuple"],[15,"bool"],[3,"Formatter",138],[6,"Result",138],[3,"Error",138],[4,"Result",139],[6,"Block",0],[15,"usize"],[15,"u8"],[3,"GenericArray",140],[15,"slice"],[3,"String",141],[3,"TypeId",142],[8,"RawPadding",0],[8,"Padding",0]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGIILLLLLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLKLLLLKLLLLLLLKLLLLKLLLLLLLKLLLLKLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLKLLLLLKLLLLKLLLLLKLLLLKLLLLKLLLLKLLLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[270,"core::cmp"],[271,"core::fmt"],[272,"core::fmt"],[273,"core::option"],[274,"std::io::error"],[275,"core::result"],[276,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,27,1,2,27,1,2,27,27,27,27,27,1,2,27,1,2,27,1,2,27,1,2,1,2,1,2,1,2,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,27,28,28,28,28,28,28,27,28,28,27,27,28,28,1,2,27,28,28,1,2,27,28,28,1,2,27,28,28,1,2,28,28,27,27,28,28,1,2,27,28,28,1,2,28,28,27,27,28,28,1,2,27,28,28,1,2,28,28,27,28,28,1,2,27,28,28,1,2,1,2,1,2,1,2,1,2,29,29,27,27,29,29,27,27,29,29,27,27,29,29,27,27,29,29,27,29,29,27,27,29,29,27,29,29,27,27,29,29,27,29,29,27,29,29,27,27,29,29,1,2,27,1,2,27,29,29,1,2,27,1,2,29,29,27,27,29,29,1,2,27,1,2,29,29,27,27,29,29,1,2,27,1,2,29,29,27,29,29,1,2,27,29,29,1,2],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],4],[[2,2],4],[[],1],[[],2],[[1,1],5],[[2,2],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,6],7],[[2,6],7],[-1,-1,[]],[-1,-1,[]],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[11]]],3],[[[9,[12]]],3],[[[9,[13]]],3],[[[9,[14]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[1,-1],3,19],[[2,-1],3,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[4]]]],[[2,2],[[20,[4]]]],[-1,[[21,[8]]],[]],[-1,[[21,[8]]],[]],[[[9,[22]]],8],[[-1,[9,[8]]],[[21,[3]]],[]],[[-1,[9,[8]]],[[21,[3]]],[]],[[[9,[22]],[9,[8]]],3],[[-1,[9,[8]]],[[21,[3]]],[]],[[-1,[9,[8]]],[[21,[3]]],[]],[[[9,[22]],[9,[8]]],3],[-1,[[21,[10]]],[]],[-1,[[21,[10]]],[]],[[[9,[22]]],10],[[-1,[9,[10]]],[[21,[3]]],[]],[[-1,[9,[10]]],[[21,[3]]],[]],[[[9,[22]],[9,[10]]],3],[[-1,[9,[10]]],[[21,[3]]],[]],[[-1,[9,[10]]],[[21,[3]]],[]],[[[9,[22]],[9,[10]]],3],[-1,[[21,[11]]],[]],[-1,[[21,[11]]],[]],[[[9,[22]]],11],[[-1,[9,[11]]],[[21,[3]]],[]],[[-1,[9,[11]]],[[21,[3]]],[]],[[[9,[22]],[9,[11]]],3],[-1,[[21,[12]]],[]],[-1,[[21,[12]]],[]],[[[9,[22]]],12],[[-1,[9,[12]]],[[21,[3]]],[]],[[-1,[9,[12]]],[[21,[3]]],[]],[[[9,[22]],[9,[12]]],3],[-1,[[21,[13]]],[]],[-1,[[21,[13]]],[]],[[[9,[22]]],13],[-1,[[21,[13]]],[]],[-1,[[21,[13]]],[]],[[[9,[22]]],13],[[-1,[9,[13]]],[[21,[3]]],[]],[[-1,[9,[13]]],[[21,[3]]],[]],[[[9,[22]],[9,[13]]],3],[-1,[[21,[14]]],[]],[-1,[[21,[14]]],[]],[[[9,[22]]],14],[-1,[[21,[14]]],[]],[-1,[[21,[14]]],[]],[[[9,[22]]],14],[[-1,[9,[14]]],[[21,[3]]],[]],[[-1,[9,[14]]],[[21,[3]]],[]],[[[9,[22]],[9,[14]]],3],[-1,[[21,[23]]],[]],[-1,[[21,[23]]],[]],[[-1,[9,[23]]],[[21,[3]]],[]],[[-1,[9,[23]]],[[21,[3]]],[]],[[-1,24],[[21,[14]]],[]],[[-1,24],[[21,[14]]],[]],[[[9,[22]],24],14],[[-1,24],[[21,[11]]],[]],[[-1,24],[[21,[11]]],[]],[[[9,[22]],24],11],[[[9,[22]]],15],[-1,[[21,[15]]],[]],[-1,[[21,[15]]],[]],[[[9,[22]]],15],[[[9,[22]]],15],[[[9,[22]],[9,[15]]],3],[[-1,[9,[15]]],[[21,[3]]],[]],[[-1,[9,[15]]],[[21,[3]]],[]],[[[9,[22]],[9,[15]]],3],[[[9,[22]],[9,[15]]],3],[[[9,[22]]],16],[-1,[[21,[16]]],[]],[-1,[[21,[16]]],[]],[[[9,[22]]],16],[[[9,[22]]],16],[[[9,[22]],[9,[16]]],3],[[-1,[9,[16]]],[[21,[3]]],[]],[[-1,[9,[16]]],[[21,[3]]],[]],[[[9,[22]],[9,[16]]],3],[[[9,[22]],[9,[16]]],3],[-1,[[21,[17]]],[]],[-1,[[21,[17]]],[]],[[[9,[22]]],17],[[[9,[22]]],17],[-1,[[21,[17]]],[]],[-1,[[21,[17]]],[]],[[[9,[22]]],17],[[[9,[22]]],17],[[[9,[22]],[9,[17]]],3],[[-1,[9,[17]]],[[21,[3]]],[]],[[-1,[9,[17]]],[[21,[3]]],[]],[[[9,[22]],[9,[17]]],3],[[[9,[22]],[9,[17]]],3],[-1,[[21,[18]]],[]],[-1,[[21,[18]]],[]],[[[9,[22]]],18],[[[9,[22]]],18],[-1,[[21,[18]]],[]],[-1,[[21,[18]]],[]],[[[9,[22]]],18],[[[9,[22]]],18],[[[9,[22]],[9,[18]]],3],[[-1,[9,[18]]],[[21,[3]]],[]],[[-1,[9,[18]]],[[21,[3]]],[]],[[[9,[22]],[9,[18]]],3],[[[9,[22]],[9,[18]]],3],[-1,[[21,[22]]],[]],[-1,[[21,[22]]],[]],[[[9,[22]],24],18],[[-1,24],[[21,[18]]],[]],[[-1,24],[[21,[18]]],[]],[[[9,[22]],24],18],[[[9,[22]],24],18],[[[9,[22]],24],15],[[-1,24],[[21,[15]]],[]],[[-1,24],[[21,[15]]],[]],[[[9,[22]],24],15],[[[9,[22]],24],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[[-1,8],[[21,[3]]],[]],[[-1,8],[[21,[3]]],[]],[[[9,[22]],8],3],[[[9,[8]],[9,[22]]],3],[[-1,10],[[21,[3]]],[]],[[-1,10],[[21,[3]]],[]],[[[9,[22]],10],3],[[[9,[10]],[9,[22]]],3],[[-1,11],[[21,[3]]],[]],[[-1,11],[[21,[3]]],[]],[[[9,[22]],11],3],[[[9,[11]],[9,[22]]],3],[[-1,12],[[21,[3]]],[]],[[-1,12],[[21,[3]]],[]],[[[9,[22]],12],3],[[[9,[12]],[9,[22]]],3],[[-1,13],[[21,[3]]],[]],[[-1,13],[[21,[3]]],[]],[[[9,[22]],13],3],[[-1,13],[[21,[3]]],[]],[[-1,13],[[21,[3]]],[]],[[[9,[22]],13],3],[[[9,[13]],[9,[22]]],3],[[-1,14],[[21,[3]]],[]],[[-1,14],[[21,[3]]],[]],[[[9,[22]],14],3],[[-1,14],[[21,[3]]],[]],[[-1,14],[[21,[3]]],[]],[[[9,[22]],14],3],[[[9,[14]],[9,[22]]],3],[[-1,23],[[21,[3]]],[]],[[-1,23],[[21,[3]]],[]],[[[9,[23]],[9,[22]]],3],[[-1,14,24],[[21,[3]]],[]],[[-1,14,24],[[21,[3]]],[]],[[[9,[22]],14,24],3],[[-1,11,24],[[21,[3]]],[]],[[-1,11,24],[[21,[3]]],[]],[[[9,[22]],11,24],3],[[[9,[22]],15],3],[[-1,15],[[21,[3]]],[]],[[-1,15],[[21,[3]]],[]],[[[9,[22]],15],3],[[[9,[22]],15],3],[[[9,[15]],[9,[22]]],3],[[[9,[15]],[9,[22]]],3],[[[9,[15]],[9,[22]]],3],[[[9,[22]],16],3],[[-1,16],[[21,[3]]],[]],[[-1,16],[[21,[3]]],[]],[[[9,[22]],16],3],[[[9,[22]],16],3],[[[9,[16]],[9,[22]]],3],[[[9,[16]],[9,[22]]],3],[[[9,[16]],[9,[22]]],3],[[-1,17],[[21,[3]]],[]],[[-1,17],[[21,[3]]],[]],[[[9,[22]],17],3],[[[9,[22]],17],3],[[-1,17],[[21,[3]]],[]],[[-1,17],[[21,[3]]],[]],[[[9,[22]],17],3],[[[9,[22]],17],3],[[[9,[17]],[9,[22]]],3],[[[9,[17]],[9,[22]]],3],[[[9,[17]],[9,[22]]],3],[[-1,18],[[21,[3]]],[]],[[-1,18],[[21,[3]]],[]],[[[9,[22]],18],3],[[[9,[22]],18],3],[[-1,18],[[21,[3]]],[]],[[-1,18],[[21,[3]]],[]],[[[9,[22]],18],3],[[[9,[22]],18],3],[[[9,[18]],[9,[22]]],3],[[[9,[18]],[9,[22]]],3],[[[9,[18]],[9,[22]]],3],[[-1,22],[[21,[3]]],[]],[[-1,22],[[21,[3]]],[]],[[[9,[22]],18,24],3],[[-1,18,24],[[21,[3]]],[]],[[-1,18,24],[[21,[3]]],[]],[[[9,[22]],18,24],3],[[[9,[22]],18,24],3],[[[9,[22]],15,24],3],[[-1,15,24],[[21,[3]]],[]],[[-1,15,24],[[21,[3]]],[]],[[[9,[22]],15,24],3],[[[9,[22]],15,24],3]],"c":[63,64,65,72,73,74],"p":[[4,"BigEndian",0],[4,"LittleEndian",0],[15,"tuple"],[4,"Ordering",270],[15,"bool"],[3,"Formatter",271],[6,"Result",271],[15,"f32"],[15,"slice"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[8,"Hasher",272],[4,"Option",273],[6,"Result",274],[15,"u8"],[15,"i8"],[15,"usize"],[4,"Result",275],[3,"TypeId",276],[8,"ByteOrder",0],[8,"ReadBytesExt",0],[8,"WriteBytesExt",0]]},\
"bytes":{"doc":"Provides abstractions for working with bytes.","t":"CCDDLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIDDDDDDDKLLKLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Buf","BufMut","Bytes","BytesMut","advance","advance","advance_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","capacity","chunk","chunk","chunk_mut","clear","clear","clone","clone","clone_into","clone_into","cmp","cmp","copy_from_slice","copy_to_bytes","copy_to_bytes","default","default","deref","deref","deref_mut","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","extend","extend","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_static","hash","hash","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","len","len","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","put","put_bytes","put_slice","remaining","remaining","remaining_mut","reserve","resize","set_len","slice","slice_ref","spare_capacity_mut","split","split_off","split_off","split_to","split_to","to_owned","to_owned","truncate","truncate","try_from","try_from","try_into","try_into","type_id","type_id","unsplit","with_capacity","write_fmt","write_str","zeroed","Buf","BufMut","Chain","IntoIter","Limit","Reader","Take","UninitSlice","Writer","advance","advance","advance","advance_mut","advance_mut","advance_mut","as_mut_ptr","as_uninit_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chain","chain_mut","chain_mut","chunk","chunk","chunk","chunk_mut","chunk_mut","chunk_mut","chunks_vectored","chunks_vectored","chunks_vectored","consume","copy_from_slice","copy_to_bytes","copy_to_bytes","copy_to_bytes","copy_to_bytes","copy_to_slice","copy_to_slice","fill_buf","first_mut","first_ref","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw_parts_mut","get_f32","get_f32","get_f32_le","get_f32_le","get_f32_ne","get_f32_ne","get_f64","get_f64","get_f64_le","get_f64_le","get_f64_ne","get_f64_ne","get_i128","get_i128","get_i128_le","get_i128_le","get_i128_ne","get_i128_ne","get_i16","get_i16","get_i16_le","get_i16_le","get_i16_ne","get_i16_ne","get_i32","get_i32","get_i32_le","get_i32_le","get_i32_ne","get_i32_ne","get_i64","get_i64","get_i64_le","get_i64_le","get_i64_ne","get_i64_ne","get_i8","get_i8","get_int","get_int","get_int_le","get_int_le","get_int_ne","get_int_ne","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_u128","get_u128","get_u128_le","get_u128_le","get_u128_ne","get_u128_ne","get_u16","get_u16","get_u16_le","get_u16_le","get_u16_ne","get_u16_ne","get_u32","get_u32","get_u32_le","get_u32_le","get_u32_ne","get_u32_ne","get_u64","get_u64","get_u64_le","get_u64_le","get_u64_ne","get_u64_ne","get_u8","get_u8","get_uint","get_uint","get_uint_le","get_uint_le","get_uint_ne","get_uint_ne","has_remaining","has_remaining","has_remaining_mut","has_remaining_mut","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","last_mut","last_ref","len","limit","limit","limit","limit","new","new","next","put","put","put_bytes","put_bytes","put_f32","put_f32","put_f32_le","put_f32_le","put_f32_ne","put_f32_ne","put_f64","put_f64","put_f64_le","put_f64_le","put_f64_ne","put_f64_ne","put_i128","put_i128","put_i128_le","put_i128_le","put_i128_ne","put_i128_ne","put_i16","put_i16","put_i16_le","put_i16_le","put_i16_ne","put_i16_ne","put_i32","put_i32","put_i32_le","put_i32_le","put_i32_ne","put_i32_ne","put_i64","put_i64","put_i64_le","put_i64_le","put_i64_ne","put_i64_ne","put_i8","put_i8","put_int","put_int","put_int_le","put_int_le","put_int_ne","put_int_ne","put_slice","put_slice","put_u128","put_u128","put_u128_le","put_u128_le","put_u128_ne","put_u128_ne","put_u16","put_u16","put_u16_le","put_u16_le","put_u16_ne","put_u16_ne","put_u32","put_u32","put_u32_le","put_u32_le","put_u32_ne","put_u32_ne","put_u64","put_u64","put_u64_le","put_u64_le","put_u64_ne","put_u64_ne","put_u8","put_u8","put_uint","put_uint","put_uint_le","put_uint_le","put_uint_ne","put_uint_ne","read","reader","reader","remaining","remaining","remaining","remaining_mut","remaining_mut","remaining_mut","set_limit","set_limit","size_hint","take","take","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uninit","write","write_byte","writer","writer"],"q":[[0,"bytes"],[139,"bytes::buf"],[457,"core::cmp"],[458,"core::marker"],[459,"alloc::string"],[460,"alloc::vec"],[461,"core::iter::traits::collect"],[462,"core::fmt"],[463,"core::fmt"],[464,"core::hash"],[465,"core::option"],[466,"core::ops::range"],[467,"core::mem::maybe_uninit"],[468,"core::result"],[469,"core::any"],[470,"core::fmt"],[471,"std::io::error"],[472,"core::fmt"]],"d":["","","A cheaply cloneable and sliceable chunk of contiguous …","A unique reference to a contiguous slice of memory.","","","","","","","","","","","","","","Utilities for working with buffers.","Returns the number of bytes the <code>BytesMut</code> can hold without …","","","","Clears the buffer, removing all data.","Clears the buffer, removing all data. Existing capacity is …","","","","","","","Creates <code>Bytes</code> instance from slice, by copying it.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends given bytes to this <code>BytesMut</code>.","","","","","","","Converts <code>self</code> into an immutable <code>Bytes</code>.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Creates a new <code>Bytes</code> from a static slice.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns true if the <code>Bytes</code> has a length of 0.","Returns true if the <code>BytesMut</code> has a length of 0.","Returns the number of bytes contained in this <code>Bytes</code>.","Returns the number of bytes contained in this <code>BytesMut</code>.","Creates a new empty <code>Bytes</code>.","Creates a new <code>BytesMut</code> with default capacity.","","","","","","","","","","","","","","","","","","","Reserves capacity for at least <code>additional</code> more bytes to be …","Resizes the buffer so that <code>len</code> is equal to <code>new_len</code>.","Sets the length of the buffer.","Returns a slice of self for the provided range.","Returns a slice of self that is equivalent to the given …","Returns the remaining spare capacity of the buffer as a …","Removes the bytes from the current view, returning them in …","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the buffer into two at the given index.","","","Shortens the buffer, keeping the first <code>len</code> bytes and …","Shortens the buffer, keeping the first <code>len</code> bytes and …","","","","","","","Absorbs a <code>BytesMut</code> that was previously split off.","Creates a new <code>BytesMut</code> with the specified capacity.","","","Creates a new <code>BytesMut</code>, which is initialized with zero.","Read bytes from a buffer.","A trait for values that provide sequential write access to …","A <code>Chain</code> sequences two buffers.","Iterator over the bytes contained by the buffer.","A <code>BufMut</code> adapter which limits the amount of bytes that can …","A <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …","A <code>Buf</code> adapter which limits the bytes read from an …","Uninitialized byte slice.","A <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …","Advance the internal cursor of the Buf","","","Advance the internal cursor of the BufMut","","","Return a raw pointer to the slice’s buffer.","Return a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> to this slice’s buffer.","","","","","","","","","","","","","","","Creates an adaptor which will chain this buffer with …","Creates an adaptor which will chain this buffer with …","Creates an adapter which will chain this buffer with …","Creates an adapter which will chain this buffer with …","Returns a slice starting at the current position and of …","","","Returns a mutable slice starting at the current BufMut …","","","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","","","Copies bytes  from <code>src</code> into <code>self</code>.","Consumes <code>len</code> bytes inside self and returns new instance of …","Consumes <code>len</code> bytes inside self and returns new instance of …","","","Copies bytes from <code>self</code> into <code>dst</code>.","Copies bytes from <code>self</code> into <code>dst</code>.","","Gets a mutable reference to the first underlying <code>Buf</code>.","Gets a reference to the first underlying <code>Buf</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>&amp;mut UninitSlice</code> from a pointer and a length.","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets a signed 128 bit integer from <code>self</code> in big-endian byte …","Gets a signed 128 bit integer from <code>self</code> in big-endian byte …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets a signed 128 bit integer from <code>self</code> in native-endian …","Gets a signed 128 bit integer from <code>self</code> in native-endian …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in native-endian …","Gets a signed 16 bit integer from <code>self</code> in native-endian …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in native-endian …","Gets a signed 32 bit integer from <code>self</code> in native-endian …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in native-endian …","Gets a signed 64 bit integer from <code>self</code> in native-endian …","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in native-endian …","Gets a signed n-byte integer from <code>self</code> in native-endian …","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>BufMut</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>BufMut</code>.","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in native-endian …","Gets an unsigned 16 bit integer from <code>self</code> in native-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in native-endian …","Gets an unsigned 32 bit integer from <code>self</code> in native-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in native-endian …","Gets an unsigned 64 bit integer from <code>self</code> in native-endian …","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in native-endian …","Gets an unsigned n-byte integer from <code>self</code> in native-endian …","Returns true if there are any more bytes to consume","Returns true if there are any more bytes to consume","Returns true if there is space in <code>self</code> for more bytes.","Returns true if there is space in <code>self</code> for more bytes.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Chain</code>, returning the underlying values.","Consumes this <code>IntoIter</code>, returning the underlying value.","Consumes this <code>Limit</code>, returning the underlying value.","Consumes this <code>Reader</code>, returning the underlying value.","Consumes this <code>Take</code>, returning the underlying value.","Consumes this <code>Writer</code>, returning the underlying value.","","","Gets a mutable reference to the last underlying <code>Buf</code>.","Gets a reference to the last underlying <code>Buf</code>.","Returns the number of bytes in the slice.","Creates an adaptor which can write at most <code>limit</code> bytes to …","Creates an adaptor which can write at most <code>limit</code> bytes to …","Returns the maximum number of bytes that can be written","Returns the maximum number of bytes that can be read.","Creates a <code>&amp;mut UninitSlice</code> wrapping a slice of initialised …","Creates an iterator over the bytes contained by the buffer.","","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Put <code>cnt</code> bytes <code>val</code> into <code>self</code>.","Put <code>cnt</code> bytes <code>val</code> into <code>self</code>.","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes an IEEE754 single-precision (4 bytes) floating …","Writes an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes a signed 128 bit integer to <code>self</code> in native-endian …","Writes a signed 128 bit integer to <code>self</code> in native-endian …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in native-endian …","Writes a signed 16 bit integer to <code>self</code> in native-endian …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in native-endian …","Writes a signed 32 bit integer to <code>self</code> in native-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in native-endian …","Writes a signed 64 bit integer to <code>self</code> in native-endian …","Writes a signed 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in native-endian …","Writes an unsigned 16 bit integer to <code>self</code> in native-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in native-endian …","Writes an unsigned 32 bit integer to <code>self</code> in native-endian …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in native-endian …","Writes an unsigned 64 bit integer to <code>self</code> in native-endian …","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Returns the number of bytes between the current position …","","","Returns the number of bytes that can be written from the …","","","Sets the maximum number of bytes that can be written.","Sets the maximum number of bytes that can be read.","","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","","","","Creates a <code>&amp;mut UninitSlice</code> wrapping a slice of …","","Write a single byte at the specified offset.","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adaptor which implements the <code>Write</code> trait for …"],"i":[0,0,0,0,1,4,4,4,1,4,1,1,4,4,1,4,4,0,4,1,4,4,1,4,1,4,1,4,1,4,1,1,4,1,4,1,4,4,1,4,1,1,1,1,1,1,1,4,4,4,4,4,4,4,1,4,4,4,4,4,1,1,1,4,4,4,4,1,1,1,1,1,1,1,4,4,4,1,4,4,1,1,4,1,4,1,1,4,4,1,4,1,4,1,4,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,1,1,4,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,20,26,27,28,26,29,7,7,7,26,35,29,31,27,33,7,26,35,29,31,27,33,20,20,28,28,20,26,27,28,26,29,20,20,26,31,7,20,20,26,27,20,20,31,26,26,33,7,26,35,29,31,27,33,7,7,26,35,29,31,27,33,7,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,35,29,31,27,33,35,29,31,27,33,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,28,28,7,7,7,7,7,7,7,7,7,7,7,7,26,35,29,31,27,33,26,35,29,31,27,33,26,35,26,26,7,28,28,29,27,7,35,35,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,31,20,20,20,26,27,28,26,29,29,27,35,20,20,26,35,29,31,27,33,26,35,29,31,27,33,7,26,35,29,31,27,33,7,33,7,28,28],"f":[0,0,0,0,[[1,2],3],[[4,2],3],[[4,2],3],[4,[[6,[5]]]],[1,[[6,[5]]]],[4,[[6,[5]]]],[1,[[6,[5]]]],[-1,-2,[],[]],[4,[[6,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[6,[5]]]],0,[4,2],[1,[[6,[5]]]],[4,[[6,[5]]]],[4,7],[1,3],[4,3],[1,1],[4,4],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],8],[[4,4],8],[[[6,[5]]],1],[[1,2],1],[[4,2],1],[[],1],[[],4],[1,[[6,[5]]]],[4,[[6,[5]]]],[4,[[6,[5]]]],[1,3],[4,3],[[1,4],9],[[1,10],9],[[1,1],9],[[1,-1],9,11],[[1,[6,[5]]],9],[[1,12],9],[[1,[13,[5]]],9],[[4,12],9],[[4,[13,[5]]],9],[[4,[6,[5]]],9],[[4,10],9],[[4,-1],9,11],[[4,4],9],[[4,1],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[4,-1],3,14],[[4,-1],3,14],[[4,-1],3,14],[[4,[6,[5]]],3],[[1,15],16],[[1,15],16],[[1,15],16],[[4,15],16],[[4,15],16],[[4,15],16],[4,1],[10,1],[[[17,[[6,[5]]]]],1],[-1,-1,[]],[[[13,[5]]],1],[4,1],[12,1],[[[6,[5]]],1],[[[6,[5]]],4],[10,4],[-1,-1,[]],[-1,1,14],[-1,4,14],[-1,4,14],[[[6,[5]]],1],[[1,-1],3,18],[[4,-1],3,18],[-1,-2,[],[]],[-1,-2,[],[]],[1],[1],[4],[4],[1,9],[4,9],[1,2],[4,2],[[],1],[[],4],[[1,1],[[19,[8]]]],[[1,[6,[5]]],[[19,[8]]]],[[1,-1],[[19,[8]]],11],[[1,12],[[19,[8]]]],[[1,[13,[5]]],[[19,[8]]]],[[1,10],[[19,[8]]]],[[4,4],[[19,[8]]]],[[4,-1],[[19,[8]]],11],[[4,10],[[19,[8]]]],[[4,[13,[5]]],[[19,[8]]]],[[4,[6,[5]]],[[19,[8]]]],[[4,12],[[19,[8]]]],[[4,-1],3,20],[[4,5,2],3],[[4,[6,[5]]],3],[1,2],[4,2],[4,2],[[4,2],3],[[4,2,5],3],[[4,2],3],[[1,-1],1,[[21,[2]]]],[[1,[6,[5]]],1],[4,[[6,[[22,[5]]]]]],[4,4],[[1,2],1],[[4,2],4],[[1,2],1],[[4,2],4],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],3],[[4,2],3],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[[4,4],3],[2,4],[[4,25],16],[[4,10],16],[2,4],0,0,0,0,0,0,0,0,0,[[-1,2],3,[]],[[[26,[-1,-2]],2],3,20,20],[[[27,[-1]],2],3,20],[[-1,2],3,[]],[[[26,[-1,-2]],2],3,28,28],[[[29,[-1]],2],3,28],[7,5],[7,[[6,[[22,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[26,[-1,-2]]],11,20],[[-1,-2],[[26,[-1,-2]]],11,20],[[-1,-2],[[26,[-1,-2]]],11,28],[[-1,-2],[[26,[-1,-2]]],11,28],[-1,[[6,[5]]],[]],[[[26,[-1,-2]]],[[6,[5]]],20,20],[[[27,[-1]]],[[6,[5]]],20],[-1,7,[]],[[[26,[-1,-2]]],7,28,28],[[[29,[-1]]],7,28],[[-1,[6,[30]]],2,[]],[[-1,[6,[30]]],2,[]],[[[26,[-1,-2]],[6,[30]]],2,20,20],[[[31,[-1]],2],3,[20,11]],[[7,[6,[5]]],3],[[-1,2],1,[]],[[-1,2],1,[]],[[[26,[-1,-2]],2],1,20,20],[[[27,[-1]],2],1,20],[[-1,[6,[5]]],3,[]],[[-1,[6,[5]]],3,[]],[[[31,[-1]]],[[32,[[6,[5]]]]],[20,11]],[[[26,[-1,-2]]],-1,[],[]],[[[26,[-1,-2]]],-1,[],[]],[[[33,[-1]]],[[32,[3]]],[28,11]],[[7,15],16],[[[26,[-1,-2]],15],16,34,34],[[[35,[-1]],15],16,34],[[[29,[-1]],15],16,34],[[[31,[-1]],15],16,34],[[[27,[-1]],15],16,34],[[[33,[-1]],15],16,34],[[[6,[5]]],7],[[[6,[[22,[5]]]]],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[5,2],7],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,42,[]],[-1,42,[]],[[-1,2],41,[]],[[-1,2],41,[]],[[-1,2],41,[]],[[-1,2],41,[]],[[-1,2],41,[]],[[-1,2],41,[]],[[[35,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[[[31,[-1]]],-1,20],[[[27,[-1]]],-1,[]],[[[33,[-1]]],-1,28],[[[35,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[[[31,[-1]]],-1,20],[[[27,[-1]]],-1,[]],[[[33,[-1]]],-1,28],[-1,43,[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,5,[]],[-1,5,[]],[[-1,2],46,[]],[[-1,2],46,[]],[[-1,2],46,[]],[[-1,2],46,[]],[[-1,2],46,[]],[[-1,2],46,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[7,[47,[2]]],7],[[7,[48,[2]]],7],[[7,49],7],[[7,[50,[2]]],7],[[7,[51,[2]]],7],[[7,[52,[2]]],7],[[7,[48,[2]]],7],[[7,49],7],[[7,[50,[2]]],7],[[7,[47,[2]]],7],[[7,[52,[2]]],7],[[7,[51,[2]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1,-2]]],[[3,[-1,-2]]],[],[]],[[[35,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[[[31,[-1]]],-1,20],[[[27,[-1]]],-1,[]],[[[33,[-1]]],-1,28],[[[26,[-1,-2]]],[],20,20],[-1,-2,[],[]],[[[26,[-1,-2]]],-2,[],[]],[[[26,[-1,-2]]],-2,[],[]],[7,2],[[-1,2],[[29,[-1]]],11],[[-1,2],[[29,[-1]]],11],[[[29,[-1]]],2,[]],[[[27,[-1]]],2,[]],[[[6,[5]]],7],[-1,[[35,[-1]]],[]],[[[35,[-1]]],[[19,[5]]],20],[[-1,-2],3,11,20],[[-1,-2],3,11,20],[[-1,5,2],3,[]],[[-1,5,2],3,[]],[[-1,36],3,[]],[[-1,36],3,[]],[[-1,36],3,[]],[[-1,36],3,[]],[[-1,36],3,[]],[[-1,36],3,[]],[[-1,37],3,[]],[[-1,37],3,[]],[[-1,37],3,[]],[[-1,37],3,[]],[[-1,37],3,[]],[[-1,37],3,[]],[[-1,38],3,[]],[[-1,38],3,[]],[[-1,38],3,[]],[[-1,38],3,[]],[[-1,38],3,[]],[[-1,38],3,[]],[[-1,39],3,[]],[[-1,39],3,[]],[[-1,39],3,[]],[[-1,39],3,[]],[[-1,39],3,[]],[[-1,39],3,[]],[[-1,40],3,[]],[[-1,40],3,[]],[[-1,40],3,[]],[[-1,40],3,[]],[[-1,40],3,[]],[[-1,40],3,[]],[[-1,41],3,[]],[[-1,41],3,[]],[[-1,41],3,[]],[[-1,41],3,[]],[[-1,41],3,[]],[[-1,41],3,[]],[[-1,42],3,[]],[[-1,42],3,[]],[[-1,41,2],3,[]],[[-1,41,2],3,[]],[[-1,41,2],3,[]],[[-1,41,2],3,[]],[[-1,41,2],3,[]],[[-1,41,2],3,[]],[[-1,[6,[5]]],3,[]],[[-1,[6,[5]]],3,[]],[[-1,43],3,[]],[[-1,43],3,[]],[[-1,43],3,[]],[[-1,43],3,[]],[[-1,43],3,[]],[[-1,43],3,[]],[[-1,44],3,[]],[[-1,44],3,[]],[[-1,44],3,[]],[[-1,44],3,[]],[[-1,44],3,[]],[[-1,44],3,[]],[[-1,45],3,[]],[[-1,45],3,[]],[[-1,45],3,[]],[[-1,45],3,[]],[[-1,45],3,[]],[[-1,45],3,[]],[[-1,46],3,[]],[[-1,46],3,[]],[[-1,46],3,[]],[[-1,46],3,[]],[[-1,46],3,[]],[[-1,46],3,[]],[[-1,5],3,[]],[[-1,5],3,[]],[[-1,46,2],3,[]],[[-1,46,2],3,[]],[[-1,46,2],3,[]],[[-1,46,2],3,[]],[[-1,46,2],3,[]],[[-1,46,2],3,[]],[[[31,[-1]],[6,[5]]],[[32,[2]]],[20,11]],[-1,[[31,[-1]]],11],[-1,[[31,[-1]]],11],[-1,2,[]],[[[26,[-1,-2]]],2,20,20],[[[27,[-1]]],2,20],[-1,2,[]],[[[26,[-1,-2]]],2,28,28],[[[29,[-1]]],2,28],[[[29,[-1]],2],3,[]],[[[27,[-1]],2],3,[]],[[[35,[-1]]],[[3,[2,[19,[2]]]]],20],[[-1,2],[[27,[-1]]],11],[[-1,2],[[27,[-1]]],11],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[[6,[[22,[5]]]]],7],[[[33,[-1]],[6,[5]]],[[32,[2]]],[28,11]],[[7,2,5],3],[-1,[[33,[-1]]],11],[-1,[[33,[-1]]],11]],"c":[],"p":[[3,"Bytes",0],[15,"usize"],[15,"tuple"],[3,"BytesMut",0],[15,"u8"],[15,"slice"],[3,"UninitSlice",139],[4,"Ordering",457],[15,"bool"],[15,"str"],[8,"Sized",458],[3,"String",459],[3,"Vec",460],[8,"IntoIterator",461],[3,"Formatter",462],[6,"Result",462],[3,"Box",463],[8,"Hasher",464],[4,"Option",465],[8,"Buf",139],[8,"RangeBounds",466],[19,"MaybeUninit",467],[4,"Result",468],[3,"TypeId",469],[3,"Arguments",462],[3,"Chain",139],[3,"Take",139],[8,"BufMut",139],[3,"Limit",139],[3,"IoSlice",470],[3,"Reader",139],[6,"Result",471],[3,"Writer",139],[8,"Debug",462],[3,"IntoIter",139],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[3,"Range",466],[3,"RangeFrom",466],[3,"RangeFull",466],[3,"RangeInclusive",466],[3,"RangeToInclusive",466],[3,"RangeTo",466]]},\
"cbc":{"doc":"Cipher Block Chaining (CBC) mode.","t":"DDLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Decryptor","Encryptor","borrow","borrow","borrow_mut","borrow_mut","cipher","clone","clone","clone_into","clone_into","decrypt_with_backend_mut","encrypt_with_backend_mut","fmt","fmt","from","from","inner_iv_init","inner_iv_init","into","into","iv_state","iv_state","new","new","new_from_slices","new_from_slices","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_alg_name","write_alg_name"],"q":[[0,"cbc"],[37,"cipher::block"],[38,"cipher::block"],[39,"cipher::block"],[40,"core::fmt"],[41,"crypto_common"],[42,"crypto_common"],[43,"core::any"]],"d":["CBC mode decryptor.","CBC mode encryptor.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,1,5,1,5,0,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[-1]]],[[1,[-1]]],[2,3,4]],[[[5,[-1]]],[[5,[-1]]],[6,3,4]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[1,[-1]],-2],7,[2,3],8],[[[5,[-1]],-2],7,[6,3],8],[[[1,[-1]],9],10,[2,3,11]],[[[5,[-1]],9],10,[6,3,11]],[-1,-1,[]],[-1,-1,[]],[[-1,[12,[[1,[-1]]]]],[[1,[-1]]],[2,3]],[[-1,[12,[[5,[-1]]]]],[[5,[-1]]],[6,3]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[12,[[1,[-1]]]]],[2,3]],[[[5,[-1]]],[[12,[[5,[-1]]]]],[6,3]],[[[14,[13]],[14,[13]]],-1,[]],[[[14,[13]],[14,[13]]],-1,[]],[[[15,[13]],[15,[13]]],[[17,[-1,16]]],[]],[[[15,[13]],[15,[13]]],[[17,[-1,16]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[9,10],[9,10]],"c":[],"p":[[3,"Decryptor",0],[8,"BlockDecryptMut",37],[8,"BlockCipher",37],[8,"Clone",38],[3,"Encryptor",0],[8,"BlockEncryptMut",37],[15,"tuple"],[8,"BlockClosure",37],[3,"Formatter",39],[6,"Result",39],[8,"AlgorithmName",40],[6,"Iv",40],[15,"u8"],[3,"GenericArray",41],[15,"slice"],[3,"InvalidLength",40],[4,"Result",42],[3,"TypeId",43]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"chacha20":{"doc":"Implementation of the ChaCha family of stream ciphers.","t":"GGGDGDGGGGGGDGLLLLLLCLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLL","n":["ChaCha12","ChaCha20","ChaCha20Legacy","ChaCha20LegacyCore","ChaCha8","ChaChaCore","Key","LegacyNonce","Nonce","XChaCha12","XChaCha20","XChaCha8","XChaChaCore","XNonce","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cipher","drop","from","from","from","get_block_pos","get_block_pos","get_block_pos","hchacha","into","into","into","new","new","new","process_with_backend","process_with_backend","process_with_backend","remaining_blocks","remaining_blocks","remaining_blocks","set_block_pos","set_block_pos","set_block_pos","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"chacha20"],[53,"typenum::marker_traits"],[54,"typenum::generated::consts"],[55,"generic_array"],[56,"typenum::generated::consts"],[57,"core::option"],[58,"core::result"],[59,"core::any"]],"d":["ChaCha12 stream cipher (reduced-round variant of <code>ChaCha20</code> …","ChaCha20 stream cipher (RFC 8439 version with 96-bit nonce)","The ChaCha20 stream cipher (legacy “djb” construction …","The ChaCha20 stream cipher (legacy “djb” construction …","ChaCha8 stream cipher (reduced-round variant of <code>ChaCha20</code> …","The ChaCha core function.","Key type used by all ChaCha variants.","Nonce type used by <code>ChaCha20Legacy</code>.","Nonce type used by ChaCha variants.","XChaCha12 stream cipher (reduced-round variant of <code>XChaCha20</code>…","XChaCha is a ChaCha20 variant with an extended 192-bit …","XChaCha8 stream cipher (reduced-round variant of <code>XChaCha20</code> …","The XChaCha core function.","Nonce type used by XChaCha variants.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","The HChaCha function: adapts the ChaCha core function in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,1,4,6,1,0,1,4,6,1,4,6,1,0,4,6,1,4,6,1,4,6,1,4,6,1,4,6,1,4,6,1,4,6,1,4,6,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[-1]]],2,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,5],[[[6,[-1]]],5,3],[[[1,[-1]]],5,3],[[7,[10,[8,9]]],[[10,[8,11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[7,12],4],[[7,13],[[6,[-1]]],3],[[7,14],[[1,[-1]]],3],[[4,-1],2,15],[[[6,[-1]],-2],2,3,15],[[[1,[-1]],-2],2,3,15],[4,[[17,[16]]]],[[[6,[-1]]],[[17,[16]]],3],[[[1,[-1]]],[[17,[16]]],3],[[4,5],2],[[[6,[-1]],5],2,3],[[[1,[-1]],5],2,3],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]]],"c":[],"p":[[3,"ChaChaCore",0],[15,"tuple"],[8,"Unsigned",53],[3,"ChaCha20LegacyCore",0],[15,"u32"],[3,"XChaChaCore",0],[6,"Key",0],[15,"u8"],[6,"U16",54],[3,"GenericArray",55],[6,"U32",54],[6,"LegacyNonce",0],[6,"XNonce",0],[6,"Nonce",0],[8,"StreamClosure",56],[15,"usize"],[4,"Option",57],[4,"Result",58],[3,"TypeId",59]]},\
"chacha20poly1305":{"doc":"RustCrypto: ChaCha20Poly1305","t":"IIGDQDGIQIGQGQGGCLLLLLLLLLALLLLKLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLLDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AeadCore","AeadInPlace","ChaCha20Poly1305","ChaChaPoly1305","CiphertextOverhead","Error","Key","KeyInit","KeySize","KeySizeUser","Nonce","NonceSize","Tag","TagSize","XChaCha20Poly1305","XNonce","aead","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","consts","decrypt","decrypt","decrypt_in_place","decrypt_in_place","decrypt_in_place_detached","decrypt_in_place_detached","decrypt_in_place_detached","drop","encrypt","encrypt","encrypt_in_place","encrypt_in_place","encrypt_in_place_detached","encrypt_in_place_detached","encrypt_in_place_detached","eq","equivalent","fmt","fmt","from","from","generate_key","generate_nonce","hash","into","into","key_size","new","new","new_from_slice","partial_cmp","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"chacha20poly1305"],[67,"chacha20poly1305::consts"],[3457,"generic_array"],[3458,"core::cmp"],[3459,"generic_array"],[3460,"alloc::vec"],[3461,"core::result"],[3462,"aead"],[3463,"core::convert"],[3464,"aead"],[3465,"cipher::stream"],[3466,"cipher::stream"],[3467,"core::fmt"],[3468,"rand_core"],[3469,"crypto_common"],[3470,"alloc::string"],[3471,"core::any"],[3472,"typenum::marker_traits"],[3473,"typenum::marker_traits"],[3474,"typenum::marker_traits"],[3475,"typenum::array"]],"d":["Authenticated Encryption with Associated Data (AEAD) …","In-place stateless AEAD trait.","ChaCha20Poly1305 Authenticated Encryption with Additional …","Generic ChaCha+Poly1305 Authenticated Encryption with …","The upper bound amount of additional space required to …","Error type.","Key type (256-bits/32-bytes).","Types which can be initialized from key.","Key size in bytes.","Types which use key for initialization.","Nonce type (96-bits/12-bytes).","The length of a nonce.","Poly1305 tag.","The maximum length of the nonce.","XChaCha20Poly1305 Authenticated Encryption with Additional …","XNonce type (192-bits/24-bytes).","","","","","","","","","","","Type aliases for many constants.","","","Decrypt the message in-place, returning an error in the …","","Decrypt the message in-place, returning an error in the …","","","","","","Encrypt the given buffer containing a plaintext message …","","Encrypt the data in-place, returning the authentication tag","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate random key using the provided <code>CryptoRng</code>.","Generate a random nonce for this AEAD algorithm.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return key size in bytes.","Create new value from fixed size key.","","Create new value from variable size key.","","","","","","","","","","","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,48,0,0,0,49,0,0,48,0,48,0,0,0,1,4,1,4,1,4,1,4,4,0,1,1,50,1,50,1,1,1,1,1,50,1,50,1,1,4,4,4,4,1,4,51,48,4,1,4,49,51,1,51,4,1,4,4,1,4,1,4,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,36,36,34,34,36,34,34,36,36,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,32,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,34,34,36,36,32,32,32,34,34,36,36,32,32,32,32,32,32,32,34,34,36,36,32,34,36,34,36,32,32,32,32,32,32,32,32,32,34,36,32,32,32,32,32,32,32,32,32,34,36,32,34,36,34,36,32,34,36,32,34,36,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[1,[-1,-2]]],[],[[3,[2]]]],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[4,4],6],0,[[-1,[7,[2]],-2],[[10,[[9,[2,8]],4]]],[],[[12,[11]]]],[[-1,[7,[2]],-2],[[10,[[9,[2,8]],4]]],[],[[12,[11]]]],[[-1,[7,[2]],[13,[2]],14],[[10,[5,4]]],[]],[[-1,[7,[2]],[13,[2]],-2],[[10,[5,4]]],[],14],[[-1,[7,[2]],[13,[2]],[13,[2]],[7,[2]]],[[10,[5,4]]],[]],[[-1,[7,[2]],[13,[2]],[13,[2]],[7,[2]]],[[10,[5,4]]],[]],[[[1,[-1,-2]],[15,[[1,[-1,-2]]]],[13,[2]],[13,[2]],16],[[10,[5,4]]],[17,18,19],[[3,[2]]]],[[[1,[-1,-2]]],5,[],[[3,[2]]]],[[-1,[7,[2]],-2],[[10,[[9,[2,8]],4]]],[],[[12,[11]]]],[[-1,[7,[2]],-2],[[10,[[9,[2,8]],4]]],[],[[12,[11]]]],[[-1,[7,[2]],[13,[2]],14],[[10,[5,4]]],[]],[[-1,[7,[2]],[13,[2]],-2],[[10,[5,4]]],[],14],[[-1,[7,[2]],[13,[2]],[13,[2]]],[[10,[[7,[2]],4]]],[]],[[-1,[7,[2]],[13,[2]],[13,[2]]],[[10,[[7,[2]],4]]],[]],[[[1,[-1,-2]],[15,[[1,[-1,-2]]]],[13,[2]],[13,[2]]],[[10,[16,4]]],[17,18,19],[[3,[2]]]],[[4,4],20],[[-1,-2],20,[],[]],[[4,21],[[10,[5,22]]]],[[4,21],[[10,[5,22]]]],[-1,-1,[]],[-1,-1,[]],[-1,[[7,[2]]],[23,24]],[-1,[[7,[2]]],[23,24]],[[4,-1],5,25],[-1,-2,[],[]],[-1,-2,[],[]],[[],26],[[[7,[2]]],-1,[]],[27,[[1,[-1,-2]]],[],[[3,[2]]]],[[[13,[2]]],[[10,[-1,28]]],[]],[[4,4],[[29,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[32,-1],[],33],[[34,-1],[],35],[[36,36]],[[36,34]],[[34,36]],[[34,34]],[[36,-1],[],35],[[34,36]],[[34,34]],[[36,36]],[[36,34]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[36,36],[32,32],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[34,34],6],[[36,36],6],[[32,32],6],[[],34],[[],36],[[],32],[[32,-1],[],[33,37]],[[34,34],20],[[36,36],20],[[32,32],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[34,21],[[10,[5,22]]]],[[36,21],[[10,[5,22]]]],[[32,21],[[10,[5,22]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[34,-1],5,25],[[36,-1],5,25],[[32,-1],5,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,34],34],[[34,36],36],[[36,34],36],[[36,36],36],[[32,32]],[[32,[38,[-1]]],[],[39,37]],[[32,[40,[-1]]],[],[39,37]],[[34,36],34],[[34,34],34],[[36,36],36],[[36,34],34],[[32,32]],[[32,[40,[-1]]],[],[39,37]],[[32,[38,[-1]]],[],[39,37]],[[32,-1],[],33],[[32,41]],[[32,[42,[-1,-2]]],[],[],[]],[32],[[],34],[[],34],[[],36],[[],36],[[],32],[34],[36],[[34,34],[[29,[6]]]],[[36,36],[[29,[6]]]],[[32,32],[[29,[6]]]],[[-1,-2],[],[],[]],[[32,[38,[-1]]],[],[39,37]],[[32,32]],[[32,[40,[-1]]],[],[39,37]],[[32,-1],[],[33,37]],[[32,32]],[[32,[40,[-1]]],[],[39,37]],[[32,[38,[-1]]],[],[39,37]],[[],20],[[],20],[[],43],[[],44],[[],45],[[],46],[[],45],[[],46],[[],43],[[],44],[[],47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],2],[[],2],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]]],"c":[],"p":[[3,"ChaChaPoly1305",0],[15,"u8"],[8,"ArrayLength",3457],[3,"Error",0],[15,"tuple"],[4,"Ordering",3458],[3,"GenericArray",3457],[3,"Global",3459],[3,"Vec",3460],[4,"Result",3461],[3,"Payload",3462],[8,"Into",3463],[15,"slice"],[8,"Buffer",3462],[6,"Nonce",3462],[6,"Tag",0],[8,"KeyIvInit",3464],[8,"StreamCipher",3465],[8,"StreamCipherSeek",3465],[15,"bool"],[3,"Formatter",3466],[3,"Error",3466],[8,"CryptoRng",3467],[8,"RngCore",3467],[8,"Hasher",3468],[15,"usize"],[6,"Key",0],[3,"InvalidLength",3464],[4,"Option",3469],[3,"String",3470],[3,"TypeId",3471],[3,"Z0",67],[8,"Integer",3472],[3,"B0",67],[8,"Bit",3472],[3,"B1",67],[8,"NonZero",3472],[3,"PInt",3473],[8,"Unsigned",3472],[3,"NInt",3473],[3,"ATerm",3474],[3,"TArr",3474],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[8,"AeadCore",0],[8,"KeySizeUser",0],[8,"AeadInPlace",0],[8,"KeyInit",0]]},\
"cipher":{"doc":"This crate defines a set of traits which describe the …","t":"IIQIGIIIIIIIQIIQSSSSSIDGQIIGIIQIDGQIIIIIDDIIISSSSSILLLLLLLLLLLLLLCLLLLLLLLLLKKLLLLLLLLACLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLKLKLLLLLLLLLCKLOOKLCLLLLKLKLKKLLLLKLLLLLLLLLLKKLLKKKKKKLLLLLLLKKKKKLLKLLLKLLLLLLLLLKLLLLLCKLLLLCDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AlgorithmName","ArrayLength","ArrayType","AsyncStreamCipher","Block","BlockBackend","BlockCipher","BlockClosure","BlockDecrypt","BlockDecryptMut","BlockEncrypt","BlockEncryptMut","BlockSize","BlockSizeUser","Counter","Counter","I16","I32","I64","I8","ISIZE","InnerIvInit","InvalidLength","Iv","IvSize","IvSizeUser","IvState","Key","KeyInit","KeyIvInit","KeySize","KeySizeUser","OverflowError","ParBlocks","ParBlocksSize","ParBlocksSizeUser","SeekNum","StreamBackend","StreamCipher","StreamCipherCore","StreamCipherCoreWrapper","StreamCipherError","StreamCipherSeek","StreamCipherSeekCore","StreamClosure","U16","U32","U64","U8","USIZE","Unsigned","apply_keystream","apply_keystream","apply_keystream_b2b","apply_keystream_b2b","apply_keystream_block_inout","apply_keystream_block_inout","apply_keystream_blocks","apply_keystream_blocks","apply_keystream_blocks_inout","apply_keystream_blocks_inout","apply_keystream_inout","apply_keystream_inout","apply_keystream_partial","apply_keystream_partial","block_padding","block_size","block_size","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consts","crypto_common","current_pos","current_pos","decrypt","decrypt","decrypt_b2b","decrypt_b2b","decrypt_block","decrypt_block","decrypt_block_b2b","decrypt_block_b2b","decrypt_block_b2b_mut","decrypt_block_b2b_mut","decrypt_block_inout","decrypt_block_inout","decrypt_block_inout_mut","decrypt_block_inout_mut","decrypt_block_mut","decrypt_block_mut","decrypt_blocks","decrypt_blocks","decrypt_blocks_b2b","decrypt_blocks_b2b","decrypt_blocks_b2b_mut","decrypt_blocks_b2b_mut","decrypt_blocks_inout","decrypt_blocks_inout","decrypt_blocks_inout_mut","decrypt_blocks_inout_mut","decrypt_blocks_mut","decrypt_blocks_mut","decrypt_inout","decrypt_inout","decrypt_padded","decrypt_padded","decrypt_padded_b2b","decrypt_padded_b2b","decrypt_padded_b2b_mut","decrypt_padded_b2b_mut","decrypt_padded_inout","decrypt_padded_inout","decrypt_padded_inout_mut","decrypt_padded_inout_mut","decrypt_padded_mut","decrypt_padded_mut","decrypt_padded_vec","decrypt_padded_vec","decrypt_padded_vec_mut","decrypt_padded_vec_mut","decrypt_with_backend","decrypt_with_backend_mut","default","drop","encrypt","encrypt","encrypt_b2b","encrypt_b2b","encrypt_block","encrypt_block","encrypt_block_b2b","encrypt_block_b2b","encrypt_block_b2b_mut","encrypt_block_b2b_mut","encrypt_block_inout","encrypt_block_inout","encrypt_block_inout_mut","encrypt_block_inout_mut","encrypt_block_mut","encrypt_block_mut","encrypt_blocks","encrypt_blocks","encrypt_blocks_b2b","encrypt_blocks_b2b","encrypt_blocks_b2b_mut","encrypt_blocks_b2b_mut","encrypt_blocks_inout","encrypt_blocks_inout","encrypt_blocks_inout_mut","encrypt_blocks_inout_mut","encrypt_blocks_mut","encrypt_blocks_mut","encrypt_inout","encrypt_inout","encrypt_padded","encrypt_padded","encrypt_padded_b2b","encrypt_padded_b2b","encrypt_padded_b2b_mut","encrypt_padded_b2b_mut","encrypt_padded_inout","encrypt_padded_inout","encrypt_padded_inout_mut","encrypt_padded_inout_mut","encrypt_padded_mut","encrypt_padded_mut","encrypt_padded_vec","encrypt_padded_vec","encrypt_padded_vec_mut","encrypt_padded_vec_mut","encrypt_with_backend","encrypt_with_backend_mut","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_block_byte","from_core","gen_ks_block","gen_par_ks_blocks","gen_par_ks_blocks","gen_tail_blocks","gen_tail_blocks","generate_iv","generate_iv","generate_key","generate_key","generate_key_iv","generic_array","get_block_pos","get_core","impl_simple_block_encdec","impl_simple_block_encdec","inner_iv_init","inner_iv_slice_init","inout","into","into","into","into","into_block_byte","iv_size","iv_state","key_size","new","new","new","new","new_from_slice","new_from_slices","proc_block","proc_block_inplace","proc_block_inplace","proc_par_blocks","proc_par_blocks","proc_par_blocks_inplace","proc_par_blocks_inplace","proc_tail_blocks","proc_tail_blocks","proc_tail_blocks_inplace","proc_tail_blocks_inplace","process_with_backend","remaining_blocks","seek","seek","set_block_pos","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_u16","to_u32","to_u64","to_u8","to_usize","try_apply_keystream","try_apply_keystream","try_apply_keystream_inout","try_apply_keystream_inout","try_apply_keystream_partial","try_apply_keystream_partial","try_current_pos","try_current_pos","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_seek","try_seek","type_id","type_id","type_id","type_id","typenum","write_alg_name","write_keystream_block","write_keystream_block","write_keystream_blocks","write_keystream_blocks","zeroize","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"cipher"],[297,"cipher::consts"],[3687,"core::result"],[3688,"inout::inout"],[3689,"inout::inout_buf"],[3690,"core::clone"],[3691,"inout::errors"],[3692,"block_padding"],[3693,"alloc::vec"],[3694,"core::default"],[3695,"inout::errors"],[3696,"core::fmt"],[3697,"core::fmt"],[3698,"rand_core"],[3699,"rand_core"],[3700,"alloc::string"],[3701,"core::any"],[3702,"typenum::marker_traits"],[3703,"typenum::marker_traits"],[3704,"typenum::marker_traits"],[3705,"typenum::int"],[3706,"typenum::int"],[3707,"typenum::array"]],"d":["Trait which stores algorithm name constant, used in <code>Debug</code> …","Trait making <code>GenericArray</code> work, marking types to be used …","Associated type representing the array type for the number","Marker trait for block-level asynchronous stream ciphers","Block on which <code>BlockSizeUser</code> implementors operate.","Trait implemented by block cipher encryption and …","Marker trait for block ciphers.","Trait for <code>BlockBackend</code> users.","Decrypt-only functionality for block ciphers.","Decrypt-only functionality for block ciphers and modes …","Encrypt-only functionality for block ciphers.","Encrypt-only functionality for block ciphers and modes …","Size of the block in bytes.","Types which process data in blocks.","Counter type usable with <code>StreamCipherCore</code>.","Counter type used inside stream cipher.","","","","","","Types which can be initialized from another type and …","The error type returned when key and/or IV used in the …","Initialization vector (nonce) used by <code>IvSizeUser</code> …","Initialization vector size in bytes.","Types which use initialization vector (nonce) for …","Trait for loading current IV state.","Key used by <code>KeySizeUser</code> implementors.","Types which can be initialized from key.","Types which can be initialized from key and initialization …","Key size in bytes.","Types which use key for initialization.","The error type returned when a cipher position can not be …","Parallel blocks on which <code>ParBlocksSizeUser</code> implementors …","Number of blocks which can be processed in parallel.","Types which can process blocks in parallel.","Trait implemented for numeric types which can be used with …","Trait implemented by stream cipher backends.","Synchronous stream cipher core trait.","Block-level synchronous stream ciphers.","Wrapper around <code>StreamCipherCore</code> implementations.","This error is returned by the <code>StreamCipher</code> trait methods.","Trait for seekable stream ciphers.","Block-level seeking trait for stream ciphers.","Trait for <code>StreamBackend</code> users.","","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","Apply keystream to data in-place.","Apply keystream to data in-place.","Apply keystream to data buffer-to-buffer.","Apply keystream to data buffer-to-buffer.","Apply keystream block.","Apply keystream block.","Apply keystream blocks.","Apply keystream blocks.","Apply keystream blocks.","Apply keystream blocks.","Apply keystream to <code>inout</code> data.","Apply keystream to <code>inout</code> data.","Try to apply keystream to data not divided into blocks.","Try to apply keystream to data not divided into blocks.","","Return block size in bytes.","Return block size in bytes.","","","","","","","","","Execute closure with the provided block cipher backend.","Execute closure with the provided stream cipher backend.","","","","","","","","","Type aliases for many constants.","","Get current keystream position","Get current keystream position","Decrypt data in place.","Decrypt data in place.","Decrypt data from buffer to buffer.","Decrypt data from buffer to buffer.","Decrypt single block in-place.","Decrypt single block in-place.","Decrypt <code>in_block</code> and write result to <code>out_block</code>.","Decrypt <code>in_block</code> and write result to <code>out_block</code>.","Decrypt <code>in_block</code> and write result to <code>out_block</code>.","Decrypt <code>in_block</code> and write result to <code>out_block</code>.","Decrypt single <code>inout</code> block.","Decrypt single <code>inout</code> block.","Decrypt single <code>inout</code> block.","Decrypt single <code>inout</code> block.","Decrypt single block in-place.","Decrypt single block in-place.","Decrypt blocks in-place.","Decrypt blocks in-place.","Decrypt blocks buffer-to-buffer.","Decrypt blocks buffer-to-buffer.","Decrypt blocks buffer-to-buffer.","Decrypt blocks buffer-to-buffer.","Decrypt <code>inout</code> blocks.","Decrypt <code>inout</code> blocks.","Decrypt <code>inout</code> blocks.","Decrypt <code>inout</code> blocks.","Decrypt blocks in-place.","Decrypt blocks in-place.","Decrypt data using <code>InOutBuf</code>.","Decrypt data using <code>InOutBuf</code>.","Decrypt input and unpad it in-place. Returns resulting …","Decrypt input and unpad it in-place. Returns resulting …","Decrypt input and unpad it buffer-to-buffer. Returns …","Decrypt input and unpad it buffer-to-buffer. Returns …","Decrypt input and unpad it buffer-to-buffer. Returns …","Decrypt input and unpad it buffer-to-buffer. Returns …","Decrypt input and unpad it. Returns resulting ciphertext …","Decrypt input and unpad it. Returns resulting ciphertext …","Decrypt input and unpad it. Returns resulting ciphertext …","Decrypt input and unpad it. Returns resulting ciphertext …","Decrypt input and unpad it in-place. Returns resulting …","Decrypt input and unpad it in-place. Returns resulting …","Decrypt input and unpad it in a newly allocated Vec. …","Decrypt input and unpad it in a newly allocated Vec. …","Decrypt input and unpad it in a newly allocated Vec. …","Decrypt input and unpad it in a newly allocated Vec. …","Decrypt data using backend provided to the rank-2 closure.","Decrypt data using backend provided to the rank-2 closure.","","","Encrypt data in place.","Encrypt data in place.","Encrypt data from buffer to buffer.","Encrypt data from buffer to buffer.","Encrypt single block in-place.","Encrypt single block in-place.","Encrypt <code>in_block</code> and write result to <code>out_block</code>.","Encrypt <code>in_block</code> and write result to <code>out_block</code>.","Encrypt <code>in_block</code> and write result to <code>out_block</code>.","Encrypt <code>in_block</code> and write result to <code>out_block</code>.","Encrypt single <code>inout</code> block.","Encrypt single <code>inout</code> block.","Encrypt single <code>inout</code> block.","Encrypt single <code>inout</code> block.","Encrypt single block in-place.","Encrypt single block in-place.","Encrypt blocks in-place.","Encrypt blocks in-place.","Encrypt blocks buffer-to-buffer.","Encrypt blocks buffer-to-buffer.","Encrypt blocks buffer-to-buffer.","Encrypt blocks buffer-to-buffer.","Encrypt <code>inout</code> blocks.","Encrypt <code>inout</code> blocks.","Encrypt <code>inout</code> blocks.","Encrypt <code>inout</code> blocks.","Encrypt blocks in-place.","Encrypt blocks in-place.","Encrypt data using <code>InOutBuf</code>.","Encrypt data using <code>InOutBuf</code>.","Pad input and encrypt in-place. Returns resulting …","Pad input and encrypt in-place. Returns resulting …","Pad input and encrypt buffer-to-buffer. Returns resulting …","Pad input and encrypt buffer-to-buffer. Returns resulting …","Pad input and encrypt buffer-to-buffer. Returns resulting …","Pad input and encrypt buffer-to-buffer. Returns resulting …","Pad input and encrypt. Returns resulting ciphertext slice.","Pad input and encrypt. Returns resulting ciphertext slice.","Pad input and encrypt. Returns resulting ciphertext slice.","Pad input and encrypt. Returns resulting ciphertext slice.","Pad input and encrypt in-place. Returns resulting …","Pad input and encrypt in-place. Returns resulting …","Pad input and encrypt into a newly allocated Vec. Returns …","Pad input and encrypt into a newly allocated Vec. Returns …","Pad input and encrypt into a newly allocated Vec. Returns …","Pad input and encrypt into a newly allocated Vec. Returns …","Encrypt data using backend provided to the rank-2 closure.","Encrypt data using backend provided to the rank-2 closure.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Try to get position for block number <code>block</code>, byte position …","Return reference to the core type.","Generate keystream block.","Generate keystream blocks in parallel.","Generate keystream blocks in parallel.","Generate keystream blocks. Length of the buffer MUST be …","Generate keystream blocks. Length of the buffer MUST be …","Generate random IV using the provided <code>CryptoRng</code>.","Generate random IV using the provided <code>CryptoRng</code>.","Generate random key using the provided <code>CryptoRng</code>.","Generate random key using the provided <code>CryptoRng</code>.","Generate random key and nonce using the provided <code>CryptoRng</code>.","","Get current block position.","Return reference to the core type.","Implement simple block backend","Implement simple block backend","Initialize value using <code>inner</code> and <code>iv</code> array.","Initialize value using <code>inner</code> and <code>iv</code> slice.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Try to get block number and bytes position for given block …","Return IV size in bytes.","Returns current IV state.","Return key size in bytes.","Create new value from fixed size key.","Create new value from fixed length key and nonce.","","","Create new value from variable size key.","Create new value from variable length key and nonce.","Process single inout block.","Process single block in-place.","Process single block in-place.","Process inout blocks in parallel.","Process inout blocks in parallel.","Process blocks in parallel in-place.","Process blocks in parallel in-place.","Process buffer of inout blocks. Length of the buffer MUST …","Process buffer of inout blocks. Length of the buffer MUST …","Process buffer of blocks in-place. Length of the buffer …","Process buffer of blocks in-place. Length of the buffer …","Process data using backend provided to the rank-2 closure.","Return number of remaining blocks before cipher wraps …","Seek to the given position","Seek to the given position","Set block position.","","","","","","","","","","","","","","","","","","Apply keystream to data behind <code>buf</code>.","Apply keystream to data behind <code>buf</code>.","Apply keystream to <code>inout</code> data.","","Try to apply keystream to data not divided into blocks.","Try to apply keystream to data not divided into blocks.","Try to get current keystream position","","","","","","","","","","Try to seek to the given position","","","","","","","Write algorithm name into <code>f</code>.","Write keystream block.","Write keystream block.","Write keystream blocks.","Write keystream blocks.","","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,67,0,0,0,0,0,0,0,0,0,16,0,0,52,63,63,63,63,63,0,0,0,68,0,0,0,0,0,69,0,0,0,70,0,0,0,0,0,0,0,0,0,0,63,63,63,63,63,0,71,71,71,71,32,32,32,32,32,32,71,71,32,32,0,16,16,12,4,13,14,12,4,13,14,22,41,12,4,13,14,12,4,13,14,0,0,72,72,73,73,73,73,74,74,74,74,18,18,74,74,18,18,18,18,74,74,74,74,18,18,74,74,18,18,18,18,73,73,74,74,74,74,18,18,74,74,18,18,18,18,74,74,18,18,74,18,14,14,73,73,73,73,75,75,75,75,24,24,75,75,24,24,24,24,75,75,75,75,24,24,75,75,24,24,24,24,73,73,75,75,75,75,24,24,75,75,24,24,24,24,75,75,24,24,75,24,12,12,12,12,4,4,13,13,12,4,4,13,14,17,14,11,11,11,11,11,40,76,39,40,40,0,52,14,0,0,76,76,0,12,4,13,14,17,68,77,69,39,40,14,14,39,40,10,10,10,10,10,10,10,10,10,10,10,32,32,72,72,52,63,63,63,63,63,12,4,13,14,12,4,13,63,63,63,63,63,71,71,71,14,32,32,72,14,12,4,13,14,12,4,13,14,72,14,12,4,13,14,0,78,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,56,58,58,56,56,58,56,56,58,58,56,58,54,56,58,54,56,58,54,56,58,54,56,58,54,56,58,54,54,56,58,54,56,58,54,56,58,54,56,58,54,56,58,54,56,58,54,56,56,58,58,54,54,54,56,56,58,58,54,54,54,54,54,54,54,56,56,58,58,54,56,58,56,58,54,54,54,54,54,54,54,54,54,56,58,54,54,54,54,54,54,54,54,54,56,58,54,56,58,56,58,54,56,58,54,56,58,54],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,[2,[1]]],3,[]],[[-1,[2,[1]]],3,[]],[[-1,[2,[1]],[2,[1]]],[[5,[3,4]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[3,4]]],[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[1]]],3,[]],[[-1,[8,[1]]],3,[]],[[-1,[8,[1]]],3,[]],[[-1,[8,[1]]],3,[]],0,[[],9],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],3,[],10],[[-1,-2],3,[],11],[12,12],[4,4],[13,13],[[[14,[-1]]],[[14,[-1]]],[15,16]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[-1,-2,[],17],[-1,-2,[],17],[[-1,[2,[1]]],3,18],[[-1,[2,[1]]],3,18],[[-1,[2,[1]],[2,[1]]],[[5,[3,19]]],18],[[-1,[2,[1]],[2,[1]]],[[5,[3,19]]],18],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[8,[1]]],3,18],[[-1,[8,[1]]],3,18],[[-1,[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[8,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[8,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[8,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[8,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]]],[[5,[[2,[1]],20]]],[]],[[-1,[2,[1]]],[[5,[[21,[1]],20]]],[]],[[-1,[2,[1]]],[[5,[[21,[1]],20]]],[]],[[-1,[2,[1]]],[[5,[[21,[1]],20]]],[]],[[-1,[2,[1]]],[[5,[[21,[1]],20]]],[]],[[-1,-2],3,[],22],[[-1,-2],3,[],22],[[],[[14,[-1]]],[23,16]],[[[14,[-1]]],3,16],[[-1,[2,[1]]],3,24],[[-1,[2,[1]]],3,24],[[-1,[2,[1]],[2,[1]]],[[5,[3,19]]],24],[[-1,[2,[1]],[2,[1]]],[[5,[3,19]]],24],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[6,[-1]],[6,[-1]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[2,[[6,[-1]]]],[2,[[6,[-1]]]]],[[5,[3,19]]],[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[8,[1]]],3,24],[[-1,[8,[1]]],3,24],[[-1,[2,[1]],9],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]],9],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]],[2,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[26,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[26,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[26,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[26,[1]]],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]],9],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]],9],[[5,[[2,[1]],25]]],[]],[[-1,[2,[1]]],[[21,[1]]],[]],[[-1,[2,[1]]],[[21,[1]]],[]],[[-1,[2,[1]]],[[21,[1]]],[]],[[-1,[2,[1]]],[[21,[1]]],[]],[[-1,-2],3,[],22],[[-1,-2],3,[],22],[[12,12],27],[[-1,-2],27,[],[]],[[12,28],[[5,[3,29]]]],[[12,28],[[5,[3,29]]]],[[4,28],30],[[4,28],[[5,[3,29]]]],[[13,28],30],[[13,28],[[5,[3,29]]]],[-1,-1,[]],[-1,-1,[]],[13,4],[-1,-1,[]],[-1,-1,[]],[[-1,1,1],[[5,[-2,13]]],31,[]],[-1,[[14,[-1]]],32],[[-1,[6,[-1]]],3,[]],[[-1,[33,[-1]]],3,[]],[[-1,[33,[-1]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[-1,[[34,[1]]],[35,36]],[-1,[[34,[1]]],[35,36]],[-1,[[34,[1]]],[35,36]],[-1,[[34,[1]]],[35,36]],[-1,[[3,[[34,[1]],[34,[1]]]]],[35,36]],0,[-1,[],[]],[[[14,[-1]]],-1,32],0,0,[[[34,[1]]],-1,[]],[[[2,[1]]],[[5,[-1,12]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],[[5,[[3,[-2,1]],13]]],[],31],[[],9],[-1,[[37,[-1]]],[]],[[],9],[[[34,[1]]],-1,[]],[[[34,[1]],[34,[1]]],-1,[]],[[[38,[[14,[-1]]]]],[[14,[-1]]],[39,16]],[[[38,[[14,[-1]]]],[37,[[14,[-1]]]]],[[14,[-1]]],[40,16]],[[[2,[1]]],[[5,[-1,12]]],[]],[[[2,[1]],[2,[1]]],[[5,[-1,12]]],[]],[[-1,[7,[[6,[-1]]]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[7,[[33,[-1]]]]],3,[]],[[-1,[7,[[33,[-1]]]]],3,[]],[[-1,[33,[-1]]],3,[]],[[-1,[33,[-1]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[8,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,-2],3,[],41],[-1,[[42,[9]]],[]],[[-1,-2],3,[],17],[[-1,-2],3,[],17],[-1,3,[]],[[],43],[[],44],[[],45],[[],46],[[],47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[[],49],[[],50],[[],51],[[],1],[[],9],[[-1,[2,[1]]],[[5,[3,4]]],[]],[[-1,[2,[1]]],[[5,[3,4]]],[]],[[-1,[8,[1]]],[[5,[3,4]]],[]],[[[14,[-1]],[8,[1]]],[[5,[3,4]]],32],[[-1,[8,[1]]],[[5,[3,4]]],[]],[[-1,[8,[1]]],[[5,[3,4]]],[]],[-1,[[5,[-2,13]]],[],17],[[[14,[-1]]],[[5,[-2,13]]],52,17],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[-1,-2],[[5,[3,4]]],[],17],[[[14,[-1]],-2],[[5,[3,4]]],52,17],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],0,[28,[[5,[3,29]]]],[[-1,[6,[-1]]],3,[]],[[-1,[6,[-1]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],[[-1,[2,[[6,[-1]]]]],3,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[54,-1],[],55],[[56,-1],[],57],[[58,56]],[[58,58]],[[56,58]],[[56,56]],[[58,-1],[],57],[[56,56]],[[56,58]],[[58,58]],[[58,56]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[58,58],[54,54],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[56,56],59],[[58,58],59],[[54,54],59],[[],56],[[],58],[[],54],[[54,-1],[],[55,60]],[[56,56],27],[[58,58],27],[[54,54],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[56,28],[[5,[3,29]]]],[[58,28],[[5,[3,29]]]],[[54,28],[[5,[3,29]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[56,-1],3,61],[[58,-1],3,61],[[54,-1],3,61],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[56,56],56],[[56,58],58],[[58,56],58],[[58,58],58],[[54,[62,[-1]]],[],[63,60]],[[54,54]],[[54,[64,[-1]]],[],[63,60]],[[56,56],56],[[56,58],56],[[58,56],56],[[58,58],58],[[54,54]],[[54,[64,[-1]]],[],[63,60]],[[54,[62,[-1]]],[],[63,60]],[[54,-1],[],55],[[54,[65,[-1,-2]]],[],[],[]],[[54,66]],[54],[[],56],[[],56],[[],58],[[],58],[[],54],[56],[58],[[56,56],[[42,[59]]]],[[58,58],[[42,[59]]]],[[54,54],[[42,[59]]]],[[-1,-2],[],[],[]],[[54,[64,[-1]]],[],[63,60]],[[54,[62,[-1]]],[],[63,60]],[[54,54]],[[54,-1],[],[55,60]],[[54,[62,[-1]]],[],[63,60]],[[54,54]],[[54,[64,[-1]]],[],[63,60]],[[],27],[[],27],[[],43],[[],44],[[],45],[[],46],[[],44],[[],45],[[],46],[[],43],[[],47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]]],"c":[],"p":[[15,"u8"],[15,"slice"],[15,"tuple"],[3,"StreamCipherError",0],[4,"Result",3687],[6,"Block",0],[3,"InOut",3688],[3,"InOutBuf",3689],[15,"usize"],[8,"BlockBackend",0],[8,"StreamBackend",0],[3,"InvalidLength",0],[3,"OverflowError",0],[3,"StreamCipherCoreWrapper",0],[8,"Clone",3690],[8,"BlockSizeUser",0],[8,"SeekNum",0],[8,"BlockDecryptMut",0],[3,"NotEqualError",3691],[3,"UnpadError",3692],[3,"Vec",3693],[8,"BlockClosure",0],[8,"Default",3694],[8,"BlockEncryptMut",0],[3,"PadError",3691],[3,"InOutBufReserved",3695],[15,"bool"],[3,"Formatter",3696],[3,"Error",3696],[6,"Result",3696],[8,"Counter",0],[8,"StreamCipherCore",0],[6,"ParBlocks",0],[3,"GenericArray",3697],[8,"CryptoRng",3698],[8,"RngCore",3698],[6,"Iv",0],[6,"Key",0],[8,"KeyInit",0],[8,"KeyIvInit",0],[8,"StreamClosure",0],[4,"Option",3699],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[3,"String",3700],[15,"u16"],[15,"u32"],[15,"u64"],[8,"StreamCipherSeekCore",0],[3,"TypeId",3701],[3,"Z0",297],[8,"Integer",3702],[3,"B0",297],[8,"Bit",3702],[3,"B1",297],[4,"Ordering",3703],[8,"NonZero",3702],[8,"Hasher",3704],[3,"NInt",3705],[8,"Unsigned",0],[3,"PInt",3705],[3,"TArr",3706],[3,"ATerm",3706],[8,"ArrayLength",0],[8,"IvSizeUser",0],[8,"KeySizeUser",0],[8,"ParBlocksSizeUser",0],[8,"StreamCipher",0],[8,"StreamCipherSeek",0],[8,"AsyncStreamCipher",0],[8,"BlockDecrypt",0],[8,"BlockEncrypt",0],[8,"InnerIvInit",0],[8,"IvState",0],[8,"AlgorithmName",0]]},\
"const_oid":{"doc":"RustCrypto: Object Identifiers (OIDs)","t":"GNNDINNINNENSNSDNGNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLMM","n":["Arc","ArcInvalid","ArcTooBig","Arcs","AssociatedOid","Base128","DigitExpected","DynAssociatedOid","Empty","Err","Error","Length","MAX_SIZE","NotEnoughArcs","OID","ObjectIdentifier","Ok","Result","TrailingDot","arc","arcs","as_bytes","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_arcs","from_bytes","from_str","hash","into","into","into","into_iter","len","new","new_unwrap","next","oid","parent","partial_cmp","partial_cmp","push_arc","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","actual","arc"],"q":[[0,"const_oid"],[70,"const_oid::Error"],[72,"core::option"],[73,"core::cmp"],[74,"core::fmt"],[75,"core::fmt"],[76,"core::hash"],[77,"core::result"],[78,"core::any"]],"d":["Type alias used to represent an “arc” (i.e. integer …","Arc exceeds allowed range (i.e. for first or second OID)","Arc is too big (exceeds 32-bit limits of this library).","<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an …","A trait which associates an OID with a type.","Base 128 encoding error (used in BER/DER serialization of …","Expected a digit, but was provided something else.","A trait which associates a dynamic, <code>&amp;self</code>-dependent OID …","Input data is empty.","Contains the error value","OID errors.","OID length is invalid (too short or too long).","Maximum size of a BER/DER-encoded OID in bytes.","Minimum 3 arcs required.","The OID associated with this type.","Object identifier (OID).","Contains the success value","Result type","Trailing <code>.</code> character at end of input.","Return the arc with the given index, if it exists.","Iterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…","Get the BER/DER serialization of this OID as bytes.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Parse an OID from a slice of <code>Arc</code> values (i.e. integers).","Parse an OID from from its BER/DER encoding.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the length of this <code>ObjectIdentifier</code> in arcs.","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","","Get the OID associated with this value.","Get the parent OID of this one (if applicable).","","","Push an additional arc onto this OID, returning the child …","","","","","","","","","","","What was found instead of a digit","Arc value that is erroneous."],"i":[0,8,8,0,0,8,8,0,8,13,0,8,1,8,20,0,13,0,8,1,1,1,1,5,8,1,5,8,1,8,1,8,1,8,1,8,8,1,1,5,8,1,1,1,1,1,1,5,8,1,5,1,1,1,5,21,1,8,1,1,5,8,1,1,5,8,1,5,8,1,22,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[1,5],[1,[[7,[6]]]],[1,[[7,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,8],[1,1],[[8,8],9],[[1,1],9],[[8,8],10],[[1,1],10],[[8,11],12],[[8,11],12],[[1,11],12],[[1,11],12],[-1,-1,[]],[-1,-1,[]],[1,1],[-1,-1,[]],[-1,[[13,[1]]],14],[[[7,[6]]],[[13,[1]]]],[15,[[13,[1]]]],[[1,-1],16,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[15,[[13,[1]]]],[15,1],[5,[[4,[3]]]],[-1,1,[]],[1,[[4,[1]]]],[[8,8],[[4,[9]]]],[[1,1],[[4,[9]]]],[[1,3],[[13,[1]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[[[7,[6]]],[[13,[1]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0],"c":[],"p":[[3,"ObjectIdentifier",0],[15,"usize"],[6,"Arc",0],[4,"Option",72],[3,"Arcs",0],[15,"u8"],[15,"slice"],[4,"Error",0],[4,"Ordering",73],[15,"bool"],[3,"Formatter",74],[6,"Result",74],[6,"Result",0],[8,"IntoIterator",75],[15,"str"],[15,"tuple"],[8,"Hasher",76],[4,"Result",77],[3,"TypeId",78],[8,"AssociatedOid",0],[8,"DynAssociatedOid",0],[13,"DigitExpected",70],[13,"ArcInvalid",70]]},\
"convert_case":{"doc":"Converts to and from various cases.","t":"NNEINNDNNNNNNNNNNNNLLLLLLLLLLLLKLLLKLLLLLLLL","n":["Alternating","Camel","Case","Casing","Cobol","Flat","FromCasing","Kebab","Lower","Pascal","ScreamingSnake","Snake","Title","Toggle","Train","Upper","UpperCamel","UpperFlat","UpperSnake","all_cases","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","from","from_case","from_case","into","into","to_case","to_case","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"convert_case"],[44,"alloc::vec"],[45,"core::fmt"],[46,"core::fmt"],[47,"core::result"],[48,"core::any"]],"d":["Alternating case strings are delimited by spaces.  …","Camel case strings are lowercase, but for every word …","Defines the type of casing a string can be.","Describes items that can be converted into a case.","Cobol case strings are delimited by hyphens <code>-</code> and are all …","Flat case strings are all lowercase, with no delimiter.  …","Holds information about parsing before converting into a …","Kebab case strings are delimited by hyphens <code>-</code> and are all …","Lowercase strings are delimited by spaces and all …","Pascal case strings are lowercase, but for every word the …","Screaming snake case is an alternative name for upper …","Snake case strings are delimited by underscores <code>_</code> and are …","Title case strings are delimited by spaces. Only the …","Toggle case strings are delimited by spaces.  All …","Train case strings are delimited by hyphens <code>-</code>.  All …","Uppercase strings are delimited by spaces and all …","Upper camel case is an alternative name for Pascal case.","Upper flat case strings are all uppercase, with no …","Upper snake case strings are delimited by underscores <code>_</code> …","Returns a vector with all case enum variants.  This was …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>FromCasing</code> struct, which saves information about …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","References <code>self</code> and converts to the given case.","","","","","","","",""],"i":[1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,7,1,1,1,1,1,1,7,1,11,7,7,1,11,7,1,7,1,7,1,7,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],3,[],[]],[[1,1],4],[[-1,-2],4,[],[]],[[1,5],6],[-1,-1,[]],[-1,-1,[]],[[-1,1],7,[]],[[7,1],7],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],8,[]],[[7,1],8],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]]],"c":[],"p":[[4,"Case",0],[3,"Vec",44],[15,"tuple"],[15,"bool"],[3,"Formatter",45],[6,"Result",45],[3,"FromCasing",0],[3,"String",46],[4,"Result",47],[3,"TypeId",48],[8,"Casing",0]]},\
"core_foundation":{"doc":"This crate provides wrappers around the underlying …","t":"IAAAAAAAAOAAAOOOAAAAAAAAADFFGFFDFGFFFFGFFFFFFFFFDGGFFFGFFGGGDLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLHLLLMMLLLLLLLLLLLLLLLLLLLMLLDFFFFFGFFDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDFGDGFFGFFFFGFGGGGFEFFFFFGGIGGDFFFDGGNIINDDNGQGIIIMLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKMLLLLLLLLLLLHHHHHHHHMMGLMMMMLLKLLLLLKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLMKLLKLLDFGLLLLLLLLLLLLLLLLHHLLLLLLLLLLDFFFFFFFFFFFGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDFFFFFFFFFFFFFFGGFFFGDLLLLLLLLLLLLLLLLLLHHHHHHHHHHHHHHHLLLLLLLLLLLLLDFFFFFFGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFDFFFFFGGDLLLLLLLLLLLLLLLLLLLLHHLLLLLLLLLLLLLLLLDFGFFGFFFGFFFFGDGGFFFGFDDGDLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLHHLLLMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLDFFFFGDLLLLLLLLLLLLLLLLLLLLLLLHHHHLLLLLLLLLLLLLLDGDFFFFFFFFFGGDLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLRRLMMLLLLLLLLLLLLLLLLLMLLGGDFFGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFGDFFFFFGGDELLLLLLLLLLLLLLLLLLLLLLLLLLLHHRRRRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLLLLLLDFFGGGILLLLLLLFFLLLLLLLLLLLRRRRRRLLLLLLLLLLDGFFFFFFFFFFFFFFGDGDFFFFFFFFGGFFFFFEDDDFFFFFFGFFDGDFFFFFFFFFFGFFFNNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMLLLLLLLLLLLLLRRRRRHHRRRRRRLMMMMMMLLLMMMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLDGFDFGFFGFFFFFFGGGGDLLLLLLLLLLLLMLLMLLLLLLLLMLLLHLMMLLLLLLLLLLLLLLLMLLDGFFFFGGFFFFFGGDLLLLLLLLLLLLLLLLLLLLLLLLLHLLLLLLLLLLLLLLLDFFFFFFGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGFFFFDLLLLLLLLLLLLLLLLLLLLLLLHHHHHHHHHHHHRHHHHHHHHHHHHHHHHHHRHHHHHRLLLLLLLLLLLLLLDDFFFFGDLLLLLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ConcreteCFType","array","attributed_string","base","boolean","bundle","characterset","data","date","declare_TCFType","dictionary","error","filedescriptor","impl_CFComparison","impl_CFTypeDescription","impl_TCFType","mach_port","number","propertylist","runloop","set","string","timezone","url","uuid","CFArray","CFArrayAppendArray","CFArrayAppendValue","CFArrayApplierFunction","CFArrayApplyFunction","CFArrayBSearchValues","CFArrayCallBacks","CFArrayContainsValue","CFArrayCopyDescriptionCallBack","CFArrayCreate","CFArrayCreateCopy","CFArrayCreateMutable","CFArrayCreateMutableCopy","CFArrayEqualCallBack","CFArrayExchangeValuesAtIndices","CFArrayGetCount","CFArrayGetCountOfValue","CFArrayGetFirstIndexOfValue","CFArrayGetLastIndexOfValue","CFArrayGetTypeID","CFArrayGetValueAtIndex","CFArrayGetValues","CFArrayInsertValueAtIndex","CFArrayIterator","CFArrayRef","CFArrayReleaseCallBack","CFArrayRemoveAllValues","CFArrayRemoveValueAtIndex","CFArrayReplaceValues","CFArrayRetainCallBack","CFArraySetValueAtIndex","CFArraySortValues","CFComparatorFunction","CFIndex","CFMutableArrayRef","__CFArray","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copyDescription","drop","eq","equal","equivalent","fmt","from","from","from","from","from_CFTypes","from_copyable","from_mut_void","from_void","get","get_all_values","get_unchecked","get_values","into","into","into","into","into_iter","into_iter","into_untyped","iter","kCFTypeArrayCallBacks","len","len","next","release","retain","to_owned","to_owned","to_untyped","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","wrap_under_create_rule","wrap_under_get_rule","CFAttributedString","CFAttributedStringCreate","CFAttributedStringCreateMutable","CFAttributedStringCreateMutableCopy","CFAttributedStringGetLength","CFAttributedStringGetTypeID","CFAttributedStringRef","CFAttributedStringReplaceString","CFAttributedStringSetAttribute","CFMutableAttributedString","CFMutableAttributedStringRef","__CFAttributedString","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","char_len","char_len","clone","clone","clone_into","clone_into","default","drop","drop","eq","eq","equivalent","equivalent","from","from","from","from_mut_void","from_mut_void","from_void","from_void","into","into","into","new","new","replace_str","set_attribute","to_owned","to_owned","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","Boolean","CFAllocator","CFAllocatorAllocate","CFAllocatorAllocateCallBack","CFAllocatorContext","CFAllocatorCopyDescriptionCallBack","CFAllocatorCreate","CFAllocatorDeallocate","CFAllocatorDeallocateCallBack","CFAllocatorGetContext","CFAllocatorGetDefault","CFAllocatorGetPreferredSizeForSize","CFAllocatorGetTypeID","CFAllocatorPreferredSizeCallBack","CFAllocatorReallocate","CFAllocatorReallocateCallBack","CFAllocatorRef","CFAllocatorReleaseCallBack","CFAllocatorRetainCallBack","CFAllocatorSetDefault","CFComparisonResult","CFCopyDescription","CFEqual","CFGetRetainCount","CFGetTypeID","CFHash","CFHashCode","CFIndex","CFIndexConvertible","CFNullRef","CFOptionFlags","CFRange","CFRelease","CFRetain","CFShow","CFType","CFTypeID","CFTypeRef","EqualTo","FromMutVoid","FromVoid","GreaterThan","ItemMutRef","ItemRef","LessThan","OSStatus","Ref","SInt32","TCFType","TCFTypeRef","ToVoid","allocate","as_CFType","as_CFTypeRef","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_void_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","copyDescription","deallocate","deref","deref","deref_mut","downcast","downcast_into","drop","drop","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_mut_void","from_mut_void","from_mut_void","from_void","from_void","from_void","from_void_ptr","info","init","instance_of","into","into","into","into","into","into","into","into","into_CFType","kCFAllocatorDefault","kCFAllocatorMalloc","kCFAllocatorMallocZone","kCFAllocatorNull","kCFAllocatorSystemDefault","kCFAllocatorUseContext","kCFNotFound","kCFNull","length","location","mach_port_t","new","preferredSize","reallocate","release","retain","retain_count","show","to_CFIndex","to_owned","to_owned","to_owned","to_owned","to_owned","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of","version","wrap_under_create_rule","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","wrap_under_get_rule","CFBoolean","CFBooleanGetTypeID","CFBooleanRef","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow_mut","clone","clone_into","drop","eq","equivalent","false_value","fmt","from","from","from_mut_void","from_void","into","kCFBooleanFalse","kCFBooleanTrue","to_owned","to_void","to_void","true_value","try_from","try_into","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFBundle","CFBundleCopyBundleURL","CFBundleCopyExecutableURL","CFBundleCopyPrivateFrameworksURL","CFBundleCopyResourcesDirectoryURL","CFBundleCopySharedSupportURL","CFBundleCreate","CFBundleGetBundleWithIdentifier","CFBundleGetFunctionPointerForName","CFBundleGetInfoDictionary","CFBundleGetMainBundle","CFBundleGetTypeID","CFBundleRef","__CFBundle","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","bundle_resources_url","bundle_url","bundle_with_identifier","clone","clone_into","drop","eq","equivalent","executable_url","from","from","from_mut_void","from_void","function_pointer_for_name","info_dictionary","into","into","main_bundle","new","path","private_frameworks_url","resources_path","shared_support_url","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFCharacterSet","CFCharacterSetAddCharactersInRange","CFCharacterSetAddCharactersInString","CFCharacterSetCreateBitmapRepresentation","CFCharacterSetCreateCopy","CFCharacterSetCreateMutable","CFCharacterSetCreateMutableCopy","CFCharacterSetCreateWithBitmapRepresentation","CFCharacterSetCreateWithCharactersInRange","CFCharacterSetCreateWithCharactersInString","CFCharacterSetGetPredefined","CFCharacterSetGetTypeID","CFCharacterSetIntersect","CFCharacterSetInvert","CFCharacterSetIsCharacterMember","CFCharacterSetPredefinedSet","CFCharacterSetRef","CFCharacterSetRemoveCharactersInRange","CFCharacterSetRemoveCharactersInString","CFCharacterSetUnion","CFMutableCharacterSetRef","__CFCharacterSet","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","eq","equivalent","fmt","from","from","from_mut_void","from_void","into","into","kCFCharacterSetAlphaNumeric","kCFCharacterSetCapitalizedLetter","kCFCharacterSetControl","kCFCharacterSetDecimalDigit","kCFCharacterSetDecomposable","kCFCharacterSetIllegal","kCFCharacterSetLetter","kCFCharacterSetLowercaseLetter","kCFCharacterSetNewline","kCFCharacterSetNonBase","kCFCharacterSetPunctuation","kCFCharacterSetSymbol","kCFCharacterSetUppercaseLetter","kCFCharacterSetWhitespace","kCFCharacterSetWhitespaceAndNewline","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFData","CFDataCreate","CFDataCreateWithBytesNoCopy","CFDataGetBytePtr","CFDataGetBytes","CFDataGetLength","CFDataGetTypeID","CFDataRef","__CFData","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone_into","deref","drop","eq","equivalent","fmt","from","from","from_arc","from_buffer","from_mut_void","from_void","into","into","len","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFAbsoluteTime","CFAbsoluteTimeGetCurrent","CFDate","CFDateCompare","CFDateCreate","CFDateGetAbsoluteTime","CFDateGetTimeIntervalSinceDate","CFDateGetTypeID","CFDateRef","CFTimeInterval","__CFDate","abs_time","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","drop","eq","equivalent","fmt","from","from","from_mut_void","from_void","into","into","kCFAbsoluteTimeIntervalSince1904","kCFAbsoluteTimeIntervalSince1970","new","now","partial_cmp","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFDictionary","CFDictionaryAddValue","CFDictionaryApplierFunction","CFDictionaryApplyFunction","CFDictionaryContainsKey","CFDictionaryCopyDescriptionCallBack","CFDictionaryCreate","CFDictionaryCreateMutable","CFDictionaryCreateMutableCopy","CFDictionaryEqualCallBack","CFDictionaryGetCount","CFDictionaryGetKeysAndValues","CFDictionaryGetTypeID","CFDictionaryGetValueIfPresent","CFDictionaryHashCallBack","CFDictionaryKeyCallBacks","CFDictionaryRef","CFDictionaryReleaseCallBack","CFDictionaryRemoveAllValues","CFDictionaryRemoveValue","CFDictionaryReplaceValue","CFDictionaryRetainCallBack","CFDictionarySetValue","CFDictionaryValueCallBacks","CFMutableDictionary","CFMutableDictionaryRef","__CFDictionary","add","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains_key","contains_key","copyDescription","copyDescription","copy_with_capacity","default","drop","drop","eq","eq","equal","equal","equivalent","equivalent","find","find","fmt","fmt","from","from","from","from","from","from","from_CFType_pairs","from_CFType_pairs","from_mut_void","from_mut_void","from_void","from_void","get","get","get_keys_and_values","get_keys_and_values","hash","into","into","into","into","into","into_untyped","into_untyped","is_empty","is_empty","kCFTypeDictionaryKeyCallBacks","kCFTypeDictionaryValueCallBacks","len","len","new","release","release","remove","remove_all","replace","retain","retain","set","to_immutable","to_mutable","to_owned","to_owned","to_owned","to_owned","to_untyped","to_untyped","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","with_capacity","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","CFError","CFErrorCopyDescription","CFErrorGetCode","CFErrorGetDomain","CFErrorGetTypeID","CFErrorRef","__CFError","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","description","description","domain","drop","eq","equivalent","fmt","fmt","from","from","from_mut_void","from_void","into","into","kCFErrorDomainCocoa","kCFErrorDomainMach","kCFErrorDomainOSStatus","kCFErrorDomainPOSIX","to_owned","to_string","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFFileDescriptor","CFFileDescriptorCallBack","CFFileDescriptorContext","CFFileDescriptorCreate","CFFileDescriptorCreateRunLoopSource","CFFileDescriptorDisableCallBacks","CFFileDescriptorEnableCallBacks","CFFileDescriptorGetContext","CFFileDescriptorGetNativeDescriptor","CFFileDescriptorGetTypeID","CFFileDescriptorInvalidate","CFFileDescriptorIsValid","CFFileDescriptorNativeDescriptor","CFFileDescriptorRef","__CFFileDescriptor","as_CFTypeRef","as_concrete_TypeRef","as_raw_fd","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","context","copyDescription","disable_callbacks","drop","enable_callbacks","eq","equivalent","from","from","from","from_mut_void","from_void","info","into","into","into","invalidate","kCFFileDescriptorReadCallBack","kCFFileDescriptorWriteCallBack","new","release","retain","to_owned","to_owned","to_run_loop_source","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","valid","version","wrap_under_create_rule","wrap_under_get_rule","CFAllocatorRef","CFIndex","CFMachPort","CFMachPortCreateRunLoopSource","CFMachPortGetTypeID","CFMachPortRef","CFTypeID","__CFMachPort","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_runloop_source","drop","eq","equivalent","fmt","from","from","from_mut_void","from_void","into","into","to_owned","to_void","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFBooleanGetTypeID","CFBooleanGetValue","CFBooleanRef","CFNumber","CFNumberCompare","CFNumberCreate","CFNumberGetType","CFNumberGetTypeID","CFNumberGetValue","CFNumberRef","CFNumberType","__CFBoolean","__CFNumber","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","drop","eq","equivalent","fmt","from","from","from","from","from","from","from","from_mut_void","from_void","into","into","into","kCFBooleanFalse","kCFBooleanTrue","kCFNumberCFIndexType","kCFNumberCGFloatType","kCFNumberCharType","kCFNumberDoubleType","kCFNumberFloat32Type","kCFNumberFloat64Type","kCFNumberFloatType","kCFNumberIntType","kCFNumberLongLongType","kCFNumberLongType","kCFNumberMaxType","kCFNumberNSIntegerType","kCFNumberSInt16Type","kCFNumberSInt32Type","kCFNumberSInt64Type","kCFNumberSInt8Type","kCFNumberShortType","partial_cmp","to_f32","to_f64","to_i32","to_i64","to_owned","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFPropertyList","CFPropertyListCreateData","CFPropertyListCreateWithData","CFPropertyListFormat","CFPropertyListMutabilityOptions","CFPropertyListRef","CFPropertyListSubClass","as_CFType","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow_mut","clone","clone_into","create_data","create_with_data","downcast","downcast_into","drop","eq","equivalent","fmt","from","instance_of","into","into_CFPropertyList","into_CFType","kCFPropertyListBinaryFormat_v1_0","kCFPropertyListImmutable","kCFPropertyListMutableContainers","kCFPropertyListMutableContainersAndLeaves","kCFPropertyListOpenStepFormat","kCFPropertyListXMLFormat_v1_0","retain_count","show","to_CFPropertyList","to_owned","try_from","try_into","type_id","type_of","wrap_under_create_rule","wrap_under_get_rule","CFRunLoop","CFRunLoopActivity","CFRunLoopAddCommonMode","CFRunLoopAddObserver","CFRunLoopAddSource","CFRunLoopAddTimer","CFRunLoopContainsObserver","CFRunLoopContainsSource","CFRunLoopContainsTimer","CFRunLoopCopyAllModes","CFRunLoopCopyCurrentMode","CFRunLoopGetCurrent","CFRunLoopGetMain","CFRunLoopGetNextTimerFireDate","CFRunLoopGetTypeID","CFRunLoopIsWaiting","CFRunLoopMode","CFRunLoopObserver","CFRunLoopObserverCallBack","CFRunLoopObserverContext","CFRunLoopObserverCreate","CFRunLoopObserverDoesRepeat","CFRunLoopObserverGetActivities","CFRunLoopObserverGetContext","CFRunLoopObserverGetOrder","CFRunLoopObserverGetTypeID","CFRunLoopObserverInvalidate","CFRunLoopObserverIsValid","CFRunLoopObserverRef","CFRunLoopRef","CFRunLoopRemoveObserver","CFRunLoopRemoveSource","CFRunLoopRemoveTimer","CFRunLoopRun","CFRunLoopRunInMode","CFRunLoopRunResult","CFRunLoopSource","CFRunLoopSourceContext","CFRunLoopSourceContext1","CFRunLoopSourceCreate","CFRunLoopSourceGetContext","CFRunLoopSourceGetOrder","CFRunLoopSourceGetTypeID","CFRunLoopSourceInvalidate","CFRunLoopSourceIsValid","CFRunLoopSourceRef","CFRunLoopSourceSignal","CFRunLoopStop","CFRunLoopTimer","CFRunLoopTimerCallBack","CFRunLoopTimerContext","CFRunLoopTimerCreate","CFRunLoopTimerDoesRepeat","CFRunLoopTimerGetContext","CFRunLoopTimerGetInterval","CFRunLoopTimerGetNextFireDate","CFRunLoopTimerGetOrder","CFRunLoopTimerGetTolerance","CFRunLoopTimerGetTypeID","CFRunLoopTimerInvalidate","CFRunLoopTimerIsValid","CFRunLoopTimerRef","CFRunLoopTimerSetNextFireDate","CFRunLoopTimerSetTolerance","CFRunLoopWakeUp","Finished","HandledSource","Stopped","TimedOut","__CFRunLoop","__CFRunLoopObserver","__CFRunLoopSource","__CFRunLoopTimer","add_observer","add_source","add_timer","as_CFTypeRef","as_CFTypeRef","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains_observer","contains_source","contains_timer","copyDescription","copyDescription","copyDescription","copyDescription","current_mode","drop","drop","drop","drop","eq","eq","eq","eq","eq","equal","equal","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_file_descriptor","from_mut_void","from_mut_void","from_mut_void","from_mut_void","from_void","from_void","from_void","from_void","getPort","get_current","get_main","hash","hash","info","info","info","info","into","into","into","into","into","into","into","into","into","into","into","into","into","kCFRunLoopAfterWaiting","kCFRunLoopAllActivities","kCFRunLoopBeforeSources","kCFRunLoopBeforeTimers","kCFRunLoopBeforeWaiting","kCFRunLoopCommonModes","kCFRunLoopDefaultMode","kCFRunLoopEntry","kCFRunLoopExit","kCFRunLoopRunFinished","kCFRunLoopRunHandledSource","kCFRunLoopRunStopped","kCFRunLoopRunTimedOut","new","perform","perform","release","release","release","release","remove_observer","remove_source","remove_timer","retain","retain","retain","retain","run_current","run_in_mode","schedule","stop","to_owned","to_owned","to_owned","to_owned","to_owned","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","wrap_under_create_rule","wrap_under_create_rule","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","wrap_under_get_rule","wrap_under_get_rule","CFSet","CFSetApplierFunction","CFSetApplyFunction","CFSetCallBacks","CFSetContainsValue","CFSetCopyDescriptionCallBack","CFSetCreate","CFSetCreateCopy","CFSetEqualCallBack","CFSetGetCount","CFSetGetCountOfValue","CFSetGetTypeID","CFSetGetValue","CFSetGetValueIfPresent","CFSetGetValues","CFSetHashCallBack","CFSetRef","CFSetReleaseCallBack","CFSetRetainCallBack","__CFSet","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copyDescription","drop","eq","equal","equivalent","fmt","from","from","from","from_mut_void","from_slice","from_void","hash","into","into","into","kCFTypeSetCallBacks","len","release","retain","to_owned","to_owned","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","wrap_under_create_rule","wrap_under_get_rule","CFString","CFStringCompareFlags","CFStringCreateWithBytes","CFStringCreateWithBytesNoCopy","CFStringCreateWithCString","CFStringCreateWithCharactersNoCopy","CFStringEncoding","CFStringEncodings","CFStringGetBytes","CFStringGetCString","CFStringGetCStringPtr","CFStringGetLength","CFStringGetTypeID","CFStringRef","UniChar","__CFString","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","char_len","clone","clone_into","drop","eq","eq","eq","equivalent","fmt","fmt","from","from","from","from_mut_void","from_static_string","from_str","from_void","into","into","kCFStringEncodingUTF8","new","to_owned","to_string","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFTimeZone","CFTimeZoneCopyDefault","CFTimeZoneCopySystem","CFTimeZoneCreateWithTimeIntervalFromGMT","CFTimeZoneGetName","CFTimeZoneGetSecondsFromGMT","CFTimeZoneGetTypeID","CFTimeZoneRef","__CFTimeZone","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","drop","eq","equivalent","fmt","from","from","from_mut_void","from_void","into","into","name","new","seconds_from_gmt","system","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFURL","CFURLBookmarkCreationOptions","CFURLBookmarkFileCreationOptions","CFURLBookmarkResolutionOptions","CFURLCanBeDecomposed","CFURLClearResourcePropertyCache","CFURLCopyAbsoluteURL","CFURLCopyFileSystemPath","CFURLCopyFragment","CFURLCopyHostName","CFURLCopyLastPathComponent","CFURLCopyNetLocation","CFURLCopyParameterString","CFURLCopyPassword","CFURLCopyPath","CFURLCopyPathExtension","CFURLCopyQueryString","CFURLCopyResourceSpecifier","CFURLCopyScheme","CFURLCopyStrictPath","CFURLCopyUserName","CFURLCreateAbsoluteURLWithBytes","CFURLCreateBookmarkData","CFURLCreateBookmarkDataFromAliasRecord","CFURLCreateBookmarkDataFromFile","CFURLCreateByResolvingBookmarkData","CFURLCreateFilePathURL","CFURLCreateFromFileSystemRepresentation","CFURLCreateResourcePropertiesForKeysFromBookmarkData","CFURLCreateResourcePropertyForKeyFromBookmarkData","CFURLCreateWithBytes","CFURLCreateWithFileSystemPath","CFURLCreateWithFileSystemPathRelativeToBase","CFURLGetBytes","CFURLGetFileSystemRepresentation","CFURLGetPortNumber","CFURLGetString","CFURLGetTypeID","CFURLHasDirectoryPath","CFURLPathStyle","CFURLRef","CFURLSetResourcePropertyForKey","CFURLStartAccessingSecurityScopedResource","CFURLStopAccessingSecurityScopedResource","CFURLWriteBookmarkDataToFile","__CFURL","absolute","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","eq","equivalent","fmt","from","from","from_file_system_path","from_mut_void","from_path","from_void","get_file_system_path","get_string","into","into","kCFURLAttributeModificationDateKey","kCFURLBookmarkCreationMinimalBookmarkMask","kCFURLBookmarkCreationPreferFileIDResolutionMask","kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess","kCFURLBookmarkCreationSuitableForBookmarkFile","kCFURLBookmarkCreationWithSecurityScope","kCFURLContentAccessDateKey","kCFURLContentModificationDateKey","kCFURLCreationDateKey","kCFURLFileResourceIdentifierKey","kCFURLFileResourceTypeKey","kCFURLFileSecurityKey","kCFURLHFSPathStyle","kCFURLHasHiddenExtensionKey","kCFURLIsDirectoryKey","kCFURLIsExecutableKey","kCFURLIsHiddenKey","kCFURLIsPackageKey","kCFURLIsReadableKey","kCFURLIsRegularFileKey","kCFURLIsSymbolicLinkKey","kCFURLIsSystemImmutableKey","kCFURLIsUserImmutableKey","kCFURLIsVolumeKey","kCFURLIsWritableKey","kCFURLLabelNumberKey","kCFURLLinkCountKey","kCFURLLocalizedLabelKey","kCFURLLocalizedNameKey","kCFURLLocalizedTypeDescriptionKey","kCFURLNameKey","kCFURLPOSIXPathStyle","kCFURLParentDirectoryURLKey","kCFURLPreferredIOBlockSizeKey","kCFURLTypeIdentifierKey","kCFURLVolumeIdentifierKey","kCFURLVolumeURLKey","kCFURLWindowsPathStyle","to_owned","to_path","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFUUID","CFUUIDBytes","CFUUIDCreate","CFUUIDCreateFromUUIDBytes","CFUUIDGetTypeID","CFUUIDGetUUIDBytes","CFUUIDRef","__CFUUID","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte0","byte1","byte10","byte11","byte12","byte13","byte14","byte15","byte2","byte3","byte4","byte5","byte6","byte7","byte8","byte9","clone","clone","clone_into","clone_into","default","default","drop","eq","equivalent","fmt","from","from","from","from_mut_void","from_void","into","into","into","new","to_owned","to_owned","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule"],"q":[[0,"core_foundation"],[25,"core_foundation::array"],[129,"core_foundation::attributed_string"],[201,"core_foundation::base"],[392,"core_foundation::boolean"],[423,"core_foundation::bundle"],[479,"core_foundation::characterset"],[547,"core_foundation::data"],[592,"core_foundation::date"],[641,"core_foundation::dictionary"],[786,"core_foundation::error"],[834,"core_foundation::filedescriptor"],[904,"core_foundation::mach_port"],[945,"core_foundation::number"],[1026,"core_foundation::propertylist"],[1069,"core_foundation::runloop"],[1362,"core_foundation::set"],[1432,"core_foundation::string"],[1489,"core_foundation::timezone"],[1534,"core_foundation::url"],[1655,"core_foundation::uuid"],[1723,"core::ffi"],[1724,"core::fmt"],[1725,"core::fmt"],[1726,"core::option"],[1727,"std::os::raw"],[1728,"alloc::vec"],[1729,"core::result"],[1730,"core::any"],[1731,"core::cmp"],[1732,"core::fmt"],[1733,"alloc::sync"],[1734,"core::convert"],[1735,"core::marker"],[1736,"std::os::fd::raw"],[1737,"core::time"],[1738,"std::path"]],"d":["","Heterogeneous immutable arrays.","","","A Boolean type.","Core Foundation Bundle Type","A set of Unicode compliant characters.","Core Foundation byte buffers.","Core Foundation date objects.","Declare a Rust type that wraps an underlying …","Dictionaries of key-value pairs.","Core Foundation errors.","","","Implement <code>std::fmt::Debug</code> for the given type.","Provide an implementation of the <code>TCFType</code> trait for the Rust","","Immutable numbers.","Core Foundation property lists","","An immutable bag of elements.","Immutable strings.","Core Foundation time zone objects.","A URL type for Core Foundation.","Core Foundation UUID objects.","A heterogeneous immutable array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>CFArray</code> with the given elements, which must …","Creates a new <code>CFArray</code> with the given elements, which must …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the same array, but with the type reset to void …","Iterates over the elements of this <code>CFArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Superclass of all Core Foundation objects.","","","","A trait describing how to convert from the stored *mut …","A trait describing how to convert from the stored *const …","","A reference to a mutable element inside a container","A reference to an element inside a container","","","The reference type wrapped inside this type.","","All Core Foundation types implement this trait. The …","Trait for all types which are Core Foundation reference …","A trait describing how to convert from the stored *const …","","Returns the object as a wrapped <code>CFType</code>. The reference …","Returns the object as a raw <code>CFTypeRef</code>. The reference count …","","","Returns the object as its concrete TypeRef.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to downcast the <code>CFType</code> to a subclass. Checking if the …","Similar to <code>downcast</code>, but consumes self and can thus avoid …","","","","","","","","","","","Formats the value using <code>CFCopyDescription</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns true if this value is an instance of another type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the object as a wrapped <code>CFType</code>. Consumes self and …","","","","","","","Constant used by some functions to indicate failed …","","","","","","","","","","Returns the reference count of the object. It is unwise to …","Writes a debugging version of this object on standard …","Always use this method to construct a <code>CFIndex</code> value. It …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type ID for this class.","","","","","","","","","","Returns the type ID of this object.","","Returns an instance of the object, wrapping the underlying …","","","Returns an instance of the object, wrapping the underlying …","","","A Boolean type.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A Bundle type.","","","","","","","","","","","","","","","","","","","","Bundle’s resources location","Bundle’s own location","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Bundle’s own location","","Bundle’s resources location","","","","","","","","","","","","","","","An immutable set of Unicde characters.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A byte buffer.","","","","","","","","","","","","","","","Returns a pointer to the underlying bytes in this data. …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a CFData referencing <code>buffer</code> without creating a copy","Creates a CFData around a copy <code>buffer</code>","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of this byte buffer.","","","","","","","","","","","","","","","","A date.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the key-value pair to the dictionary if no such key …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new mutable dictionary with the key-value pairs …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Panics","Panics","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the same dictionary, but with the types reset to …","Returns the same dictionary, but with the types reset to …","","","","","","","","","","Removes the value of the key from the dictionary.","","Replaces the value of the key in the dictionary.","","","Sets the value of the key in the dictionary.","Returns a <code>CFDictionary</code> pointing to the same underlying …","Returns a <code>CFMutableDictionary</code> pointing to the same …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error value.","","","","","","","","","","","","","","","Returns the code identifying this type of error.","Returns a human-presentable description of the error.","","Returns a string identifying the domain with which this …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An immutable numeric value.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","An immutable numeric value.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A CFPropertyList struct. This is superclass to <code>CFData</code>, …","","","","","","Trait for all subclasses of <code>CFPropertyList</code>.","","","","","","","","","","Try to downcast the <code>CFPropertyList</code> to a subclass. Checking …","Similar to <code>downcast</code>, but consumes self and can thus avoid …","","","","","Returns the argument unchanged.","Returns true if this value is an instance of another type.","Calls <code>U::from(self)</code>.","Equal to <code>to_CFPropertyList</code>, but consumes self and avoids …","","","","","","","","Returns the reference count of the object. It is unwise to …","Writes a debugging version of this object on standard …","Create an instance of the superclass type <code>CFPropertyList</code> …","","","","","Returns the type ID of this object. Will be one of CFData, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An immutable bag of elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new set from a list of <code>CFType</code> instances.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the number of elements in the CFSet","","","","","","","","","","","","","","","","","","","","","An immutable string in one of a variety of encodings.","","","","","","","","","","","","","","","","","","","","","","Returns the number of characters in the string.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Like <code>CFString::new</code>, but references a string that can be …","See also CFString::new for a variant of this which does …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new <code>CFString</code> instance from a Rust string.","","","","","","","","","","","","","","","A time zone.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The timezone database ID that identifies the time zone. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A UUID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,1,9,25,7,1,9,25,7,9,7,9,7,7,9,9,7,9,9,1,9,25,7,9,9,9,9,9,9,9,9,1,9,25,7,9,25,9,9,0,9,25,25,7,7,9,7,9,11,9,9,1,9,25,7,1,9,25,7,1,9,9,25,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,32,33,32,33,31,32,33,31,32,33,32,33,32,33,32,33,33,32,33,32,33,32,33,31,32,33,32,33,32,33,31,32,33,32,33,33,33,32,33,34,35,32,32,33,33,31,32,33,31,32,33,31,32,32,33,33,32,33,32,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,42,0,0,42,0,16,0,0,0,0,38,16,16,39,40,16,39,40,143,19,18,39,40,42,2,38,19,18,39,40,42,2,38,39,40,42,2,38,39,40,42,2,38,38,38,19,18,18,39,39,39,40,19,18,39,40,42,40,19,18,39,42,19,18,39,40,42,2,38,144,39,40,22,39,40,143,38,2,16,19,18,39,40,42,42,2,38,16,0,0,0,0,0,0,0,0,2,2,0,40,38,38,38,38,16,16,145,39,40,42,2,38,79,10,39,39,40,40,19,18,39,40,42,2,38,19,18,39,40,42,2,38,16,19,18,39,39,40,40,42,2,38,16,38,16,39,40,16,39,40,0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,49,49,49,49,49,49,49,49,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,53,51,53,51,53,53,53,53,53,53,53,53,53,53,51,53,53,53,53,53,51,53,53,53,53,53,53,53,53,54,53,53,51,53,51,53,51,53,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,58,61,58,61,61,61,61,61,61,61,58,61,61,61,58,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,62,61,61,58,61,58,61,58,61,61,61,61,0,0,0,0,0,0,0,0,0,63,63,59,63,59,63,63,63,63,63,63,63,63,63,59,63,63,63,63,63,59,63,63,63,64,63,63,59,63,59,63,59,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,71,71,71,70,71,70,71,71,71,71,71,71,71,71,70,71,71,71,70,71,0,0,71,71,71,71,73,71,71,70,71,70,71,70,71,71,71,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,56,76,56,76,30,56,76,74,75,30,56,76,74,75,56,76,74,75,56,76,74,75,56,76,74,75,76,76,56,76,56,76,74,75,56,76,56,76,56,76,30,56,76,76,74,75,56,76,56,76,56,76,56,76,56,76,74,30,56,76,74,75,56,76,56,76,0,0,56,76,76,74,75,76,76,76,74,75,76,76,56,56,76,74,75,56,76,77,78,56,56,76,76,30,56,76,74,75,30,56,76,74,75,30,56,56,76,76,74,75,74,75,76,56,76,56,76,0,0,0,0,0,0,0,81,81,80,81,80,81,81,81,81,81,81,81,81,81,81,81,81,80,81,81,81,80,81,0,0,0,0,81,81,82,81,81,80,81,80,81,80,81,81,81,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,89,89,87,86,89,87,86,89,86,89,86,89,89,86,89,89,89,89,89,87,86,89,89,89,86,87,86,89,89,0,0,89,86,86,86,89,89,90,89,89,87,86,89,87,86,89,87,86,89,89,89,86,89,89,0,0,0,0,0,0,0,0,96,96,95,96,95,96,96,96,96,96,96,96,96,95,96,96,96,95,96,96,41,97,96,96,95,96,95,96,95,96,96,96,96,0,0,0,0,0,0,0,0,0,0,0,0,0,101,101,98,99,101,98,99,101,101,101,101,101,101,101,101,98,99,101,101,101,101,101,101,101,98,99,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,101,101,101,101,101,50,102,101,101,98,99,101,98,99,101,98,99,101,101,101,101,0,0,0,0,0,0,0,105,105,105,105,105,105,105,0,0,105,105,105,105,105,105,105,105,105,109,105,0,0,0,0,0,0,105,105,109,105,105,105,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,124,124,124,0,0,0,0,116,116,116,116,119,94,117,116,119,94,117,110,88,111,114,146,113,115,112,116,124,119,94,117,110,88,111,114,146,113,115,112,116,124,119,94,117,114,116,124,119,94,117,116,124,119,94,117,116,116,116,114,146,113,115,116,116,119,94,117,116,124,119,94,117,114,146,116,119,94,117,116,124,110,88,111,114,146,113,115,112,116,124,119,94,117,94,116,119,94,117,116,119,94,117,146,116,116,114,146,114,146,113,115,110,88,111,114,146,113,115,112,116,124,119,94,117,0,0,0,0,0,0,0,0,0,0,0,0,0,119,114,146,114,146,113,115,116,116,116,114,146,113,115,116,116,114,116,116,124,119,94,117,120,122,123,121,116,116,119,119,94,94,117,117,110,88,111,114,146,113,115,112,116,124,119,94,117,110,88,111,114,146,113,115,112,116,124,119,94,117,110,88,111,114,146,113,115,112,116,116,124,119,119,94,94,117,117,114,146,113,115,116,119,94,117,116,119,94,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,130,130,128,129,130,128,129,130,129,130,129,129,130,130,129,130,130,130,128,129,130,130,130,129,130,128,129,0,130,129,129,130,129,130,130,131,130,128,129,130,128,129,130,130,128,129,129,130,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,29,36,29,36,36,36,36,36,36,36,36,36,36,36,29,36,36,36,36,36,36,29,36,0,36,36,36,37,36,36,29,36,29,36,29,36,36,36,36,0,0,0,0,0,0,0,0,0,134,134,133,134,133,134,134,134,134,134,134,134,134,133,134,134,134,133,134,134,134,134,134,134,135,134,134,133,134,133,134,133,134,134,134,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,52,55,52,55,55,55,55,55,55,55,52,55,55,55,55,55,55,55,52,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,136,55,55,52,55,52,55,52,55,55,55,55,0,0,0,0,0,0,0,0,141,141,139,140,141,139,140,141,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,141,140,141,140,141,141,141,141,141,139,140,141,141,141,139,140,141,141,140,141,142,141,141,139,140,141,139,140,141,139,140,141,141,141,141],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,2],3],[[1,4],3],0,[[1,2,4],3],[[1,2,4,4],5],0,[[1,2,4],6],0,[[4,4,5,7],1],[[4,1],1],[[4,5,7],1],[[4,5,1],1],0,[[1,5,5],3],[1,5],[[1,2,4],5],[[1,2,4],5],[[1,2,4],5],[[],8],[[1,5],4],[[1,2,4],3],[[1,5,4],3],0,0,0,[1,3],[[1,5],3],[[1,2,4,5],3],0,[[1,5,4],3],[[1,2,4],3],0,0,0,0,[[[9,[-1]]],10,[]],[[[9,[-1]]],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[7,7],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[[9,[-1]]],3,[]],[[9,9],12],0,[[-1,-2],12,[],[]],[[[9,[-1]],13],14,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[15,[-1]]],[[9,[-1]]],16],[[[15,[-1]]],[[9,[-1]]],17],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[[[9,[-1]],20],[[21,[[19,[-1]]]]],22],[[[9,[-1]]],[[24,[23]]],[]],[[[9,[-1]],20],[[19,[-1]]],22],[[[9,[-1]],2],[[24,[23]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[25,[-1]]],22],[-1,-2,[],[]],[[[9,[-1]]],9,[]],[[[9,[-1]]],[[25,[-1]]],[]],0,[[[9,[-1]]],20,[]],[[[25,[-1]]],8,22],[[[25,[-1]]],[[21,[[19,[-1]]]]],22],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],9,[]],[11,23],[9,23],[9,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[-1,27,[]],[-1,27,[]],0,[11,[[9,[-1]]],[]],[11,[[9,[-1]]],[]],0,[[4,29,30],31],[[4,5],31],[[4,5,31],31],[31,5],[[],8],0,[[31,2,29],3],[[31,2,29,4],3],0,0,0,[32,10],[33,10],[32,34],[33,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,20],[33,20],[32,32],[33,33],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],33],[32,3],[33,3],[[32,32],12],[[33,33],12],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,32],[[],33],[[33,36,2],3],[[33,2,37,-1],3,16],[-1,-2,[],[]],[-1,-2,[],[]],[34,23],[35,23],[32,23],[32,23],[33,23],[33,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[[],28],[-1,27,[]],[34,32],[35,33],[34,32],[35,33],0,0,[[4,5,8],4],0,0,0,[[4,38],4],[[4,4],3],0,[[4,38],3],[[],4],[[4,5,8],5],[[],8],0,[[4,4,5,8],4],0,0,0,0,[4,3],0,[4,29],[[4,4],6],[4,5],[4,8],[4,8],0,0,0,0,0,0,[4,3],[4,4],[4,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,39,[]],[-1,10,[]],[39,10],[40,10],[-1,[],[]],[39,10],[40,41],[-1,4,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,39],[40,40],[42,42],[2,2],[38,38],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[[19,[-1]]],-1,[]],[[[18,[-1]]],-1,[]],[[[18,[-1]]],-1,[]],[39,[[21,[-1]]],43],[39,[[21,[-1]]],43],[39,3],[40,3],[[[19,[-1]],[19,[-1]]],12,44],[[[18,[-1]],[18,[-1]]],12,44],[[39,39],12],[[40,40],12],[[42,42],12],[[-1,-2],12,[],[]],[[[19,[-1]],13],[[26,[3,45]]],46],[[[18,[-1]],13],[[26,[3,45]]],46],[[39,13],14],[[42,13],[[26,[3,45]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[23,[[18,[-1]]],47],[4,[[18,[-1]]],[]],[4,[[18,[-1]]],[]],[23,[[19,[-1]]],47],[4,[[19,[-1]]],[]],[4,[[19,[-1]]],[]],[4,-1,[]],0,[[5,5],2],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,47],0,0,0,0,0,0,0,0,0,0,0,[38,40],0,0,0,0,[-1,20,[]],[-1,3,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[10,23],[39,23],[39,23],[40,23],[40,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[[],28],[-1,27,[]],[-1,27,[]],[[],28],[-1,27,[]],[[],28],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,28,[]],0,[[],-1,[]],[10,39],[41,40],[[],-1,[]],[10,39],[41,40],0,[[],8],0,[49,10],[49,50],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[[-1,-2],3,[],[]],[49,3],[[49,49],12],[[-1,-2],12,[],[]],[[],49],[[49,13],14],[-1,-1,[]],[12,49],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[49,23],[49,23],[[],49],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[[],28],[50,49],[50,49],0,[51,52],[51,52],[51,52],[51,52],[51,52],[[4,52],51],[29,51],[[51,29],4],[51,30],[[],51],[[],8],0,0,[53,10],[53,54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,[[21,[55]]]],[53,[[21,[55]]]],[36,[[21,[53]]]],[53,53],[[-1,-2],3,[],[]],[53,3],[[53,53],12],[[-1,-2],12,[],[]],[53,[[21,[55]]]],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[[53,36],23],[53,[[56,[36,39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[],53],[55,[[21,[53]]]],[53,[[21,[57]]]],[53,[[21,[55]]]],[53,[[21,[57]]]],[53,[[21,[55]]]],[-1,-2,[],[]],[54,23],[53,23],[53,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[[],28],[-1,27,[]],[54,53],[54,53],0,[[58,2],3],[[58,29],3],[[4,58],59],[[4,58],58],[4,58],[[4,58],58],[[4,59],58],[[4,2],58],[[4,29],58],[5,58],[[],8],[[58,58],3],[58,3],[[58,60],6],0,0,[[58,2],3],[[58,29],3],[[58,58],3],0,0,[61,10],[61,62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,61],[[-1,-2],3,[],[]],[61,3],[[61,61],12],[[-1,-2],12,[],[]],[[61,13],14],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[62,23],[61,23],[61,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[62,61],[62,61],0,[[4,6,5],59],[[4,6,5,4],59],[59,6],[[59,2,6],3],[59,5],[[],8],0,0,[63,10],[63,64],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,[[15,[6]]]],[63,63],[[-1,-2],3,[],[]],[63,[[15,[6]]]],[63,3],[[63,63],12],[[-1,-2],12,[],[]],[[63,13],14],[-1,-1,[]],[-1,-1,[]],[[[65,[-1]]],63,[[66,[[15,[6]]]],67,68]],[[[15,[6]]],63],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,20],[-1,-2,[],[]],[64,23],[63,23],[63,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[[],28],[-1,27,[]],[64,63],[64,63],0,[[],69],0,[[70,70,4],42],[[4,69],70],[70,69],[[70,70],69],[[],8],0,0,0,[71,72],[71,10],[71,73],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[71,71],[[-1,-2],3,[],[]],[[71,71],48],[71,3],[[71,71],12],[[-1,-2],12,[],[]],[[71,13],14],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[72,71],[[],71],[[71,71],[[21,[48]]]],[-1,-2,[],[]],[73,23],[71,23],[71,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[73,71],[73,71],0,[[30,4,4],3],0,[[30,4],3],[[30,4],6],0,[[4,4,4,5,74,75],30],[[4,5,74,75],30],[[4,5,30],30],0,[30,5],[[30,4,4],3],[[],8],[[30,4,4],6],0,0,0,0,[30,3],[[30,4],3],[[30,4,4],3],0,[[30,4,4],3],0,0,0,0,[[[76,[-1,-2]],-1,-2],3,[],[]],[[[56,[-1,-2]]],10,[],[]],[[[76,[-1,-2]]],10,[],[]],[[[56,[-1,-2]]],77,[],[]],[[[76,[-1,-2]]],78,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[76,76],[74,74],[75,75],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[56,[-1,-2]],-1],12,[],[]],[[[76,[-1,-2]],23],12,[],[]],0,0,[[[76,[-1,-2]],5],[[76,[-1,-2]]],[],[]],[[],[[76,[-1,-2]]],[],[]],[[[56,[-1,-2]]],3,[],[]],[[[76,[-1,-2]]],3,[],[]],[[56,56],12],[[76,76],12],0,0,[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[[56,[-1,-2]],-3],[[21,[[19,[-2]]]]],[],22,[[79,[-1]]]],[[[76,[-1,-2]],-1],[[21,[[19,[-2]]]]],[],22],[[[56,[-1,-2]],13],14,[],[]],[[76,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[56,[-1,-2]]],[[76,[-1,-2]]],[],[]],[-1,-1,[]],[-1,-1,[]],[[[15,[[3,[-1,-2]]]]],[[56,[-1,-2]]],16,16],[[[15,[[3,[-1,-2]]]]],[[76,[-1,-2]]],79,79],[4,[[18,[-1]]],[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[4,[[19,[-1]]],[]],[[[56,[-1,-2]],-3],[[19,[-2]]],[],22,[[79,[-1]]]],[[[76,[-1,-2]],-1],[[19,[-2]]],[],22],[[[56,[-1,-2]]],[[3,[[24,[23]],[24,[23]]]]],[],[]],[[[76,[-1,-2]]],[[3,[[24,[23]],[24,[23]]]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[56,[-1,-2]]],56,[],[]],[[[76,[-1,-2]]],76,[],[]],[[[56,[-1,-2]]],12,[],[]],[[[76,[-1,-2]]],12,[],[]],0,0,[[[56,[-1,-2]]],8,[],[]],[[[76,[-1,-2]]],8,[],[]],[[],[[76,[-1,-2]]],[],[]],0,0,[[[76,[-1,-2]],-1],3,[],[]],[[[76,[-1,-2]]],3,[],[]],[[[76,[-1,-2]],-1,-2],3,[],[]],0,0,[[[76,[-1,-2]],-1,-2],3,[],[]],[[[76,[-1,-2]]],[[56,[-1,-2]]],[],[]],[[[56,[-1,-2]]],[[76,[-1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[56,[-1,-2]]],56,[],[]],[[[76,[-1,-2]]],76,[],[]],[77,23],[78,23],[56,23],[56,23],[76,23],[76,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[[],28],[-1,27,[]],[-1,27,[]],[-1,27,[]],0,0,[5,[[76,[-1,-2]]],[],[]],[77,[[56,[-1,-2]]],[],[]],[78,[[76,[-1,-2]]],[],[]],[77,[[56,[-1,-2]]],[],[]],[78,[[76,[-1,-2]]],[],[]],0,[80,29],[80,5],[80,29],[[],8],0,0,[81,10],[81,82],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[81,81],[[-1,-2],3,[],[]],[81,20],[81,36],[81,83],[81,36],[81,3],[[81,81],12],[[-1,-2],12,[],[]],[[81,13],14],[[81,13],14],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,84,[]],[82,23],[81,23],[81,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[82,81],[82,81],0,0,0,[[4,85,6,86],87],[[4,87,5],88],[[87,8],3],[[87,8],3],[[87,86],3],[87,85],[[],8],[87,3],[87,6],0,0,0,[89,10],[89,90],[89,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[86,86],[89,89],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[89,86],0,[[89,92],3],[89,3],[[89,92],3],[[89,89],12],[[-1,-2],12,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[89,3],0,0,[[91,12,93,[21,[86]]],[[21,[89]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[89,20],[[21,[94]]]],[90,23],[89,23],[89,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[-1,27,[]],[89,12],0,[90,89],[90,89],0,0,0,[[4,95,5],88],[[],8],0,0,0,[96,10],[96,97],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[96,96],[[-1,-2],3,[],[]],[[96,20],[[26,[94,3]]]],[96,3],[[96,96],12],[[-1,-2],12,[],[]],[[96,13],14],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,23],[97,23],[96,23],[96,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[[],28],[-1,27,[]],[97,96],[97,96],[[],8],[98,12],0,0,[[99,99,4],42],[[4,100,4],99],[99,100],[[],8],[[99,100,4],12],0,0,0,0,[101,10],[101,102],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,101],[[-1,-2],3,[],[]],[[101,101],48],[101,3],[[101,101],12],[[-1,-2],12,[],[]],[[101,13],14],[-1,-1,[]],[-1,-1,[]],[103,101],[69,101],[104,101],[-1,-1,[]],[85,101],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[101,101],[[21,[48]]]],[101,[[21,[103]]]],[101,[[21,[69]]]],[101,[[21,[85]]]],[101,[[21,[104]]]],[-1,-2,[],[]],[50,23],[102,23],[101,23],[101,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[],28],[102,101],[102,101],0,[[4,4,5,8,80],59],[[4,59,8,5,80],4],0,0,0,0,[105,39],[105,10],[105,106],[-1,-2,[],[]],[-1,-2,[],[]],[105,105],[[-1,-2],3,[],[]],[[23,107],[[26,[63,81]]]],[[63,108],[[26,[[3,[23,107]],81]]]],[105,[[21,[-1]]],109],[105,[[21,[-1]]],109],[105,3],[[105,105],12],[[-1,-2],12,[],[]],[[105,13],14],[-1,-1,[]],[105,12],[-1,-2,[],[]],[-1,105,47],[105,39],0,0,0,0,0,0,[105,20],[105,3],[-1,105,[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[105,28],[106,105],[106,105],0,0,[[110,29],3],[[110,111,29],3],[[110,88,29],3],[[110,112,29],3],[[110,111,29],6],[[110,88,29],6],[[110,112,29],6],[110,1],[110,29],[[],110],[[],110],[[110,29],69],[[],8],[110,6],0,0,0,0,[[4,8,6,5,113],111],[111,6],[111,8],[[111,113],3],[111,5],[[],8],[111,3],[111,6],0,0,[[110,111,29],3],[[110,88,29],3],[[110,112,29],3],[[],3],[[29,69,6],85],0,0,0,0,[[4,5,114],88],[[88,114],3],[88,5],[[],8],[88,3],[88,6],0,[88,3],[110,3],0,0,0,[[4,69,69,8,5,115],112],[112,6],[[112,115],3],[112,69],[112,69],[112,5],[112,69],[[],8],[112,3],[112,6],0,[[112,69],3],[[112,69],3],[110,3],0,0,0,0,0,0,0,0,[[116,117,118],3],[[116,94,118],3],[[116,119,118],3],[116,10],[119,10],[94,10],[117,10],[116,120],[119,121],[94,122],[117,123],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[116,116],[124,124],[119,119],[94,94],[117,117],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[116,117,118],12],[[116,94,118],12],[[116,119,118],12],0,0,0,0,[116,[[21,[84]]]],[116,3],[119,3],[94,3],[117,3],[[116,116],12],[[124,124],12],[[119,119],12],[[94,94],12],[[117,117],12],0,0,[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[116,13],14],[[124,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[89,20],[[21,[94]]]],[4,[[18,[-1]]],[]],[4,[[18,[-1]]],[]],[4,[[18,[-1]]],[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[4,[[19,[-1]]],[]],[4,[[19,[-1]]],[]],[4,[[19,[-1]]],[]],0,[[],116],[[],116],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[72,125,92,20,126,115],119],0,0,0,0,0,0,[[116,117,118],3],[[116,94,118],3],[[116,119,118],3],0,0,0,0,[[],3],[[37,127,12],124],0,[116,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[120,23],[122,23],[123,23],[121,23],[116,23],[116,23],[119,23],[119,23],[94,23],[94,23],[117,23],[117,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[],28],[-1,27,[]],[-1,27,[]],[[],28],[-1,27,[]],[[],28],[[],28],[-1,27,[]],0,0,0,0,[120,116],[121,119],[122,94],[123,117],[120,116],[121,119],[122,94],[123,117],0,0,[[128,4],3],0,[[128,4],6],0,[[4,4,5,129],128],[[4,128],128],0,[128,5],[[128,4],5],[[],8],[[128,4],4],[[128,4,4],6],[[128,4],3],0,0,0,0,0,[[[130,[-1]]],10,[]],[[[130,[-1]]],131,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,130],[129,129],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[[130,[-1]]],3,[]],[[130,130],12],0,[[-1,-2],12,[],[]],[[130,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[[[15,[-1]]],[[130,[-1]]],16],[4,[[19,[-1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[130,[-1]]],8,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[130,23],[130,23],[131,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[[],28],[-1,27,[]],[-1,27,[]],0,[131,[[130,[-1]]],[]],[131,[[130,[-1]]],[]],0,0,[[4,6,5,100,6],29],[[4,6,5,100,6,4],29],[[4,132,100],29],[[4,60,5,4],29],0,0,[[29,2,100,6,6,6,5,5],5],[[29,132,5,100],6],[[29,100],132],[29,5],[[],8],0,0,0,[36,10],[36,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,20],[36,36],[[-1,-2],3,[],[]],[36,3],[[36,83],12],[[36,36],12],[[36,84],12],[[-1,-2],12,[],[]],[[36,13],14],[[36,13],14],[-1,-1,[]],[-1,-1,[]],[83,36],[4,[[18,[-1]]],[]],[83,36],[83,[[26,[36,3]]]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[83,36],[-1,-2,[],[]],[-1,84,[]],[37,23],[36,23],[36,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[[],28],[-1,27,[]],[37,36],[37,36],0,[[],133],[[],133],[[4,69],133],[133,29],[[133,69],69],[[],8],0,0,[134,10],[134,135],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[134,134],[[-1,-2],3,[],[]],[[],134],[134,3],[[134,134],12],[[-1,-2],12,[],[]],[[134,13],14],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[134,36],[125,134],[[134,71],125],[[],134],[-1,-2,[],[]],[135,23],[134,23],[134,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[[],28],[-1,27,[]],[135,134],[135,134],0,0,0,0,[52,6],[52,3],[52,52],[[52,5],29],[[52,29],29],[52,29],[52,29],[52,29],[[52,29],29],[52,29],[52,29],[52,29],[[52,29],29],[52,29],[52,29],[[52,6],29],[52,29],[[4,6,5,100,52,6],52],[[4,52,8,1,52,80],59],[[4,59],59],[[4,52,80],59],[[4,59,8,52,1,6,80],52],[[4,52,80],52],[[4,6,5,6],52],[[4,1,59],30],[[4,29,59],4],[[4,6,5,100,52],52],[[4,29,5,6],52],[[4,29,5,6,52],52],[[52,6,5],5],[[52,6,6,5],6],[52,85],[52,29],[[],8],[52,6],0,0,[[52,29,4,80],6],[52,6],[52,3],[[59,52,8,80],6],0,[55,55],[55,10],[55,136],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,55],[[-1,-2],3,[],[]],[55,3],[[55,55],12],[[-1,-2],12,[],[]],[[55,13],14],[-1,-1,[]],[-1,-1,[]],[[36,137,12],55],[4,[[18,[-1]]],[]],[[-1,12],[[21,[55]]],[[66,[138]]]],[4,[[19,[-1]]],[]],[[55,137],36],[55,36],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[55,[[21,[57]]]],[136,23],[55,23],[55,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[],28],[136,55],[136,55],0,0,[4,139],[[4,140],139],[[],8],[139,140],0,0,[141,10],[141,142],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[140,140],[141,141],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],140],[[],141],[141,3],[[141,141],12],[[-1,-2],12,[],[]],[[141,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[18,[-1]]],[]],[4,[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],141],[-1,-2,[],[]],[-1,-2,[],[]],[142,23],[141,23],[141,23],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[],28],[142,141],[142,141]],"c":[],"p":[[3,"__CFArray",25],[3,"CFRange",201],[15,"tuple"],[4,"c_void",1723],[15,"isize"],[15,"u8"],[3,"CFArrayCallBacks",25],[15,"usize"],[3,"CFArray",25],[6,"CFTypeRef",201],[6,"CFArrayRef",25],[15,"bool"],[3,"Formatter",1724],[6,"Result",1724],[15,"slice"],[8,"TCFType",201],[8,"Copy",1725],[3,"ItemMutRef",201],[3,"ItemRef",201],[6,"CFIndex",904],[4,"Option",1726],[8,"FromVoid",201],[6,"c_void",1727],[3,"Vec",1728],[3,"CFArrayIterator",25],[4,"Result",1729],[3,"TypeId",1730],[6,"CFTypeID",904],[3,"__CFString",1432],[3,"__CFDictionary",641],[3,"__CFAttributedString",129],[3,"CFAttributedString",129],[3,"CFMutableAttributedString",129],[6,"CFAttributedStringRef",129],[6,"CFMutableAttributedStringRef",129],[3,"CFString",1432],[6,"CFStringRef",1432],[3,"CFAllocatorContext",201],[3,"CFType",201],[3,"CFAllocator",201],[6,"CFAllocatorRef",904],[4,"CFComparisonResult",201],[8,"ConcreteCFType",0],[8,"PartialEq",1731],[3,"Error",1724],[8,"Debug",1724],[8,"Sized",1725],[4,"Ordering",1731],[3,"CFBoolean",392],[6,"CFBooleanRef",945],[3,"__CFBundle",423],[3,"__CFURL",1534],[3,"CFBundle",423],[6,"CFBundleRef",423],[3,"CFURL",1534],[3,"CFDictionary",641],[3,"PathBuf",1732],[3,"__CFCharacterSet",479],[3,"__CFData",547],[15,"u16"],[3,"CFCharacterSet",479],[6,"CFCharacterSetRef",479],[3,"CFData",547],[6,"CFDataRef",547],[3,"Arc",1733],[8,"AsRef",1734],[8,"Sync",1725],[8,"Send",1725],[15,"f64"],[3,"__CFDate",592],[3,"CFDate",592],[6,"CFAbsoluteTime",592],[6,"CFDateRef",592],[3,"CFDictionaryKeyCallBacks",641],[3,"CFDictionaryValueCallBacks",641],[3,"CFMutableDictionary",641],[6,"CFDictionaryRef",641],[6,"CFMutableDictionaryRef",641],[8,"ToVoid",201],[3,"__CFError",786],[3,"CFError",786],[6,"CFErrorRef",786],[15,"str"],[3,"String",1735],[15,"i32"],[3,"CFFileDescriptorContext",834],[3,"__CFFileDescriptor",834],[3,"__CFRunLoopSource",1069],[3,"CFFileDescriptor",834],[6,"CFFileDescriptorRef",834],[6,"RawFd",1736],[6,"CFOptionFlags",201],[6,"CFFileDescriptorCallBack",834],[3,"CFRunLoopSource",1069],[3,"__CFMachPort",904],[3,"CFMachPort",904],[6,"CFMachPortRef",904],[3,"__CFBoolean",945],[4,"__CFNumber",945],[15,"u32"],[3,"CFNumber",945],[6,"CFNumberRef",945],[15,"f32"],[15,"i64"],[3,"CFPropertyList",1026],[6,"CFPropertyListRef",1026],[6,"CFPropertyListFormat",1026],[6,"CFPropertyListMutabilityOptions",1026],[8,"CFPropertyListSubClass",1026],[3,"__CFRunLoop",1069],[3,"__CFRunLoopObserver",1069],[3,"__CFRunLoopTimer",1069],[3,"CFRunLoopObserverContext",1069],[3,"CFRunLoopSourceContext",1069],[3,"CFRunLoopTimerContext",1069],[3,"CFRunLoop",1069],[3,"CFRunLoopObserver",1069],[6,"CFRunLoopMode",1069],[3,"CFRunLoopTimer",1069],[6,"CFRunLoopRef",1069],[6,"CFRunLoopTimerRef",1069],[6,"CFRunLoopSourceRef",1069],[6,"CFRunLoopObserverRef",1069],[4,"CFRunLoopRunResult",1069],[6,"CFTimeInterval",592],[6,"CFRunLoopTimerCallBack",1069],[3,"Duration",1737],[3,"__CFSet",1362],[3,"CFSetCallBacks",1362],[3,"CFSet",1362],[6,"CFSetRef",1362],[15,"i8"],[3,"__CFTimeZone",1489],[3,"CFTimeZone",1489],[6,"CFTimeZoneRef",1489],[6,"CFURLRef",1534],[6,"CFURLPathStyle",1534],[3,"Path",1732],[3,"__CFUUID",1655],[3,"CFUUIDBytes",1655],[3,"CFUUID",1655],[6,"CFUUIDRef",1655],[8,"TCFTypeRef",201],[8,"FromMutVoid",201],[8,"CFIndexConvertible",201],[3,"CFRunLoopSourceContext1",1069]]},\
"core_foundation_sys":{"doc":"","t":"AAAAAAAAAAAAAAAAAAAAFFGFFDFGFFFFGFFFFFFFFFGGFFFGFFGGDLLLLLLMMLLLLHMMLLLLLLLMFFFFFGFFGDLLLLLLLGFGDGFFGFFFFGFGGGGFEFFFFFGGGGDFFFGGNNNGGIMKLLLLLLLLLLLLMMLLLLLKMLLLLLHHHHHHHHMMGMMMMLLLLLLLLLLLLMFFFFFFFFFFFGDLLLLLLLFFFFFFFFFFFFFFGGFFFGDLLLLHHHHHHHHHHHHHHHLLLFFFFFFGDLLLLLLLGFFFFFFGGDLLLLHHLLLFGFFGFFFGFFFFGDGGFFFGFDGDLLLLLLLLLLMMMMLLLMLLLHHMMMMLLLLLLLLLLLMMFFFFGDLLLLHHHHLLLGDFFFFFFFFFGGDLLLLLLMLLMLLRRMMLLLLLLLMCCFFGCDLLLLLLLGDFFFFFFFFGFFGFFFNNNNDLLLLLLMLLLMLLMMLLLLLLLMFFGFFFFFGGDELLLLLLLLHHRRRRRRRRRRRRRRRRRLLLLLLFFGGGRRRRRRGFFFFFFFFFFFFFFGDFFFFFFFFGGFFFFFDDFFFFFFGFFGDFFFFFFFFFFGFFFDDDDLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLMMMMMMMLLLLLLLLRRRRRHHRRRRRRMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMGFDFGFFGFFFFFFGGGGDLLLLLLMMLLMLLHMMLLLLLLLMGFFFFGGFFFFFGGDLLLLHLLLFFFFFFGDLLLLLLLGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGFFFFDLLLLHHHHHHHHHHHHRHHHHHHHHHHHHHHHHHHRHHHHHRLLLDFFFFGDLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLL","n":["array","attributed_string","base","bundle","characterset","data","date","dictionary","error","filedescriptor","mach_port","messageport","number","propertylist","runloop","set","string","timezone","url","uuid","CFArrayAppendArray","CFArrayAppendValue","CFArrayApplierFunction","CFArrayApplyFunction","CFArrayBSearchValues","CFArrayCallBacks","CFArrayContainsValue","CFArrayCopyDescriptionCallBack","CFArrayCreate","CFArrayCreateCopy","CFArrayCreateMutable","CFArrayCreateMutableCopy","CFArrayEqualCallBack","CFArrayExchangeValuesAtIndices","CFArrayGetCount","CFArrayGetCountOfValue","CFArrayGetFirstIndexOfValue","CFArrayGetLastIndexOfValue","CFArrayGetTypeID","CFArrayGetValueAtIndex","CFArrayGetValues","CFArrayInsertValueAtIndex","CFArrayRef","CFArrayReleaseCallBack","CFArrayRemoveAllValues","CFArrayRemoveValueAtIndex","CFArrayReplaceValues","CFArrayRetainCallBack","CFArraySetValueAtIndex","CFArraySortValues","CFComparatorFunction","CFMutableArrayRef","__CFArray","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","equal","from","from","into","into","kCFTypeArrayCallBacks","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFAttributedStringCreate","CFAttributedStringCreateMutable","CFAttributedStringCreateMutableCopy","CFAttributedStringGetLength","CFAttributedStringGetTypeID","CFAttributedStringRef","CFAttributedStringReplaceString","CFAttributedStringSetAttribute","CFMutableAttributedStringRef","__CFAttributedString","borrow","borrow_mut","from","into","try_from","try_into","type_id","Boolean","CFAllocatorAllocate","CFAllocatorAllocateCallBack","CFAllocatorContext","CFAllocatorCopyDescriptionCallBack","CFAllocatorCreate","CFAllocatorDeallocate","CFAllocatorDeallocateCallBack","CFAllocatorGetContext","CFAllocatorGetDefault","CFAllocatorGetPreferredSizeForSize","CFAllocatorGetTypeID","CFAllocatorPreferredSizeCallBack","CFAllocatorReallocate","CFAllocatorReallocateCallBack","CFAllocatorRef","CFAllocatorReleaseCallBack","CFAllocatorRetainCallBack","CFAllocatorSetDefault","CFComparisonResult","CFCopyDescription","CFEqual","CFGetRetainCount","CFGetTypeID","CFHash","CFHashCode","CFIndex","CFNullRef","CFOptionFlags","CFRange","CFRelease","CFRetain","CFShow","CFTypeID","CFTypeRef","EqualTo","GreaterThan","LessThan","OSStatus","SInt32","TCFTypeRef","allocate","as_void_ptr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","copyDescription","deallocate","eq","fmt","from","from","from","from_void_ptr","info","init","into","into","into","into","kCFAllocatorDefault","kCFAllocatorMalloc","kCFAllocatorMallocZone","kCFAllocatorNull","kCFAllocatorSystemDefault","kCFAllocatorUseContext","kCFNotFound","kCFNull","length","location","mach_port_t","preferredSize","reallocate","release","retain","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","CFBundleCopyBundleURL","CFBundleCopyExecutableURL","CFBundleCopyPrivateFrameworksURL","CFBundleCopyResourcesDirectoryURL","CFBundleCopySharedSupportURL","CFBundleCreate","CFBundleGetBundleWithIdentifier","CFBundleGetFunctionPointerForName","CFBundleGetInfoDictionary","CFBundleGetMainBundle","CFBundleGetTypeID","CFBundleRef","__CFBundle","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFCharacterSetAddCharactersInRange","CFCharacterSetAddCharactersInString","CFCharacterSetCreateBitmapRepresentation","CFCharacterSetCreateCopy","CFCharacterSetCreateMutable","CFCharacterSetCreateMutableCopy","CFCharacterSetCreateWithBitmapRepresentation","CFCharacterSetCreateWithCharactersInRange","CFCharacterSetCreateWithCharactersInString","CFCharacterSetGetPredefined","CFCharacterSetGetTypeID","CFCharacterSetIntersect","CFCharacterSetInvert","CFCharacterSetIsCharacterMember","CFCharacterSetPredefinedSet","CFCharacterSetRef","CFCharacterSetRemoveCharactersInRange","CFCharacterSetRemoveCharactersInString","CFCharacterSetUnion","CFMutableCharacterSetRef","__CFCharacterSet","borrow","borrow_mut","from","into","kCFCharacterSetAlphaNumeric","kCFCharacterSetCapitalizedLetter","kCFCharacterSetControl","kCFCharacterSetDecimalDigit","kCFCharacterSetDecomposable","kCFCharacterSetIllegal","kCFCharacterSetLetter","kCFCharacterSetLowercaseLetter","kCFCharacterSetNewline","kCFCharacterSetNonBase","kCFCharacterSetPunctuation","kCFCharacterSetSymbol","kCFCharacterSetUppercaseLetter","kCFCharacterSetWhitespace","kCFCharacterSetWhitespaceAndNewline","try_from","try_into","type_id","CFDataCreate","CFDataCreateWithBytesNoCopy","CFDataGetBytePtr","CFDataGetBytes","CFDataGetLength","CFDataGetTypeID","CFDataRef","__CFData","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFAbsoluteTime","CFAbsoluteTimeGetCurrent","CFDateCompare","CFDateCreate","CFDateGetAbsoluteTime","CFDateGetTimeIntervalSinceDate","CFDateGetTypeID","CFDateRef","CFTimeInterval","__CFDate","borrow","borrow_mut","from","into","kCFAbsoluteTimeIntervalSince1904","kCFAbsoluteTimeIntervalSince1970","try_from","try_into","type_id","CFDictionaryAddValue","CFDictionaryApplierFunction","CFDictionaryApplyFunction","CFDictionaryContainsKey","CFDictionaryCopyDescriptionCallBack","CFDictionaryCreate","CFDictionaryCreateMutable","CFDictionaryCreateMutableCopy","CFDictionaryEqualCallBack","CFDictionaryGetCount","CFDictionaryGetKeysAndValues","CFDictionaryGetTypeID","CFDictionaryGetValueIfPresent","CFDictionaryHashCallBack","CFDictionaryKeyCallBacks","CFDictionaryRef","CFDictionaryReleaseCallBack","CFDictionaryRemoveAllValues","CFDictionaryRemoveValue","CFDictionaryReplaceValue","CFDictionaryRetainCallBack","CFDictionarySetValue","CFDictionaryValueCallBacks","CFMutableDictionaryRef","__CFDictionary","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copyDescription","copyDescription","equal","equal","from","from","from","hash","into","into","into","kCFTypeDictionaryKeyCallBacks","kCFTypeDictionaryValueCallBacks","release","release","retain","retain","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version","CFErrorCopyDescription","CFErrorGetCode","CFErrorGetDomain","CFErrorGetTypeID","CFErrorRef","__CFError","borrow","borrow_mut","from","into","kCFErrorDomainCocoa","kCFErrorDomainMach","kCFErrorDomainOSStatus","kCFErrorDomainPOSIX","try_from","try_into","type_id","CFFileDescriptorCallBack","CFFileDescriptorContext","CFFileDescriptorCreate","CFFileDescriptorCreateRunLoopSource","CFFileDescriptorDisableCallBacks","CFFileDescriptorEnableCallBacks","CFFileDescriptorGetContext","CFFileDescriptorGetNativeDescriptor","CFFileDescriptorGetTypeID","CFFileDescriptorInvalidate","CFFileDescriptorIsValid","CFFileDescriptorNativeDescriptor","CFFileDescriptorRef","__CFFileDescriptor","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","from","from","info","into","into","kCFFileDescriptorReadCallBack","kCFFileDescriptorWriteCallBack","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFAllocatorRef","CFIndex","CFMachPortCreateRunLoopSource","CFMachPortGetTypeID","CFMachPortRef","CFTypeID","__CFMachPort","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFMessagePortCallBack","CFMessagePortContext","CFMessagePortCreateLocal","CFMessagePortCreateRemote","CFMessagePortCreateRunLoopSource","CFMessagePortGetContext","CFMessagePortGetInvalidationCallBack","CFMessagePortGetName","CFMessagePortGetTypeID","CFMessagePortInvalidate","CFMessagePortInvalidationCallBack","CFMessagePortIsRemote","CFMessagePortIsValid","CFMessagePortRef","CFMessagePortSendRequest","CFMessagePortSetInvalidationCallBack","CFMessagePortSetName","None","None","Some","Some","__CFMessagePort","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","fmt","from","from","info","into","into","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFBooleanGetTypeID","CFBooleanGetValue","CFBooleanRef","CFNumberCompare","CFNumberCreate","CFNumberGetType","CFNumberGetTypeID","CFNumberGetValue","CFNumberRef","CFNumberType","__CFBoolean","__CFNumber","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","kCFBooleanFalse","kCFBooleanTrue","kCFNumberCFIndexType","kCFNumberCGFloatType","kCFNumberCharType","kCFNumberDoubleType","kCFNumberFloat32Type","kCFNumberFloat64Type","kCFNumberFloatType","kCFNumberIntType","kCFNumberLongLongType","kCFNumberLongType","kCFNumberMaxType","kCFNumberNSIntegerType","kCFNumberSInt16Type","kCFNumberSInt32Type","kCFNumberSInt64Type","kCFNumberSInt8Type","kCFNumberShortType","try_from","try_from","try_into","try_into","type_id","type_id","CFPropertyListCreateData","CFPropertyListCreateWithData","CFPropertyListFormat","CFPropertyListMutabilityOptions","CFPropertyListRef","kCFPropertyListBinaryFormat_v1_0","kCFPropertyListImmutable","kCFPropertyListMutableContainers","kCFPropertyListMutableContainersAndLeaves","kCFPropertyListOpenStepFormat","kCFPropertyListXMLFormat_v1_0","CFRunLoopActivity","CFRunLoopAddCommonMode","CFRunLoopAddObserver","CFRunLoopAddSource","CFRunLoopAddTimer","CFRunLoopContainsObserver","CFRunLoopContainsSource","CFRunLoopContainsTimer","CFRunLoopCopyAllModes","CFRunLoopCopyCurrentMode","CFRunLoopGetCurrent","CFRunLoopGetMain","CFRunLoopGetNextTimerFireDate","CFRunLoopGetTypeID","CFRunLoopIsWaiting","CFRunLoopObserverCallBack","CFRunLoopObserverContext","CFRunLoopObserverCreate","CFRunLoopObserverDoesRepeat","CFRunLoopObserverGetActivities","CFRunLoopObserverGetContext","CFRunLoopObserverGetOrder","CFRunLoopObserverGetTypeID","CFRunLoopObserverInvalidate","CFRunLoopObserverIsValid","CFRunLoopObserverRef","CFRunLoopRef","CFRunLoopRemoveObserver","CFRunLoopRemoveSource","CFRunLoopRemoveTimer","CFRunLoopRun","CFRunLoopRunInMode","CFRunLoopSourceContext","CFRunLoopSourceContext1","CFRunLoopSourceCreate","CFRunLoopSourceGetContext","CFRunLoopSourceGetOrder","CFRunLoopSourceGetTypeID","CFRunLoopSourceInvalidate","CFRunLoopSourceIsValid","CFRunLoopSourceRef","CFRunLoopSourceSignal","CFRunLoopStop","CFRunLoopTimerCallBack","CFRunLoopTimerContext","CFRunLoopTimerCreate","CFRunLoopTimerDoesRepeat","CFRunLoopTimerGetContext","CFRunLoopTimerGetInterval","CFRunLoopTimerGetNextFireDate","CFRunLoopTimerGetOrder","CFRunLoopTimerGetTolerance","CFRunLoopTimerGetTypeID","CFRunLoopTimerInvalidate","CFRunLoopTimerIsValid","CFRunLoopTimerRef","CFRunLoopTimerSetNextFireDate","CFRunLoopTimerSetTolerance","CFRunLoopWakeUp","__CFRunLoop","__CFRunLoopObserver","__CFRunLoopSource","__CFRunLoopTimer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","copyDescription","copyDescription","copyDescription","copyDescription","equal","equal","from","from","from","from","from","from","from","from","getPort","hash","hash","info","info","info","info","into","into","into","into","into","into","into","into","kCFRunLoopAfterWaiting","kCFRunLoopAllActivities","kCFRunLoopBeforeSources","kCFRunLoopBeforeTimers","kCFRunLoopBeforeWaiting","kCFRunLoopCommonModes","kCFRunLoopDefaultMode","kCFRunLoopEntry","kCFRunLoopExit","kCFRunLoopRunFinished","kCFRunLoopRunHandledSource","kCFRunLoopRunStopped","kCFRunLoopRunTimedOut","perform","perform","release","release","release","release","retain","retain","retain","retain","schedule","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","CFSetApplierFunction","CFSetApplyFunction","CFSetCallBacks","CFSetContainsValue","CFSetCopyDescriptionCallBack","CFSetCreate","CFSetCreateCopy","CFSetEqualCallBack","CFSetGetCount","CFSetGetCountOfValue","CFSetGetTypeID","CFSetGetValue","CFSetGetValueIfPresent","CFSetGetValues","CFSetHashCallBack","CFSetRef","CFSetReleaseCallBack","CFSetRetainCallBack","__CFSet","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","equal","from","from","hash","into","into","kCFTypeSetCallBacks","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFStringCompareFlags","CFStringCreateWithBytes","CFStringCreateWithBytesNoCopy","CFStringCreateWithCString","CFStringCreateWithCharactersNoCopy","CFStringEncoding","CFStringEncodings","CFStringGetBytes","CFStringGetCString","CFStringGetCStringPtr","CFStringGetLength","CFStringGetTypeID","CFStringRef","UniChar","__CFString","borrow","borrow_mut","from","into","kCFStringEncodingUTF8","try_from","try_into","type_id","CFTimeZoneCopyDefault","CFTimeZoneCopySystem","CFTimeZoneCreateWithTimeIntervalFromGMT","CFTimeZoneGetName","CFTimeZoneGetSecondsFromGMT","CFTimeZoneGetTypeID","CFTimeZoneRef","__CFTimeZone","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFURLBookmarkCreationOptions","CFURLBookmarkFileCreationOptions","CFURLBookmarkResolutionOptions","CFURLCanBeDecomposed","CFURLClearResourcePropertyCache","CFURLCopyAbsoluteURL","CFURLCopyFileSystemPath","CFURLCopyFragment","CFURLCopyHostName","CFURLCopyLastPathComponent","CFURLCopyNetLocation","CFURLCopyParameterString","CFURLCopyPassword","CFURLCopyPath","CFURLCopyPathExtension","CFURLCopyQueryString","CFURLCopyResourceSpecifier","CFURLCopyScheme","CFURLCopyStrictPath","CFURLCopyUserName","CFURLCreateAbsoluteURLWithBytes","CFURLCreateBookmarkData","CFURLCreateBookmarkDataFromAliasRecord","CFURLCreateBookmarkDataFromFile","CFURLCreateByResolvingBookmarkData","CFURLCreateFilePathURL","CFURLCreateFromFileSystemRepresentation","CFURLCreateResourcePropertiesForKeysFromBookmarkData","CFURLCreateResourcePropertyForKeyFromBookmarkData","CFURLCreateWithBytes","CFURLCreateWithFileSystemPath","CFURLCreateWithFileSystemPathRelativeToBase","CFURLGetBytes","CFURLGetFileSystemRepresentation","CFURLGetPortNumber","CFURLGetString","CFURLGetTypeID","CFURLHasDirectoryPath","CFURLPathStyle","CFURLRef","CFURLSetResourcePropertyForKey","CFURLStartAccessingSecurityScopedResource","CFURLStopAccessingSecurityScopedResource","CFURLWriteBookmarkDataToFile","__CFURL","borrow","borrow_mut","from","into","kCFURLAttributeModificationDateKey","kCFURLBookmarkCreationMinimalBookmarkMask","kCFURLBookmarkCreationPreferFileIDResolutionMask","kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess","kCFURLBookmarkCreationSuitableForBookmarkFile","kCFURLBookmarkCreationWithSecurityScope","kCFURLContentAccessDateKey","kCFURLContentModificationDateKey","kCFURLCreationDateKey","kCFURLFileResourceIdentifierKey","kCFURLFileResourceTypeKey","kCFURLFileSecurityKey","kCFURLHFSPathStyle","kCFURLHasHiddenExtensionKey","kCFURLIsDirectoryKey","kCFURLIsExecutableKey","kCFURLIsHiddenKey","kCFURLIsPackageKey","kCFURLIsReadableKey","kCFURLIsRegularFileKey","kCFURLIsSymbolicLinkKey","kCFURLIsSystemImmutableKey","kCFURLIsUserImmutableKey","kCFURLIsVolumeKey","kCFURLIsWritableKey","kCFURLLabelNumberKey","kCFURLLinkCountKey","kCFURLLocalizedLabelKey","kCFURLLocalizedNameKey","kCFURLLocalizedTypeDescriptionKey","kCFURLNameKey","kCFURLPOSIXPathStyle","kCFURLParentDirectoryURLKey","kCFURLPreferredIOBlockSizeKey","kCFURLTypeIdentifierKey","kCFURLVolumeIdentifierKey","kCFURLVolumeURLKey","kCFURLWindowsPathStyle","try_from","try_into","type_id","CFUUIDBytes","CFUUIDCreate","CFUUIDCreateFromUUIDBytes","CFUUIDGetTypeID","CFUUIDGetUUIDBytes","CFUUIDRef","__CFUUID","borrow","borrow","borrow_mut","borrow_mut","byte0","byte1","byte10","byte11","byte12","byte13","byte14","byte15","byte2","byte3","byte4","byte5","byte6","byte7","byte8","byte9","clone","clone_into","default","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"core_foundation_sys"],[20,"core_foundation_sys::array"],[76,"core_foundation_sys::attributed_string"],[93,"core_foundation_sys::base"],[190,"core_foundation_sys::bundle"],[210,"core_foundation_sys::characterset"],[253,"core_foundation_sys::data"],[268,"core_foundation_sys::date"],[287,"core_foundation_sys::dictionary"],[352,"core_foundation_sys::error"],[369,"core_foundation_sys::filedescriptor"],[407,"core_foundation_sys::mach_port"],[421,"core_foundation_sys::messageport"],[466,"core_foundation_sys::number"],[511,"core_foundation_sys::propertylist"],[522,"core_foundation_sys::runloop"],[683,"core_foundation_sys::set"],[726,"core_foundation_sys::string"],[749,"core_foundation_sys::timezone"],[764,"core_foundation_sys::url"],[854,"core_foundation_sys::uuid"],[895,"core::result"],[896,"core::any"],[897,"std::os::raw"],[898,"core::fmt"],[899,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for all types which are Core Foundation reference …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Constant used by some functions to indicate failed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","No value.","No value.","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,1,20,1,1,1,1,1,20,1,20,1,0,1,1,1,20,1,20,1,20,1,1,0,0,0,0,0,0,0,0,0,0,21,21,21,21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,8,22,6,7,8,6,7,8,6,7,8,6,7,8,8,8,6,6,6,7,8,22,8,7,6,6,7,8,0,0,0,0,0,0,0,0,7,7,0,8,8,8,8,6,7,8,6,7,8,6,7,8,6,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,0,0,0,0,0,0,0,0,25,25,25,25,25,25,25,0,0,0,0,0,0,0,0,0,0,26,26,26,26,0,0,26,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,14,15,27,14,15,14,15,14,15,14,15,14,15,27,14,15,14,27,14,15,0,0,14,15,14,15,14,15,27,14,15,27,14,15,27,14,15,14,15,0,0,0,0,0,0,28,28,28,28,0,0,0,0,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,16,29,16,16,16,16,29,16,16,29,16,0,0,16,16,16,29,16,29,16,29,16,16,0,0,0,0,0,0,0,30,30,30,30,30,30,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,31,32,0,33,17,33,17,17,17,17,17,33,17,17,33,17,17,17,17,33,17,33,17,33,17,17,0,0,0,0,0,0,0,0,0,0,0,0,34,35,34,35,34,35,34,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,35,34,35,34,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,36,37,38,39,40,41,42,43,39,39,40,41,42,39,40,36,37,38,39,40,41,42,43,40,39,40,39,40,41,42,36,37,38,39,40,41,42,43,0,0,0,0,0,0,0,0,0,0,0,0,0,39,40,39,40,41,42,39,40,41,42,39,36,37,38,39,40,41,42,43,36,37,38,39,40,41,42,43,36,37,38,39,40,41,42,43,39,40,41,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,18,44,18,18,18,18,18,44,18,18,44,18,0,18,18,18,44,18,44,18,44,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,0,45,45,45,0,0,0,0,0,0,0,0,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,47,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,47,0,0,0,0,0,0,0,48,19,48,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,48,19,48,19,19,48,19,48,19,48,19],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[7,7],[8,8],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[6,6],9],[[6,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,-1,[]],0,[[12,12],7],[6,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[15,15],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[-1,-2],2,[],[]],0,[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[[-1,-2],2,[],[]],0,[[17,10],11],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[[-1,-2],2,[],[]],0,0,[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,19],[[-1,-2],2,[],[]],[[],19],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]]],"c":[],"p":[[3,"CFArrayCallBacks",20],[15,"tuple"],[4,"Result",895],[3,"TypeId",896],[6,"c_void",897],[4,"CFComparisonResult",93],[3,"CFRange",93],[3,"CFAllocatorContext",93],[15,"bool"],[3,"Formatter",898],[6,"Result",898],[6,"CFIndex",93],[4,"Ordering",899],[3,"CFDictionaryKeyCallBacks",287],[3,"CFDictionaryValueCallBacks",287],[3,"CFFileDescriptorContext",369],[3,"CFMessagePortContext",421],[3,"CFSetCallBacks",683],[3,"CFUUIDBytes",854],[3,"__CFArray",20],[3,"__CFAttributedString",76],[8,"TCFTypeRef",93],[3,"__CFBundle",190],[3,"__CFCharacterSet",210],[3,"__CFData",253],[3,"__CFDate",268],[3,"__CFDictionary",287],[3,"__CFError",352],[3,"__CFFileDescriptor",369],[3,"__CFMachPort",407],[6,"CFMessagePortCallBack",421],[6,"CFMessagePortInvalidationCallBack",421],[3,"__CFMessagePort",421],[3,"__CFBoolean",466],[4,"__CFNumber",466],[3,"__CFRunLoop",522],[3,"__CFRunLoopSource",522],[3,"__CFRunLoopObserver",522],[3,"CFRunLoopSourceContext",522],[3,"CFRunLoopSourceContext1",522],[3,"CFRunLoopObserverContext",522],[3,"CFRunLoopTimerContext",522],[3,"__CFRunLoopTimer",522],[3,"__CFSet",683],[3,"__CFString",726],[3,"__CFTimeZone",749],[3,"__CFURL",764],[3,"__CFUUID",854]]},\
"core_net":{"doc":"Networking primitives for IP communication.","t":"DNSNNEDDESSNNNNEDDSSNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AddrParseError","AdminLocal","BROADCAST","Global","InterfaceLocal","IpAddr","Ipv4Addr","Ipv6Addr","Ipv6MulticastScope","LOCALHOST","LOCALHOST","LinkLocal","OrganizationLocal","RealmLocal","SiteLocal","SocketAddr","SocketAddrV4","SocketAddrV6","UNSPECIFIED","UNSPECIFIED","V4","V4","V6","V6","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","flowinfo","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","ip","ip","ip","is_benchmarking","is_benchmarking","is_benchmarking","is_broadcast","is_documentation","is_documentation","is_documentation","is_global","is_global","is_global","is_ipv4","is_ipv4","is_ipv6","is_ipv6","is_link_local","is_loopback","is_loopback","is_loopback","is_multicast","is_multicast","is_multicast","is_private","is_reserved","is_shared","is_unicast","is_unicast_global","is_unicast_link_local","is_unique_local","is_unspecified","is_unspecified","is_unspecified","multicast_scope","new","new","new","new","new","octets","octets","parse_ascii","parse_ascii","parse_ascii","parse_ascii","parse_ascii","parse_ascii","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","port","port","port","scope_id","segments","set_flowinfo","set_ip","set_ip","set_ip","set_port","set_port","set_port","set_scope_id","to_canonical","to_canonical","to_ipv4","to_ipv4_mapped","to_ipv6_compatible","to_ipv6_mapped","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"core_net"],[257,"core::cmp"],[258,"core::fmt"],[259,"core::fmt"],[260,"core::result"],[261,"core::hash"],[262,"core::option"],[263,"alloc::string"],[264,"core::any"]],"d":["An error which can be returned when parsing an IP address …","Admin-Local scope.","An IPv4 address representing the broadcast address: …","Global scope.","Interface-Local scope.","An IP address, either IPv4 or IPv6.","An IPv4 address.","An IPv6 address.","Scope of an IPv6 multicast address as defined in IETF RFC …","An IPv4 address with the address pointing to localhost: …","An IPv6 address representing localhost: <code>::1</code>.","Link-Local scope.","Organization-Local scope.","Realm-Local scope.","Site-Local scope.","An internet socket address, either IPv4 or IPv6.","An IPv4 socket address.","An IPv6 socket address.","An IPv4 address representing an unspecified address: …","An IPv6 address representing the unspecified address: <code>::</code>","An IPv4 address.","An IPv4 socket address.","An IPv6 address.","An IPv6 socket address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the flow information associated with this address.","","","","","","","","","","","","","","","","Creates an <code>IpAddr::V6</code> from an eight element 16-bit array.","Returns the argument unchanged.","Copies this address to a new <code>IpAddr::V4</code>.","Copies this address to a new <code>IpAddr::V6</code>.","Creates an <code>IpAddr::V6</code> from a sixteen element byte array.","Creates an <code>IpAddr::V4</code> from a four element byte array.","Converts a host byte order <code>u32</code> into an <code>Ipv4Addr</code>.","Returns the argument unchanged.","Creates an <code>Ipv4Addr</code> from a four element byte array.","Returns the argument unchanged.","Creates an <code>Ipv6Addr</code> from a sixteen element byte array.","Convert a host byte order <code>u128</code> into an <code>Ipv6Addr</code>.","Creates an <code>Ipv6Addr</code> from an eight element 16-bit array.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …","Converts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.","Converts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the IP address associated with this socket address.","Returns the IP address associated with this socket address.","Returns the IP address associated with this socket address.","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …","Returns <code>true</code> if this is an address reserved for …","Returns <code>true</code> if this is a broadcast address (…","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this is an address reserved for …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Returns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Returns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).","Returns <code>true</code> if this is a loopback address.","Returns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).","Returns <code>true</code> if this is the loopback address (<code>::1</code>), as …","Returns <code>true</code> if this is a multicast address.","Returns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).","Returns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).","Returns <code>true</code> if this is a private address.","Returns <code>true</code> if this address is reserved by IANA for …","Returns <code>true</code> if this address is part of the Shared Address …","Returns <code>true</code> if this is a unicast address, as defined by …","Returns <code>true</code> if the address is a globally routable unicast …","Returns <code>true</code> if the address is a unicast address with …","Returns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).","Returns <code>true</code> for the special ‘unspecified’ address.","Returns <code>true</code> for the special ‘unspecified’ address (…","Returns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…","Returns the address’s multicast scope if the address is …","Creates a new IPv4 address from four eight-bit octets.","Creates a new IPv6 address from eight 16-bit segments.","Creates a new socket address from an IP address and a port …","Creates a new socket address from an <code>IPv4</code> address and a …","Creates a new socket address from an <code>IPv6</code> address, a …","Returns the four eight-bit integers that make up this …","Returns the sixteen eight-bit integers the IPv6 address …","Parse an IP address from a slice of bytes.","Parse an IPv4 address from a slice of bytes.","Parse an IPv6 address from a slice of bytes.","Parse a socket address from a slice of bytes.","Parse an IPv4 socket address from a slice of bytes.","Parse an IPv6 socket address from a slice of bytes.","","","","","","","","","","","Returns the port number associated with this socket …","Returns the port number associated with this socket …","Returns the port number associated with this socket …","Returns the scope ID associated with this address.","Returns the eight 16-bit segments that make up this …","Changes the flow information associated with this socket …","Changes the IP address associated with this socket address.","Changes the IP address associated with this socket address.","Changes the IP address associated with this socket address.","Changes the port number associated with this socket …","Changes the port number associated with this socket …","Changes the port number associated with this socket …","Changes the scope ID associated with this socket address.","Converts this address to an <code>IpAddr::V4</code> if it is an …","Converts this address to an <code>IpAddr::V4</code> if it is an …","Converts this address to an <code>IPv4</code> address if it is either …","Converts this address to an <code>IPv4</code> address if it’s an …","Converts this address to an IPv4-compatible <code>IPv6</code> address.","Converts this address to an IPv4-mapped <code>IPv6</code> address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,4,2,4,4,0,0,0,0,2,3,4,4,4,4,0,0,0,2,3,1,6,1,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,6,7,8,5,1,1,1,2,2,3,3,4,5,6,7,8,1,2,3,4,5,6,7,8,8,1,1,2,2,3,3,4,5,5,6,6,7,7,8,8,1,1,1,1,1,1,2,2,2,3,3,3,3,4,5,6,6,6,6,7,8,1,2,3,6,7,8,1,2,3,4,6,7,8,1,2,3,4,5,6,7,8,6,7,8,1,2,3,2,1,2,3,1,2,3,1,6,1,6,2,1,2,3,1,2,3,2,2,2,3,3,3,3,1,2,3,3,2,3,6,7,8,2,3,1,2,3,6,7,8,1,1,1,2,2,3,3,6,7,8,6,7,8,8,3,8,6,7,8,6,7,8,8,1,3,3,3,2,2,1,2,3,4,5,6,7,8,1,2,3,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[1,1],10],[[2,2],10],[[3,3],10],[[6,6],10],[[7,7],10],[[8,8],10],[5,11],[[1,2],12],[[1,3],12],[[1,1],12],[[2,2],12],[[2,1],12],[[3,3],12],[[3,1],12],[[4,4],12],[[5,5],12],[[6,6],12],[[7,7],12],[[8,8],12],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[8,13],[[1,14],15],[[1,14],15],[[2,14],15],[[2,14],15],[[3,14],15],[[3,14],15],[[4,14],15],[[5,14],15],[[5,14],15],[[6,14],15],[[6,14],15],[[7,14],15],[[7,14],15],[[8,14],15],[[8,14],15],[[[17,[16]]],1],[-1,-1,[]],[2,1],[3,1],[[[17,[18]]],1],[[[17,[18]]],1],[13,2],[-1,-1,[]],[[[17,[18]]],2],[-1,-1,[]],[[[17,[18]]],3],[19,3],[[[17,[16]]],3],[-1,-1,[]],[-1,-1,[]],[[[9,[-1,16]]],6,[[20,[1]]]],[7,6],[8,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,[[21,[1,5]]]],[11,[[21,[2,5]]]],[11,[[21,[3,5]]]],[11,[[21,[6,5]]]],[11,[[21,[7,5]]]],[11,[[21,[8,5]]]],[[1,-1],9,22],[[2,-1],9,22],[[3,-1],9,22],[[4,-1],9,22],[[6,-1],9,22],[[7,-1],9,22],[[8,-1],9,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,1],[7,2],[8,3],[1,12],[2,12],[3,12],[2,12],[1,12],[2,12],[3,12],[1,12],[2,12],[3,12],[1,12],[6,12],[1,12],[6,12],[2,12],[1,12],[2,12],[3,12],[1,12],[2,12],[3,12],[2,12],[2,12],[2,12],[3,12],[3,12],[3,12],[3,12],[1,12],[2,12],[3,12],[3,[[23,[4]]]],[[18,18,18,18],2],[[16,16,16,16,16,16,16,16],3],[[1,16],6],[[2,16],7],[[3,16,13,13],8],[2,[[17,[18]]]],[3,[[17,[18]]]],[[[24,[18]]],[[21,[1,5]]]],[[[24,[18]]],[[21,[2,5]]]],[[[24,[18]]],[[21,[3,5]]]],[[[24,[18]]],[[21,[6,5]]]],[[[24,[18]]],[[21,[7,5]]]],[[[24,[18]]],[[21,[8,5]]]],[[1,2],[[23,[10]]]],[[1,1],[[23,[10]]]],[[1,3],[[23,[10]]]],[[2,1],[[23,[10]]]],[[2,2],[[23,[10]]]],[[3,3],[[23,[10]]]],[[3,1],[[23,[10]]]],[[6,6],[[23,[10]]]],[[7,7],[[23,[10]]]],[[8,8],[[23,[10]]]],[6,16],[7,16],[8,16],[8,13],[3,[[17,[16]]]],[[8,13],9],[[6,1],9],[[7,2],9],[[8,3],9],[[6,16],9],[[7,16],9],[[8,16],9],[[8,13],9],[1,1],[3,1],[3,[[23,[2]]]],[3,[[23,[2]]]],[2,3],[2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]]],"c":[],"p":[[4,"IpAddr",0],[3,"Ipv4Addr",0],[3,"Ipv6Addr",0],[4,"Ipv6MulticastScope",0],[3,"AddrParseError",0],[4,"SocketAddr",0],[3,"SocketAddrV4",0],[3,"SocketAddrV6",0],[15,"tuple"],[4,"Ordering",257],[15,"str"],[15,"bool"],[15,"u32"],[3,"Formatter",258],[6,"Result",258],[15,"u16"],[15,"array"],[15,"u8"],[15,"u128"],[8,"Into",259],[4,"Result",260],[8,"Hasher",261],[4,"Option",262],[15,"slice"],[3,"String",263],[3,"TypeId",264]],"a":{"in6addr_any":[19],"in6addr_any_init":[19],"in6addr_loopback":[10],"in6addr_loopback_init":[10],"inaddr_any":[18]}},\
"cpufeatures":{"doc":"This crate provides macros for runtime CPU feature …","t":"O","n":["new"],"q":[[0,"cpufeatures"]],"d":["Create module with CPU feature detection code."],"i":[0],"f":[0],"c":[],"p":[]},\
"crypto_bigint":{"doc":"RustCrypto: Cryptographic Big Integers","t":"IIISSSSSSSSIGQDIIIIIDISIISSDSSSSQIIDSSSSQQQQQQQQQQQIIIIDQIIIISGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDGGDSSSILLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLOLLLLLLLKKLLLLLKLKLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLOLLLLLLLLLKKACKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLCKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIAFKASSSSSSSDISLLLLLLLLLLLLLLLOLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIISSSSIQIIIIIIIISSQIISQQQQQQQQQQQIIIIQIIIISIKKKKLLLKKKKKKKKLLLKLLLKKKKKKLLLKLLLKKKKK","n":["AddMod","ArrayDecoding","ArrayEncoding","BITS","BITS","BITS","BITS","BYTES","BYTES","BYTES","BYTES","Bounded","ByteArray","ByteSize","Checked","CheckedAdd","CheckedMul","CheckedSub","Concat","ConcatMixed","CtChoice","Encoding","FALSE","Integer","Invert","LIMBS","LIMBS","Limb","MAX","MAX","MAX","MAX","MixedOutput","MulMod","NegMod","NonZero","ONE","ONE","ONE","ONE","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Pow","PowBoundedExp","Random","RandomMod","Reciprocal","Repr","Split","SplitMixed","Square","SubMod","TRUE","U1024","U128","U1280","U1536","U16384","U1792","U192","U2048","U256","U3072","U320","U32768","U3584","U384","U4096","U4224","U4352","U448","U512","U576","U6144","U64","U640","U704","U768","U8192","U832","U896","U960","Uint","WideWord","Word","Wrapping","ZERO","ZERO","ZERO","Zero","adc","adc","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mod","add_mod","add_mod","add_mod_special","as_limbs","as_limbs_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_words","as_words_mut","bit","bit_vartime","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits_vartime","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_and","checked_div","checked_mul","checked_mul","checked_mul","checked_or","checked_rem","checked_sqrt","checked_sqrt_vartime","checked_sub","checked_sub","checked_sub","checked_xor","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp_vartime","cmp_vartime","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","concat_mixed","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","const_new","const_new","const_rem","const_rem_wide","const_residue","consts","ct_div_rem_limb_with_reciprocal","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_gt","ct_gt","ct_lt","ct_lt","ct_new","default","default","default","default","default","default","default","deref","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_rem","div_rem_limb","div_rem_limb_with_reciprocal","eq","eq","eq","eq","eq","eq_vartime","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_byte_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_hex","from_be_slice","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_byte_array","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_hex","from_le_slice","from_u128","from_u128","from_u16","from_u16","from_u16","from_u16","from_u32","from_u32","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_u8","from_u8","from_uint","from_wide_word","from_word","from_words","generic_array","hash","hash","impl_modulus","into","into","into","into","into","into","into","into_uint_be","into_uint_le","inv_mod","inv_mod2k","inv_mod2k_vartime","inv_odd_mod","inv_odd_mod_bounded","invert","invert","is_odd","is_odd","is_odd","leading_zeros","leading_zeros","mac","modular","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mod","mul_mod_special","mul_wide","neg","neg","neg_mod","neg_mod","neg_mod","neg_mod_special","new","new","new","new","nlimbs","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow_bounded_exp","prelude","rand_core","random","random","random","random","random","random_mod","random_mod","random_mod","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem2k","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","resize","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_sub","saturating_sub","sbb","sbb","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_vartime","shl_vartime_wide","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_vartime","shr_vartime_wide","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","split_mixed","sqrt","sqrt_vartime","square","square_wide","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mod","sub_mod","sub_mod","sub_mod_special","subtle","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_byte_array","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_byte_array","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_limbs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_words","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wrapping_add","wrapping_add","wrapping_and","wrapping_div","wrapping_mul","wrapping_mul","wrapping_neg","wrapping_neg","wrapping_or","wrapping_rem","wrapping_sqrt","wrapping_sqrt_vartime","wrapping_sub","wrapping_sub","wrapping_xor","zeroize","zeroize","zeroize","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Output","Retrieve","constant_mod","montgomery_reduction","retrieve","runtime_mod","LIMBS","MODULUS","MOD_NEG_INV","ONE","R","R2","R3","Residue","ResidueParams","ZERO","add","add","add","add","add","add_assign","add_assign","as_montgomery","as_montgomery_mut","borrow","borrow_mut","clone","clone_into","conditional_negate","conditional_select","const_residue","ct_eq","default","div_by_2","eq","equivalent","fmt","from","from_montgomery","impl_modulus","into","invert","invert","mul","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","neg","new","new_checked","pow","pow","pow_bounded_exp","pow_bounded_exp","random","retrieve","retrieve","square","square","sub","sub","sub","sub","sub","sub_assign","sub_assign","to_montgomery","to_owned","try_from","try_into","type_id","zeroize","DynResidue","DynResidueParams","add","add","add","add","add","add_assign","add_assign","as_montgomery","as_montgomery_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","conditional_negate","conditional_select","conditional_select","ct_eq","ct_eq","div_by_2","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from_montgomery","from_residue_params","into","into","invert","invert","modulus","mul","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","neg","new","new","new_checked","one","params","pow","pow","pow_bounded_exp","pow_bounded_exp","retrieve","retrieve","square","square","sub","sub","sub","sub","sub","sub_assign","sub_assign","to_montgomery","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","zero","zeroize","AddMod","ArrayDecoding","ArrayEncoding","BITS","BITS","BYTES","BYTES","Bounded","ByteSize","CheckedAdd","CheckedMul","CheckedSub","Concat","ConcatMixed","Encoding","Integer","Invert","LIMBS","MAX","MixedOutput","MulMod","NegMod","ONE","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Pow","PowBoundedExp","Random","RandomMod","Repr","Split","SplitMixed","Square","SubMod","ZERO","Zero","add_mod","checked_add","checked_mul","checked_sub","concat","concat","concat","concat_mixed","from_be_byte_array","from_be_bytes","from_le_byte_array","from_le_bytes","into_uint_be","into_uint_le","invert","is_even","is_even","is_even","is_odd","is_zero","is_zero","is_zero","mul_mod","neg_mod","pow","pow_bounded_exp","random","random_mod","split","split","split","split_mixed","square","square","square","sub_mod","to_be_byte_array","to_be_bytes","to_le_byte_array","to_le_bytes"],"q":[[0,"crypto_bigint"],[1159,"crypto_bigint::consts"],[4549,"crypto_bigint::modular"],[4555,"crypto_bigint::modular::constant_mod"],[4627,"crypto_bigint::modular::runtime_mod"],[4709,"crypto_bigint::prelude"],[4794,"subtle"],[4795,"core::clone"],[4796,"core::cmp"],[4797,"core::cmp"],[4798,"core::cmp"],[4799,"core::fmt"],[4800,"core::num::nonzero"],[4801,"core::option"],[4802,"core::cmp"],[4803,"alloc::string"],[4804,"core::result"],[4805,"core::any"],[4806,"typenum::marker_traits"],[4807,"typenum::marker_traits"],[4808,"typenum::marker_traits"],[4809,"typenum::array"]],"d":["Compute <code>self + rhs mod p</code>.","Support for decoding a <code>GenericArray</code> as a big integer.","Support for encoding a big integer as a <code>GenericArray</code>.","Total size of the represented integer in bits.","Size of this integer in bits.","Size of the inner integer in bits.","Total size of the represented integer in bits.","Total size of the represented integer in bytes.","Size of this integer in bytes.","Size of the inner integer in bytes.","Total size of the represented integer in bytes.","Integers whose representation takes a bounded amount of …","Alias for a byte array whose size is defined by …","Size of a byte array which encodes a big integer.","Provides intentionally-checked arithmetic on <code>T</code>.","Checked addition.","Checked multiplication.","Checked subtraction.","Concatenate two numbers into a “wide” double-width …","Concatenate two numbers into a “wide” combined-width …","A boolean value returned by constant-time <code>const fn</code>s.","Encoding support.","The falsy value.","Integer type.","Constant-time inversion.","The number of limbs used on this platform.","The number of limbs used on this platform.","Big integers are represented as an array of smaller CPU …","Maximum value this integer can express.","Maximum value this <code>Limb</code> can express.","Maximum value this integer can express.","Maximum value this <code>Uint</code> can express.","Concatenated output: combination of <code>Lo</code> and <code>Self</code>.","Compute <code>self * rhs mod p</code>.","Compute <code>-self mod p</code>.","Wrapper type for non-zero integers.","The value <code>1</code>.","The value <code>1</code>.","The value <code>1</code>.","The value <code>1</code>.","Big integer which decodes a <code>GenericArray</code>.","Output type.","Output type.","Output type.","Output type.","Output type.","Output type.","Output type.","Concatenated output: twice the width of <code>Self</code>.","Split output: high/low components of the value.","Output of the inversion.","Constant-time exponentiation.","Constant-time exponentiation with exponent of a bounded …","Random number generation support.","Modular random number generation support.","A pre-calculated reciprocal for division by a single limb.","Byte array representation.","Split a number in half, returning the most significant …","Split a number into parts, returning the most significant …","Support for optimized squaring","Compute <code>self - rhs mod p</code>.","The truthy value.","1024-bit unsigned big integer.","128-bit unsigned big integer.","1280-bit unsigned big integer.","1536-bit unsigned big integer.","16384-bit unsigned big integer.","1792-bit unsigned big integer.","192-bit unsigned big integer.","2048-bit unsigned big integer.","256-bit unsigned big integer.","3072-bit unsigned big integer.","320-bit unsigned big integer.","32768-bit unsigned big integer.","3584-bit unsigned big integer.","384-bit unsigned big integer.","4096-bit unsigned big integer.","4224-bit unsigned big integer.","4352-bit unsigned big integer.","448-bit unsigned big integer.","512-bit unsigned big integer.","576-bit unsigned big integer.","6144-bit unsigned big integer.","64-bit unsigned big integer.","640-bit unsigned big integer.","704-bit unsigned big integer.","768-bit unsigned big integer.","8192-bit unsigned big integer.","832-bit unsigned big integer.","896-bit unsigned big integer.","960-bit unsigned big integer.","Stack-allocated big unsigned integer.","Wide integer type: double the width of <code>Word</code>.","Unsigned integer type that the <code>Limb</code> newtype wraps.","Provides intentionally-wrapped arithmetic on <code>T</code>.","The value <code>0</code>.","The value <code>0</code>.","The value <code>0</code>.","Zero values.","Computes <code>self + rhs + carry</code>, returning the result along …","Computes <code>a + b + carry</code>, returning the result along with …","","","","","","","","","","","","","","","","","","","","","","","","","Compute <code>self + rhs mod p</code>.","Computes <code>self + rhs mod p</code> in constant time.","","Computes <code>self + rhs mod p</code> in constant time for the special …","Borrow the limbs of this <code>Uint</code>.","Borrow the limbs of this <code>Uint</code> mutably.","","","","","","Borrow the inner limbs as an array of <code>Word</code>s.","Borrow the inner limbs as a mutable array of <code>Word</code>s.","Get the value of the bit at position <code>index</code>, as a truthy or …","Returns <code>true</code> if the bit at position <code>index</code> is set, <code>false</code> …","Calculates <code>a &amp; b</code>.","","","","","","Computes bitwise <code>a &amp; b</code>.","","","","","","","","","Calculates <code>a | b</code>.","","Computes bitwise <code>a &amp; b</code>.","","","","","","","","","","","","","Calculate the number of bits needed to represent this …","Calculate the number of bits needed to represent this …","Calculate the number of bits needed to represent this …","","Calculates <code>a ^ b</code>.","","","","Computes bitwise <code>a ^ b</code>.","","","","","","","","","","","","","","","","","","","","","","","","Perform checked subtraction, returning a <code>CtOption</code> which …","","","Perform checked bitwise <code>AND</code>, returning a <code>CtOption</code> which …","Perform checked division, returning a <code>CtOption</code> which …","Perform checked multiplication, returning a <code>CtOption</code> which …","","","Perform checked bitwise <code>OR</code>, returning a <code>CtOption</code> which …","Perform checked reduction, returning a <code>CtOption</code> which …","See <code>Self::checked_sqrt_vartime</code>.","Perform checked sqrt, returning a <code>CtOption</code> which <code>is_some</code> …","Perform checked subtraction, returning a <code>CtOption</code> which …","","","Perform checked bitwise <code>XOR</code>, returning a <code>CtOption</code> which …","","","","","","","","","","","","","","","","","","","Perform a comparison of the inner value in variable-time.","Returns the Ordering between <code>self</code> and <code>rhs</code> in variable time.","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new non-zero integer in a const context. The …","Creates a new non-zero limb in a const context. The second …","Computes <code>self</code> % <code>rhs</code>, returns the remainder and and the …","Computes <code>self</code> % <code>rhs</code>, returns the remainder and and the …","Creates a <code>Residue</code> with the given value for a specific …","Type aliases for many constants.","Computes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …","","","","","","","","","","Pre-calculates a reciprocal for a known divisor, to be …","","","","","Returns a default instance of this object. It is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes self / rhs, returns the quotient, remainder.","Computes <code>self</code> / <code>rhs</code>, returns the quotient (q) and …","Computes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …","","","","","","Performs an equality check in variable-time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Deserialize from a big-endian byte array.","Decode a non-zero integer from big endian bytes.","","","","","","","","","","","","","","","","","","","","Decode from big endian bytes.","","Decode from big endian bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Uint</code> from the provided big endian hex string.","Create a new <code>Uint</code> from the provided big endian bytes.","Deserialize from a little-endian byte array.","Decode a non-zero integer from big endian bytes.","","","","","","","","","","","","","","","","","","","","Decode from little endian bytes.","","Decode from little endian bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Uint</code> from the provided little endian hex …","Create a new <code>Uint</code> from the provided little endian bytes.","Create a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU128</code> (const-friendly)","Create a <code>Uint</code> from a <code>u128</code> (const-friendly)","Create a <code>Limb</code> from a <code>u16</code> integer (const-friendly)","Create a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU16</code> (const-friendly)","Create a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU16</code> (const-friendly)","Create a <code>Uint</code> from a <code>u16</code> (const-friendly)","Create a <code>Limb</code> from a <code>u32</code> integer (const-friendly)","Create a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU32</code> (const-friendly)","Create a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU32</code> (const-friendly)","Create a <code>Uint</code> from a <code>u32</code> (const-friendly)","Create a <code>Limb</code> from a <code>u64</code> integer (const-friendly)","Create a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU64</code> (const-friendly)","Create a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU64</code> (const-friendly)","Create a <code>Uint</code> from a <code>u64</code> (const-friendly)","Create a <code>Limb</code> from a <code>u8</code> integer (const-friendly)","Create a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU8</code> (const-friendly)","Create a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU8</code> (const-friendly)","Create a <code>Uint</code> from a <code>u8</code> (const-friendly)","Create a <code>NonZero&lt;Uint&gt;</code> from a <code>Uint</code> (const-friendly)","Create a <code>Uint</code> from a <code>WideWord</code> (const-friendly)","Create a <code>Uint</code> from a <code>Word</code> (const-friendly)","Create a <code>Uint</code> from an array of <code>Word</code>s (i.e. word-sized …","","","","Implements a modulus with the given name, type, and value, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deserialize from a big-endian <code>GenericArray</code>.","Deserialize from a little-endian <code>GenericArray</code>.","Computes the multiplicative inverse of <code>self</code> mod <code>modulus</code>. …","Computes 1/<code>self</code> mod <code>2^k</code>.","Computes 1/<code>self</code> mod <code>2^k</code>. This method is constant-time …","Computes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …","Computes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …","Computes the inverse.","","Is this integer value an odd number?","Is this limb an odd number?","","Calculate the number of leading zeros in the binary …","Calculate the number of leading zeros in the binary …","Computes <code>self + (b * c) + carry</code>, returning the result …","Implements modular arithmetic for constant moduli.","","","","","","","","","","Multiply <code>self</code> by <code>rhs</code>, returning a concatenated “wide” …","","","","","","","","","","","","","","","","","","","","Compute <code>self * rhs mod p</code>.","Computes <code>self * rhs mod p</code> in constant time for the special …","Compute “wide” multiplication, with a product twice …","","","Compute <code>-self mod p</code>.","Computes <code>-a mod p</code> in constant time. Assumes <code>self</code> is in …","","Computes <code>-a mod p</code> in constant time for the special modulus …","Create a new checked arithmetic wrapper for the given …","Create a new non-zero integer.","A non-const-fn version of <code>new_const()</code>, wrapping the result …","Const-friendly <code>Uint</code> constructor.","Calculate the number of limbs required to represent the …","","Calculates <code>!a</code>.","","Computes bitwise <code>!a</code>.","","","","","","Raises to the <code>exponent</code> power.","Raises to the <code>exponent</code> power, with <code>exponent_bits</code> …","Import prelude for this crate: includes important traits.","","Generate a cryptographically secure random value.","","Generate a random <code>NonZero&lt;T&gt;</code>.","Generate a cryptographically secure random <code>Uint</code>.","","Generate a cryptographically secure random number which is …","","Generate a cryptographically secure random <code>Uint</code> which is …","","","","Computes self % rhs, returns the remainder.","","","","","","","","","","","","","","Computes <code>self</code> % 2^k. Faster than reduce since its a power …","","","","","","","","","Construct a <code>Uint&lt;T&gt;</code> from the unsigned integer value, …","Perform saturating addition.","Perform saturating addition, returning <code>MAX</code> on overflow.","Perform saturating multiplication.","Perform saturating multiplication, returning <code>MAX</code> on …","Perform saturating subtraction.","Perform saturating subtraction, returning <code>ZERO</code> on …","Computes <code>self - (rhs + borrow)</code>, returning the result along …","Computes <code>a - (b + borrow)</code>, returning the result along with …","","Computes <code>self &lt;&lt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.","","NOTE: this operation is variable time with respect to <code>rhs</code> …","Computes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.","NOTE: this operation is variable time with respect to <code>rhs</code> …","","","NOTE: this operation is variable time with respect to <code>rhs</code> …","Computes <code>self &lt;&lt; shift</code>.","Computes a left shift on a wide input as <code>(lo, hi)</code>.","","","Computes <code>self &gt;&gt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.","NOTE: this operation is variable time with respect to <code>rhs</code> …","NOTE: this operation is variable time with respect to <code>rhs</code> …","Computes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.","","","","Computes <code>self &gt;&gt; n</code>.","Computes a right shift on a wide input as <code>(lo, hi)</code>.","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number into parts, returning its high and low …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See <code>Self::sqrt_vartime</code>.","Computes √(<code>self</code>) Uses Brent &amp; Zimmermann, Modern …","Square self, returning a concatenated “wide” result.","Square self, returning a “wide” result in two parts as …","","","","","","","","","","","","","","","","","","","","","","","","","Compute <code>self - rhs mod p</code>.","","Computes <code>self - rhs mod p</code> in constant time.","Computes <code>self - rhs mod p</code> in constant time for the special …","","Serialize to a big-endian byte array.","","","","","","","","","","","","","","","","","","","","Encode to big endian bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize to a little-endian byte array.","","","","","","","","","","","","","","","","","","","","Encode to little endian bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert this <code>Uint</code> into its inner limbs.","","","","","","","","","","","","Create an array of <code>Word</code>s (i.e. word-sized unsigned …","Calculate the number of trailing zeros in the binary …","Calculate the number of trailing zeros in the binary …","","","","","","","","","","","","","","","","","","","","","","Perform wrapping addition, discarding overflow.","Perform wrapping addition, discarding overflow.","Perform wrapping bitwise <code>AND</code>.","Wrapped division is just normal division i.e. <code>self</code> / <code>rhs</code> …","Perform wrapping multiplication, discarding overflow.","Perform wrapping multiplication, discarding overflow.","Perform wrapping negation.","Perform wrapping negation.","Perform wrapping bitwise <code>OR</code>.","Wrapped (modular) remainder calculation is just <code>self</code> % <code>rhs</code>.","See <code>Self::wrapping_sqrt_vartime</code>.","Wrapped sqrt is just normal √(<code>self</code>) There’s no way …","Perform wrapping subtraction, discarding underflow and …","Perform wrapping subtraction, discarding underflow and …","Perform wrapping bitwise `XOR``.","","","","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The original type.","A generalization for numbers kept in optimized …","Implements <code>Residue</code>s, supporting modular arithmetic with a …","Algorithm 14.32 in Handbook of Applied Cryptography …","Convert the number back from the optimized representation.","Implements <code>DynResidue</code>s, supporting modular arithmetic with …","Number of limbs required to encode a residue","The constant modulus","The lowest limbs of -(MODULUS^-1) mod R","The representation of 1 mod <code>MOD</code>.","Parameter used in Montgomery reduction","R^2, used to move into Montgomery form","R^3, used to perform a multiplicative inverse","A residue mod <code>MOD</code>, represented using <code>LIMBS</code> limbs. The …","The parameters to efficiently go to and from the …","The representation of 0 mod <code>MOD</code>.","Adds <code>rhs</code>.","","","","","","","Access the <code>Residue</code> value in Montgomery form.","Mutably access the <code>Residue</code> value in Montgomery form.","","","","","","","Creates a <code>Residue</code> with the given value for a specific …","","","Performs the modular division by 2, that is for given <code>x</code> …","","","","Returns the argument unchanged.","Create a <code>Residue</code> from a value in Montgomery form.","Implements a modulus with the given name, type, and value, …","Calls <code>U::from(self)</code>.","","Computes the residue <code>self^-1</code> representing the …","","Multiplies by <code>rhs</code>.","","","","","","Negates the number.","","","Instantiates a new <code>Residue</code> that represents this <code>integer</code> …","Instantiates a new <code>Residue</code> that represents this <code>integer</code> …","Raises to the <code>exponent</code> power.","","","Raises to the <code>exponent</code> power, with <code>exponent_bits</code> …","","Retrieves the integer currently encoded in this <code>Residue</code>, …","","Computes the (reduced) square of a residue.","","","","Subtracts <code>rhs</code>.","","","","","Extract the value from the <code>Residue</code> in Montgomery form.","","","","","","A residue represented using <code>LIMBS</code> limbs. The odd modulus …","The parameters to efficiently go to and from the …","","","Adds <code>rhs</code>.","","","","","Access the <code>DynResidue</code> value in Montgomery form.","Mutably access the <code>DynResidue</code> value in Montgomery form.","","","","","","","","","","","","","","Performs the modular division by 2, that is for given <code>x</code> …","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Create a <code>DynResidue</code> from a value in Montgomery form.","Create <code>DynResidueParams</code> corresponding to a <code>ResidueParams</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Computes the residue <code>self^-1</code> representing the …","Returns the modulus which was used to initialize these …","Multiplies by <code>rhs</code>.","","","","","","","Negates the number.","","","Instantiates a new set of <code>ResidueParams</code> representing the …","Instantiates a new <code>Residue</code> that represents this <code>integer</code> …","Instantiates a new set of <code>ResidueParams</code> representing the …","Instantiates a new <code>Residue</code> that represents 1.","Returns the parameter struct used to initialize this …","","Raises to the <code>exponent</code> power.","Raises to the <code>exponent</code> power, with <code>exponent_bits</code> …","","","Retrieves the integer currently encoded in this <code>Residue</code>, …","","Computes the (reduced) square of a residue.","","Subtracts <code>rhs</code>.","","","","","","Extract the value from the <code>DynResidue</code> in Montgomery form.","","","","","","","","","Instantiates a new <code>Residue</code> that represents zero.","","Compute <code>self + rhs mod p</code>.","Support for decoding a <code>GenericArray</code> as a big integer.","Support for encoding a big integer as a <code>GenericArray</code>.","Total size of the represented integer in bits.","Size of this integer in bits.","Total size of the represented integer in bytes.","Size of this integer in bytes.","Integers whose representation takes a bounded amount of …","Size of a byte array which encodes a big integer.","Checked addition.","Checked multiplication.","Checked subtraction.","Concatenate two numbers into a “wide” double-width …","Concatenate two numbers into a “wide” combined-width …","Encoding support.","Integer type.","Constant-time inversion.","The number of limbs used on this platform.","Maximum value this integer can express.","Concatenated output: combination of <code>Lo</code> and <code>Self</code>.","Compute <code>self * rhs mod p</code>.","Compute <code>-self mod p</code>.","The value <code>1</code>.","Big integer which decodes a <code>GenericArray</code>.","Output type.","Output type.","Output type.","Output type.","Output type.","Output type.","Output type.","Concatenated output: twice the width of <code>Self</code>.","Split output: high/low components of the value.","Output of the inversion.","Constant-time exponentiation.","Constant-time exponentiation with exponent of a bounded …","Random number generation support.","Modular random number generation support.","Byte array representation.","Split a number in half, returning the most significant …","Split a number into parts, returning the most significant …","Support for optimized squaring","Compute <code>self - rhs mod p</code>.","The value <code>0</code>.","Zero values.","Compute <code>self + rhs mod p</code>.","Perform checked subtraction, returning a <code>CtOption</code> which …","Perform checked multiplication, returning a <code>CtOption</code> which …","Perform checked subtraction, returning a <code>CtOption</code> which …","Concatenate the two halves, with <code>self</code> as most significant …","Concatenate the two halves, with <code>self</code> as most significant …","Concatenate the two halves, with <code>self</code> as most significant …","Concatenate the two values, with <code>self</code> as most significant …","Deserialize from a big-endian byte array.","Decode from big endian bytes.","Deserialize from a little-endian byte array.","Decode from little endian bytes.","Deserialize from a big-endian <code>GenericArray</code>.","Deserialize from a little-endian <code>GenericArray</code>.","Computes the inverse.","Is this integer value an even number?","Is this integer value an even number?","Is this integer value an even number?","Is this integer value an odd number?","Determine if this value is equal to zero.","Determine if this value is equal to zero.","Determine if this value is equal to zero.","Compute <code>self * rhs mod p</code>.","Compute <code>-self mod p</code>.","Raises to the <code>exponent</code> power.","Raises to the <code>exponent</code> power, with <code>exponent_bits</code> …","Generate a cryptographically secure random value.","Generate a cryptographically secure random number which is …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number in half, returning its high and low …","Split this number into parts, returning its high and low …","Computes the same as <code>self.mul(self)</code>, but may be more …","Computes the same as <code>self.mul(self)</code>, but may be more …","Computes the same as <code>self.mul(self)</code>, but may be more …","Compute <code>self - rhs mod p</code>.","Serialize to a big-endian byte array.","Encode to big endian bytes.","Serialize to a little-endian byte array.","Encode to little endian bytes."],"i":[0,0,0,106,107,1,3,106,107,1,3,0,0,64,0,0,0,0,0,0,0,0,12,0,0,106,3,0,106,1,9,3,108,0,0,0,106,1,9,3,109,110,111,112,113,114,115,116,117,118,119,0,0,0,0,0,69,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,1,3,0,1,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,4,4,4,4,5,5,5,5,110,3,3,3,3,3,3,3,9,3,3,3,3,3,3,1,1,3,3,3,3,3,5,5,5,5,3,3,5,5,1,1,3,3,3,3,3,5,5,5,5,3,3,5,5,1,3,3,1,1,3,3,3,3,3,5,5,5,5,3,3,5,5,4,12,1,9,16,3,5,4,12,1,9,16,3,5,114,1,3,3,3,115,1,3,3,3,3,3,116,1,3,3,4,12,1,9,16,3,5,4,12,1,9,16,3,5,1,9,3,5,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,108,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,9,16,3,5,9,9,3,3,0,0,3,4,1,9,3,5,1,3,1,3,16,4,1,9,16,16,3,5,9,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,3,3,3,3,5,5,5,5,3,3,3,1,9,16,3,5,1,1,9,16,3,5,4,12,1,1,1,1,9,9,9,9,9,9,16,3,3,3,3,5,5,5,5,5,5,7,52,4,4,12,1,1,1,1,1,9,9,9,9,9,9,9,9,9,9,16,3,3,3,3,3,3,3,3,3,3,3,3,5,64,9,65,38,66,31,24,67,25,68,33,35,36,37,34,30,29,22,20,19,32,69,1,9,65,38,66,31,70,24,67,25,68,27,71,33,72,35,73,36,21,37,34,30,29,22,20,26,28,19,32,23,74,3,3,64,9,65,38,66,31,24,67,25,68,33,35,36,37,34,30,29,22,20,19,32,69,1,9,65,38,66,31,70,24,67,25,68,27,71,33,72,35,73,36,21,37,34,30,29,22,20,26,28,19,32,23,74,3,3,9,3,1,9,9,3,1,9,9,3,1,9,9,3,1,9,9,3,9,3,3,3,0,1,3,0,4,12,1,9,16,3,5,109,109,3,3,3,3,3,119,9,106,1,3,1,3,1,0,4,4,4,4,4,4,4,4,3,3,3,3,3,5,5,5,5,5,5,5,5,4,4,4,4,5,5,5,5,113,3,3,5,5,112,3,3,3,4,9,16,3,0,1,1,3,3,5,1,9,3,5,120,121,0,0,82,1,9,3,5,122,1,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,3,3,3,3,3,5,5,5,5,3,1,3,1,3,1,3,1,3,1,1,1,3,3,3,1,1,3,3,3,1,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,38,31,24,25,27,33,35,36,21,37,34,30,29,22,20,26,28,19,32,23,123,38,66,66,31,31,31,70,70,70,70,24,24,24,24,24,67,67,67,67,67,67,25,25,25,25,25,25,25,68,68,68,68,68,68,68,68,27,27,27,27,27,27,27,27,27,71,71,71,71,71,71,71,71,71,71,33,33,33,33,33,33,33,33,33,33,33,72,72,72,72,72,72,72,72,72,72,72,72,35,35,35,35,35,35,35,35,35,35,35,35,35,73,73,73,73,73,73,73,73,73,73,73,73,73,73,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,21,37,34,30,29,22,20,26,28,19,32,23,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,4,4,4,4,5,5,5,5,111,3,3,3,0,64,65,38,66,31,24,67,25,68,33,35,36,37,34,30,29,22,20,19,32,69,1,65,38,66,31,70,24,67,25,68,27,71,33,72,35,73,36,21,37,34,30,29,22,20,26,28,19,32,23,74,64,65,38,66,31,24,67,25,68,33,35,36,37,34,30,29,22,20,19,32,69,1,65,38,66,31,70,24,67,25,68,27,71,33,72,35,73,36,21,37,34,30,29,22,20,26,28,19,32,23,74,3,4,12,1,9,16,3,5,1,9,3,5,3,1,3,4,12,1,9,16,3,5,4,12,1,9,16,3,5,4,12,1,9,16,3,5,1,3,3,3,1,3,1,3,3,3,3,3,1,3,3,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,88,90,90,88,88,90,88,88,90,90,88,90,86,88,90,86,88,90,86,88,90,86,88,90,86,88,90,86,86,88,90,86,88,90,86,88,90,86,88,90,86,88,90,86,88,90,86,88,88,90,90,86,86,86,88,88,90,90,86,86,86,86,86,86,86,88,88,90,90,86,88,90,88,90,86,86,86,86,86,86,86,86,86,88,90,86,86,86,86,86,86,86,86,86,88,90,86,88,90,88,90,86,88,90,86,88,90,86,124,0,0,0,124,0,78,78,78,77,78,78,78,0,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,77,77,77,77,77,77,77,77,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,104,104,104,104,104,104,104,104,104,105,104,105,104,105,104,105,104,104,105,104,105,104,104,105,104,105,104,105,104,105,104,104,104,105,105,104,104,104,105,104,104,104,104,104,104,104,104,104,104,105,104,105,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,104,105,104,105,104,105,104,104,104,0,0,0,106,107,106,107,0,64,0,0,0,0,0,0,0,0,106,106,108,0,0,106,109,110,111,112,113,114,115,116,117,118,119,0,0,0,0,69,0,0,0,0,10,0,110,114,115,116,117,117,117,108,64,69,64,69,109,109,119,106,106,106,106,10,10,10,113,112,120,121,82,122,118,118,118,123,125,125,125,111,64,69,64,69],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,1],[[2,[1,1]]]],[[3,3,1],[[2,[3,1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[4,[3]],[4,[3]]],2],[[[4,[1]],[4,[1]]],2],[[[4,[1]],[4,[1]]],2],[[[4,[3]],[4,[3]]],2],[[[5,[1]],[5,[1]]],2],[[[5,[1]],[5,[1]]],2],[[[5,[3]],[5,[3]]],2],[[[5,[3]],[5,[3]]],2],[[-1,-2,-1],[],[],[]],[[3,3,3],3],[[3,3,3],3],[[3,3,1],3],[3,[[6,[1]]]],[3,[[6,[1]]]],[3,[[6,[7]]]],[3,[[8,[1]]]],[[[9,[-1]]],-1,10],[3,[[8,[1]]]],[3,[[6,[7]]]],[3,[[6,[7]]]],[3,[[6,[7]]]],[[3,11],12],[[3,11],13],[[1,1],1],[[1,1]],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[3,3],2],[[3,3],2],[[[5,[3]],[5,[3]]],2],[[[5,[3]],[5,[3]]],2],[[1,1],1],[[1,1]],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[3,3],2],[[3,3],2],[[[5,[3]],[5,[3]]],2],[[[5,[3]],[5,[3]]],2],[1,11],[3,11],[3,11],[[1,1]],[[1,1],1],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[3,3],2],[[3,3],2],[[[5,[3]],[5,[3]]],2],[[[5,[3]],[5,[3]]],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[14,[-1]]],[],[]],[[1,1],[[14,[1]]]],[[3,3],[[14,[3]]]],[[3,3],[[14,[3]]]],[[3,3],[[14,[3]]]],[[-1,-2],[[14,[-1]]],[],[]],[[1,1],[[14,[1]]]],[[3,3],[[14,[3]]]],[[3,3],[[14,[3]]]],[[3,3],[[14,[3]]]],[3,[[14,[3]]]],[3,[[14,[3]]]],[[-1,-2],[[14,[-1]]],[],[]],[[1,1],[[14,[1]]]],[[3,3],[[14,[3]]]],[[3,3],[[14,[3]]]],[[[4,[-1]]],[[4,[-1]]],15],[12,12],[1,1],[[[9,[-1]]],[[9,[-1]]],[15,10]],[16,16],[3,3],[[[5,[-1]]],[[5,[-1]]],15],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[1,1],17],[[[9,[-1]],[9,[-1]]],17,[18,10]],[[3,3],17],[[[5,[-1]],[5,[-1]]],17,18],[[1,1],17],[[3,3],17],[[3,3],19],[[3,3],20],[[3,3],21],[[3,3],22],[[3,3],23],[[3,3],24],[[3,3],25],[[3,3],26],[[3,3],27],[[3,3],28],[[3,3],29],[[3,3],30],[[3,3],31],[[3,3],32],[[3,3],33],[[3,3],34],[[3,3],35],[[3,3],36],[[3,3],37],[[3,3],38],[[-1,-2],[],[],[]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[[4,[-1]],[4,[-1]],39],[[4,[-1]]],40],[[1,1,39],1],[[[9,[-1]],[9,[-1]],39],[[9,[-1]]],[40,10]],[[16,16,39],16],[[3,3,39],3],[[[5,[-1]],[5,[-1]],39],[[5,[-1]]],40],[3,[[2,[[9,[3]],12]]]],[1,[[2,[[9,[1]],12]]]],[[3,3],[[2,[3,12]]]],[[[2,[3,3]],3],[[2,[3,12]]]],0,0,[[3,16],[[2,[3,1]]]],[[[4,[-1]],[4,[-1]]],39,41],[[1,1],39],[[[9,[-1]],[9,[-1]]],39,10],[[3,3],39],[[[5,[-1]],[5,[-1]]],39,41],[[1,1],39],[[3,3],39],[[1,1],39],[[3,3],39],[1,[[2,[16,12]]]],[[],[[4,[-1]]],42],[[],1],[[],[[9,[-1]]],[42,10]],[[],16],[[],16],[[],3],[[],[[5,[-1]]],42],[[[9,[-1]]],-1,10],[[3,[9,[1]]]],[[3,[9,[3]]]],[[3,[9,[1]]]],[[3,[9,[3]]]],[[3,[9,[1]]]],[[3,[9,[3]]]],[[3,[9,[1]]]],[[3,[9,[3]]]],[[[5,[3]],[9,[3]]]],[[[5,[3]],[9,[3]]]],[[[5,[3]],[9,[1]]]],[[[5,[3]],[9,[3]]]],[[[5,[3]],[9,[1]]]],[[[5,[3]],[9,[3]]]],[[[5,[3]],[9,[1]]]],[[[5,[3]],[9,[1]]]],[[3,[9,[3]]],2],[[3,[9,[1]]],2],[[3,[9,[1]]],2],[[3,[9,[3]]],2],[[[5,[3]],[9,[1]]],2],[[[5,[3]],[9,[3]]],2],[[[5,[3]],[9,[1]]],2],[[[5,[3]],[9,[3]]],2],[[3,[9,[3]]],[[2,[3,3]]]],[[3,[9,[1]]],[[2,[3,1]]]],[[3,[14,[16]]],[[14,[[2,[3,1]]]]]],[[1,1],13],[[[9,[-1]],[9,[-1]]],13,[43,10]],[[16,16],13],[[3,3],13],[[[5,[-1]],[5,[-1]]],13,43],[[1,1],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[4,[-1]],44],45,46],[[12,44],45],[[1,44],45],[[1,44],45],[[1,44],45],[[1,44],45],[[[9,[-1]],44],45,[47,10]],[[[9,[-1]],44],45,[46,10]],[[[9,[-1]],44],45,[48,10]],[[[9,[-1]],44],45,[49,10]],[[[9,[-1]],44],45,[50,10]],[[[9,[-1]],44],45,[51,10]],[[16,44],45],[[3,44],45],[[3,44],45],[[3,44],45],[[3,44],45],[[[5,[-1]],44],45,47],[[[5,[-1]],44],45,48],[[[5,[-1]],44],45,46],[[[5,[-1]],44],45,51],[[[5,[-1]],44],45,49],[[[5,[-1]],44],45,50],[1,7],[1,52],[-1,-1,[]],[[[14,[-1]]],[[4,[-1]]],[]],[-1,-1,[]],[53,1],[54,1],[55,1],[56,1],[-1,-1,[]],[57,[[9,[1]]]],[-1,-1,[]],[57,[[9,[3]]]],[58,[[9,[3]]]],[59,[[9,[1]]]],[60,[[9,[1]]]],[59,[[9,[3]]]],[60,[[9,[3]]]],[58,[[9,[1]]]],[61,[[9,[3]]]],[-1,-1,[]],[[[2,[3,3]]],3],[-1,-1,[]],[62,3],[53,3],[[[6,[1]]],3],[[[2,[3,3]]],3],[55,3],[54,3],[1,3],[[[6,[7]]],3],[56,3],[3,3],[-1,-1,[]],[[[63,[-1]]],-1,[]],[[[63,[-1]]],[[14,[[9,[-1]]]]],[64,10]],[[[63,[65]]],65],[[[63,[38]]],38],[[[63,[66]]],66],[[[63,[31]]],31],[[[63,[24]]],24],[[[63,[67]]],67],[[[63,[25]]],25],[[[63,[68]]],68],[[[63,[33]]],33],[[[63,[35]]],35],[[[63,[36]]],36],[[[63,[37]]],37],[[[63,[34]]],34],[[[63,[30]]],30],[[[63,[29]]],29],[[[63,[22]]],22],[[[63,[20]]],20],[[[63,[19]]],19],[[[63,[32]]],32],[[],-1,[]],[[],1],[[],[[14,[[9,[-1]]]]],[69,10]],[[],65],[[],38],[[],66],[[],31],[[],70],[[],24],[[],67],[[],25],[[],68],[[],27],[[],71],[[],33],[[],72],[[],35],[[],73],[[],36],[[],21],[[],37],[[],34],[[],30],[[],29],[[],22],[[],20],[[],26],[[],28],[[],19],[[],32],[[],23],[[],74],[75,3],[[[8,[54]]],3],[[[63,[-1]]],-1,[]],[[[63,[-1]]],[[14,[[9,[-1]]]]],[64,10]],[[[63,[65]]],65],[[[63,[38]]],38],[[[63,[66]]],66],[[[63,[31]]],31],[[[63,[24]]],24],[[[63,[67]]],67],[[[63,[25]]],25],[[[63,[68]]],68],[[[63,[33]]],33],[[[63,[35]]],35],[[[63,[36]]],36],[[[63,[37]]],37],[[[63,[34]]],34],[[[63,[30]]],30],[[[63,[29]]],29],[[[63,[22]]],22],[[[63,[20]]],20],[[[63,[19]]],19],[[[63,[32]]],32],[[],-1,[]],[[],1],[[],[[14,[[9,[-1]]]]],[69,10]],[[],65],[[],38],[[],66],[[],31],[[],70],[[],24],[[],67],[[],25],[[],68],[[],27],[[],71],[[],33],[[],72],[[],35],[[],73],[[],36],[[],21],[[],37],[[],34],[[],30],[[],29],[[],22],[[],20],[[],26],[[],28],[[],19],[[],32],[[],23],[[],74],[75,3],[[[8,[54]]],3],[61,[[9,[3]]]],[62,3],[56,1],[58,[[9,[1]]]],[58,[[9,[3]]]],[56,3],[55,1],[57,[[9,[1]]]],[57,[[9,[3]]]],[55,3],[53,1],[59,[[9,[3]]]],[59,[[9,[1]]]],[53,3],[54,1],[60,[[9,[1]]]],[60,[[9,[3]]]],[54,3],[3,[[9,[3]]]],[52,3],[7,3],[[[6,[7]]],3],0,[[1,-1],2,76],[[3,-1],2,76],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[3,3],[[2,[3,12]]]],[[3,11],3],[[3,11],3],[[3,3],[[2,[3,12]]]],[[3,3,11,11],[[2,[3,12]]]],[-1,[],[]],[[[9,[[77,[-1]]]]],[],78],[-1,39,[]],[1,39],[3,39],[1,11],[3,11],[[1,1,1,1],[[2,[1,1]]]],0,[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[3,3]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[4,[3]],[4,[3]]],2],[[[4,[3]],[4,[3]]],2],[[[4,[1]],[4,[1]]],2],[[[4,[1]],[4,[1]]],2],[[[5,[1]],[5,[1]]],2],[[[5,[3]],[5,[3]]],2],[[[5,[1]],[5,[1]]],2],[[[5,[3]],[5,[3]]],2],[[-1,-2,-1,1],[],[],[]],[[3,3,1],3],[[3,3],[[2,[3,3]]]],[[[5,[3]]]],[[[5,[1]]]],[[-1,-1],[],[]],[[3,3],3],[[3,3],3],[[3,1],3],[-1,[[4,[-1]]],[]],[-1,[[14,[[9,[-1]]]]],10],[1,[[14,[16]]]],[[[6,[1]]],3],0,[1],[1,1],[3],[3,3],[[[5,[3]]]],[[1,1],[[79,[17]]]],[[[9,[-1]],[9,[-1]]],[[79,[17]]],[80,10]],[[3,3],[[79,[17]]]],[[[5,[-1]],[5,[-1]]],[[79,[17]]],80],[[-1,-2],-1,[],[]],[[-1,-2,11],-1,[],[]],0,0,[-1,-2,81,[]],[-1,1,81],[-1,[[9,[-2]]],81,[82,10]],[-1,3,81],[-1,[[5,[-2]]],81,82],[[-1,[9,[-2]]],-2,81,[]],[[-1,[9,[1]]],1,81],[[-1,[9,[3]]],3,81],[[3,[9,[1]]]],[[3,[9,[3]]]],[[3,[9,[1]]]],[[3,[9,[3]]],3],[[3,[9,[3]]]],[[3,[9,[3]]]],[[3,[9,[1]]]],[[3,[9,[3]]]],[[3,[9,[1]]]],[[[5,[3]],[9,[1]]]],[[[5,[3]],[9,[1]]]],[[[5,[3]],[9,[3]]]],[[[5,[3]],[9,[1]]]],[[[5,[3]],[9,[1]]]],[[[5,[3]],[9,[3]]]],[[[5,[3]],[9,[3]]]],[[[5,[3]],[9,[3]]]],[[3,11],3],[[3,[9,[3]]],2],[[3,[9,[3]]],2],[[3,[9,[1]]],2],[[3,[9,[1]]],2],[[[5,[3]],[9,[1]]],2],[[[5,[3]],[9,[3]]],2],[[[5,[3]],[9,[3]]],2],[[[5,[3]],[9,[1]]],2],[3,3],[[1,1],1],[[3,3],3],[[1,1],1],[[3,3],3],[[1,1],1],[[3,3],3],[[1,1,1],[[2,[1,1]]]],[[3,3,1],[[2,[3,1]]]],[[1,11]],[[1,1],1],[[1,1]],[[3,11],3],[[3,11],3],[[3,11],3],[[1,11],2],[[1,1],2],[[3,11],2],[[3,11],3],[[[2,[3,3]],11],[[2,[3,3]]]],[[1,11]],[[1,1]],[[1,1],1],[[3,11],3],[[3,11],3],[[3,11],3],[[1,1],2],[[1,11],2],[[3,11],2],[[3,11],3],[[[2,[3,3]],11],[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[3,[[2,[3,3]]]],[38,[[2,[3,3]]]],[31,[[2,[3,3]]]],[24,[[2,[3,3]]]],[25,[[2,[3,3]]]],[27,[[2,[3,3]]]],[33,[[2,[3,3]]]],[35,[[2,[3,3]]]],[36,[[2,[3,3]]]],[21,[[2,[3,3]]]],[37,[[2,[3,3]]]],[34,[[2,[3,3]]]],[30,[[2,[3,3]]]],[29,[[2,[3,3]]]],[22,[[2,[3,3]]]],[20,[[2,[3,3]]]],[26,[[2,[3,3]]]],[28,[[2,[3,3]]]],[19,[[2,[3,3]]]],[32,[[2,[3,3]]]],[23,[[2,[3,3]]]],[-1,[[2,[-2,-3]]],[],[],[]],[38,[[2,[3,3]]]],[66,[[2,[3,3]]]],[66,[[2,[3,3]]]],[31,[[2,[3,3]]]],[31,[[2,[3,3]]]],[31,[[2,[3,3]]]],[70,[[2,[3,3]]]],[70,[[2,[3,3]]]],[70,[[2,[3,3]]]],[70,[[2,[3,3]]]],[24,[[2,[3,3]]]],[24,[[2,[3,3]]]],[24,[[2,[3,3]]]],[24,[[2,[3,3]]]],[24,[[2,[3,3]]]],[67,[[2,[3,3]]]],[67,[[2,[3,3]]]],[67,[[2,[3,3]]]],[67,[[2,[3,3]]]],[67,[[2,[3,3]]]],[67,[[2,[3,3]]]],[25,[[2,[3,3]]]],[25,[[2,[3,3]]]],[25,[[2,[3,3]]]],[25,[[2,[3,3]]]],[25,[[2,[3,3]]]],[25,[[2,[3,3]]]],[25,[[2,[3,3]]]],[68,[[2,[3,3]]]],[68,[[2,[3,3]]]],[68,[[2,[3,3]]]],[68,[[2,[3,3]]]],[68,[[2,[3,3]]]],[68,[[2,[3,3]]]],[68,[[2,[3,3]]]],[68,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[27,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[71,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[33,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[72,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[35,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[73,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[36,[[2,[3,3]]]],[21,[[2,[3,3]]]],[37,[[2,[3,3]]]],[34,[[2,[3,3]]]],[30,[[2,[3,3]]]],[29,[[2,[3,3]]]],[22,[[2,[3,3]]]],[20,[[2,[3,3]]]],[26,[[2,[3,3]]]],[28,[[2,[3,3]]]],[19,[[2,[3,3]]]],[32,[[2,[3,3]]]],[23,[[2,[3,3]]]],[3,3],[3,3],[3],[3,[[2,[3,3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[4,[3]],[4,[3]]],[[4,[3]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[4,[1]],[4,[1]]],2],[[[4,[1]],[4,[1]]],2],[[[4,[3]],[4,[3]]],2],[[[4,[3]],[4,[3]]],2],[[[5,[3]],[5,[3]]],2],[[[5,[3]],[5,[3]]],2],[[[5,[1]],[5,[1]]],2],[[[5,[1]],[5,[1]]],2],[[-1,-2,-1],[],[],[]],[[3,3,3],3],[[3,3,3],3],[[3,3,1],3],0,[-1,[[63,[-1]]],[]],[65,[[63,[65]]]],[38,[[63,[38]]]],[66,[[63,[66]]]],[31,[[63,[31]]]],[24,[[63,[24]]]],[67,[[63,[67]]]],[25,[[63,[25]]]],[68,[[63,[68]]]],[33,[[63,[33]]]],[35,[[63,[35]]]],[36,[[63,[36]]]],[37,[[63,[37]]]],[34,[[63,[34]]]],[30,[[63,[30]]]],[29,[[63,[29]]]],[22,[[63,[22]]]],[20,[[63,[20]]]],[19,[[63,[19]]]],[32,[[63,[32]]]],[-1,[],[]],[1],[65],[38],[66],[31],[70],[24],[67],[25],[68],[27],[71],[33],[72],[35],[73],[36],[21],[37],[34],[30],[29],[22],[20],[26],[28],[19],[32],[23],[74],[-1,[[63,[-1]]],[]],[65,[[63,[65]]]],[38,[[63,[38]]]],[66,[[63,[66]]]],[31,[[63,[31]]]],[24,[[63,[24]]]],[67,[[63,[67]]]],[25,[[63,[25]]]],[68,[[63,[68]]]],[33,[[63,[33]]]],[35,[[63,[35]]]],[36,[[63,[36]]]],[37,[[63,[37]]]],[34,[[63,[34]]]],[30,[[63,[30]]]],[29,[[63,[29]]]],[22,[[63,[22]]]],[20,[[63,[20]]]],[19,[[63,[19]]]],[32,[[63,[32]]]],[-1,[],[]],[1],[65],[38],[66],[31],[70],[24],[67],[25],[68],[27],[71],[33],[72],[35],[73],[36],[21],[37],[34],[30],[29],[22],[20],[26],[28],[19],[32],[23],[74],[3,[[6,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,83,[]],[-1,83,[]],[-1,83,[]],[-1,83,[]],[3,[[6,[7]]]],[1,11],[3,11],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],[[1,1],1],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[3,3],3],[1,1],[3,3],[[3,3],3],[[3,3],3],[3,3],[3,3],[[1,1],1],[[3,3],3],[[3,3],3],0,[-1,2,[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[86,-1],[],87],[[88,-1],[],89],[[90,90]],[[90,88]],[[88,90]],[[88,88]],[[90,-1],[],89],[[88,90]],[[88,88]],[[90,88]],[[90,90]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[90,90],[86,86],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[88,88],17],[[90,90],17],[[86,86],17],[[],88],[[],90],[[],86],[[86,-1],[],[87,91]],[[88,88],13],[[90,90],13],[[86,86],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[88,44],[[84,[2,92]]]],[[90,44],[[84,[2,92]]]],[[86,44],[[84,[2,92]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[88,-1],2,76],[[90,-1],2,76],[[86,-1],2,76],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[88,90],90],[[88,88],88],[[90,88],90],[[90,90],90],[[86,[93,[-1]]],[],[94,91]],[[86,[95,[-1]]],[],[94,91]],[[86,86]],[[88,88],88],[[88,90],88],[[90,88],88],[[90,90],90],[[86,[93,[-1]]],[],[94,91]],[[86,86]],[[86,[95,[-1]]],[],[94,91]],[[86,[96,[-1,-2]]],[],[],[]],[[86,97]],[[86,-1],[],87],[86],[[],88],[[],88],[[],90],[[],90],[[],86],[88],[90],[[88,88],[[79,[17]]]],[[90,90],[[79,[17]]]],[[86,86],[[79,[17]]]],[[-1,-2],[],[],[]],[[86,[93,[-1]]],[],[94,91]],[[86,86]],[[86,[95,[-1]]],[],[94,91]],[[86,-1],[],[87,91]],[[86,[95,[-1]]],[],[94,91]],[[86,86]],[[86,[93,[-1]]],[],[94,91]],[[],13],[[],13],[[],98],[[],99],[[],100],[[],101],[[],101],[[],98],[[],99],[[],100],[[],102],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],54],[[],54],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[-1,85,[]],0,0,0,[[[2,[3,3]],3,1],3],[-1,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],2,78],[[[77,[-1]],[77,[-1]]],2,78],[[[77,[-1]]],3,78],[[[77,[-1]]],3,78],[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[-1]]],[[77,[-1]]],[78,15]],[[-1,-2],2,[],[]],[[-1,39],2,[]],[[[77,[-1]],[77,[-1]],39],[[77,[-1]]],[78,103]],0,[[[77,[-1]],[77,[-1]]],39,78],[[],[[77,[-1]]],78],[[[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],13,[78,43]],[[-1,-2],13,[],[]],[[[77,[-1]],44],45,[78,46]],[-1,-1,[]],[3,[[77,[-1]]],78],0,[-1,-2,[],[]],[[[77,[-1]]],[],78],[[[77,[-1]]],[[2,[[77,[-1]],12]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],2,78],[[[77,[-1]],[77,[-1]]],2,78],[[[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]]],[[77,[-1]]],78],[3,[[77,[-1]]],78],[3,[[14,[[77,[-1]]]]],78],[[[77,[-1]],3],[[77,[-1]]],78],[[-1,-2],-3,[],[],[]],[[[77,[-1]],3,11],[[77,[-1]]],78],[[[77,[-1]],3,11],[[77,[-1]]],78],[-1,[[77,[-2]]],81,78],[[[77,[-1]]],3,78],[[[77,[-1]]],[],78],[[[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],78],[[[77,[-1]],[77,[-1]]],2,78],[[[77,[-1]],[77,[-1]]],2,78],[[[77,[-1]]],3,78],[-1,-2,[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,2,[]],0,0,[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],2],[[104,104],2],[104,3],[104,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,105],[104,104],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,39],2,[]],[[105,105,39],105],[[104,104,39],104],[[105,105],39],[[104,104],39],[104,104],[[105,105],13],[[104,104],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[105,44],45],[[104,44],45],[-1,-1,[]],[[[77,[-1]]],104,78],[-1,-1,[]],[[3,105],104],[[],105],[-1,-2,[],[]],[-1,-2,[],[]],[104],[104,[[2,[104,12]]]],[105,3],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],2],[[104,104],2],[104,104],[104,104],[104,104],[3,105],[[3,105],104],[3,[[14,[105]]]],[105,104],[104,105],[[-1,-2],-3,[],[],[]],[[104,3],104],[[104,3,11],104],[[104,3,11],104],[104],[104,3],[104,104],[104,104],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],104],[[104,104],2],[[104,104],2],[104,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,[[84,[-2]]],[],[]],[-1,85,[]],[-1,85,[]],[105,104],[104,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,-1],[],[],[]],[[-1,-2],[[14,[-1]]],[],[]],[[-1,-2],[[14,[-1]]],[],[]],[[-1,-2],[[14,[-1]]],[],[]],[[-1,-1],[],[]],[[-1,-1],[],[]],[[-1,-1],[],[]],[[-1,-2],[],[],[]],[[[63,[-1]]],-1,[]],[[],-1,[]],[[[63,[-1]]],-1,[]],[[],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[-1,-2,-1,1],[],[],[]],[[-1,-1],[],[]],[[-1,-2],-1,[],[]],[[-1,-2,11],-1,[],[]],[-1,-2,81,[]],[[-1,[9,[-2]]],-2,81,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,[[2,[-2,-3]]],[],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2,-1],[],[],[]],[-1,[[63,[-1]]],[]],[-1,[],[]],[-1,[[63,[-1]]],[]],[-1,[],[]]],"c":[212,970,1151,4680],"p":[[3,"Limb",0],[15,"tuple"],[3,"Uint",0],[3,"Checked",0],[3,"Wrapping",0],[15,"array"],[6,"Word",0],[15,"slice"],[3,"NonZero",0],[8,"Zero",4709],[15,"usize"],[3,"CtChoice",0],[15,"bool"],[3,"CtOption",4794],[8,"Clone",4795],[3,"Reciprocal",0],[4,"Ordering",4796],[8,"Ord",4796],[6,"U6144",0],[6,"U4096",0],[6,"U1280",0],[6,"U3584",0],[6,"U16384",0],[6,"U384",0],[6,"U512",0],[6,"U4224",0],[6,"U640",0],[6,"U4352",0],[6,"U3072",0],[6,"U2048",0],[6,"U256",0],[6,"U8192",0],[6,"U768",0],[6,"U1792",0],[6,"U896",0],[6,"U1024",0],[6,"U1536",0],[6,"U128",0],[3,"Choice",4794],[8,"ConditionallySelectable",4794],[8,"ConstantTimeEq",4794],[8,"Default",4797],[8,"PartialEq",4796],[3,"Formatter",4798],[6,"Result",4798],[8,"Debug",4798],[8,"Octal",4798],[8,"Binary",4798],[8,"Display",4798],[8,"UpperHex",4798],[8,"LowerHex",4798],[6,"WideWord",0],[15,"u64"],[15,"u8"],[15,"u32"],[15,"u16"],[3,"NonZeroU32",4799],[3,"NonZeroU16",4799],[3,"NonZeroU64",4799],[3,"NonZeroU8",4799],[3,"NonZeroU128",4799],[15,"u128"],[6,"ByteArray",0],[8,"ArrayEncoding",4709],[6,"U64",0],[6,"U192",0],[6,"U448",0],[6,"U576",0],[8,"Encoding",4709],[6,"U320",0],[6,"U704",0],[6,"U832",0],[6,"U960",0],[6,"U32768",0],[15,"str"],[8,"Hasher",4800],[3,"Residue",4555],[8,"ResidueParams",4555],[4,"Option",4801],[8,"PartialOrd",4796],[8,"CryptoRngCore",4802],[8,"Random",4709],[3,"String",4803],[4,"Result",4804],[3,"TypeId",4805],[3,"Z0",1159],[8,"Integer",4806],[3,"B0",1159],[8,"Bit",4806],[3,"B1",1159],[8,"NonZero",4806],[3,"Error",4798],[3,"NInt",4807],[8,"Unsigned",4806],[3,"PInt",4807],[3,"TArr",4808],[3,"ATerm",4808],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[8,"Copy",4809],[3,"DynResidue",4627],[3,"DynResidueParams",4627],[8,"Integer",4709],[8,"Bounded",4709],[8,"ConcatMixed",4709],[8,"ArrayDecoding",4709],[8,"AddMod",4709],[8,"SubMod",4709],[8,"NegMod",4709],[8,"MulMod",4709],[8,"CheckedAdd",4709],[8,"CheckedMul",4709],[8,"CheckedSub",4709],[8,"Concat",4709],[8,"Split",4709],[8,"Invert",4709],[8,"Pow",4709],[8,"PowBoundedExp",4709],[8,"RandomMod",4709],[8,"SplitMixed",4709],[8,"Retrieve",4549],[8,"Square",4709]]},\
"crypto_common":{"doc":"Common cryptographic traits.","t":"IGQIQIIIDGQIGIIQIGQIGQIILLLLLLLLLLLLLLLCKKLLLLKKLLLCKLLLLLCK","n":["AlgorithmName","Block","BlockSize","BlockSizeUser","Inner","InnerInit","InnerIvInit","InnerUser","InvalidLength","Iv","IvSize","IvSizeUser","Key","KeyInit","KeyIvInit","KeySize","KeySizeUser","Output","OutputSize","OutputSizeUser","ParBlocks","ParBlocksSize","ParBlocksSizeUser","Reset","block_size","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","generate_iv","generate_iv","generate_key","generate_key","generate_key_iv","generic_array","inner_init","inner_iv_init","inner_iv_slice_init","into","iv_size","key_size","new","new","new_from_slice","new_from_slices","output_size","rand_core","reset","to_owned","to_string","try_from","try_into","type_id","typenum","write_alg_name"],"q":[[0,"crypto_common"],[60,"core::fmt"],[61,"core::fmt"],[62,"rand_core"],[63,"rand_core"],[64,"core::any"]],"d":["Trait which stores algorithm name constant, used in <code>Debug</code> …","Block on which <code>BlockSizeUser</code> implementors operate.","Size of the block in bytes.","Types which process data in blocks.","Inner type.","Types which can be initialized from another type (usually …","Types which can be initialized from another type and …","Types which use another type for initialization.","The error type returned when key and/or IV used in the …","Initialization vector (nonce) used by <code>IvSizeUser</code> …","Initialization vector size in bytes.","Types which use initialization vector (nonce) for …","Key used by <code>KeySizeUser</code> implementors.","Types which can be initialized from key.","Types which can be initialized from key and initialization …","Key size in bytes.","Types which use key for initialization.","Output array of <code>OutputSizeUser</code> implementors.","Size of the output in bytes.","Types which return data with the given size.","Parallel blocks on which <code>ParBlocksSizeUser</code> implementors …","Number of blocks which can be processed in parallel.","Types which can process blocks in parallel.","Resettable types.","Return block size in bytes.","","","","","","","","","Returns the argument unchanged.","Generate random IV using the provided <code>CryptoRng</code>.","Generate random IV using the provided <code>CryptoRng</code>.","Generate random key using the provided <code>CryptoRng</code>.","Generate random key using the provided <code>CryptoRng</code>.","Generate random key and nonce using the provided <code>CryptoRng</code>.","","Initialize value from the <code>inner</code>.","Initialize value using <code>inner</code> and <code>iv</code> array.","Initialize value using <code>inner</code> and <code>iv</code> slice.","Calls <code>U::from(self)</code>.","Return IV size in bytes.","Return key size in bytes.","Create new value from fixed size key.","Create new value from fixed length key and nonce.","Create new value from variable size key.","Create new value from variable length key and nonce.","Return output size in bytes.","","Reset state to its initial value.","","","","","","","Write algorithm name into <code>f</code>."],"i":[0,0,17,0,18,0,0,0,0,0,19,0,0,0,0,20,0,0,21,0,0,22,0,0,17,2,2,2,2,2,2,2,2,2,23,24,25,23,23,0,26,24,24,2,19,20,25,23,25,23,21,0,27,2,2,2,2,2,0,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[[2,2],4],[[-1,-2],4,[],[]],[[2,5],6],[[2,5],[[8,[3,7]]]],[-1,-1,[]],[-1,[[9,[-2]]],[10,11],[]],[-1,[[9,[-2]]],[10,11],[]],[-1,[[12,[-2]]],[10,11],[]],[-1,[[12,[-2]]],[10,11],[]],[-1,[[3,[[12,[-2]],[9,[-2]]]]],[10,11],[]],0,[[],-1,[]],[[[9,[-1]]],-1,[]],[[[14,[13]]],[[8,[-1,2]]],[]],[-1,-2,[],[]],[[],1],[[],1],[[[12,[-1]]],-1,[]],[[[12,[-1]],[9,[-1]]],-1,[]],[[[14,[13]]],[[8,[-1,2]]],[]],[[[14,[13]],[14,[13]]],[[8,[-1,2]]],[]],[[],1],0,[-1,3,[]],[-1,-2,[],[]],[-1,15,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,16,[]],0,[5,6]],"c":[],"p":[[15,"usize"],[3,"InvalidLength",0],[15,"tuple"],[15,"bool"],[3,"Formatter",60],[6,"Result",60],[3,"Error",60],[4,"Result",61],[6,"Iv",0],[8,"CryptoRng",62],[8,"RngCore",62],[6,"Key",0],[15,"u8"],[15,"slice"],[3,"String",63],[3,"TypeId",64],[8,"BlockSizeUser",0],[8,"InnerUser",0],[8,"IvSizeUser",0],[8,"KeySizeUser",0],[8,"OutputSizeUser",0],[8,"ParBlocksSizeUser",0],[8,"KeyIvInit",0],[8,"InnerIvInit",0],[8,"KeyInit",0],[8,"InnerInit",0],[8,"Reset",0],[8,"AlgorithmName",0]]},\
"der":{"doc":"RustCrypto: ASN.1 DER","t":"CCNNNNNCENNDNIIIIDIDIDNNDENNNINDSSNNNDNNNDNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDNNNSSNNNNNNNNNNNINNGDCNNNNDDSEENDNNNINNNNNNNINNISSLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLKLLLLLLKLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLCLLLLLLLKLLKLLLLKLLLLLLLLLLLLLKLLLLALLLLLLLLLLLKLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLLLCMMMMMMMMMMMMMMMMMDDDDDDIDDDDDDDSSSSSSDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQIIKK","n":["Any","AnyRef","Application","Application","BitString","BmpString","Boolean","Choice","Class","ContextSpecific","ContextSpecific","DateTime","DateTime","Decode","DecodeOwned","DecodeValue","DerOrd","Document","Encode","EncodeRef","EncodeValue","EncodeValueRef","Enumerated","Err","Error","ErrorKind","Explicit","Failed","FileNotFound","FixedTag","GeneralizedTime","Header","INDEFINITE","INFINITY","Ia5String","Implicit","Incomplete","IndefiniteLength","IndefiniteLength","Integer","Io","Length","Length","MAX","N0","N1","N10","N11","N12","N13","N14","N15","N16","N17","N18","N19","N2","N20","N21","N22","N23","N24","N25","N26","N27","N28","N29","N3","N30","N4","N5","N6","N7","N8","N9","NestedReader","Noncanonical","Null","NumericString","ONE","ONE","ObjectIdentifier","OctetString","OidMalformed","OidUnknown","Ok","Overflow","Overlength","PermissionDenied","PrintableString","Private","Private","Reader","Reader","Real","Result","SecretDocument","Sequence","Sequence","Set","SetDuplicate","SetOrdering","SliceReader","SliceWriter","TAG","Tag","TagMode","TagModeUnknown","TagNumber","TagNumberInvalid","TagUnexpected","TagUnknown","Tagged","TeletexString","TrailingData","Universal","UtcTime","Utf8","Utf8String","Value","ValueOrd","VideotexString","VisibleString","Writer","ZERO","ZERO","add","add","add","add","add","add","application","as_bytes","as_bytes","as_ref","as_ref","as_ref","asn1","assert_eq","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_decode","can_decode","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","context_specific","context_specific","context_specific","context_specific","day","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_msg","decode_msg","decode_value","decode_value","default","default","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_msg","encode_msg","encode_to_slice","encode_to_slice","encode_to_vec","encode_to_vec","encode_value","encode_value","encode_value","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","error","error","error","error","error","finish","finish","finish","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_tlv","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_der","from_der","from_str","from_str","from_system_time","from_unix_duration","header","header","hour","incomplete","input_len","input_len","input_len","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_secret","into_vec","is_application","is_constructed","is_context_specific","is_definite","is_failed","is_failed","is_finished","is_finished","is_indefinite","is_private","is_universal","is_zero","kind","len","len","length","length_error","minutes","month","new","new","new","new","new","new","new","new","non_canonical_error","number","octet","offset","offset","offset","oid","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","peek_byte","peek_byte","peek_byte","peek_header","peek_header","peek_header","peek_tag","peek_tag","position","position","position","position","private","read_byte","read_byte","read_der_file","read_der_file","read_into","read_into","read_into","read_nested","read_nested","read_slice","read_slice","read_slice","read_vec","read_vec","referenced","remaining_len","remaining_len","remaining_len","saturating_add","saturating_sub","seconds","sequence","sequence","sequence","sub","sub","tag","tag","tag","tag","tag","tlv_bytes","tlv_bytes","to_bytes","to_der","to_der","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_system_time","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unexpected_error","unix_duration","value","value_cmp","value_cmp","value_cmp","value_error","value_error","value_len","value_len","value_len","write","write","write_byte","write_byte","write_der_file","write_der_file","year","zeroize","actual","actual_len","byte","decoded","expected","expected_len","oid","remaining","tag","tag","tag","constructed","constructed","constructed","number","number","number","Any","AnyRef","BitString","BitStringIter","BitStringRef","BmpString","Choice","ContextSpecific","ContextSpecificRef","GeneralizedTime","Ia5String","Ia5StringRef","Int","IntRef","LENGTH","MAX_SIZE","MAX_UNUSED_BITS","MAX_UNUSED_BITS","MAX_YEAR","NULL","Null","ObjectIdentifier","OctetString","OctetStringRef","PrintableString","PrintableStringRef","Sequence","SequenceOf","SequenceOfIter","SequenceRef","SetOf","SetOfIter","SetOfVec","TeletexString","TeletexStringRef","Uint","UintRef","UtcTime","Utf8StringRef","VideotexStringRef","add","add","add","arc","arcs","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","bit_len","bit_len","bits","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_len","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","can_decode","chars","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","codepoints","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_as","decode_as","decode_explicit","decode_implicit","decode_into","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","decode_value","default","default","default","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","der_cmp","deref","deref","deref","deref","deref","deref","deref","deref","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_from","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arcs","from_bytes","from_bytes","from_bytes","from_date_time","from_date_time","from_iter","from_str","from_str","from_system_time","from_system_time","from_ucs2","from_unix_duration","from_unix_duration","from_utf8","get","get","get","has_unused_bits","has_unused_bits","hash","insert","insert","insert_ordered","insert_ordered","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_bytes","into_iter","into_iter","into_iter","into_vec","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_null","is_null","iter","iter","iter","len","len","len","len","len","len","len","len","len","len","len","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_unwrap","next","next","next","null","owned_to_ref","owned_to_ref","owned_to_ref","owned_to_ref","owned_to_ref","owned_to_ref","owned_to_ref","owned_to_ref","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push_arc","raw_bytes","raw_bytes","ref_to_owned","ref_to_owned","ref_to_owned","ref_to_owned","ref_to_owned","ref_to_owned","ref_to_owned","ref_to_owned","sequence","sequence","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag","tag_mode","tag_mode","tag_number","tag_number","to_date_time","to_date_time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_system_time","to_system_time","to_unix_duration","to_unix_duration","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unused_bits","unused_bits","value","value","value","value","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_cmp","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","value_len","Borrowed","Owned","OwnedToRef","RefToOwned","owned_to_ref","ref_to_owned"],"q":[[0,"der"],[581,"der::ErrorKind"],[592,"der::Tag"],[598,"der::asn1"],[1669,"der::referenced"],[1675,"core::cmp"],[1676,"core::option"],[1677,"core::result"],[1678,"alloc::vec"],[1679,"core::fmt"],[1680,"core::fmt"],[1681,"core::num::error"],[1682,"core::convert"],[1683,"std::io::error"],[1684,"const_oid::error"],[1685,"alloc::string"],[1686,"std::time"],[1687,"core::time"],[1688,"core::convert"],[1689,"core::convert"],[1690,"zeroize"],[1691,"alloc::string"],[1692,"const_oid::arcs"],[1693,"core::iter::traits::iterator"],[1694,"core::clone"],[1695,"core::cmp"],[1696,"core::fmt"],[1697,"core::hash"],[1698,"core::slice::iter"],[1699,"core::marker"],[1700,"core::cmp"]],"d":["","","<code>APPLICATION</code>: types whose meaning is specific to an …","Application tag.","<code>BIT STRING</code> tag: <code>3</code>.","<code>BMPString</code> tag: <code>30</code>.","<code>BOOLEAN</code> tag: <code>1</code>.","","Class of an ASN.1 tag.","<code>CONTEXT-SPECIFIC</code>: types whose meaning is specific to a …","Context-specific tag.","Date-and-time type shared by multiple ASN.1 types (e.g. …","Date-and-time related errors.","Decoding trait.","Marker trait for data structures that can be decoded from …","Decode the value part of a Tag-Length-Value encoded field, …","DER ordering trait.","ASN.1 DER-encoded document.","Encoding trait.","Reference encoder: wrapper type which impls <code>Encode</code> for any …","Encode the value part of a Tag-Length-Value encoded field, …","Reference value encoder: wrapper type which impls …","<code>ENUMERATED</code> tag: <code>10</code>.","Contains the error value","Error type.","Error type.","<code>EXPLICIT</code> tagging.","This error indicates a previous DER parsing operation …","File not found error.","Types which have a constant ASN.1 <code>Tag</code>.","<code>GeneralizedTime</code> tag: <code>24</code>.","ASN.1 DER headers: tag + length component of TLV-encoded …","Indefinite length.","This is the maximum date represented by the <code>DateTime</code> This …","<code>IA5String</code> tag: <code>22</code>.","<code>IMPLICIT</code> tagging.","Message is incomplete and does not contain all of the …","Length type with support for indefinite lengths as used by …","Indefinite length disallowed.","<code>INTEGER</code> tag: <code>2</code>.","I/O errors.","ASN.1-encoded length.","Incorrect length for a given field.","Maximum length currently supported: 256 MiB","Tag number <code>0</code>","Tag number <code>1</code>","Tag number <code>10</code>","Tag number <code>11</code>","Tag number <code>12</code>","Tag number <code>13</code>","Tag number <code>14</code>","Tag number <code>15</code>","Tag number <code>16</code>","Tag number <code>17</code>","Tag number <code>18</code>","Tag number <code>19</code>","Tag number <code>2</code>","Tag number <code>20</code>","Tag number <code>21</code>","Tag number <code>22</code>","Tag number <code>23</code>","Tag number <code>24</code>","Tag number <code>25</code>","Tag number <code>26</code>","Tag number <code>27</code>","Tag number <code>28</code>","Tag number <code>29</code>","Tag number <code>3</code>","Tag number <code>30</code>","Tag number <code>4</code>","Tag number <code>5</code>","Tag number <code>6</code>","Tag number <code>7</code>","Tag number <code>8</code>","Tag number <code>9</code>","Reader type used by <code>Reader::read_nested</code>.","Message is not canonically encoded.","<code>NULL</code> tag: <code>5</code>.","<code>NumericString</code> tag: <code>18</code>.","Length of <code>1</code>","Length of <code>1</code>.","<code>OBJECT IDENTIFIER</code> tag: <code>6</code>.","<code>OCTET STRING</code> tag: <code>4</code>.","OID is improperly encoded.","Unknown OID.","Contains the success value","Integer overflow occurred (library bug!).","Message is longer than this library’s internal limits …","Permission denied reading file.","<code>PrintableString</code> tag: <code>19</code>.","<code>PRIVATE</code>: types whose meaning is specific to a given …","Private tag number.","Reader trait which reads DER-encoded input.","Reader does not support the requested operation.","<code>REAL</code> tag: <code>9</code>.","Result type.","Secret <code>Document</code> type.","","<code>SEQUENCE</code> tag: <code>16</code>.","<code>SET</code> and <code>SET OF</code> tag: <code>17</code>.","<code>SET</code> cannot contain duplicates.","<code>SET</code> ordering error: items not in canonical order.","<code>Reader</code> which consumes an input byte slice.","<code>Writer</code> which encodes DER into a mutable output byte slice.","ASN.1 tag","ASN.1 tags.","Tagging modes: <code>EXPLICIT</code> versus <code>IMPLICIT</code>.","Unknown tag mode.","ASN.1 tag numbers (i.e. lower 5 bits of a <code>Tag</code>).","Invalid tag number.","Unexpected tag.","Unknown/unsupported tag.","Types which have an ASN.1 <code>Tag</code>.","<code>TeletexString</code> tag: <code>20</code>.","Undecoded trailing data at end of message.","<code>UNIVERSAL</code>: built-in types whose meaning is the same in all …","<code>UTCTime</code> tag: <code>23</code>.","UTF-8 errors.","<code>UTF8String</code> tag: <code>12</code>.","Unexpected value.","DER value ordering trait.","<code>VideotexString</code> tag: <code>21</code>.","<code>VisibleString</code> tag: <code>26</code>.","Writer trait which outputs encoded DER.","Length of <code>0</code>","Length of <code>0</code>.","","","","","","","Create an <code>APPLICATION</code> tag with this tag number.","Get the ASN.1 DER-encoded bytes of this document.","Borrow the inner serialized bytes of this document.","","","","Module containing all of the various ASN.1 built-in types …","Assert that this <code>Tag</code> matches the provided expected tag.","Annotate an <code>ErrorKind</code> with context about where it occurred,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>Class</code> that corresponds to this <code>Tag</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to decode an ASN.1 <code>CONTEXT-SPECIFIC</code> field with the …","Attempt to decode an ASN.1 <code>CONTEXT-SPECIFIC</code> field with the …","Create a <code>CONTEXT-SPECIFIC</code> tag with this tag number.","Encode a <code>CONTEXT-SPECIFIC</code> field with the provided tag …","Get the day.","Attempt to decode this message using the provided decoder.","Decode a value which impls the <code>Decode</code> trait.","Decode a value which impls the <code>Decode</code> trait.","","","","","","","","Try to decode the inner ASN.1 DER message contained in this","Try to decode the inner ASN.1 DER message as the given …","Attempt to decode this message using the provided <code>Reader</code>.","","","","Return an <code>Ordering</code> between <code>self</code> and <code>other</code> when serialized …","","","","","","","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","","","","","Encode a value which impls the <code>Encode</code> trait.","","Encode the provided type as ASN.1 DER, storing the …","Encode the provided type as ASN.1 DER.","Encode this value to the provided byte slice, returning a …","Encode this value to the provided byte slice, returning a …","Encode this message as ASN.1 DER, appending it to the …","Encode this message as ASN.1 DER, appending it to the …","Encode value (sans <code>Tag</code>+<code>Length</code> header) as ASN.1 DER using …","","","Compute the length of this value in bytes when encoded as …","","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an error with the given <code>ErrorKind</code>, annotating it …","Return an error with the given <code>ErrorKind</code>, annotating it …","","Return an error with the given <code>ErrorKind</code>, annotating it …","Return an error with the given <code>ErrorKind</code>, annotating it …","Finish decoding, returning the given value if there is no …","Finish decoding, returning the given value if there is no …","","Finish encoding to the buffer, returning a slice …","","","","","","","","","","","","","","","","","","","","","","","Get the length of DER Tag-Length-Value (TLV) encoded data …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Parse <code>Self</code> from the provided DER-encoded byte slice.","Parse <code>Self</code> from the provided DER-encoded byte slice.","","","Instantiate from <code>SystemTime</code>.","Compute a <code>DateTime</code> from the given <code>Duration</code> since the …","Get the <code>Header</code> used to encode this value.","Get the <code>Header</code> used to encode this value.","Get the hour.","Create a new <code>ErrorKind::Incomplete</code> for the given length.","Get the length of the input.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to a <code>SecretDocument</code>.","Convert to an ASN.1 DER-encoded byte vector.","Is this an application tag?","Does this tag represent a constructed (as opposed to …","Is this a context-specific tag?","Is this length definite?","Did the decoding operation fail due to an error?","Did the decoding operation fail due to an error?","Have we read all of the input data?","Have we read all of the input data?","Is this length indefinite?","Is this a private tag?","Is this a universal tag?","Is this length equal to zero?","Get the <code>ErrorKind</code> which occurred.","Get the length of the encoded ASN.1 DER in bytes.","Get the length of the encoded ASN.1 DER in bytes.","Length of the encoded value","Create an <code>Error</code> for an invalid <code>Length</code>.","Get the minutes.","Get the month.","Create a new <code>DateTime</code> from the given UTC time components.","Create a new <code>Error</code>.","Create a new <code>Header</code> from a <code>Tag</code> and a specified length.","Create a new <code>Length</code> for any value which fits inside of a …","Create a definite length from a type which can be …","Create a new slice reader for the given byte slice.","Create a new tag number (const-friendly).","Create a new encoder with the given byte slice as a …","Create an <code>Error</code> for an non-canonical value with the ASN.1 …","Get the <code>TagNumber</code> (lower 6-bits) for this tag.","Get the octet encoding for this <code>Tag</code>.","","Offset within the original input stream.","Offset within the original input stream.","","","","","","","","","Peek at the next byte of input without modifying the …","","","Peek forward in the input data, attempting to decode a …","","","Peek at the next byte in the decoder and attempt to decode …","Peek at the next byte in the decoder and attempt to decode …","Get the position within the buffer.","","Get the position inside of the message where the error …","","Create a <code>PRIVATE</code> tag with this tag number.","Read a single byte.","Read a single byte.","Read ASN.1 DER document from a file.","Read ASN.1 DER document from a file.","","Attempt to read input data, writing it into the provided …","Attempt to read input data, writing it into the provided …","Read nested data of the given length.","Read nested data of the given length.","Attempt to read data borrowed directly from the input as a …","","","Read a byte vector of the given length.","Read a byte vector of the given length.","A module for working with referenced data.","Get the number of bytes still remaining in the buffer.","Get the number of bytes still remaining in the buffer.","","Perform saturating addition of two lengths.","Perform saturating subtraction of two lengths.","Get the seconds.","Read an ASN.1 <code>SEQUENCE</code>, creating a nested <code>Reader</code> for the …","Read an ASN.1 <code>SEQUENCE</code>, creating a nested <code>Reader</code> for the …","Encode an ASN.1 <code>SEQUENCE</code> of the given length.","","","Get the ASN.1 tag that this type is encoded with.","","","","Tag representing the type of the encoded value","Obtain a slice of bytes contain a complete TLV production …","Obtain a slice of bytes contain a complete TLV production …","Return an allocated ASN.1 DER serialization as a byte …","Encode this type as DER, returning a byte vector.","Encode this type as DER, returning a byte vector.","","","","","","","","","","","","","","","","","","","","","","Convert to <code>SystemTime</code>.","Return an ASN.1 DER-encoded byte vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an <code>Error</code> because the current tag was unexpected, …","Compute <code>Duration</code> since <code>UNIX_EPOCH</code> from the given calendar …","Get the inner value.","Return an <code>Ordering</code> between value portion of TLV-encoded …","","","Return an error for an invalid value with the given tag.","Create an <code>Error</code> for an invalid value with the ASN.1 type …","Compute the length of this value (sans <code>Tag</code>+<code>Length</code> header) …","","","Write the given DER-encoded bytes as output.","","Write a single byte.","Write a single byte.","Write ASN.1 DER document to a file.","Write ASN.1 DER document to a file.","Get the year.","","Actual tag encountered in the message.","Actual length of the message buffer currently being …","Raw byte value of the tag.","Length of the decoded data.","Tag the decoder was expecting (if there is a single such …","Expected message length.","OID value that was unrecognized by a parser for a …","Total length of the remaining data left in the buffer.","Tag of the value being decoded.","Tag of the value which is not canonically encoded.","Tag of the unexpected value.","Is this tag constructed? (vs primitive).","Is this tag constructed? (vs primitive).","Is this tag constructed? (vs primitive).","Tag number.","Tag number.","Tag number.","ASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.","ASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.","Owned form of ASN.1 <code>BIT STRING</code> type.","Iterator over the bits of a <code>BitString</code>.","ASN.1 <code>BIT STRING</code> type.","ASN.1 <code>BMPString</code> type.","ASN.1 <code>CHOICE</code> denotes a union of one or more possible …","Context-specific field which wraps an owned inner value.","Context-specific field reference.","ASN.1 <code>GeneralizedTime</code> type.","ASN.1 <code>IA5String</code> type.","ASN.1 <code>IA5String</code> type.","Signed arbitrary precision ASN.1 <code>INTEGER</code> type.","Signed arbitrary precision ASN.1 <code>INTEGER</code> reference type.","Length of an RFC 5280-flavored ASN.1 DER-encoded <code>UtcTime</code>.","Maximum size of a BER/DER-encoded OID in bytes.","Maximum number of unused bits allowed.","Maximum number of unused bits allowed.","Maximum year that can be represented as a <code>UTCTime</code>.","<code>AnyRef</code> representation of the ASN.1 <code>NULL</code> type.","ASN.1 <code>NULL</code> type.","Object identifier (OID).","ASN.1 <code>OCTET STRING</code> type: owned form..","ASN.1 <code>OCTET STRING</code> type: borrowed form.","ASN.1 <code>PrintableString</code> type.","ASN.1 <code>PrintableString</code> type.","Marker trait for ASN.1 <code>SEQUENCE</code>s.","ASN.1 <code>SEQUENCE OF</code> backed by an array.","Iterator over the elements of an <code>SequenceOf</code>.","The <code>SequenceRef</code> type provides raw access to the octets …","ASN.1 <code>SET OF</code> backed by an array.","Iterator over the elements of an <code>SetOf</code>.","ASN.1 <code>SET OF</code> backed by a <code>Vec</code>.","ASN.1 <code>TeletexString</code> type.","ASN.1 <code>TeletexString</code> type.","Unsigned arbitrary precision ASN.1 <code>INTEGER</code> type.","Unsigned arbitrary precision ASN.1 <code>INTEGER</code> reference type.","ASN.1 <code>UTCTime</code> type.","ASN.1 <code>UTF8String</code> type.","ASN.1 <code>VideotexString</code> type.","Add an element to this <code>SequenceOf</code>.","Add an item to this <code>SetOf</code>.","Add an element to this <code>SetOfVec</code>.","Return the arc with the given index, if it exists.","Iterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…","Get the BER/DER serialization of this OID as bytes.","Borrow the inner byte slice.","Borrow the inner byte slice.","Borrow the encoded UCS-2 as bytes.","Borrow the inner byte slice which contains the least …","Borrow the inner byte slice which contains the least …","Borrow the inner byte slice which contains the least …","Borrow the inner byte slice which contains the least …","Borrow the inner byte slice.","Borrow the inner byte slice.","","","","","","","","","","","","","","","","","","","","","","Borrow the elements of this <code>SetOfVec</code> as a slice.","Get the length of this <code>BIT STRING</code> in bits.","Get the length of this <code>BIT STRING</code> in bits.","Iterator over the bits of this <code>BIT STRING</code>.","Iterator over the bits of this <code>BIT STRING</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the number of bytes/octets needed to represent this …","Is the provided <code>Tag</code> decodable as a variant of this <code>CHOICE</code>?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get an iterator over characters in the string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get an iterator over the <code>u16</code> codepoints.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to decode this <code>AnyRef</code> type into the inner value.","Attempt to decode this <code>Any</code> type into the inner value.","Attempt to decode an <code>EXPLICIT</code> ASN.1 <code>CONTEXT-SPECIFIC</code> field …","Attempt to decode an <code>IMPLICIT</code> ASN.1 <code>CONTEXT-SPECIFIC</code> field …","Parse <code>T</code> from this <code>OCTET STRING</code>’s contents.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode the provided type as an <code>Any</code> value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extend a <code>SetOfVec</code> using an iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Parse an OID from a slice of <code>Arc</code> values (i.e. integers).","Parse an OID from from its BER/DER encoding.","Create a new ASN.1 <code>BIT STRING</code> from the given bytes.","Create a new ASN.1 <code>BIT STRING</code> from the given bytes.","Create a <code>GeneralizedTime</code> from a <code>DateTime</code>.","Create a <code>UtcTime</code> from a <code>DateTime</code>.","Create a new <code>SetOfVec</code> from the given iterator.","","","Instantiate from <code>SystemTime</code>.","Instantiate from <code>SystemTime</code>.","Create a new <code>BmpString</code> from its UCS-2 encoding.","Create a new <code>GeneralizedTime</code> given a <code>Duration</code> since …","Create a new <code>UtcTime</code> given a <code>Duration</code> since <code>UNIX_EPOCH</code> …","Create a new <code>BmpString</code> from a UTF-8 string.","Get an element of this <code>SequenceOf</code>.","Get the nth element from this <code>SetOf</code>.","Get the nth element from this <code>SetOfVec</code>.","Is the number of unused bits a value other than 0?","Is the number of unused bits a value other than 0?","","Insert an item into this <code>SetOf</code>.","Insert an item into this <code>SetOfVec</code>. Must be unique.","Insert an item into this <code>SetOf</code>.","Insert an item into this <code>SetOfVec</code>. Must be unique.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the inner bytes.","Take ownership of the octet string.","","","","Convert this <code>SetOfVec</code> into the inner <code>Vec</code>.","Is the inner byte slice empty?","Is the inner byte slice empty?","Is the inner byte slice empty?","Is the inner byte slice empty?","Is the inner byte slice empty?","Is the inner byte slice empty?","Is the inner byte slice empty?","Is the inner byte slice empty?","Is this <code>SequenceOf</code> empty?","Is this <code>SetOf</code> empty?","Is this <code>SetOfVec</code> empty?","Is this value an ASN.1 <code>NULL</code> value?","Is this value an ASN.1 <code>NULL</code> value?","Iterate over the elements in this <code>SequenceOf</code>.","Iterate over the elements of this <code>SetOf</code>.","Iterate over the elements of this <code>SetOfVec</code>.","Get the length of this <code>ObjectIdentifier</code> in arcs.","","Get the length of this <code>IntRef</code> in bytes.","Get the length of this <code>Int</code> in bytes.","Get the length of this <code>UintRef</code> in bytes.","Get the length of this <code>Uint</code> in bytes.","Get the length of the inner byte slice.","Get the length of the inner byte slice.","Number of elements in this <code>SequenceOf</code>.","Number of elements in this <code>SetOf</code>.","Number of elements in this <code>SetOfVec</code>.","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","Create a new <code>AnyRef</code> from the provided <code>Tag</code> and DER bytes.","Create a new <code>Any</code> from the provided <code>Tag</code> and DER bytes.","Create a new ASN.1 <code>BIT STRING</code> from a byte slice.","Create a new ASN.1 <code>BIT STRING</code> from a byte slice.","Create a new <code>IA5String</code>.","Create a new <code>IA5String</code>.","Create a new <code>IntRef</code> from a byte slice.","Create a new <code>Int</code> from a byte slice.","Create a new <code>UintRef</code> from a byte slice.","Create a new <code>Uint</code> from a byte slice.","Create a new ASN.1 <code>OCTET STRING</code> from a byte slice.","Create a new ASN.1 <code>OCTET STRING</code>.","Create a new ASN.1 <code>PrintableString</code>.","Create a new ASN.1 <code>PrintableString</code>.","Create a new <code>SequenceOf</code>.","Create a new <code>SetOf</code>.","Create a new <code>SetOfVec</code>.","Create a new ASN.1 <code>TeletexString</code>.","Create a new ASN.1 <code>TeletexString</code>.","Create a new ASN.1 <code>UTF8String</code>.","Create a new ASN.1 <code>VideotexString</code>.","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","","","","<code>Any</code> representation of the ASN.1 <code>NULL</code> type.","","","","","","","","","Get the parent OID of this one (if applicable).","","","","","","","","","","","","","","","","","","","","","","","","","","","","Push an additional arc onto this OID, returning the child …","Borrow the raw bytes of this <code>BIT STRING</code>.","Borrow the raw bytes of this <code>BIT STRING</code>.","","","","","","","","","Attempt to decode this value an ASN.1 <code>SEQUENCE</code>, creating a …","Attempt to decode this value an ASN.1 <code>SEQUENCE</code>, creating a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tag mode: <code>EXPLICIT</code> VS <code>IMPLICIT</code>.","Tag mode: <code>EXPLICIT</code> VS <code>IMPLICIT</code>.","Context-specific tag number sans the leading <code>0b10000000</code> …","Context-specific tag number sans the leading <code>0b10000000</code> …","Convert this <code>GeneralizedTime</code> into a <code>DateTime</code>.","Convert this <code>UtcTime</code> into a <code>DateTime</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to <code>SystemTime</code>.","Convert to <code>SystemTime</code>.","Get the duration of this timestamp since <code>UNIX_EPOCH</code>.","Get the duration of this timestamp since <code>UNIX_EPOCH</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the number of unused bits in this byte slice.","Get the number of unused bits in the octet serialization …","Get the raw value for this <code>AnyRef</code> type as a byte slice.","Allow access to value","Value of the field.","Value of the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The resulting type referencing back to Self","The resulting type after obtaining ownership.","A trait for borrowing data from an owned struct","A trait for cloning a referenced structure and getting …","Creates a new object referencing back to the self for …","Creates a new object taking ownership of the data"],"i":[0,0,17,9,9,9,9,0,0,17,9,0,15,0,0,0,0,0,0,0,0,0,9,2,0,0,22,15,15,0,9,0,20,18,9,22,15,0,15,9,15,0,15,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,15,9,9,1,20,9,9,15,15,2,15,15,15,9,17,9,0,15,9,0,0,0,9,9,15,15,0,0,27,0,0,15,0,15,15,15,0,9,15,17,9,15,9,15,0,9,9,0,1,20,2,1,1,1,1,1,7,10,12,13,14,10,0,9,15,13,14,37,18,16,15,19,1,20,21,17,22,7,9,28,10,12,13,14,37,18,16,15,19,1,20,21,17,22,7,9,28,10,12,18,10,9,18,16,15,19,1,20,21,17,22,7,9,10,12,18,16,15,19,1,20,21,17,22,7,9,10,12,18,1,20,17,22,7,9,31,31,7,28,18,32,31,31,18,19,1,20,21,9,10,10,12,26,18,1,22,62,14,18,19,1,9,12,35,13,14,18,19,1,20,9,28,10,10,12,35,35,35,35,29,14,18,35,13,14,18,19,1,20,9,10,18,16,15,19,1,20,17,22,7,9,10,18,16,15,19,1,20,17,22,7,9,10,37,31,31,21,21,28,31,31,21,28,18,18,16,16,15,15,19,1,1,20,21,17,17,22,22,7,7,9,9,28,10,12,1,13,14,37,18,18,18,18,18,16,16,16,16,16,16,16,16,15,19,1,1,1,20,20,20,21,17,22,7,9,28,10,12,12,32,32,18,22,18,18,29,29,18,16,31,37,21,13,14,37,18,16,15,19,1,20,21,17,22,7,9,28,10,12,10,10,9,9,9,20,21,28,31,31,20,9,9,1,16,10,12,19,9,18,18,18,16,19,1,20,21,7,28,9,9,9,37,31,31,0,18,1,20,17,22,7,9,31,37,21,31,37,21,31,31,31,37,16,21,7,31,31,10,12,37,31,31,31,31,31,37,21,31,31,0,31,31,21,1,1,18,31,31,28,2,1,30,14,18,10,19,31,31,12,35,35,18,16,15,19,1,20,21,17,22,7,9,10,12,18,16,15,1,17,22,7,9,18,10,13,14,37,18,18,18,16,15,19,1,1,1,1,20,21,17,22,7,7,9,9,28,10,10,10,12,12,12,13,14,37,18,16,15,19,1,20,21,17,22,7,9,28,10,12,13,14,37,18,16,15,19,1,20,21,17,22,7,9,28,10,12,9,18,7,59,14,18,21,9,29,14,18,34,28,34,34,10,12,18,0,106,107,108,109,106,107,110,109,111,112,113,114,115,116,114,115,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,64,66,67,41,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,63,64,64,64,66,67,68,69,70,71,72,73,74,64,68,75,75,76,76,73,74,77,77,78,78,63,79,79,80,80,81,81,82,82,63,66,67,66,67,64,83,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,64,83,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,66,94,64,95,85,86,66,67,68,87,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,68,64,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,64,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,64,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,61,63,79,80,41,81,82,68,64,95,85,86,66,67,68,87,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,85,86,87,87,73,64,95,85,86,66,67,68,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,60,61,63,64,85,86,66,67,87,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,75,76,77,78,79,80,81,82,64,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,86,64,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,64,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,64,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,64,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,63,64,64,85,86,66,67,68,68,87,89,40,75,75,76,76,69,70,71,72,90,73,74,77,77,78,78,60,91,61,92,63,79,79,80,80,41,81,81,82,82,64,64,83,95,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,66,66,66,67,68,87,89,40,40,40,40,75,75,76,76,69,69,70,70,70,71,71,72,72,90,73,73,73,74,77,77,78,78,60,91,61,92,63,79,79,80,80,41,41,81,81,82,82,64,64,66,67,40,41,63,64,68,40,41,68,40,41,68,60,61,63,66,67,64,61,63,61,63,64,83,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,68,74,83,91,92,63,66,67,69,70,71,72,73,74,60,61,63,85,86,60,61,63,64,83,69,70,71,72,73,74,60,61,63,64,85,86,66,67,75,76,69,70,71,72,73,74,77,78,60,61,63,79,80,81,82,64,83,91,92,86,86,67,76,70,72,74,78,80,64,64,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,61,63,79,80,41,81,82,64,66,67,85,66,75,69,71,73,77,79,85,86,64,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,87,89,87,89,40,41,64,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,64,68,75,76,77,78,79,80,81,82,40,41,40,41,64,64,64,83,95,85,85,86,66,66,66,66,66,67,67,67,68,87,87,89,40,40,40,40,40,75,75,75,76,76,76,76,69,69,69,70,70,70,71,71,71,72,72,72,90,90,90,73,73,73,74,74,74,77,77,77,78,78,78,78,60,91,61,61,92,63,63,63,79,79,79,80,80,80,80,41,41,41,41,41,81,81,81,82,82,82,64,83,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,64,83,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,91,61,92,63,79,80,41,81,82,66,67,85,86,87,89,64,85,86,66,67,87,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,64,95,85,86,66,67,68,87,89,40,75,76,69,70,71,72,90,73,74,77,78,60,61,63,79,80,41,81,82,117,118,0,0,117,118],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],1],[[2,[1]]]],[[1,3],[[2,[1]]]],[[1,4],[[2,[1]]]],[[1,5],[[2,[1]]]],[[1,1],[[2,[1]]]],[[1,6],[[2,[1]]]],[[7,8],9],[10,[[11,[5]]]],[12,[[11,[5]]]],[[[13,[-1]]],-1,[]],[[[14,[-1]]],-1,[]],[10,[[11,[5]]]],0,[[9,9],[[2,[9]]]],[[15,1],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,8],[9,8],[9,17],[18,18],[16,16],[15,15],[19,19],[1,1],[20,20],[21,21],[17,17],[22,22],[7,7],[9,9],[10,10],[12,12],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[18,18],24],[[1,1],24],[[20,20],24],[[17,17],24],[[22,22],24],[[7,7],24],[[9,9],24],[[-1,7,22],[[2,[[25,[-2]]]]],[],[26,27]],[[-1,7,22],[[2,[[25,[-2]]]]],[],[26,27]],[[7,8],9],[[28,7,22,-1],[[2,[23]]],[29,30]],[18,5],[-1,[[2,[-2]]],31,[]],[-1,[[2,[-2]]],[],32],[-1,[[2,[-2]]],[],32],[-1,[[33,[-2,16]]],31,[]],[-1,[[2,[19]]],31],[-1,[[2,[1]]],31],[-1,[[2,[20]]],31],[21,[[2,[-1]]],32],[-1,[[2,[9]]],31],[-1,[[2,[10]]],31],[10,[[2,[-1]]],32],[12,[[2,[-1]]],32],[[-1,19],[[2,[-2]]],31,[]],[[-1,19],[[2,[18]]],31],[[],1],[[],22],[[-1,-1],[[2,[24]]],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[19,19],[[2,[24]]]],[[1,1],[[2,[24]]]],[[9,9],[[2,[24]]]],[12,23],[[-1,-2],[[2,[23]]],[],34],[[[13,[-1]],-2],[[2,[23]]],35,34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[19,-1],[[2,[23]]],34],[[1,-1],[[2,[23]]],34],[[20,-1],[[2,[23]]],34],[[9,-1],[[2,[23]]],34],[[28,-1],[[2,[23]]],35],[[10,-1],[[2,[23]]],34],[-1,[[2,[10]]],35],[-1,[[2,[12]]],35],[[-1,[11,[5]]],[[2,[[11,[5]]]]],[]],[[-1,[11,[5]]],[[2,[[11,[5]]]]],[]],[[-1,[36,[5]]],[[2,[1]]],[]],[[-1,[36,[5]]],[[2,[1]]],[]],[[-1,-2],[[2,[23]]],[],34],[[[14,[-1]],-2],[[2,[23]]],29,34],[[18,-1],[[2,[23]]],34],[-1,[[2,[1]]],[]],[[[13,[-1]]],[[2,[1]]],35],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[19,[[2,[1]]]],[1,[[2,[1]]]],[20,[[2,[1]]]],[9,[[2,[1]]]],[10,[[2,[1]]]],[[18,18],8],[[16,16],8],[[15,15],8],[[19,19],8],[[1,1],8],[[20,20],8],[[17,17],8],[[22,22],8],[[7,7],8],[[9,9],8],[[10,10],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[37,[-1]],15],16,31],[[-1,15],16,[]],[[-1,15],16,[]],[[21,15],16],[[21,15],16],[[28,15],[[2,[-1]]],[]],[[-1,-2],[[2,[-2]]],[],[]],[[-1,-2],[[2,[-2]]],[],[]],[[21,-1],[[2,[-1]]],[]],[28,[[2,[[11,[5]]]]]],[[18,38],39],[[18,38],39],[[16,38],39],[[16,38],39],[[15,38],39],[[15,38],39],[[19,38],39],[[1,38],39],[[1,38],39],[[20,38],39],[[21,38],39],[[17,38],39],[[17,38],39],[[22,38],39],[[22,38],39],[[7,38],39],[[7,38],39],[[9,38],39],[[9,38],39],[[28,38],39],[[10,38],39],[[12,38],39],[1,[[2,[1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[40,18],[41,18],[41,18],[40,18],[42,16],[43,16],[-1,-1,[]],[15,16],[44,16],[45,16],[46,16],[47,16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,1],[5,1],[-1,-1,[]],[[[25,[1]]],20],[1,20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,12],[-1,-1,[]],[[[11,[5]]],[[2,[-1]]],[]],[[[11,[5]]],[[2,[-1]]],[]],[48,[[2,[18]]]],[48,[[2,[22]]]],[49,[[2,[18]]]],[50,[[2,[18]]]],[-1,[[2,[19]]],30],[-1,[[2,[19]]],30],[18,5],[1,16],[-1,1,[]],[[[37,[-1]]],1,31],[21,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,12],[10,[[36,[5]]]],[9,8],[9,8],[9,8],[20,8],[21,8],[28,8],[-1,8,[]],[-1,8,[]],[20,8],[9,8],[9,8],[1,8],[16,15],[10,1],[12,1],0,[9,16],[18,5],[18,5],[[3,5,5,5,5,5],[[2,[18]]]],[[15,1],16],[[9,-1],[[2,[19]]],[[51,[1]]]],[3,1],[-1,20,[[52,[1]]]],[[[11,[5]]],[[2,[21]]]],[5,7],[[[11,[5]]],28],[9,16],[9,7],[9,5],[[[37,[-1]]],1,31],[-1,1,[]],[-1,1,[]],0,[[18,18],[[25,[24]]]],[[1,1],[[25,[24]]]],[[20,20],[[25,[24]]]],[[17,17],[[25,[24]]]],[[22,22],[[25,[24]]]],[[7,7],[[25,[24]]]],[[9,9],[[25,[24]]]],[-1,[[25,[5]]],[]],[[[37,[-1]]],[[25,[5]]],31],[21,[[25,[5]]]],[-1,[[2,[19]]],[]],[[[37,[-1]]],[[2,[19]]],31],[21,[[2,[19]]]],[-1,[[2,[9]]],[]],[-1,[[2,[9]]],[]],[-1,1,[]],[[[37,[-1]]],1,31],[16,[[25,[1]]]],[21,1],[[7,8],9],[-1,[[2,[5]]],[]],[-1,[[2,[5]]],[]],[-1,[[2,[10]]],[[54,[53]]]],[-1,[[2,[12]]],[[54,[53]]]],[[[37,[-1]],[11,[5]]],[[2,[[11,[5]]]]],31],[[-1,[11,[5]]],[[2,[[11,[5]]]]],[]],[[-1,[11,[5]]],[[2,[[11,[5]]]]],[]],[[-1,1,-2],[[2,[-3]]],[],55,[]],[[-1,1,-2],[[2,[-3]]],[],55,[]],[[-1,1],[[2,[[11,[5]]]]],[]],[[[37,[-1]],1],[[2,[[11,[5]]]]],31],[[21,1],[[2,[[11,[5]]]]]],[[-1,1],[[2,[[36,[5]]]]],[]],[[-1,1],[[2,[[36,[5]]]]],[]],0,[-1,1,[]],[-1,1,[]],[21,1],[[1,1],1],[[1,1],1],[18,5],[[-1,-2],[[2,[-3]]],[],55,[]],[[-1,-2],[[2,[-3]]],[],55,[]],[[28,1,-1],[[2,[23]]],55],[[[2,[1]],1],[[2,[1]]]],[[1,1],[[2,[1]]]],[-1,9,[]],[[[14,[-1]]],9,30],[-1,9,[]],[-1,9,[]],0,[-1,[[2,[[11,[5]]]]],[]],[-1,[[2,[[11,[5]]]]],[]],[12,[[56,[[36,[5]]]]]],[-1,[[2,[[36,[5]]]]],[]],[-1,[[2,[[36,[5]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[18,49],[10,[[36,[5]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[49,[[2,[18]]]],[49,[[2,[18]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[4,[[2,[1]]]],[20,[[2,[1]]]],[6,[[2,[1]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[5,[[2,[7]]]],[-1,[[33,[-2]]],[],[]],[5,[[2,[9]]]],[-1,[[33,[-2]]],[],[]],[[[36,[5]]],[[2,[10]]]],[[[11,[5]]],[[2,[10]]]],[-1,[[33,[-2]]],[],[]],[[[36,[5]]],[[2,[12]]]],[-1,[[33,[-2]]],[],[]],[[[11,[5]]],[[2,[12]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[9,[25,[9]]],16],[18,50],[7,5],[[-1,-1],[[2,[24]]],[]],[[[14,[-1]],[14,[-1]]],[[2,[24]]],59],[[-1,-2],[[33,[24,16]]],[],[]],[[21,9],16],[9,16],[-1,[[2,[1]]],[]],[[[14,[-1]]],[[2,[1]]],29],[18,[[2,[1]]]],[[-1,[11,[5]]],[[2,[23]]],[]],[[28,[11,[5]]],[[2,[23]]]],[[-1,5],[[2,[23]]],[]],[[-1,5],[[2,[23]]],[]],[[10,-1],[[2,[23]]],[[54,[53]]]],[[12,-1],[[2,[23]]],[[54,[53]]]],[18,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[60,[-1]],-1],[[2,[23]]],[]],[[[61,[-1]],-1],[[2,[23]]],62],[[[63,[-1]],-1],[[2,[23]]],62],[[64,6],[[25,[4]]]],[64,65],[64,[[11,[5]]]],[66,[[25,[[11,[5]]]]]],[67,[[25,[[11,[5]]]]]],[68,[[11,[5]]]],[69,[[11,[5]]]],[70,[[11,[5]]]],[71,[[11,[5]]]],[72,[[11,[5]]]],[73,[[11,[5]]]],[74,[[11,[5]]]],[64,[[11,[5]]]],[68,[[11,[5]]]],[75,[[11,[5]]]],[75,48],[76,48],[76,[[11,[5]]]],[73,[[11,[5]]]],[74,[[11,[5]]]],[77,[[11,[5]]]],[77,48],[78,[[11,[5]]]],[78,48],[[[63,[-1]]],[[11,[-1]]],62],[79,48],[79,[[11,[5]]]],[80,[[11,[5]]]],[80,48],[81,[[11,[5]]]],[81,48],[82,48],[82,[[11,[5]]]],[[[63,[-1]]],[[11,[-1]]],62],[66,6],[67,6],[66,83],[67,83],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,1],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[68,[[0,[84]]]],[64,64],[85,85],[86,86],[66,66],[67,67],[68,68],[[[87,[-1]]],[[87,[-1]]],88],[[[89,[-1]]],[[89,[-1]]],88],[40,40],[75,75],[76,76],[69,69],[70,70],[71,71],[72,72],[90,90],[73,73],[74,74],[77,77],[78,78],[[[60,[-1]]],[[60,[-1]]],88],[[[91,[-1]]],[[91,[-1]]],88],[[[61,[-1]]],[[61,[-1]]],[62,88]],[[[92,[-1]]],[[92,[-1]]],88],[[[63,[-1]]],[[63,[-1]]],[62,88]],[79,79],[80,80],[41,41],[81,81],[82,82],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[64,64],24],[[85,85],24],[[86,86],24],[[66,66],24],[[67,67],24],[[68,68],24],[[[87,[-1]],[87,[-1]]],24,93],[[[89,[-1]],[89,[-1]]],24,93],[[40,40],24],[[75,75],24],[[76,76],24],[[69,69],24],[[70,70],24],[[71,71],24],[[72,72],24],[[90,90],24],[[73,73],24],[[74,74],24],[[77,77],24],[[78,78],24],[[[61,[-1]],[61,[-1]]],24,[62,93]],[[[63,[-1]],[63,[-1]]],24,[62,93]],[[79,79],24],[[80,80],24],[[41,41],24],[[81,81],24],[[82,82],24],[68,[[0,[84]]]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[2,[85]]],31],[-1,[[2,[86]]],31],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[2,[[87,[-2]]]]],31,32],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[-1,[[33,[-2,16]]],31,[]],[85,[[2,[-1]]],[94,26]],[86,[[2,[-1]]],[94,26]],[[-1,7],[[2,[[25,[[87,[-2]]]]]]],31,32],[[-1,7],[[2,[[25,[[87,[-2]]]]]]],31,[26,30]],[73,[[2,[-1]]],32],[[-1,19],[[2,[64]]],31],[[-1,19],[[2,[95]]],31],[[-1,19],[[2,[85]]],31],[[-1,19],[[2,[86]]],31],[[-1,19],[[2,[66]]],31],[[-1,19],[[2,[67]]],31],[[-1,19],[[2,[68]]],31],[[-1,19],[[2,[40]]],31],[[-1,19],[[2,[75]]],31],[[-1,19],[[2,[76]]],31],[[-1,19],[[2,[69]]],31],[[-1,19],[[2,[70]]],31],[[-1,19],[[2,[71]]],31],[[-1,19],[[2,[72]]],31],[[-1,19],[[2,[90]]],31],[[-1,19],[[2,[73]]],31],[[-1,19],[[2,[74]]],31],[[-1,19],[[2,[77]]],31],[[-1,19],[[2,[78]]],31],[[-1,19],[[2,[[60,[-2]]]]],31,32],[[-1,19],[[2,[[61,[-2]]]]],31,[32,62]],[[-1,19],[[2,[[63,[-2]]]]],31,[32,62]],[[-1,19],[[2,[79]]],31],[[-1,19],[[2,[80]]],31],[[-1,19],[[2,[41]]],31],[[-1,19],[[2,[81]]],31],[[-1,19],[[2,[82]]],31],[[],[[60,[-1]]],[]],[[],[[61,[-1]]],62],[[],[[63,[-1]]],62],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[75],[76],[77],[78],[79],[80],[81],[82],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[[-1,-2],[[33,[23,16]]],[],34],[-1,[[2,[86]]],[30,29]],[[64,-1],[[2,[23]]],34],[[95,-1],[[2,[23]]],34],[[85,-1],[[2,[23]]],34],[[86,-1],[[2,[23]]],34],[[66,-1],[[2,[23]]],34],[[67,-1],[[2,[23]]],34],[[68,-1],[[2,[23]]],34],[[[87,[-1]],-2],[[2,[23]]],[29,30],34],[[[89,[-1]],-2],[[2,[23]]],[29,30],34],[[40,-1],[[2,[23]]],34],[[75,-1],[[2,[23]]],34],[[76,-1],[[2,[23]]],34],[[69,-1],[[2,[23]]],34],[[70,-1],[[2,[23]]],34],[[71,-1],[[2,[23]]],34],[[72,-1],[[2,[23]]],34],[[90,-1],[[2,[23]]],34],[[73,-1],[[2,[23]]],34],[[74,-1],[[2,[23]]],34],[[77,-1],[[2,[23]]],34],[[78,-1],[[2,[23]]],34],[[[60,[-1]],-2],[[2,[23]]],35,34],[[[61,[-1]],-2],[[2,[23]]],[32,35,62],34],[[[63,[-1]],-2],[[2,[23]]],[32,35,62],34],[[79,-1],[[2,[23]]],34],[[80,-1],[[2,[23]]],34],[[41,-1],[[2,[23]]],34],[[81,-1],[[2,[23]]],34],[[82,-1],[[2,[23]]],34],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[-1,[[33,[1,16]]],[]],[[64,64],8],[[85,85],8],[[86,86],8],[[66,66],8],[[67,67],8],[[68,68],8],[[[87,[-1]],[87,[-1]]],8,96],[[[89,[-1]],[89,[-1]]],8,96],[[40,40],8],[[75,75],8],[[76,76],8],[[69,69],8],[[70,70],8],[[71,71],8],[[72,72],8],[[90,90],8],[[73,73],8],[[74,74],8],[[77,77],8],[[78,78],8],[[[60,[-1]],[60,[-1]]],8,96],[[[61,[-1]],[61,[-1]]],8,[62,96]],[[[63,[-1]],[63,[-1]]],8,[62,96]],[[79,79],8],[[80,80],8],[[41,41],8],[[81,81],8],[[82,82],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[63,[-1]],-2],[[2,[23]]],62,97],[[64,38],[[33,[23,98]]]],[[64,38],[[33,[23,98]]]],[[85,38],39],[[86,38],39],[[66,38],39],[[67,38],39],[[68,38],39],[[68,38],39],[[[87,[-1]],38],39,99],[[[89,[-1]],38],39,99],[[40,38],39],[[75,38],39],[[75,38],39],[[76,38],39],[[76,38],39],[[69,38],39],[[70,38],39],[[71,38],39],[[72,38],39],[[90,38],39],[[73,38],39],[[74,38],39],[[77,38],39],[[77,38],39],[[78,38],39],[[78,38],39],[[[60,[-1]],38],39,99],[[[91,[-1]],38],39,99],[[[61,[-1]],38],39,[62,99]],[[[92,[-1]],38],39,99],[[[63,[-1]],38],39,[62,99]],[[79,38],39],[[79,38],39],[[80,38],39],[[80,38],39],[[41,38],39],[[81,38],39],[[81,38],39],[[82,38],39],[[82,38],39],[-1,-1,[]],[64,64],[-1,-1,[]],[-1,-1,[]],[23,85],[75,85],[80,85],[90,85],[86,85],[76,85],[73,85],[-1,-1,[]],[77,85],[64,85],[78,85],[81,85],[82,85],[79,85],[-1,86,[[52,[85]]]],[64,86],[-1,-1,[]],[-1,-1,[]],[67,66],[66,66],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[18,40],[18,40],[40,40],[-1,-1,[]],[75,75],[-1,-1,[]],[-1,-1,[]],[75,76],[-1,-1,[]],[69,69],[72,70],[-1,-1,[]],[69,70],[71,71],[-1,-1,[]],[-1,-1,[]],[71,72],[-1,-1,[]],[-1,-1,[]],[74,73],[73,73],[-1,-1,[]],[-1,-1,[]],[77,77],[-1,-1,[]],[77,78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[79,79],[79,80],[-1,-1,[]],[-1,-1,[]],[41,41],[81,81],[-1,-1,[]],[82,82],[-1,-1,[]],[-1,[[33,[64,46]]],97],[[[11,[5]]],[[33,[64,46]]]],[[[11,[5]]],[[2,[66]]]],[[[11,[5]]],[[2,[67]]]],[18,40],[18,[[2,[41]]]],[-1,[[2,[[63,[-2]]]]],97,62],[48,[[33,[64,46]]]],[48,[[2,[68]]]],[49,[[2,[40]]]],[49,[[2,[41]]]],[-1,[[2,[68]]],[[52,[[100,[[11,[5]]]]]]]],[50,[[2,[40]]]],[50,[[2,[41]]]],[48,[[2,[68]]]],[[[60,[-1]],6],[[25,[-1]]],[]],[[[61,[-1]],6],[[25,[-1]]],62],[[[63,[-1]],6],[[25,[-1]]],62],[66,8],[67,8],[[64,-1],23,101],[[[61,[-1]],-1],[[2,[23]]],62],[[[63,[-1]],-1],[[2,[23]]],62],[[[61,[-1]],-1],[[2,[23]]],62],[[[63,[-1]],-1],[[2,[23]]],62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[68,[[100,[[11,[5]]]]]],[74,[[36,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]]],[[36,[-1]]],62],[66,8],[67,8],[69,8],[70,8],[71,8],[72,8],[73,8],[74,8],[[[60,[-1]]],8,[]],[[[61,[-1]]],8,62],[[[63,[-1]]],8,62],[85,8],[86,8],[[[60,[-1]]],[[91,[-1]]],[]],[[[61,[-1]]],[[92,[-1]]],62],[[[63,[-1]]],[[102,[-1]]],62],[64,6],[83,6],[69,1],[70,1],[71,1],[72,1],[73,1],[74,1],[[[60,[-1]]],6,[]],[[[61,[-1]]],6,62],[[[63,[-1]]],6,62],[48,[[33,[64,46]]]],[[9,[11,[5]]],[[2,[85]]]],[[9,-1],[[2,[86]]],[[52,[[100,[[11,[5]]]]]]]],[[5,[11,[5]]],[[2,[66]]]],[[5,-1],[[2,[67]]],[[52,[[36,[5]]]]]],[-1,[[2,[75]]],[[54,[[11,[5]]]],103]],[-1,[[2,[76]]],[[54,[[11,[5]]]],103]],[[[11,[5]]],[[2,[69]]]],[[[11,[5]]],[[2,[70]]]],[[[11,[5]]],[[2,[71]]]],[[[11,[5]]],[[2,[72]]]],[[[11,[5]]],[[2,[73]]]],[-1,[[2,[74]]],[[52,[[36,[5]]]]]],[-1,[[2,[77]]],[[54,[[11,[5]]]],103]],[-1,[[2,[78]]],[[54,[[11,[5]]]],103]],[[],[[60,[-1]]],[]],[[],[[61,[-1]]],62],[[],[[63,[-1]]],62],[-1,[[2,[79]]],[[54,[[11,[5]]]],103]],[-1,[[2,[80]]],[[54,[[11,[5]]]],103]],[-1,[[2,[81]]],[[54,[[11,[5]]]],103]],[-1,[[2,[82]]],[[54,[[11,[5]]]],103]],[48,64],[83,[[25,[8]]]],[[[91,[-1]]],[[25,[-1]]],[]],[[[92,[-1]]],[[25,[-1]]],[]],[[],86],[86],[67],[76],[70],[72],[74],[78],[80],[64,[[25,[64]]]],[[64,64],[[25,[24]]]],[[85,85],[[25,[24]]]],[[86,86],[[25,[24]]]],[[66,66],[[25,[24]]]],[[67,67],[[25,[24]]]],[[68,68],[[25,[24]]]],[[[87,[-1]],[87,[-1]]],[[25,[24]]],104],[[[89,[-1]],[89,[-1]]],[[25,[24]]],104],[[40,40],[[25,[24]]]],[[75,75],[[25,[24]]]],[[76,76],[[25,[24]]]],[[69,69],[[25,[24]]]],[[70,70],[[25,[24]]]],[[71,71],[[25,[24]]]],[[72,72],[[25,[24]]]],[[90,90],[[25,[24]]]],[[73,73],[[25,[24]]]],[[74,74],[[25,[24]]]],[[77,77],[[25,[24]]]],[[78,78],[[25,[24]]]],[[[61,[-1]],[61,[-1]]],[[25,[24]]],[62,104]],[[[63,[-1]],[63,[-1]]],[[25,[24]]],[62,104]],[[79,79],[[25,[24]]]],[[80,80],[[25,[24]]]],[[41,41],[[25,[24]]]],[[81,81],[[25,[24]]]],[[82,82],[[25,[24]]]],[[64,4],[[33,[64,46]]]],[66,[[11,[5]]]],[67,[[11,[5]]]],[85],[66],[75],[69],[71],[73],[77],[79],[[85,-1],[[2,[-2]]],55,[]],[[86,-1],[[2,[-2]]],55,[]],[-1,9,[]],[-1,9,[]],[85,9],[86,9],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[[87,[-1]]],9,30],[[[89,[-1]]],9,30],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,0,0,0,[40,18],[41,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[40,49],[41,49],[40,50],[41,50],[85,[[2,[64]]]],[-1,[[33,[-2]]],[],[]],[[[11,[5]]],[[33,[64,46]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[[[11,[5]]],[[2,[85]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[66]]]],[[[11,[5]]],[[2,[66]]]],[85,[[2,[66]]]],[[[11,[5]]],[[2,[66]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[85,[[2,[67]]]],[86,[[2,[67]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[85,[[2,[[87,[-1]]]]],32],[-1,[[33,[-2]]],[],[]],[85,[[2,[40]]]],[49,[[2,[40]]]],[86,[[2,[40]]]],[-1,[[33,[-2]]],[],[]],[49,[[2,[40]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[75]]]],[85,[[2,[75]]]],[57,[[2,[76]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[76]]]],[85,[[2,[76]]]],[86,[[2,[69]]]],[-1,[[33,[-2]]],[],[]],[85,[[2,[69]]]],[85,[[2,[70]]]],[86,[[2,[70]]]],[-1,[[33,[-2]]],[],[]],[85,[[2,[71]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[71]]]],[86,[[2,[72]]]],[85,[[2,[72]]]],[-1,[[33,[-2]]],[],[]],[85,[[2,[90]]]],[86,[[2,[90]]]],[-1,[[33,[-2]]],[],[]],[85,[[2,[73]]]],[86,[[2,[73]]]],[-1,[[33,[-2]]],[],[]],[85,[[2,[74]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[74]]]],[86,[[2,[77]]]],[85,[[2,[77]]]],[-1,[[33,[-2]]],[],[]],[57,[[2,[78]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[78]]]],[85,[[2,[78]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[[[105,[-1]]],[[2,[[61,[-1]]]]],62],[-1,[[33,[-2]]],[],[]],[[[105,[-1]]],[[2,[[63,[-1]]]]],62],[-1,[[33,[-2]]],[],[]],[[[36,[-1]]],[[2,[[63,[-1]]]]],62],[85,[[2,[79]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[79]]]],[57,[[2,[80]]]],[85,[[2,[80]]]],[86,[[2,[80]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[85,[[2,[41]]]],[86,[[2,[41]]]],[18,[[2,[41]]]],[18,[[2,[41]]]],[85,[[2,[81]]]],[86,[[2,[81]]]],[-1,[[33,[-2]]],[],[]],[86,[[2,[82]]]],[-1,[[33,[-2]]],[],[]],[85,[[2,[82]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[66,5],[67,5],[85,[[11,[5]]]],[86,[[11,[5]]]],0,0,[[-1,-2],[[33,[24,16]]],[],[]],[[85,85],[[2,[24]]]],[[86,86],[[2,[24]]]],[[66,66],[[2,[24]]]],[[67,67],[[2,[24]]]],[[[87,[-1]],[87,[-1]]],[[2,[24]]],[29,59,30]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[[60,[-1]],[60,[-1]]],[[2,[24]]],62],[[[61,[-1]],[61,[-1]]],[[2,[24]]],62],[[[63,[-1]],[63,[-1]]],[[2,[24]]],62],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[[-1,-2],[[33,[24,16]]],[],[]],[64,[[2,[1]]]],[95,[[2,[1]]]],[85,[[2,[1]]]],[86,[[2,[1]]]],[66,[[2,[1]]]],[67,[[2,[1]]]],[68,[[2,[1]]]],[[[87,[-1]]],[[2,[1]]],[29,30]],[[[89,[-1]]],[[2,[1]]],[29,30]],[40,[[2,[1]]]],[75,[[2,[1]]]],[76,[[2,[1]]]],[69,[[2,[1]]]],[70,[[2,[1]]]],[71,[[2,[1]]]],[72,[[2,[1]]]],[90,[[2,[1]]]],[73,[[2,[1]]]],[74,[[2,[1]]]],[77,[[2,[1]]]],[78,[[2,[1]]]],[[[60,[-1]]],[[2,[1]]],35],[[[61,[-1]]],[[2,[1]]],[32,35,62]],[[[63,[-1]]],[[2,[1]]],[32,35,62]],[79,[[2,[1]]]],[80,[[2,[1]]]],[41,[[2,[1]]]],[81,[[2,[1]]]],[82,[[2,[1]]]],0,0,0,0,[-1,[],[]],[-1,[],[]]],"c":[639,640],"p":[[3,"Length",0],[6,"Result",0],[15,"u16"],[15,"u32"],[15,"u8"],[15,"usize"],[3,"TagNumber",0],[15,"bool"],[4,"Tag",0],[3,"Document",0],[15,"slice"],[3,"SecretDocument",0],[3,"EncodeRef",0],[3,"EncodeValueRef",0],[4,"ErrorKind",0],[3,"Error",0],[4,"Class",0],[3,"DateTime",0],[3,"Header",0],[3,"IndefiniteLength",0],[3,"SliceReader",0],[4,"TagMode",0],[15,"tuple"],[4,"Ordering",1675],[4,"Option",1676],[8,"DecodeValue",0],[8,"FixedTag",0],[3,"SliceWriter",0],[8,"EncodeValue",0],[8,"Tagged",0],[8,"Reader",0],[8,"Decode",0],[4,"Result",1677],[8,"Writer",0],[8,"Encode",0],[3,"Vec",1678],[3,"NestedReader",0],[3,"Formatter",1679],[6,"Result",1679],[3,"GeneralizedTime",598],[3,"UtcTime",598],[3,"Utf8Error",1680],[3,"TryFromIntError",1681],[4,"Infallible",1682],[3,"Error",1683],[4,"Error",1684],[3,"FromUtf8Error",1685],[15,"str"],[3,"SystemTime",1686],[3,"Duration",1687],[8,"TryInto",1682],[8,"Into",1682],[3,"Path",1688],[8,"AsRef",1682],[8,"FnOnce",1689],[3,"Zeroizing",1690],[3,"String",1685],[3,"TypeId",1691],[8,"ValueOrd",0],[3,"SequenceOf",598],[3,"SetOf",598],[8,"DerOrd",0],[3,"SetOfVec",598],[3,"ObjectIdentifier",598],[3,"Arcs",1692],[3,"BitStringRef",598],[3,"BitString",598],[3,"BmpString",598],[3,"IntRef",598],[3,"Int",598],[3,"UintRef",598],[3,"Uint",598],[3,"OctetStringRef",598],[3,"OctetString",598],[3,"Ia5StringRef",598],[3,"Ia5String",598],[3,"PrintableStringRef",598],[3,"PrintableString",598],[3,"TeletexStringRef",598],[3,"TeletexString",598],[3,"Utf8StringRef",598],[3,"VideotexStringRef",598],[3,"BitStringIter",598],[8,"Iterator",1693],[3,"AnyRef",598],[3,"Any",598],[3,"ContextSpecific",598],[8,"Clone",1694],[3,"ContextSpecificRef",598],[3,"Null",598],[3,"SequenceOfIter",598],[3,"SetOfIter",598],[8,"Ord",1675],[8,"Choice",598],[3,"SequenceRef",598],[8,"PartialEq",1675],[8,"IntoIterator",1695],[3,"Error",1679],[8,"Debug",1679],[3,"Box",1696],[8,"Hasher",1697],[3,"Iter",1698],[8,"Sized",1699],[8,"PartialOrd",1675],[15,"array"],[13,"TagUnexpected",581],[13,"Incomplete",581],[13,"TagUnknown",581],[13,"TrailingData",581],[13,"OidUnknown",581],[13,"Length",581],[13,"Noncanonical",581],[13,"Value",581],[13,"Application",592],[13,"ContextSpecific",592],[13,"Private",592],[8,"OwnedToRef",1669],[8,"RefToOwned",1669]]},\
"derive_more":{"doc":"<code>derive_more</code>","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"digest":{"doc":"This crate provides traits which describe functionality of …","t":"DIIIIIIIIDDDGISIDIGQIQIIIIICLLLLLLLLLLKLKKLLLLLLLLLLCAACLLLLKLLLLLLLLLLKKLLLLLLLLKKKKKKKKLLKKKLKLLLLLLLLLLLLLLLLLCOKLLLLLLKKKKLKLKKKKLKLKKKKLLLLLLLLLLLLLLLLLLLLLLLLCKKKKKKKKKKDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIGQIGQIQIDDIINQIQINDSEIIIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKL","n":["CtOutput","Digest","DynDigest","ExtendableOutput","ExtendableOutputReset","FixedOutput","FixedOutputReset","HashMarker","InnerInit","InvalidBufferSize","InvalidLength","InvalidOutputSize","Key","KeyInit","MAX_OUTPUT_SIZE","Mac","MacError","MacMarker","Output","OutputSize","OutputSizeUser","Reader","Reset","Update","VariableOutput","VariableOutputReset","XofReader","block_buffer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","box_clone","chain","chain_update","chain_update","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","const_oid","consts","core_api","crypto_common","ct_eq","default","default","default","digest","digest_variable","digest_xof","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finalize","finalize","finalize","finalize","finalize_boxed","finalize_boxed","finalize_boxed_reset","finalize_boxed_reset","finalize_fixed","finalize_fixed_reset","finalize_into","finalize_into","finalize_into","finalize_into_reset","finalize_into_reset","finalize_into_reset","finalize_reset","finalize_reset","finalize_reset","finalize_reset","finalize_variable","finalize_variable_reset","finalize_xof","finalize_xof_into","finalize_xof_reset","finalize_xof_reset_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_key","generic_array","impl_oid_carrier","inner_init","into","into","into","into","into","into_bytes","new","new","new","new","new","new_from_slice","new_from_slice","new_with_prefix","output_size","output_size","output_size","output_size","read","read_boxed","reset","reset","reset","reset","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","typenum","update","update","update","update","verify","verify_reset","verify_slice","verify_slice_reset","verify_truncated_left","verify_truncated_right","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AlgorithmName","Block","BlockSize","BlockSizeUser","Buffer","BufferKind","BufferKindUser","Core","CoreProxy","CoreWrapper","CtVariableCoreWrapper","ExtendableOutputCore","FixedOutputCore","Left","OutputSize","OutputSizeUser","ReaderCore","Reset","Right","RtVariableCoreWrapper","TRUNC_SIDE","TruncSide","UpdateCore","VariableOutputCore","XofReaderCore","XofReaderCoreWrapper","block_size","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","box_clone","chain_update","chain_update","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decompose","default","default","default","digest","finalize","finalize","finalize","finalize_fixed_core","finalize_fixed_core","finalize_into","finalize_into","finalize_into","finalize_into_reset","finalize_into_reset","finalize_into_reset","finalize_reset","finalize_reset","finalize_reset","finalize_variable","finalize_variable_core","finalize_variable_reset","finalize_xof","finalize_xof_core","finalize_xof_reset","flush","flush","fmt","fmt","fmt","fmt","from","from","from","from","from","from_core","into","into","into","into","into","new","new","new","new","new","new_from_slice","new_from_slice","new_with_prefix","oid","oid","output_size","output_size","output_size","output_size","read","read","read_block","reset","reset","reset","reset","reset","reset","reset","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update_blocks","update_blocks","verify","verify_reset","verify_slice","verify_slice_reset","verify_truncated_left","verify_truncated_right","write","write","write_alg_name","write_alg_name"],"q":[[0,"digest"],[175,"digest::consts"],[3565,"digest::core_api"],[3718,"alloc::boxed"],[3719,"core::marker"],[3720,"core::convert"],[3721,"core::clone"],[3722,"subtle"],[3723,"core::result"],[3724,"core::fmt"],[3725,"core::fmt"],[3726,"rand_core"],[3727,"rand_core"],[3728,"core::any"],[3729,"typenum::marker_traits"],[3730,"typenum::marker_traits"],[3731,"typenum::marker_traits"],[3732,"typenum::int"],[3733,"typenum::marker_traits"],[3734,"typenum::array"],[3735,"alloc::alloc"],[3736,"generic_array"],[3737,"core::default"],[3738,"std::io::error"],[3739,"const_oid"]],"d":["Fixed size output value which provides a safe <code>Eq</code> …","Convenience wrapper trait covering functionality of …","Modification of the <code>Digest</code> trait suitable for trait …","Trait for hash functions with extendable-output (XOF).","Trait for hash functions with extendable-output (XOF) able …","Trait for hash functions with fixed-size output.","Trait for hash functions with fixed-size output able to …","Marker trait for cryptographic hash functions.","Types which can be initialized from another type (usually …","Buffer length is not equal to hash output size.","The error type returned when key and/or IV used in the …","The error type used in variable hash traits.","Key used by <code>KeySizeUser</code> implementors.","Types which can be initialized from key.","Maximum size of output hash.","Convenience wrapper trait covering functionality of …","Error type for when the <code>Output</code> of a <code>Mac</code> is not equal to …","Marker trait for Message Authentication algorithms.","Output array of <code>OutputSizeUser</code> implementors.","Size of the output in bytes.","Types which return data with the given size.","Reader","Resettable types.","Types which consume data with byte granularity.","Trait for hash functions with variable-size output.","Trait for hash functions with variable-size output able to …","Trait for reader types which are used to extract …","","","","","","","","","","","","Clone hasher state into a boxed trait object","Digest input data in a chained manner.","Process input data in a chained manner.","Process input data in a chained manner.","","","","","","","","","","","","Type aliases for many constants.","Low-level traits operating on blocks and wrappers around …","","","","","","Compute hash of <code>data</code>.","Compute hash of <code>data</code> and write it to <code>output</code>.","Compute hash of <code>data</code> and write it into <code>output</code>.","","","","","","","","","Retrieve result and consume hasher instance.","Obtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …","Retrieve result and consume boxed hasher instance","Retrieve result and consume boxed hasher instance","Retrieve result into a boxed slice of the specified size …","Retrieve result into a boxed slice and consume hasher.","Retrieve result into a boxed slice of the specified size …","Retrieve result into a boxed slice and reset the hasher …","Retrieve result and consume the hasher instance.","Retrieve result and reset the hasher state.","Write result into provided array and consume the hasher …","Write result into provided array and consume the hasher …","Consume value and write result into provided array.","Write result into provided array and reset the hasher …","Write result into provided array and reset the hasher …","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","Obtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …","Retrieve result and reset hasher instance","Retrieve result and reset hasher instance","Write result into the output buffer.","Write result into the output buffer and reset the hasher …","Retrieve XOF reader and consume hasher instance.","Finalize XOF and write result into <code>out</code>.","Retrieve XOF reader and reset hasher instance state.","Finalize XOF, write result into <code>out</code>, and reset the hasher …","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate random key using the provided <code>CryptoRng</code>.","","Implement dummy type with hidden docs which is used to “…","Initialize value from the <code>inner</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the inner <code>Output</code> array this type wraps.","Create new value from fixed size key.","Create new hasher instance.","Create new value from fixed size key.","Create new hasher instance with the given output size.","Create a new <code>CtOutput</code> value.","Create new value from variable size key.","Create new value from variable size key.","Create new hasher instance which has processed the …","Get output size of the hasher","Get output size of the hasher","Get output size of the hasher instance provided to the <code>new</code> …","Return output size in bytes.","Read output into the <code>buffer</code>. Can be called an unlimited …","Read output into a boxed slice of the specified size.","Reset state to its initial value.","Reset hasher instance to its initial state.","Reset hasher instance to its initial state.","Reset MAC instance to its initial state.","","","","","","","","","","","","","","","","","","","","","","","","","","Process data, updating the internal state.","Digest input data.","Update state using the provided data.","Update state using the provided data.","Check if tag/code value is correct for the processed input.","Check if tag/code value is correct for the processed input …","Check truncated tag correctness using all bytes of …","Check truncated tag correctness using all bytes of …","Check truncated tag correctness using left side bytes …","Check truncated tag correctness using right side bytes …","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait which stores algorithm name constant, used in <code>Debug</code> …","Block on which <code>BlockSizeUser</code> implementors operate.","Size of the block in bytes.","Types which process data in blocks.","Buffer type used by type which implements <code>BufferKindUser</code>.","Block buffer kind over which type operates.","Types which use <code>BlockBuffer</code> functionality.","Type wrapped by <code>CoreWrapper</code>.","A proxy trait to a core type implemented by <code>CoreWrapper</code>","Wrapper around <code>BufferKindUser</code>.","Wrapper around <code>VariableOutputCore</code> which selects output size","Core trait for hash functions with extendable (XOF) output …","Core trait for hash functions with fixed output size.","Truncate left side, i.e. <code>&amp;out[..n]</code>.","Size of the output in bytes.","Types which return data with the given size.","XOF reader core state.","Resettable types.","Truncate right side, i.e. <code>&amp;out[m..]</code>.","Wrapper around <code>VariableOutputCore</code> which selects output size","Side which should be used in a truncated result.","Type which used for defining truncation side in the …","Types which consume data in blocks.","Core trait for hash functions with variable output size.","Core reader trait for extendable-output function (XOF) …","Wrapper around <code>XofReaderCore</code> implementations.","Return block size in bytes.","","","","","","","","","","","","","","","","","","","","","","","","Decompose wrapper into inner parts.","","","","","","","","Finalize state using remaining data stored in the provided …","","","","","","","","","","","","Finalize hasher and write full hashing result into the <code>out</code> …","","","Retrieve XOF reader using remaining data stored in the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create new wrapper from <code>core</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize hasher state for given output size.","","","","","","","","","","Return output size in bytes.","","","","","","Read next XOF block.","Reset state to its initial value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update state using the provided data blocks.","","","","","","","","","","Write algorithm name into <code>f</code>.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,0,10,0,72,0,0,0,0,0,0,7,8,11,12,13,7,8,11,12,13,1,73,74,75,7,8,11,12,13,7,8,11,12,13,0,0,0,0,8,11,12,13,74,71,72,7,8,11,13,7,8,11,13,74,75,1,1,72,71,76,77,78,20,74,1,78,74,1,20,74,75,1,1,71,77,72,72,76,76,7,7,11,11,12,12,13,13,7,8,8,8,11,12,13,28,0,0,79,7,8,11,12,13,8,28,74,75,71,8,75,28,74,74,1,71,10,80,80,29,74,1,75,7,8,11,12,13,7,11,12,13,7,8,11,12,13,7,8,11,12,13,7,8,11,12,13,0,74,1,75,73,75,75,75,75,75,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,36,36,34,34,36,34,34,36,36,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,32,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,34,36,32,34,34,36,36,32,32,32,34,34,36,36,32,32,32,32,32,32,32,34,34,36,36,32,34,36,34,36,32,32,32,32,32,32,32,32,32,34,36,32,32,32,32,32,32,32,32,32,34,36,32,34,36,34,36,32,34,36,32,34,36,32,0,0,81,0,0,59,0,82,0,0,0,0,0,62,10,0,66,0,62,0,53,0,0,0,0,0,81,52,56,58,60,62,52,56,58,60,62,58,58,58,52,56,58,60,62,52,56,58,60,62,58,52,58,60,58,58,58,58,65,52,58,58,58,58,58,58,58,58,58,56,53,56,58,66,58,56,58,56,58,60,62,52,56,58,60,62,58,52,56,58,60,62,53,56,58,58,58,58,58,58,52,58,10,56,58,58,60,60,61,29,52,56,58,58,58,58,52,56,58,60,62,52,56,58,60,62,52,56,58,60,62,52,56,58,60,62,56,58,58,58,58,57,52,58,58,58,58,58,58,56,58,68,52],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[1]]],[]],[[-1,-2],-1,3,[[6,[[5,[4]]]]]],[[-1,-2],-1,[],[[6,[[5,[4]]]]]],[[-1,-2],-1,[],[[6,[[5,[4]]]]]],[7,7],[[[8,[-1]]],[[8,[-1]]],[9,10]],[11,11],[12,12],[13,13],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],0,0,0,0,[[[8,[-1]],[8,[-1]]],15,10],[[],11],[[],12],[[],13],[-1,[[16,[-2]]],[[6,[[5,[4]]]]],[]],[[-1,[5,[4]]],[[17,[14,12]]],[[6,[[5,[4]]]]]],[[-1,[5,[4]]],14,[[6,[[5,[4]]]]]],[[7,7],18],[[[8,[-1]],[8,[-1]]],18,10],[[11,11],18],[[13,13],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[-1,[[16,[-1]]],[]],[-1,[[8,[-1]]],[]],[[[2,[-1]]],[[2,[[5,[4]]]]],[]],[[[2,[-1]]],[[2,[[5,[4]]]]],[]],[[-1,19],[[2,[[5,[4]]]]],[]],[-1,[[2,[[5,[4]]]]],[]],[[-1,19],[[2,[[5,[4]]]]],[]],[-1,[[2,[[5,[4]]]]],[]],[-1,[[16,[-1]]],[]],[-1,[[16,[-1]]],[]],[[-1,[16,[-1]]],14,[]],[[-1,[5,[4]]],[[17,[14,13]]],[]],[[-1,[16,[-1]]],14,[]],[[-1,[16,[-1]]],14,20],[[-1,[5,[4]]],[[17,[14,13]]],[]],[[-1,[16,[-1]]],14,[]],[-1,[[16,[-1]]],20],[-1,[[8,[-1]]],20],[-1,[[2,[[5,[4]]]]],[]],[-1,[[2,[[5,[4]]]]],[]],[[-1,[5,[4]]],[[17,[14,13]]],[]],[[-1,[5,[4]]],[[17,[14,13]]],[]],[-1,[],[]],[[-1,[5,[4]]],14,[]],[-1,[],[]],[[-1,[5,[4]]],14,[]],[[7,21],[[17,[14,22]]]],[[7,21],[[17,[14,22]]]],[[11,21],23],[[11,21],23],[[12,21],23],[[12,21],23],[[13,21],23],[[13,21],23],[-1,-1,[]],[[[16,[-1]]],[[8,[-1]]],10],[[[16,[-1]]],[[8,[-1]]],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[24,[4]]],[25,26]],0,0,[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],[[16,[-1]]],10],[[[24,[4]]],-1,[]],[[],-1,[]],[[[27,[-1]]],-1,28],[19,[[17,[-1,12]]],[]],[[[16,[-1]]],[[8,[-1]]],10],[[[5,[4]]],[[17,[-1,7]]],28],[[[5,[4]]],[[17,[-1,7]]],[]],[-1,-2,[[6,[[5,[4]]]]],[]],[[],19],[-1,19,[]],[-1,19,[]],[[],19],[[-1,[5,[4]]],14,[]],[[-1,19],[[2,[[5,[4]]]]],[]],[-1,14,[]],[-1,14,29],[-1,14,[]],[-1,14,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,[[-1,-2],14,[],[[6,[[5,[4]]]]]],[[-1,[5,[4]]],14,[]],[[-1,[5,[4]]],14,[]],[[-1,[5,[4]]],14,[]],[[-1,[16,[-1]]],[[17,[14,11]]],[]],[[-1,[16,[-1]]],[[17,[14,11]]],20],[[-1,[5,[4]]],[[17,[14,11]]],[]],[[-1,[5,[4]]],[[17,[14,11]]],20],[[-1,[5,[4]]],[[17,[14,11]]],[]],[[-1,[5,[4]]],[[17,[14,11]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[32,-1],[],33],[[34,-1],[],35],[[36,34]],[[36,36]],[[34,36]],[[34,34]],[[36,-1],[],35],[[34,36]],[[34,34]],[[36,36]],[[36,34]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[36,36],[32,32],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[34,34],37],[[36,36],37],[[32,32],37],[[],34],[[],36],[[],32],[[32,-1],[],[33,38]],[[34,34],18],[[36,36],18],[[32,32],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[34,21],[[17,[14,22]]]],[[36,21],[[17,[14,22]]]],[[32,21],[[17,[14,22]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[34,-1],14,39],[[36,-1],14,39],[[32,-1],14,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,36],36],[[34,34],34],[[36,36],36],[[36,34],36],[[32,32]],[[32,[40,[-1]]],[],[41,38]],[[32,[42,[-1]]],[],[41,38]],[[34,36],34],[[34,34],34],[[36,34],34],[[36,36],36],[[32,[40,[-1]]],[],[41,38]],[[32,32]],[[32,[42,[-1]]],[],[41,38]],[[32,43]],[[32,[44,[-1,-2]]],[],[],[]],[[32,-1],[],33],[32],[[],34],[[],34],[[],36],[[],36],[[],32],[34],[36],[[34,34],[[45,[37]]]],[[36,36],[[45,[37]]]],[[32,32],[[45,[37]]]],[[-1,-2],[],[],[]],[[32,32]],[[32,[42,[-1]]],[],[41,38]],[[32,[40,[-1]]],[],[41,38]],[[32,-1],[],[33,38]],[[32,32]],[[32,[42,[-1]]],[],[41,38]],[[32,[40,[-1]]],[],[41,38]],[[],18],[[],18],[[],46],[[],47],[[],48],[[],49],[[],47],[[],46],[[],49],[[],48],[[],50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],4],[[],4],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[1,51]]],[]],[[-1,-2],-3,[],[[6,[[5,[4]]]]],[]],[[-1,-2],-3,[],[[6,[[5,[4]]]]],[]],[[[52,[-1,-2,-3]]],[[52,[-1,-2,-3]]],[53,9],[[54,[4]],55,9],9],[[[56,[-1]]],[[56,[-1]]],[53,57,9]],[[[58,[-1]]],[[58,[-1]]],[59,9]],[[[60,[-1]]],[[60,[-1]]],[61,9]],[62,62],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[[58,[-1]]],[[14,[-1,[63,[-1]]]]],59],[[],[[52,[-1,-2,-3]]],53,[[54,[4]],55],[]],[[],[[58,[-1]]],[59,64]],[[],[[60,[-1]]],[61,64]],[-1,[[24,[4]]],[[6,[[5,[4]]]]]],[-1,[[8,[-2]]],[],[]],[-1,[[24,[4]]],[]],[[[2,[-1,51]]],[[2,[[5,[4]],51]]],[]],[[-1,[63,[-1]],[16,[-1]]],14,[]],[[[52,[-1,-2,-3]],[63,[[52,[-1,-2,-3]]]],[24,[4]]],14,53,[[54,[4]],55],[]],[[-1,[5,[4]]],[[17,[14,13]]],[]],[[-1,[24,[4]]],14,[]],[[[58,[-1]],[16,[[58,[-1]]]]],14,65],[[-1,[24,[4]]],14,[]],[[-1,[5,[4]]],[[17,[14,13]]],[]],[[[58,[-1]],[16,[[58,[-1]]]]],14,[65,29]],[-1,[[2,[[5,[4]],51]]],[]],[-1,[[24,[4]]],[]],[-1,[[8,[-2]]],[],20],[[[56,[-1]],[5,[4]]],[[17,[14,13]]],[53,57]],[[-1,[63,[-1]],[16,[-1]]],14,[]],[[[56,[-1]],[5,[4]]],[[17,[14,13]]],[53,57,29]],[[[58,[-1]]],[],66],[[-1,[63,[-1]]],[],[]],[[[58,[-1]]],[],[66,29]],[[[56,[-1]]],[[67,[14]]],[53,57]],[[[58,[-1]]],[[67,[14]]],[59,57]],[[[56,[-1]],21],[[17,[14,22]]],[53,57,68]],[[[58,[-1]],21],[[17,[14,22]]],[59,68]],[[[60,[-1]],21],[[17,[14,22]]],[61,68]],[[62,21],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[58,[-1]]],59],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,[[17,[-1,12]]],[]],[19,[[17,[[56,[-1]],12]]],[53,57]],[[[24,[4]]],-1,28],[[[27,[[58,[-1]]]]],[[58,[-1]]],[59,28]],[[],-1,[]],[[[5,[4]]],[[17,[-1,7]]],28],[[[5,[4]]],[[17,[[58,[-1]],7]]],[59,28]],[-1,-2,[[6,[[5,[4]]]]],64],[-1,69,[]],[-1,69,[]],[[],19],[[[56,[-1]]],19,[53,57]],[-1,19,[]],[[],19],[[[60,[-1]],[5,[4]]],14,61],[[[60,[-1]],[5,[4]]],[[67,[19]]],61],[-1,[[70,[-1]]],[]],[-1,14,[]],[[[52,[-1,-2,-3]]],14,53,[[54,[4]],55],[]],[[[56,[-1]]],14,[53,57,29]],[-1,14,[]],[[[58,[-1]]],14,[59,29]],[-1,14,[]],[-1,14,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[[56,[-1]],[5,[4]]],14,[53,57]],[[[58,[-1]],[5,[4]]],14,[59,57]],[[-1,[5,[4]]],14,[]],[[-1,[5,[4]]],14,[]],[[-1,-2],14,[],[[6,[[5,[4]]]]]],[[-1,[5,[[70,[-1]]]]],14,[]],[[[52,[-1,-2,-3]],[5,[[70,[[52,[-1,-2,-3]]]]]]],14,53,[[54,[4]],55],[]],[[-1,[24,[4]]],[[17,[14,11]]],[]],[[-1,[24,[4]]],[[17,[14,11]]],[]],[[-1,[5,[4]]],[[17,[14,11]]],[]],[[-1,[5,[4]]],[[17,[14,11]]],[]],[[-1,[5,[4]]],[[17,[14,11]]],[]],[[-1,[5,[4]]],[[17,[14,11]]],[]],[[[56,[-1]],[5,[4]]],[[67,[19]]],[53,57]],[[[58,[-1]],[5,[4]]],[[67,[19]]],[59,57]],[21,[[17,[14,22]]]],[21,23]],"c":[],"p":[[8,"DynDigest",0],[3,"Box",3718],[8,"Sized",3719],[15,"u8"],[15,"slice"],[8,"AsRef",3720],[3,"InvalidLength",0],[3,"CtOutput",0],[8,"Clone",3721],[8,"OutputSizeUser",0],[3,"MacError",0],[3,"InvalidOutputSize",0],[3,"InvalidBufferSize",0],[15,"tuple"],[3,"Choice",3722],[6,"Output",0],[4,"Result",3723],[15,"bool"],[15,"usize"],[8,"FixedOutputReset",0],[3,"Formatter",3724],[3,"Error",3724],[6,"Result",3724],[3,"GenericArray",3725],[8,"CryptoRng",3726],[8,"RngCore",3726],[6,"Key",0],[8,"KeyInit",0],[8,"Reset",0],[3,"String",3727],[3,"TypeId",3728],[3,"Z0",175],[8,"Integer",3729],[3,"B0",175],[8,"Bit",3729],[3,"B1",175],[4,"Ordering",3730],[8,"NonZero",3729],[8,"Hasher",3731],[3,"PInt",3732],[8,"Unsigned",3729],[3,"NInt",3732],[3,"ATerm",3733],[3,"TArr",3733],[4,"Option",3734],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[3,"Global",3735],[3,"CtVariableCoreWrapper",3565],[8,"VariableOutputCore",3565],[8,"ArrayLength",3725],[8,"IsLessOrEqual",3736],[3,"RtVariableCoreWrapper",3565],[8,"UpdateCore",3565],[3,"CoreWrapper",3565],[8,"BufferKindUser",3565],[3,"XofReaderCoreWrapper",3565],[8,"XofReaderCore",3565],[4,"TruncSide",3565],[6,"Buffer",3565],[8,"Default",3737],[8,"FixedOutputCore",3565],[8,"ExtendableOutputCore",3565],[6,"Result",3738],[8,"AlgorithmName",3565],[3,"ObjectIdentifier",3739],[6,"Block",3565],[8,"VariableOutput",0],[8,"ExtendableOutput",0],[8,"Update",0],[8,"Digest",0],[8,"Mac",0],[8,"ExtendableOutputReset",0],[8,"VariableOutputReset",0],[8,"FixedOutput",0],[8,"InnerInit",0],[8,"XofReader",0],[8,"BlockSizeUser",3565],[8,"CoreProxy",3565]]},\
"ecdsa":{"doc":"RustCrypto: ECDSA","t":"RRRRGNDSNIDQGDGIGDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGDLLLLLLLLLLLLLLLLLLLLLLLLLQIIIFFLLLFL","n":["ECDSA_SHA224_OID","ECDSA_SHA256_OID","ECDSA_SHA384_OID","ECDSA_SHA512_OID","EncodedPoint","Err","Error","MAX","Ok","PrimeCurve","RecoveryId","Repr","Result","Signature","SignatureBytes","SignatureEncoding","SignatureSize","SignatureWithOid","SigningKey","VerifyingKey","algorithm_identifier","algorithm_identifier","algorithm_identifier","algorithm_identifier","as_affine","as_nonzero_scalar","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","ct_eq","default","der","drop","elliptic_curve","encoded_len","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine","from_byte","from_bytes","from_bytes","from_bytes_with_digest","from_der","from_encoded_point","from_pkcs8_der","from_public_key_der","from_scalars","from_sec1_bytes","from_slice","from_slice","from_slice_with_digest","from_source","from_str","hazmat","into","into","into","into","into","into","is_x_reduced","is_y_odd","new","new","new","new_with_digest","normalize_s","oid","oid","partial_cmp","partial_cmp","r","random","recover_from_digest","recover_from_msg","recover_from_prehash","s","sign_digest_recoverable","sign_prehash","sign_prehash","sign_prehash","sign_prehash_recoverable","sign_prehash_with_rng","sign_prehash_with_rng","sign_recoverable","signature","signature","signature_algorithm_identifier","signature_algorithm_identifier","source","split_bytes","split_scalars","to_byte","to_bytes","to_bytes","to_bytes","to_bytes","to_der","to_encoded_point","to_owned","to_owned","to_owned","to_owned","to_owned","to_sec1_bytes","to_string","to_string","to_vec","to_vec","trial_recovery_from_digest","trial_recovery_from_msg","trial_recovery_from_prehash","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_sign","try_sign","try_sign","try_sign","try_sign","try_sign_digest","try_sign_digest","try_sign_digest","try_sign_digest_with_rng","try_sign_digest_with_rng","try_sign_with_rng","try_sign_with_rng","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_digest","verify_digest","verify_prehash","verify_prehash","verifying_key","verifying_key","MaxOverhead","MaxSize","Signature","as_bytes","as_ref","borrow","borrow_mut","can_decode","clone","clone_into","decode","encode","encoded_len","fmt","from","from","from_bytes","into","len","tag","to_bitstring","to_bytes","to_owned","to_vec","try_from","try_from","try_into","type_id","Digest","DigestPrimitive","SignPrimitive","VerifyPrimitive","bits2field","sign_prehashed","try_sign_prehashed","try_sign_prehashed_rfc6979","verify_digest","verify_prehashed","verify_prehashed"],"q":[[0,"ecdsa"],[217,"ecdsa::der"],[245,"ecdsa::hazmat"],[256,"der::asn1::any::allocating"],[257,"spki::algorithm"],[258,"spki::error"],[259,"core::result"],[260,"spki::algorithm"],[261,"elliptic_curve::arithmetic"],[262,"elliptic_curve::scalar::nonzero"],[263,"core::clone"],[264,"core::cmp"],[265,"subtle"],[266,"core::cmp"],[267,"core::fmt"],[268,"alloc::alloc"],[269,"alloc::boxed"],[270,"elliptic_curve::point"],[271,"elliptic_curve::public_key"],[272,"core::option"],[273,"elliptic_curve::field"],[274,"pkcs8::error"],[275,"core::convert"],[276,"const_oid"],[277,"rand_core"],[278,"digest::digest"],[279,"alloc::string"],[280,"alloc::vec"],[281,"pkcs8::private_key_info"],[282,"pkcs8::error"],[283,"digest"],[284,"core::any"],[285,"der::tag"],[286,"der::error"],[287,"der::reader"],[288,"der::writer"],[289,"der::length"],[290,"der::asn1::bit_string::allocating"],[291,"elliptic_curve::scalar"],[292,"core::convert"],[293,"elliptic_curve::scalar::primitive"],[294,"core::convert"]],"d":["OID for ECDSA with SHA-224 digests.","OID for ECDSA with SHA-256 digests.","OID for ECDSA with SHA-384 digests.","OID for ECDSA with SHA-512 digests.","Encoded elliptic curve point sized appropriately for a …","Contains the error value","Signature errors.","Maximum supported value for the recovery ID (inclusive).","Contains the success value","Marker trait for elliptic curves with prime order.","Recovery IDs, a.k.a. “recid”.","Byte representation of a signature.","Result type.","ECDSA signature (fixed-size). Generic over elliptic curve …","Fixed-size byte array containing an ECDSA signature","Support for decoding/encoding signatures as bytes.","Size of a fixed sized signature for the given elliptic …","An extended <code>Signature</code> type which is parameterized by an …","ECDSA secret key used for signing. Generic over prime …","ECDSA public key used for verifying signatures. Generic …","","","","","Borrow the inner <code>AffinePoint</code> for this public key.","Borrow the secret <code>NonZeroScalar</code> value for this key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Support for ASN.1 DER-encoded ECDSA signatures as …","","","Get the length of this signature when encoded.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Initialize <code>VerifyingKey</code> from an affine point.","Convert a <code>u8</code> into a <code>RecoveryId</code>.","Initialize signing key from a raw scalar serialized as a …","Parse a signature from fixed-width bytes, i.e. 2 * the …","Parse a signature from fixed-with bytes.","Parse a signature from ASN.1 DER.","Initialize <code>VerifyingKey</code> from an <code>EncodedPoint</code>.","","","Create a <code>Signature</code> from the serialized <code>r</code> and <code>s</code> scalar …","Initialize <code>VerifyingKey</code> from a SEC1-encoded public key.","Initialize signing key from a raw scalar serialized as a …","Parse a signature from a byte slice.","Parse a signature from a byte slice.","Create a new error with an associated source.","","Low-level ECDSA primitives.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Did the affine x-coordinate of 𝑘×𝑮 overflow the …","Is the affine y-coordinate of 𝑘×𝑮 odd?","Create a new error with no associated source","Create a new <code>RecoveryId</code> from the following 1-bit arguments:","Create a new signature with an explicitly provided OID.","Create a new signature, determining the OID from the given …","Normalize signature into “low S” form as described in …","","Get the ECDSA OID for this signature.","","","Get the <code>r</code> component of this signature","Generate a cryptographically random <code>SigningKey</code>.","Recover a <code>VerifyingKey</code> from the given message <code>Digest</code>, …","Recover a <code>VerifyingKey</code> from the given message, signature, …","Recover a <code>VerifyingKey</code> from the given <code>prehash</code> of a …","Get the <code>s</code> component of this signature","Sign the given message digest, returning a signature and …","","","","Sign the given message prehash, returning a signature and …","","","Sign the given message, hashing it with the curve’s …","","Get the fixed-width ECDSA signature.","","","","Split the signature into its <code>r</code> and <code>s</code> components, …","Split the signature into its <code>r</code> and <code>s</code> scalars.","Convert this <code>RecoveryId</code> into a <code>u8</code>.","Encode signature as its byte representation.","Serialize this <code>SigningKey</code> as bytes","Serialize this signature as bytes.","Serialize this signature as bytes.","Serialize this signature as ASN.1 DER.","Serialize this <code>VerifyingKey</code> as a SEC1 <code>EncodedPoint</code>, …","","","","","","Convert this <code>VerifyingKey</code> into the …","","","Encode signature as a byte vector.","Convert this signature into a byte vector.","Given a public key, message digest, and signature, use …","Given a public key, message, and signature, use trial …","Given a public key, message digest, and signature, use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>VerifyingKey</code> which corresponds to this <code>SigningKey</code>.","Maximum overhead of an ASN.1 DER-encoded ECDSA signature …","Maximum size of an ASN.1 DER encoded signature for the …","ASN.1 DER-encoded signature as specified in RFC5912 …","Borrow this signature as a byte slice","","","","","","","","","","","","Returns the argument unchanged.","Parse signature from DER-encoded bytes.","Calls <code>U::from(self)</code>.","Get the length of the signature in bytes","","","Serialize this signature as a boxed byte slice","","","","","","","Preferred digest to use when computing ECDSA signatures …","Bind a preferred <code>Digest</code> algorithm to an elliptic curve …","Try to sign the given prehashed message using ECDSA.","Verify the given prehashed message using ECDSA.","Partial implementation of the <code>bits2int</code> function as defined …","Sign a prehashed message digest using the provided secret …","Try to sign the prehashed message.","Try to sign the given message digest deterministically …","Verify message digest against the provided signature.","Verify the prehashed message against the provided ECDSA …","Verify the prehashed message against the provided ECDSA …"],"i":[0,0,0,0,0,36,0,14,36,0,0,69,0,0,0,0,0,0,0,0,12,9,16,5,9,12,12,9,20,14,12,9,16,5,20,14,12,9,16,5,14,12,9,16,5,14,12,9,16,5,14,9,12,20,0,12,0,69,14,12,9,16,5,14,12,9,16,5,20,20,14,12,9,16,16,16,16,20,20,31,31,33,33,14,12,12,12,12,9,9,9,9,9,16,16,5,9,14,12,16,5,16,9,12,9,16,9,12,16,5,20,16,0,20,14,12,9,16,5,14,14,20,14,5,5,16,16,5,14,9,16,12,9,9,9,16,12,12,12,12,12,12,12,12,0,5,12,9,20,16,16,14,69,12,16,5,16,9,14,12,9,16,5,9,20,16,69,16,14,14,14,20,14,14,12,12,12,9,9,9,16,16,16,5,5,20,14,12,9,16,5,12,12,12,12,12,12,12,12,12,12,12,12,20,14,12,9,16,5,9,9,9,9,9,9,12,12,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,47,0,0,0,0,0,70,70,71,0,71],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[4,[[2,[1]],3]]],[]],[-1,[[4,[[2,[1]],3]]],[]],[-1,[[4,[[2,[1]],3]]],[]],[[[5,[-1]]],[[7,[6]]],8],[[[9,[-1]]],[[10,[-1]]],[8,11]],[[[12,[-1]]],[[13,[-1]]],[8,11]],[[[12,[-1]]],[[9,[-1]]],[8,11]],[[[9,[-1]]],[[10,[-1]]],[8,11]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[[12,[-1]]],[[12,[-1]]],[8,11,15]],[[[9,[-1]]],[[9,[-1]]],[8,11,15]],[[[16,[-1]]],[[16,[-1]]],[15,8]],[[[5,[-1]]],[[5,[-1]]],[15,8]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[14,14],18],[[[9,[-1]],[9,[-1]]],18,[8,11]],[[[12,[-1]],[12,[-1]]],19,[8,11]],[[],20],0,[[[12,[-1]]],17,[8,11]],0,[-1,21,[]],[[14,14],22],[[[12,[-1]],[12,[-1]]],22,[8,11]],[[[9,[-1]],[9,[-1]]],22,[8,11]],[[[16,[-1]],[16,[-1]]],22,[23,8]],[[[5,[-1]],[5,[-1]]],22,[23,8]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[20,24],[[4,[17,25]]]],[[20,24],[[4,[17,25]]]],[[14,24],26],[[[12,[-1]],24],26,[8,11]],[[[9,[-1]],24],26,[8,11,27]],[[[16,[-1]],24],26,8],[[[16,[-1]],24],26,8],[[[16,[-1]],24],26,8],[[[16,[-1]],24],26,8],[-1,-1,[]],[[[30,[28,29]]],20],[[[9,[-1]]],[[31,[-1]]],[8,11,32]],[[[9,[-1]]],[[31,[-1]]],[8,11,32]],[[[5,[-1]]],[[33,[-1]]],8],[[[16,[-1]]],[[33,[-1]]],8],[-1,-1,[]],[[[34,[-1]]],[[12,[-1]]],[8,11]],[-1,-1,[]],[[[34,[-1]]],[[12,[-1]]],[8,11]],[[[13,[-1]]],[[12,[-1]]],[8,11]],[[[35,[-1]]],[[9,[-1]]],[8,11]],[[[12,[-1]]],[[9,[-1]]],[8,11]],[-1,-1,[]],[[[12,[-1]]],[[9,[-1]]],[8,11]],[[[35,[-1]]],[[9,[-1]]],[8,11]],[-1,-1,[]],[[[5,[-1]]],[[16,[-1]]],8],[-1,-1,[]],[[[10,[-1]]],[[36,[[9,[-1]]]]],[8,11]],[37,[[38,[14]]]],[[[39,[-1]]],[[36,[[12,[-1]]]]],[8,11]],[[[33,[-1]]],[[36,[[16,[-1]]]]],8],[[[33,[-1]]],[[36,[[5,[-1]]]]],8],[[[40,[37]]],[[36,[[16,[-1]]]]],8],[[[31,[-1]]],[[36,[[9,[-1]]]]],[8,11]],[[[40,[37]]],[[4,[-1,41]]],[]],[[[40,[37]]],[[4,[-1,3]]],[]],[[-2,-3],[[36,[[16,[-1]]]]],8,[[42,[[39,[-1]]]]],[[42,[[39,[-1]]]]]],[[[40,[37]]],[[36,[[9,[-1]]]]],[8,11]],[[[40,[37]]],[[36,[[12,[-1]]]]],[8,11]],[[[40,[37]]],[[36,[[16,[-1]]]]],8],[[[40,[37]]],[[36,[[5,[-1]]]]],8],[-1,20,[[42,[[30,[28,29]]]]]],[43,[[36,[[16,[-1]]]]],[8,11]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,22],[14,22],[[],20],[[22,22],14],[[[16,[-1]],44],[[36,[[5,[-1]]]]],8],[[[16,[-1]]],[[36,[[5,[-1]]]]],8],[[[16,[-1]]],[[38,[[16,[-1]]]]],[8,11]],[-1,44,[]],[[[5,[-1]]],44,8],[[14,14],[[38,[18]]]],[[[9,[-1]],[9,[-1]]],[[38,[18]]],[8,11]],[[[16,[-1]]],[[13,[-1]]],[8,11]],[-1,[[12,[-2]]],45,[8,11]],[[-1,[16,[-2]],14],[[36,[[9,[-2]]]]],46,[8,11]],[[[40,[37]],[16,[-1]],14],[[36,[[9,[-1]]]]],[47,8,11]],[[[40,[37]],[16,[-1]],14],[[36,[[9,[-1]]]]],[8,11]],[[[16,[-1]]],[[13,[-1]]],[8,11]],[[[12,[-1]],-2],[[36,[[17,[[16,[-1]],14]]]]],[8,11,47],46],[[[12,[-1]],[40,[37]]],[[36,[[16,[-1]]]]],[8,11,47]],[[[12,[-1]],[40,[37]]],[[36,[[17,[[16,[-1]],14]]]]],[8,11,47]],[[[12,[-1]],[40,[37]]],[[36,[[48,[-1]]]]],[8,11,47]],[[[12,[-1]],[40,[37]]],[[36,[[17,[[16,[-1]],14]]]]],[8,11,47]],[[[12,[-1]],-2,[40,[37]]],[[36,[[16,[-1]]]]],[8,11,47],45],[[[12,[-1]],-2,[40,[37]]],[[36,[[48,[-1]]]]],[8,11,47],45],[[[12,[-1]],[40,[37]]],[[36,[[17,[[16,[-1]],14]]]]],[8,11,47]],0,[[[5,[-1]]],[[16,[-1]]],8],[-1,[[4,[[2,[1]],3]]],[]],[-1,[[4,[[2,[1]],3]]],[]],[20,[[38,[28]]]],[[[16,[-1]]],[[17,[[39,[-1]],[39,[-1]]]]],8],[[[16,[-1]]],[[17,[[13,[-1]],[13,[-1]]]]],[8,11]],[14,37],[-1,[],[]],[[[12,[-1]]],[[39,[-1]]],[8,11]],[[[16,[-1]]],[[33,[-1]]],8],[[[5,[-1]]],[[33,[-1]]],8],[[[16,[-1]]],[[48,[-1]]],8],[[[9,[-1]],22],[[31,[-1]]],[8,11]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[30,[[40,[37]]]]],[32,8,11]],[-1,49,[]],[-1,49,[]],[-1,[[50,[37,29]]],[]],[[[16,[-1]]],[[50,[37]]],8],[[[9,[-1]],-2,[16,[-1]]],[[36,[14]]],[8,11],46],[[[9,[-1]],[40,[37]],[16,[-1]]],[[36,[14]]],[47,8,11]],[[[9,[-1]],[40,[37]],[16,[-1]]],[[36,[14]]],[8,11]],[-1,[[4,[-2]]],[],[]],[37,[[36,[14]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[51,[[52,[[12,[-1]]]]],[8,53,11]],[[[40,[37]]],[[36,[[12,[-1]]]]],[8,11]],[[[40,[37]]],[[36,[[9,[-1]]]]],[8,11]],[54,[[7,[[9,[-1]]]]],[8,53,11,32]],[-1,[[4,[-2]]],[],[]],[[[40,[37]]],[[36,[[16,[-1]]]]],8],[-1,[[4,[-2]]],[],[]],[[[48,[-1]]],[[36,[[16,[-1]]]]],8],[[[40,[37]]],[[36,[[5,[-1]]]]],47],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[[[12,[-1]],[40,[37]]],[[36,[[17,[[16,[-1]],14]]]]],[8,11,47]],[[-1,[40,[37]]],[[4,[-2,20]]],[],[]],[[[12,[-1]],[40,[37]]],[[36,[[5,[-1]]]]],[8,11,47]],[[[12,[-1]],[40,[37]]],[[36,[[16,[-1]]]]],[8,11,47]],[[[12,[-1]],[40,[37]]],[[36,[[48,[-1]]]]],[8,11,47]],[[[12,[-1]],-2],[[36,[[16,[-1]]]]],[8,11,47],[46,55]],[[[12,[-1]],-2],[[36,[[17,[[16,[-1]],14]]]]],[8,11,47],46],[[[12,[-1]],-2],[[36,[[5,[-1]]]]],[8,11,47],[53,46,55]],[[[12,[-1]],-2,-3],[[36,[[48,[-1]]]]],[8,11,47],45,[46,55]],[[[12,[-1]],-2,-3],[[36,[[16,[-1]]]]],[8,11,47],45,[46,55]],[[[12,[-1]],-2,[40,[37]]],[[36,[[48,[-1]]]]],[8,11,47],45],[[[12,[-1]],-2,[40,[37]]],[[36,[[16,[-1]]]]],[8,11,47],45],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[[[9,[-1]],[40,[37]],[16,[-1]]],[[36,[17]]],[8,11,47]],[[[9,[-1]],[40,[37]],[48,[-1]]],[[36,[17]]],[8,11,47]],[[[9,[-1]],-2,[48,[-1]]],[[36,[17]]],[8,11],[46,55]],[[[9,[-1]],-2,[16,[-1]]],[[36,[17]]],[8,11],[46,55]],[[[9,[-1]],[40,[37]],[16,[-1]]],[[36,[17]]],[8,11]],[[[9,[-1]],[40,[37]],[48,[-1]]],[[36,[17]]],[8,11,47]],[-1,[],[]],[[[12,[-1]]],[[9,[-1]]],[8,11]],0,0,0,[[[48,[-1]]],[[40,[37]]],8],[[[48,[-1]]],[[40,[37]]],8],[-1,-2,[],[]],[-1,-2,[],[]],[57,22],[[[48,[-1]]],[[48,[-1]]],8],[[-1,-2],17,[],[]],[-1,[[58,[[48,[-2]]]]],59,8],[[[48,[-1]],-2],[[58,[17]]],8,60],[[[48,[-1]]],[[58,[61]]],8],[[[48,[-1]],24],26,8],[[[16,[-1]]],[[48,[-1]]],8],[-1,-1,[]],[[[40,[37]]],[[36,[[48,[-1]]]]],8],[-1,-2,[],[]],[[[48,[-1]]],21,8],[-1,57,[]],[[[48,[-1]]],[[58,[62]]],8],[[[48,[-1]]],[[30,[[40,[37]]]]],8],[-1,-2,[],[]],[[[48,[-1]]],[[50,[37]]],8],[[[40,[37]]],[[36,[[48,[-1]]]]],8],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,56,[]],0,0,0,0,[[[40,[37]]],[[36,[[39,[-1]]]]],8],[[[63,[-1]],-2,[39,[-1]]],[[36,[[17,[[16,[-1]],14]]]]],[8,11],[[64,[[63,[-1]]]],65]],[[-1,-2,[39,[-3]]],[[36,[[17,[[16,[-3]],[38,[14]]]]]]],[],[[64,[-1]],65],[]],[[-2,[39,[-1]],[40,[37]]],[[36,[[17,[[16,[-1]],[38,[14]]]]]]],[],[[67,[[66,[-1]]]],65]],[[-1,-2,[16,[-3]]],[[36,[17]]],[],55,[]],[[[68,[-1]],[39,[-1]],[16,[-1]]],[[36,[17]]],[8,11]],[[-1,[39,[-2]],[16,[-2]]],[[36,[17]]],[],[]]],"c":[],"p":[[3,"Any",256],[3,"AlgorithmIdentifier",257],[4,"Error",258],[4,"Result",259],[3,"SignatureWithOid",0],[6,"AlgorithmIdentifierOwned",257],[6,"Result",258],[8,"PrimeCurve",0],[3,"VerifyingKey",0],[6,"AffinePoint",260],[8,"CurveArithmetic",261],[3,"SigningKey",0],[3,"NonZeroScalar",262],[3,"RecoveryId",0],[8,"Clone",263],[3,"Signature",0],[15,"tuple"],[4,"Ordering",264],[3,"Choice",265],[3,"Error",0],[15,"usize"],[15,"bool"],[8,"PartialEq",264],[3,"Formatter",266],[3,"Error",266],[6,"Result",266],[8,"Debug",266],[8,"Error",267],[3,"Global",268],[3,"Box",269],[6,"EncodedPoint",0],[8,"PointCompression",260],[6,"SignatureBytes",0],[3,"SecretKey",270],[3,"PublicKey",271],[6,"Result",0],[15,"u8"],[4,"Option",272],[6,"FieldBytes",273],[15,"slice"],[4,"Error",274],[8,"Into",275],[15,"str"],[3,"ObjectIdentifier",276],[8,"CryptoRngCore",277],[8,"Digest",278],[8,"DigestPrimitive",245],[3,"Signature",217],[3,"String",279],[3,"Vec",280],[3,"PrivateKeyInfo",281],[6,"Result",274],[8,"AssociatedOid",276],[6,"SubjectPublicKeyInfoRef",282],[8,"FixedOutput",283],[3,"TypeId",284],[4,"Tag",285],[6,"Result",286],[8,"Reader",287],[8,"Writer",288],[3,"Length",289],[3,"BitString",290],[6,"Scalar",291],[8,"AsRef",275],[8,"Invert",292],[3,"ScalarPrimitive",293],[8,"From",275],[6,"ProjectivePoint",260],[8,"SignatureEncoding",0],[8,"SignPrimitive",245],[8,"VerifyPrimitive",245]]},\
"elliptic_curve":{"doc":"RustCrypto: Elliptic Curve Traits","t":"RCQSIIQSNDIGIGQISSSCSSNIIICQDSSQGSCQQCDSQSLLLLLCLLLLLLLLLLLLLALLLLKKLALLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKCCKLLLKLKKLLLALCALLLCKKLAALLKKCLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLACDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLFLLLLLLLLLLLLLLLLLLLIIQIIIIIQQQQQQIIIIIIKKKLLKLKKKKKKKKKIGSSCIIIQDIIGLLLLLLLKKLKLLLLLLLLLLLLLLLLLLLKKDIISDSGDQSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNGGQEGINNIEIINNGGQQILLLLLLLLLLLLLLLLLLLLKLLLLLLLLKKLLLLLLLLLLMMMMMGGFFF","n":["ALGORITHM_OID","AffinePoint","AffinePoint","CAPACITY","Curve","CurveArithmetic","CurveGroup","DELTA","Err","Error","Field","FieldBytes","FieldBytesEncoding","FieldBytesSize","FieldBytesSize","Group","MODULUS","MULTIPLICATIVE_GENERATOR","NUM_BITS","NonZeroScalar","ONE","ORDER","Ok","PrimeCurve","PrimeCurveArithmetic","PrimeField","ProjectivePoint","ProjectivePoint","PublicKey","ROOT_OF_UNITY","ROOT_OF_UNITY_INV","Repr","Result","S","Scalar","Scalar","Scalar","ScalarPrimitive","SecretKey","TWO_INV","Uint","ZERO","algorithm_identifier","algorithm_identifier","as_affine","as_ref","as_scalar_primitive","bigint","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","consts","ct_eq","cube","decode_field_bytes","decode_field_bytes","double","double","drop","ecdh","encode_field_bytes","encode_field_bytes","eq","eq","eq","equivalent","equivalent","equivalent","ff","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine","from_bytes","from_encoded_point","from_pkcs8_der","from_public_key_der","from_repr","from_repr_vartime","from_sec1_bytes","from_sec1_der","from_secret_scalar","from_slice","from_str_vartime","from_u128","generator","generic_array","group","identity","into","into","into","invert","is_even","is_identity","is_odd","is_zero","is_zero_vartime","new","ops","partial_cmp","pkcs8","point","pow","pow_vartime","public_key","rand_core","random","random","random","scalar","sec1","sqrt","sqrt_alt","sqrt_ratio","square","subtle","to_bytes","to_encoded_point","to_nonidentity","to_nonzero_scalar","to_owned","to_owned","to_owned","to_pkcs8_der","to_projective","to_public_key_der","to_repr","to_sec1_bytes","to_sec1_der","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","weierstrass","zeroize","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","EphemeralSecret","SharedSecret","borrow","borrow","borrow_mut","borrow_mut","diffie_hellman","diffie_hellman","drop","drop","extract","from","from","from","into","into","public_key","random","raw_secret_bytes","try_from","try_from","try_into","try_into","type_id","type_id","zeroize","Add","AddAssign","Bytes","Invert","LinearCombination","Mul","MulByGenerator","Neg","Output","Output","Output","Output","Output","Output","Reduce","ReduceNonZero","Shr","ShrAssign","Sub","SubAssign","add","add_assign","invert","invert_vartime","lincomb","mul","mul_by_generator","neg","reduce","reduce_bytes","reduce_nonzero","reduce_nonzero_bytes","shr","shr_assign","sub","sub_assign","AffineCoordinates","AffinePoint","COMPACT_POINTS","COMPRESS_POINTS","CurveArithmetic","DecompactPoint","DecompressPoint","Double","FieldRepr","NonIdentity","PointCompaction","PointCompression","ProjectivePoint","as_ref","borrow","borrow_mut","clone","clone_into","conditional_select","ct_eq","decompact","decompress","deref","double","from","from","from","from_bytes","from_bytes_unchecked","from_repr","into","mul","mul","new","random","to_affine","to_bytes","to_curve","to_owned","to_point","try_from","try_into","type_id","x","y_is_odd","BlindedScalar","FromUintUnchecked","IsHigh","MODULUS","NonZeroScalar","ONE","Scalar","ScalarPrimitive","Uint","ZERO","add","add","add_assign","add_assign","as_limbs","as_ref","as_ref","as_ref","as_uint","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","conditional_negate","conditional_select","conditional_select","ct_eq","ct_eq","ct_gt","ct_lt","default","deref","drop","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_repr","from_slice","from_str","from_str","from_uint","from_uint_unchecked","from_uint_unchecked","into","into","into","invert","invert","invert_vartime","is_even","is_high","is_high","is_high","is_odd","is_zero","mul","mul","neg","neg","neg","new","new","new","partial_cmp","random","random","reduce","reduce_bytes","reduce_nonzero","reduce_nonzero_bytes","shr_assign","sub","sub","sub_assign","sub_assign","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","to_uint","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zeroize","zeroize","Compact","Compact","Compressed","CompressedEvenY","CompressedOddY","CompressedPoint","CompressedPointSize","CompressedPointSize","Coordinates","EncodedPoint","FromEncodedPoint","Identity","Identity","ModulusSize","Tag","ToCompactEncodedPoint","ToEncodedPoint","Uncompressed","Uncompressed","UncompressedPoint","UncompressedPointSize","UncompressedPointSize","UntaggedPointSize","ValidatePublicKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from_encoded_point","from_u8","into","into","is_compact","is_compressed","is_identity","message_len","tag","to_compact_encoded_point","to_encoded_point","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","validate_public_key","x","x","x","y","y_is_odd","AffinePoint","ProjectivePoint","add","add_mixed","double"],"q":[[0,"elliptic_curve"],[174,"elliptic_curve::consts"],[3564,"elliptic_curve::ecdh"],[3590,"elliptic_curve::ops"],[3626,"elliptic_curve::point"],[3671,"elliptic_curve::scalar"],[3789,"elliptic_curve::sec1"],[3854,"elliptic_curve::sec1::Coordinates"],[3859,"elliptic_curve::weierstrass"],[3864,"der::asn1::any::allocating"],[3865,"spki::algorithm"],[3866,"spki::error"],[3867,"core::result"],[3868,"core::clone"],[3869,"core::cmp"],[3870,"subtle"],[3871,"core::cmp"],[3872,"core::fmt"],[3873,"sec1::error"],[3874,"base16ct::error"],[3875,"core::marker"],[3876,"core::convert"],[3877,"subtle"],[3878,"core::convert"],[3879,"rand_core"],[3880,"pkcs8::error"],[3881,"der::document"],[3882,"alloc::vec"],[3883,"zeroize"],[3884,"der::error"],[3885,"alloc::string"],[3886,"sec1::private_key"],[3887,"pkcs8::private_key_info"],[3888,"spki::spki"],[3889,"core::any"],[3890,"typenum::marker_traits"],[3891,"typenum::marker_traits"],[3892,"typenum::int"],[3893,"typenum::marker_traits"],[3894,"typenum::array"],[3895,"hmac::simple"],[3896,"hkdf"],[3897,"crypto_common"],[3898,"digest::digest"],[3899,"subtle"],[3900,"group"],[3901,"rand_core"],[3902,"crypto_bigint::limb"],[3903,"crypto_bigint::traits"],[3904,"crypto_bigint::array"]],"d":["Algorithm <code>ObjectIdentifier</code> for elliptic curve public key …","","Elliptic curve point in affine coordinates.","How many bits of information can be reliably stored in the …","Elliptic curve.","Elliptic curve with an arithmetic implementation.","Prime order elliptic curve group.","Generator of the <code>t-order</code> multiplicative subgroup.","Contains the error value","Elliptic curve errors.","This trait represents an element of a field.","Byte representation of a base/scalar field element of a …","Trait for decoding/encoding <code>Curve::Uint</code> from/to <code>FieldBytes</code> …","Size of serialized field elements of this elliptic curve.","Size of a serialized field element in bytes.","This trait represents an element of a cryptographic group.","Modulus of the field written as a string for debugging …","A fixed multiplicative generator of <code>modulus - 1</code> order. …","How many bits are needed to represent an element of this …","","The one element of the field, the multiplicative identity.","Order of this elliptic curve, i.e. number of elements in …","Contains the success value","Marker trait for elliptic curves with prime order.","Prime order elliptic curve with projective arithmetic …","This represents an element of a non-binary prime field.","","Elliptic curve point in projective coordinates.","Elliptic curve public keys.","The <code>2^s</code> root of unity.","Inverse of <code>Self::ROOT_OF_UNITY</code>.","The prime field can be converted back and forth into this …","Result type with the <code>elliptic-curve</code> crate’s <code>Error</code> type.","An integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …","","Scalars modulo the order of this group’s scalar field.","Scalar field modulo this curve’s order.","","Elliptic curve secret keys.","Inverse of $2$ in the field.","Integer type used to represent field elements of this …","The zero element of the field, the additive identity.","","","Borrow the inner <code>AffinePoint</code> from this <code>PublicKey</code>.","","Borrow the inner secret <code>ScalarPrimitive</code> value.","","","","","","","","","","","","","","","Type aliases for many constants.","","Cubes this element.","Decode unsigned integer from serialized field element.","Decode unsigned integer from serialized field element.","Doubles this element.","Doubles this element.","","Elliptic Curve Diffie-Hellman Support.","Encode unsigned integer into serialized field element.","Encode unsigned integer into serialized field element.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Convert an <code>AffinePoint</code> into a <code>PublicKey</code>","Deserialize secret key from an encoded secret scalar.","Initialize <code>PublicKey</code> from an <code>EncodedPoint</code>","","","Attempts to convert a byte representation of a field …","Attempts to convert a byte representation of a field …","Decode <code>PublicKey</code> (compressed or uncompressed) from the …","Deserialize secret key encoded in the SEC1 ASN.1 DER …","Compute a <code>PublicKey</code> from a secret <code>NonZeroScalar</code> value …","Deserialize secret key from an encoded secret scalar …","Interpret a string of numbers as a (congruent) prime field …","Obtains a field element congruent to the integer <code>v</code>.","Returns a fixed generator of the prime-order subgroup.","","","Returns the additive identity, also known as the “…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the multiplicative inverse of this element, …","Returns true iff this element is even.","Determines if this point is the identity.","Returns true iff this element is odd.","Returns true iff this element is zero.","Returns true iff this element is zero.","Create a new secret key from a scalar value.","Traits for arithmetic operations on elliptic curve field …","","","Traits for elliptic curve points.","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Get the <code>PublicKey</code> which corresponds to this secret key","","Returns an element chosen uniformly at random using a …","Returns an element chosen uniformly at random from the …","Generate a random <code>SecretKey</code>.","Scalar types.","Support for SEC1 elliptic curve encoding formats.","Returns the square root of the field element, if it is …","Equivalent to <code>Self::sqrt_ratio(self, one())</code>.","Computes:","Squares this element.","","Serialize raw secret scalar as a big endian integer.","Serialize this <code>PublicKey</code> as a SEC1 <code>EncodedPoint</code>, …","Convert this <code>PublicKey</code> to a <code>NonIdentity</code> of the inner …","Get the secret <code>NonZeroScalar</code> value for this key.","","","","","Convert this <code>PublicKey</code> to a <code>ProjectivePoint</code> for the given …","","Converts an element of the prime field into the standard …","Convert this <code>PublicKey</code> into the …","Serialize secret key in the SEC1 ASN.1 DER <code>ECPrivateKey</code> …","","","","","","","","","","","","","","","","","","","Complete projective formulas for prime order elliptic …","","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","","Instantiates a singleton representing this bit.","","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ephemeral Diffie-Hellman Secret.","Shared secret value computed via ECDH key agreement.","","","","","Low-level Elliptic Curve Diffie-Hellman (ECDH) function.","Compute a Diffie-Hellman shared secret from an ephemeral …","","","Use HKDF (HMAC-based Extract-and-Expand Key Derivation …","Returns the argument unchanged.","Returns the argument unchanged.","NOTE: this impl is intended to be used by curve …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the public key associated with this ephemeral secret.","Generate a cryptographically random <code>EphemeralSecret</code>.","This value contains the raw serialized x-coordinate of the …","","","","","","","","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","Bytes used as input to <code>Reduce::reduce_bytes</code>.","Perform an inversion on a field element (i.e. base field …","Linear combination.","The multiplication operator <code>*</code>.","Multiplication by the generator.","The unary negation operator <code>-</code>.","Field element type","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","Modular reduction.","Modular reduction to a non-zero output.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","Performs the <code>+</code> operation.","Performs the <code>+=</code> operation.","Invert a field element.","Invert a field element in variable time.","Calculates <code>x * k + y * l</code>.","Performs the <code>*</code> operation.","Multiply by the generator of the prime-order subgroup.","Performs the unary <code>-</code> operation.","Perform a modular reduction, returning a field element.","Interpret the given bytes as an integer and perform a …","Perform a modular reduction, returning a field element.","Interpret the given bytes as an integer and perform a …","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","Performs the <code>-</code> operation.","Performs the <code>-=</code> operation.","Access to the affine coordinates of an elliptic curve …","Affine point type for a given curve with a <code>CurveArithmetic</code> …","Should point compaction be applied by default?","Should point compression be applied by default?","","Decompact an elliptic curve point from an x-coordinate.","Decompress an elliptic curve point.","Double a point (i.e. add it to itself)","Field element representation.","Non-identity point type.","Point compaction settings.","Point compression settings.","Projective point type for a given curve with a …","","","","","","","","Attempt to decompact an elliptic curve point","Attempt to decompress an elliptic curve point.","","Double this point.","","","Returns the argument unchanged.","","","Decode a <code>NonIdentity</code> from its encoding.","Calls <code>U::from(self)</code>.","","","Create a <code>NonIdentity</code> from a point.","Generate a random <code>NonIdentity&lt;ProjectivePoint&gt;</code>.","Converts this element into its affine representation.","","Converts this element to its curve representation.","","Return wrapped point.","","","","Get the affine x-coordinate as a serialized field element.","Is the affine y-coordinate odd?","Scalar blinded with a randomly generated masking value.","Instantiate a scalar from an unsigned integer without …","Is this scalar greater than n / 2?","Scalar modulus.","Non-zero scalar type.","Multiplicative identity.","Scalar field element for a particular elliptic curve.","Generic scalar type with primitive functionality.","Unsigned integer type (i.e. <code>Curve::Uint</code>)","Zero scalar.","","","","","Borrow the inner limbs as a slice.","","","","Borrow the inner <code>C::Uint</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Decode <code>ScalarPrimitive</code> from a serialized field element","Decode a <code>NonZeroScalar</code> from a big endian-serialized field …","Decode <code>ScalarPrimitive</code> from a big endian byte slice.","","","Create a <code>NonZeroScalar</code> from a <code>C::Uint</code>.","Instantiate scalar from an unsigned integer without …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Is this <code>ScalarPrimitive</code> value even?","Is this scalar greater than or equal to n / 2?","","","Is this <code>ScalarPrimitive</code> value odd?","Is this <code>ScalarPrimitive</code> value equal to zero?","","","","","","Create a new <code>BlindedScalar</code> from a scalar and a …","Create a <code>NonZeroScalar</code> from a scalar.","Create a new scalar from <code>Curve::Uint</code>.","","Generate a random <code>NonZeroScalar</code>.","Generate a random <code>ScalarPrimitive</code>.","","","","","","","","","","Encode <code>ScalarPrimitive</code> as a serialized field element.","","","","","","Convert to a <code>C::Uint</code>.","","","","","","","","","","","","","Compact curve point","Compact point (<code>0x05</code>)","Compressed curve point","Compressed point with even y-coordinate (<code>0x02</code>)","Compressed point with odd y-coordinate (<code>0x03</code>)","Encoded elliptic curve point with point compression.","Size of a compressed elliptic curve point.","Size of a compressed point for the given elliptic curve …","Enum representing the coordinates of either compressed or …","Encoded elliptic curve point sized appropriately for a …","Trait for deserializing a value from a SEC1 encoded curve …","Identity point (a.k.a. point at infinity)","Identity point (<code>0x00</code>)","Trait for supported modulus sizes which precomputes the …","Tag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …","Trait for serializing a value to a SEC1 encoded curve …","Trait for serializing a value to a SEC1 encoded curve …","Uncompressed curve point","Uncompressed point (<code>0x04</code>)","Encoded elliptic curve point <em>without</em> point compression.","Size of an uncompressed elliptic curve point.","Size of an uncompressed point for the given elliptic curve …","Size of an untagged point for given elliptic curve, i.e. …","Validate that the given <code>EncodedPoint</code> represents the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Deserialize the type this trait is impl’d on from an …","Parse a tag value from a byte","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this point compact?","Is this point compressed?","Is this point the identity point?","Compute the expected total message length for a message …","Get the tag octet needed to encode this set of <code>Coordinates</code>","Serialize this value as a SEC1 <code>EncodedPoint</code>, optionally …","Serialize this value as a SEC1 <code>EncodedPoint</code>, optionally …","","","","","","","","","","Validate that the given <code>EncodedPoint</code> is a valid public key …","x-coordinate","x-coordinate","x-coordinate","y-coordinate","Is the y-coordinate odd?","Affine point whose coordinates are represented by the …","Projective point whose coordinates are represented by the …","Implements the complete addition formula from …","Implements the complete mixed addition formula from …","Implements the exception-free point doubling formula from …"],"i":[0,0,7,105,0,0,106,105,30,0,0,0,0,0,10,0,105,105,105,0,103,10,30,0,0,0,0,7,0,105,105,105,0,105,0,107,7,0,0,105,10,103,8,5,5,5,8,0,11,8,5,11,8,5,11,8,5,11,8,5,5,0,8,103,108,108,103,107,8,0,108,108,11,8,5,11,8,5,0,11,11,8,5,16,16,11,11,11,11,8,8,8,5,5,5,5,5,8,5,8,5,105,105,5,8,5,8,105,105,107,0,0,107,11,8,5,103,105,107,105,103,103,8,0,5,0,0,103,103,8,0,103,107,8,0,0,103,103,103,103,0,8,5,5,8,11,8,5,8,5,5,105,5,8,11,11,8,8,8,5,5,5,5,5,5,5,11,8,5,11,8,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,64,64,62,62,64,62,62,64,64,62,64,60,62,64,60,62,64,60,62,64,60,62,64,60,62,64,60,60,62,64,60,62,64,60,62,64,60,62,64,60,62,64,60,62,64,60,62,62,64,64,60,60,60,62,62,64,64,60,60,60,60,60,60,60,62,62,64,64,60,62,64,62,64,60,60,60,60,60,60,60,60,60,62,64,60,60,60,60,60,60,60,60,60,62,64,60,62,64,62,64,60,62,64,60,62,64,60,0,0,26,78,26,78,0,26,26,78,78,26,78,78,26,78,26,26,78,26,78,26,78,26,78,26,0,0,109,0,0,0,0,0,110,111,112,89,113,114,0,0,0,0,0,0,111,115,110,110,116,89,117,113,109,109,118,118,114,119,112,120,0,0,121,50,0,0,0,0,122,0,0,0,0,27,27,27,27,27,27,27,123,124,27,125,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,122,122,0,0,0,9,0,9,0,0,126,9,9,9,9,9,9,94,22,9,9,94,22,9,94,22,9,94,22,9,94,22,9,9,9,22,9,22,9,9,9,9,22,94,9,9,22,22,22,9,9,9,9,94,22,22,22,9,9,9,9,9,22,9,22,9,22,126,9,94,22,9,94,22,22,9,127,22,9,9,9,22,22,22,9,9,94,22,9,9,22,9,22,22,22,22,9,9,9,9,9,9,94,22,9,22,9,9,94,22,22,9,94,22,9,94,22,9,22,9,99,101,99,101,101,0,0,100,0,0,0,99,101,0,0,0,0,99,101,0,0,100,100,0,99,101,99,101,99,101,99,101,99,101,99,101,99,101,99,101,57,57,31,31,128,101,99,101,101,101,101,101,99,129,130,99,101,99,101,101,99,101,99,101,36,131,132,133,133,132,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[4,[[2,[1]],3]]],[]],[-1,[[4,[[2,[1]],3]]],[]],[[[5,[-1]]],[[6,[-1]]],7],[[[5,[-1]]],[[6,[-1]]],7],[[[8,[-1]]],[[9,[-1]]],10],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[[[8,[-1]]],[[8,[-1]]],[12,10]],[[[5,[-1]]],[[5,[-1]]],[7,12]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[5,[-1]],[5,[-1]]],14,7],0,[[[8,[-1]],[8,[-1]]],15,10],[-1,-1,[]],[[[16,[-1]]],-2,[],[]],[[[16,[-1]]],-2,[],[]],[-1,-1,[]],[-1,-1,[]],[[[8,[-1]]],13,10],0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[[11,11],17],[[[8,[-1]],[8,[-1]]],17,10],[[[5,[-1]],[5,[-1]]],17,[7,18]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,[[11,19],20],[[11,19],20],[[[8,[-1]],19],20,10],[[[5,[-1]],19],20,[7,21]],[[[22,[-1]]],[[16,[-1]]],7],[[[22,[-1]]],[[16,[-1]]],7],[23,11],[24,11],[25,11],[-1,-1,[]],[[[22,[-1]]],[[8,[-1]]],7],[[[22,[-1]]],[[8,[-1]]],7],[-1,-1,[]],[[[26,[-1]]],[[5,[-1]]],7],[[[27,[-2]]],[[5,[-1]]],7,[28,[29,[[6,[-1]]]]]],[[[27,[-2]]],[[5,[-1]]],7,[28,[29,[[6,[-1]]]]]],[-1,-1,[]],[[[6,[-1]]],[[30,[[5,[-1]]]]],7],[[[16,[-1]]],[[30,[[8,[-1]]]]],10],[[[31,[-1]]],[[32,[[5,[-1]]]]],7],[[[34,[33]]],[[4,[-1,23]]],[]],[[[34,[33]]],[[4,[-1,3]]],[]],[[],[[32,[-1]]],[]],[[],[[35,[-1]]],[]],[[[34,[33]]],[[30,[[5,[-1]]]]],7],[[[34,[33]]],[[30,[[8,[-1]]]]],[10,36,10]],[[[22,[-1]]],[[5,[-1]]],7],[[[34,[33]]],[[30,[[8,[-1]]]]],10],[37,[[35,[-1]]],[]],[38,-1,[]],[[],-1,[]],0,0,[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[32,[-1]]],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,17,[]],[[[9,[-1]]],[[8,[-1]]],10],0,[[[5,[-1]],[5,[-1]]],[[35,[14]]],7],0,0,[[-1,-2],-1,[],[[40,[[34,[39]]]]]],[[-1,-2],-1,[],[[40,[[34,[39]]]]]],[[[8,[-1]]],[[5,[-1]]],[7,10]],0,[-1,-2,41,[]],[-1,-2,41,[]],[-1,[[8,[-2]]],42,[7,10]],0,0,[-1,[[32,[-1]]],[]],[-1,[[13,[15,-1]]],[]],[[-1,-1],[[13,[15,-1]]],[]],[-1,-1,[]],0,[[[8,[-1]]],[[16,[-1]]],10],[[[5,[-1]],17],[[31,[-1]]],7],[[[5,[-1]]],[[27,[[6,[-1]]]]],7],[[[8,[-1]]],[[22,[-1]]],[7,10]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],[[44,[43]]],[45,7]],[[[5,[-1]]],[[46,[-1]]],7],[[[5,[-1]]],[[48,[47]]],[45,7]],[-1,[],[]],[[[5,[-1]]],[[49,[[34,[33]]]]],[50,7]],[[[8,[-1]]],[[53,[[52,[[51,[33]]]]]]],[7,10]],[-1,54,[]],[-1,[[4,[-2]]],[],[]],[55,[[53,[[8,[-1]]]]],[10,36]],[-1,[[4,[-2]]],[],[]],[56,[[44,[[8,[-1]]]]],[45,10,36]],[[[57,[-1]]],[[30,[[5,[-1]]]]],7],[58,[[48,[[5,[-1]]]]],[45,7]],[[[57,[-1]]],[[30,[[5,[-1]]]]],7],[-1,[[4,[-2]]],[],[]],[[[31,[-1]]],[[30,[[5,[-1]]]]],7],[58,[[48,[[5,[-1]]]]],[45,7]],[[[31,[-1]]],[[30,[[5,[-1]]]]],7],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[60,-1],[],61],[[62,-1],[],63],[[64,62]],[[64,64]],[[62,64]],[[62,62]],[[64,-1],[],63],[[62,64]],[[62,62]],[[64,62]],[[64,64]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[62,62],[64,64],[60,60],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[62,62],14],[[64,64],14],[[60,60],14],[[],62],[[],64],[[],60],[[60,-1],[],[61,65]],[[62,62],17],[[64,64],17],[[60,60],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[62,19],[[4,[13,66]]]],[[64,19],[[4,[13,66]]]],[[60,19],[[4,[13,66]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[62,-1],13,67],[[64,-1],13,67],[[60,-1],13,67],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[62,64],64],[[62,62],62],[[64,64],64],[[64,62],64],[[60,60]],[[60,[68,[-1]]],[],[69,65]],[[60,[70,[-1]]],[],[69,65]],[[62,64],62],[[62,62],62],[[64,64],64],[[64,62],62],[[60,60]],[[60,[70,[-1]]],[],[69,65]],[[60,[68,[-1]]],[],[69,65]],[[60,-1],[],61],[[60,71]],[[60,[72,[-1,-2]]],[],[],[]],[60],[[],62],[[],62],[[],64],[[],64],[[],60],[62],[64],[[62,62],[[35,[14]]]],[[64,64],[[35,[14]]]],[[60,60],[[35,[14]]]],[[-1,-2],[],[],[]],[[60,[68,[-1]]],[],[69,65]],[[60,[70,[-1]]],[],[69,65]],[[60,60]],[[60,-1],[],[61,65]],[[60,60]],[[60,[68,[-1]]],[],[69,65]],[[60,[70,[-1]]],[],[69,65]],[[],17],[[],17],[[],73],[[],74],[[],75],[[],76],[[],75],[[],76],[[],73],[[],74],[[],77],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],33],[[],33],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,-3],[[78,[-1]]],7,[[79,[[22,[-1]]]]],[[79,[[6,[-1]]]]]],[[[26,[-1]],[5,[-1]]],[[78,[-1]]],7],[[[26,[-1]]],13,7],[[[78,[-1]]],13,10],[[[78,[-1]],[35,[[34,[33]]]]],[[81,[-2,[80,[-2]]]]],10,[82,12,83]],[-1,-1,[]],[-1,-1,[]],[[[16,[-1]]],[[78,[-1]]],10],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],[[5,[-1]]],7],[-1,[[26,[-2]]],42,7],[[[78,[-1]]],[[16,[-1]]],10],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[[[26,[-1]]],13,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[],[],[]],[[-1,-2],13,[],[]],[-1,[],[]],[-1,[],[]],[[-1,-1],-1,[]],[[-1,-2],[],[],[]],[[],-1,[]],[-1,[],[]],[-1,-2,[],[]],[[],-1,[]],[-1,-2,[],[]],[[],-1,[]],[[-1,-2],[],[],[]],[[-1,-2],13,[],[]],[[-1,-2],[],[],[]],[[-1,-2],13,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[27,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[27,[-1]]],[[27,[-1]]],12],[[-1,-2],13,[],[]],[[[27,[-1]],[27,[-1]],15],[[27,[-1]]],84],[[[27,[-1]],[27,[-1]]],15,85],[[[16,[-1]]],[[32,[-2]]],[],[]],[[[16,[-1]],15],[[32,[-2]]],[],[]],[[[27,[-1]]],[],[]],[-1,-1,[]],[[[5,[-1]]],[[27,[[6,[-1]]]]],7],[[[5,[-1]]],[[27,[[6,[-1]]]]],7],[-1,-1,[]],[[],[[32,[[27,[-1]]]]],[84,85,86,87]],[[],[[32,[[27,[-1]]]]],[84,85,86,87]],[[],[[32,[[27,[-1]]]]],[84,85,86,87]],[-1,-2,[],[]],[[[27,[-2]],[22,[-1]]],[],7,[28,[89,[[88,[-1]]]]]],[[[27,[-2]],[22,[-1]]],[],7,[28,[89,[[88,[-1]]]]]],[-1,[[32,[[27,[-1]]]]],[84,85,86]],[-1,[[27,[-2]]],[90,41],[84,85,91,86]],[[[27,[-1]]],27,[84,85,91,86]],[[[27,[-1]]],[],[84,85,86,87]],[[[27,[-1]]],27,92],[-1,-2,[],[]],[[[27,[-1]]],-1,28],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,59,[]],[-1,[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,[[[9,[-1]],[9,[-1]]],[[9,[-1]]],10],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],10],[[[9,[-1]],[9,[-1]]],13,10],[[[9,[-1]],[9,[-1]]],13,10],[[[9,[-1]]],[[34,[93]]],10],[[[94,[-1]]],[[88,[-1]]],7],[[[22,[-1]]],[[88,[-1]]],7],[[[9,[-1]]],[[34,[93]]],10],[[[9,[-1]]],[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[94,[-1]]],[[94,[-1]]],[7,12]],[[[22,[-1]]],[[22,[-1]]],[7,12]],[[[9,[-1]]],[[9,[-1]]],[12,10]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[9,[-1]],[9,[-1]]],14,10],[[-1,15],13,[]],[[[22,[-1]],[22,[-1]],15],[[22,[-1]]],7],[[[9,[-1]],[9,[-1]],15],[[9,[-1]]],10],[[[22,[-1]],[22,[-1]]],15,7],[[[9,[-1]],[9,[-1]]],15,10],[[[9,[-1]],[9,[-1]]],15,10],[[[9,[-1]],[9,[-1]]],15,10],[[],[[9,[-1]]],[86,10]],[[[22,[-1]]],[[88,[-1]]],7],[[[94,[-1]]],13,7],[[[9,[-1]],[9,[-1]]],17,10],[[-1,-2],17,[],[]],[[[22,[-1]],19],20,7],[[[22,[-1]],19],20,7],[[[22,[-1]],19],20,7],[[[9,[-1]],19],20,10],[[[9,[-1]],19],20,10],[[[9,[-1]],19],20,[21,10]],[[[9,[-1]],19],20,10],[-1,-1,[]],[[[8,[-1]]],[[22,[-1]]],7],[[[8,[-1]]],[[22,[-1]]],7],[-1,-1,[]],[[[22,[-1]]],[[9,[-1]]],7],[39,[[9,[-1]]],10],[[[22,[-1]]],[[9,[-1]]],7],[-1,-1,[]],[[[16,[-1]]],[[32,[[9,[-1]]]]],10],[[[16,[-1]]],[[32,[[22,[-1]]]]],7],[[[34,[33]]],[[30,[[9,[-1]]]]],10],[37,[[4,[[22,[-1]],11]]],7],[37,[[30,[[9,[-1]]]]],10],[[],[[32,[[22,[-1]]]]],7],[[],-1,[]],[[],[[9,[-1]]],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[94,[-1]]],[[32,[[88,[-1]]]]],7],[[[22,[-1]]],[[22,[-1]]],7],[[[22,[-1]]],[],7],[[[9,[-1]]],15,10],[-1,15,[]],[[[22,[-1]]],15,7],[[[9,[-1]]],15,10],[[[9,[-1]]],15,10],[[[9,[-1]]],15,10],[[[22,[-1]],[22,[-1]]],[[22,[-1]]],[95,7]],[[[22,[-1]],[22,[-1]]],[[22,[-1]]],[95,7]],[[[22,[-1]]],[[22,[-1]]],7],[[[9,[-1]]],[[9,[-1]]],10],[[[9,[-1]]],[[9,[-1]]],10],[[[88,[-1]],-2],[[94,[-1]]],7,42],[[[88,[-1]]],[[32,[[22,[-1]]]]],7],[[],[[32,[[9,[-1]]]]],10],[[[9,[-1]],[9,[-1]]],[[35,[14]]],10],[-1,[[22,[-2]]],42,7],[-1,[[9,[-2]]],42,10],[-1,[[22,[-2]]],[96,97],7],[[],[[22,[-1]]],7],[-1,[[22,[-2]]],[96,97],7],[[],[[22,[-1]]],7],[[[9,[-1]],98],13,10],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],10],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],10],[[[9,[-1]],[9,[-1]]],13,10],[[[9,[-1]],[9,[-1]]],13,10],[[[9,[-1]]],[[16,[-1]]],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[-1,54,[]],[[[9,[-1]]],[],10],[-1,[[4,[-2]]],[],[]],[[[34,[33]]],[[4,[[22,[-1]],11]]],7],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[[[22,[-1]]],13,7],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[99,[-1]]],[[99,[-1]]],[12,100]],[101,101],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[99,[-1]],[99,[-1]]],17,[]],[[101,101],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[[99,[-1]],19],[[4,[13,66]]],[21,100]],[[101,19],[[4,[13,66]]]],[-1,-1,[]],[-1,-1,[]],[[[5,[-1]]],[[57,[-1]]],[7,50]],[[[5,[-1]]],[[57,[-1]]],[7,50]],[[[5,[-1]]],[[31,[-1]]],[7,50]],[[[5,[-1]]],[[31,[-1]]],[7,50]],[[[31,[-1]]],[[32,[-2]]],[],[]],[33,[[4,[101,24]]]],[-1,-2,[],[]],[-1,-2,[],[]],[101,17],[101,17],[101,17],[[101,98],98],[[[99,[-1]]],101,100],[-1,[[32,[[31,[-2]]]]],[],[]],[[-1,17],[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[33,[[4,[101,24]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[[[8,[-1]],[31,[-1]]],[[30,[13]]],[]],0,0,0,0,0,0,0,[[[102,[-1]],[102,[-1]],-1],[[102,[-1]]],103],[[[102,[-1]],[104,[-1]],-1],[[102,[-1]]],103],[[[102,[-1]],-1],[[102,[-1]]],103]],"c":[],"p":[[3,"Any",3864],[3,"AlgorithmIdentifier",3865],[4,"Error",3866],[4,"Result",3867],[3,"PublicKey",0],[6,"AffinePoint",3626],[8,"CurveArithmetic",0],[3,"SecretKey",0],[3,"ScalarPrimitive",3671],[8,"Curve",0],[3,"Error",0],[8,"Clone",3868],[15,"tuple"],[4,"Ordering",3869],[3,"Choice",3870],[6,"FieldBytes",0],[15,"bool"],[8,"PartialEq",3869],[3,"Formatter",3871],[6,"Result",3871],[8,"Debug",3871],[3,"NonZeroScalar",3671],[4,"Error",3872],[4,"Error",3873],[4,"Error",3874],[3,"EphemeralSecret",3564],[3,"NonIdentity",3626],[8,"Copy",3875],[8,"Into",3876],[6,"Result",0],[6,"EncodedPoint",3789],[3,"CtOption",3870],[15,"u8"],[15,"slice"],[4,"Option",3877],[8,"ValidatePublicKey",3789],[15,"str"],[15,"u128"],[15,"u64"],[8,"AsRef",3876],[8,"RngCore",3878],[8,"CryptoRngCore",3878],[3,"SecretDocument",3879],[6,"Result",3872],[8,"AssociatedOid",3880],[6,"ProjectivePoint",3626],[3,"Document",3879],[6,"Result",3866],[3,"Box",3881],[8,"PointCompression",3626],[3,"Vec",3882],[3,"Zeroizing",3883],[6,"Result",3884],[3,"String",3885],[3,"EcPrivateKey",3886],[3,"PrivateKeyInfo",3887],[6,"CompressedPoint",3789],[6,"SubjectPublicKeyInfoRef",3888],[3,"TypeId",3889],[3,"Z0",174],[8,"Integer",3890],[3,"B0",174],[8,"Bit",3890],[3,"B1",174],[8,"NonZero",3890],[3,"Error",3871],[8,"Hasher",3891],[3,"NInt",3892],[8,"Unsigned",3890],[3,"PInt",3892],[3,"ATerm",3893],[3,"TArr",3893],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[3,"SharedSecret",3564],[8,"Borrow",3894],[3,"SimpleHmac",3895],[3,"Hkdf",3896],[8,"BlockSizeUser",3897],[8,"Digest",3898],[8,"ConditionallySelectable",3870],[8,"ConstantTimeEq",3870],[8,"Default",3899],[8,"GroupEncoding",3900],[6,"Scalar",3671],[8,"Mul",3590],[8,"CryptoRng",3878],[8,"Curve",3900],[8,"PrimeCurveAffine",3901],[3,"Limb",3902],[3,"BlindedScalar",3671],[8,"PrimeCurve",0],[8,"Integer",3903],[8,"ArrayEncoding",3904],[15,"usize"],[4,"Coordinates",3789],[8,"ModulusSize",3789],[4,"Tag",3789],[6,"ProjectivePoint",3859],[8,"Field",0],[6,"AffinePoint",3859],[8,"PrimeField",0],[8,"PrimeCurveArithmetic",0],[8,"Group",0],[8,"FieldBytesEncoding",0],[8,"Reduce",3590],[8,"Invert",3590],[8,"Add",3590],[8,"Sub",3590],[8,"Neg",3590],[8,"Shr",3590],[8,"AddAssign",3590],[8,"LinearCombination",3590],[8,"MulByGenerator",3590],[8,"ReduceNonZero",3590],[8,"ShrAssign",3590],[8,"SubAssign",3590],[8,"PointCompaction",3626],[8,"AffineCoordinates",3626],[8,"DecompactPoint",3626],[8,"DecompressPoint",3626],[8,"Double",3626],[8,"FromUintUnchecked",3671],[8,"IsHigh",3671],[8,"FromEncodedPoint",3789],[8,"ToCompactEncodedPoint",3789],[8,"ToEncodedPoint",3789],[13,"Compact",3854],[13,"Compressed",3854],[13,"Uncompressed",3854]],"a":{"*":[3595],"+":[3590,3591],"+=":[3591],"-":[3597,3608,3609],"-=":[3609],">>":[3606],">>=":[3607]}},\
"encoding_rs":{"doc":"encoding_rs is a Gecko-oriented Free Software / Open …","t":"HHEDEHHHHDEDHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHNNNHHHHHHNNNNHHHHHHHHHHNHHHHHHHHHHHHHHHHHHHHHHHHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLNNENLLFFFFFFFFFFFFFFFFFFFFFFFLLLLFFFFFFFFFFFLLLFF","n":["BIG5","BIG5_INIT","CoderResult","Decoder","DecoderResult","EUC_JP","EUC_JP_INIT","EUC_KR","EUC_KR_INIT","Encoder","EncoderResult","Encoding","GB18030","GB18030_INIT","GBK","GBK_INIT","IBM866","IBM866_INIT","ISO_2022_JP","ISO_2022_JP_INIT","ISO_8859_10","ISO_8859_10_INIT","ISO_8859_13","ISO_8859_13_INIT","ISO_8859_14","ISO_8859_14_INIT","ISO_8859_15","ISO_8859_15_INIT","ISO_8859_16","ISO_8859_16_INIT","ISO_8859_2","ISO_8859_2_INIT","ISO_8859_3","ISO_8859_3_INIT","ISO_8859_4","ISO_8859_4_INIT","ISO_8859_5","ISO_8859_5_INIT","ISO_8859_6","ISO_8859_6_INIT","ISO_8859_7","ISO_8859_7_INIT","ISO_8859_8","ISO_8859_8_I","ISO_8859_8_INIT","ISO_8859_8_I_INIT","InputEmpty","InputEmpty","InputEmpty","KOI8_R","KOI8_R_INIT","KOI8_U","KOI8_U_INIT","MACINTOSH","MACINTOSH_INIT","Malformed","OutputFull","OutputFull","OutputFull","REPLACEMENT","REPLACEMENT_INIT","SHIFT_JIS","SHIFT_JIS_INIT","UTF_16BE","UTF_16BE_INIT","UTF_16LE","UTF_16LE_INIT","UTF_8","UTF_8_INIT","Unmappable","WINDOWS_1250","WINDOWS_1250_INIT","WINDOWS_1251","WINDOWS_1251_INIT","WINDOWS_1252","WINDOWS_1252_INIT","WINDOWS_1253","WINDOWS_1253_INIT","WINDOWS_1254","WINDOWS_1254_INIT","WINDOWS_1255","WINDOWS_1255_INIT","WINDOWS_1256","WINDOWS_1256_INIT","WINDOWS_1257","WINDOWS_1257_INIT","WINDOWS_1258","WINDOWS_1258_INIT","WINDOWS_874","WINDOWS_874_INIT","X_MAC_CYRILLIC","X_MAC_CYRILLIC_INIT","X_USER_DEFINED","X_USER_DEFINED_INIT","ascii_valid_up_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_encode_everything","decode","decode_to_str","decode_to_str_without_replacement","decode_to_string","decode_to_string_without_replacement","decode_to_utf16","decode_to_utf16_without_replacement","decode_to_utf8","decode_to_utf8_without_replacement","decode_with_bom_removal","decode_without_bom_handling","decode_without_bom_handling_and_without_replacement","encode","encode_from_utf16","encode_from_utf16_without_replacement","encode_from_utf8","encode_from_utf8_to_vec","encode_from_utf8_to_vec_without_replacement","encode_from_utf8_without_replacement","encoding","encoding","eq","eq","eq","eq","fmt","fmt","fmt","fmt","for_bom","for_label","for_label_no_replacement","from","from","from","from","from","from","has_pending_state","hash","into","into","into","into","into","into","is_ascii_compatible","is_single_byte","iso_2022_jp_ascii_valid_up_to","latin1_byte_compatible_up_to","max_buffer_length_from_utf16_if_no_unmappables","max_buffer_length_from_utf16_without_replacement","max_buffer_length_from_utf8_if_no_unmappables","max_buffer_length_from_utf8_without_replacement","max_utf16_buffer_length","max_utf8_buffer_length","max_utf8_buffer_length_without_replacement","mem","name","new_decoder","new_decoder_with_bom_removal","new_decoder_without_bom_handling","new_encoder","output_encoding","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","utf8_valid_up_to","Bidi","Latin1","Latin1Bidi","LeftToRight","borrow","borrow_mut","check_str_for_latin1_and_bidi","check_utf16_for_latin1_and_bidi","check_utf8_for_latin1_and_bidi","convert_latin1_to_str","convert_latin1_to_str_partial","convert_latin1_to_utf16","convert_latin1_to_utf8","convert_latin1_to_utf8_partial","convert_str_to_utf16","convert_utf16_to_latin1_lossy","convert_utf16_to_str","convert_utf16_to_str_partial","convert_utf16_to_utf8","convert_utf16_to_utf8_partial","convert_utf8_to_latin1_lossy","convert_utf8_to_utf16","convert_utf8_to_utf16_without_replacement","copy_ascii_to_ascii","copy_ascii_to_basic_latin","copy_basic_latin_to_ascii","decode_latin1","encode_latin1_lossy","ensure_utf16_validity","eq","fmt","from","into","is_ascii","is_basic_latin","is_char_bidi","is_str_bidi","is_str_latin1","is_utf16_bidi","is_utf16_code_unit_bidi","is_utf16_latin1","is_utf8_bidi","is_utf8_latin1","str_latin1_up_to","try_from","try_into","type_id","utf16_valid_up_to","utf8_latin1_up_to"],"q":[[0,"encoding_rs"],[191,"encoding_rs::mem"],[240,"alloc::borrow"],[241,"alloc::string"],[242,"core::option"],[243,"alloc::vec"],[244,"core::fmt"],[245,"core::fmt"],[246,"core::result"],[247,"core::any"]],"d":["The Big5 encoding.","The initializer for the Big5 encoding.","Result of a (potentially partial) decode or encode …","A converter that decodes a byte stream into Unicode …","Result of a (potentially partial) decode operation without …","The EUC-JP encoding.","The initializer for the EUC-JP encoding.","The EUC-KR encoding.","The initializer for the EUC-KR encoding.","A converter that encodes a Unicode stream into bytes …","Result of a (potentially partial) encode operation without …","An encoding as defined in the Encoding Standard.","The gb18030 encoding.","The initializer for the gb18030 encoding.","The GBK encoding.","The initializer for the GBK encoding.","The IBM866 encoding.","The initializer for the IBM866 encoding.","The ISO-2022-JP encoding.","The initializer for the ISO-2022-JP encoding.","The ISO-8859-10 encoding.","The initializer for the ISO-8859-10 encoding.","The ISO-8859-13 encoding.","The initializer for the ISO-8859-13 encoding.","The ISO-8859-14 encoding.","The initializer for the ISO-8859-14 encoding.","The ISO-8859-15 encoding.","The initializer for the ISO-8859-15 encoding.","The ISO-8859-16 encoding.","The initializer for the ISO-8859-16 encoding.","The ISO-8859-2 encoding.","The initializer for the ISO-8859-2 encoding.","The ISO-8859-3 encoding.","The initializer for the ISO-8859-3 encoding.","The ISO-8859-4 encoding.","The initializer for the ISO-8859-4 encoding.","The ISO-8859-5 encoding.","The initializer for the ISO-8859-5 encoding.","The ISO-8859-6 encoding.","The initializer for the ISO-8859-6 encoding.","The ISO-8859-7 encoding.","The initializer for the ISO-8859-7 encoding.","The ISO-8859-8 encoding.","The ISO-8859-8-I encoding.","The initializer for the ISO-8859-8 encoding.","The initializer for the ISO-8859-8-I encoding.","The input was exhausted.","The input was exhausted.","The input was exhausted.","The KOI8-R encoding.","The initializer for the KOI8-R encoding.","The KOI8-U encoding.","The initializer for the KOI8-U encoding.","The macintosh encoding.","The initializer for the macintosh encoding.","The decoder encountered a malformed byte sequence.","The converter cannot produce another unit of output, …","The decoder cannot produce another unit of output, because …","The encoder cannot produce another unit of output, because …","The replacement encoding.","The initializer for the replacement encoding.","The Shift_JIS encoding.","The initializer for the Shift_JIS encoding.","The UTF-16BE encoding.","The initializer for the UTF-16BE encoding.","The UTF-16LE encoding.","The initializer for the UTF-16LE encoding.","The UTF-8 encoding.","The initializer for the UTF-8 encoding.","The encoder encountered an unmappable character.","The windows-1250 encoding.","The initializer for the windows-1250 encoding.","The windows-1251 encoding.","The initializer for the windows-1251 encoding.","The windows-1252 encoding.","The initializer for the windows-1252 encoding.","The windows-1253 encoding.","The initializer for the windows-1253 encoding.","The windows-1254 encoding.","The initializer for the windows-1254 encoding.","The windows-1255 encoding.","The initializer for the windows-1255 encoding.","The windows-1256 encoding.","The initializer for the windows-1256 encoding.","The windows-1257 encoding.","The initializer for the windows-1257 encoding.","The windows-1258 encoding.","The initializer for the windows-1258 encoding.","The windows-874 encoding.","The initializer for the windows-874 encoding.","The x-mac-cyrillic encoding.","The initializer for the x-mac-cyrillic encoding.","The x-user-defined encoding.","The initializer for the x-user-defined encoding.","Validates ASCII.","","","","","","","","","","","","","Checks whether the <em>output encoding</em> of this encoding can …","Decode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>with BOM sniffing</em> …","Incrementally decode a byte stream into UTF-8 with …","Incrementally decode a byte stream into UTF-8 with type …","Incrementally decode a byte stream into UTF-8 with …","Incrementally decode a byte stream into UTF-8 using a …","Incrementally decode a byte stream into UTF-16 with …","Incrementally decode a byte stream into UTF-16 <em>without </em>…","Incrementally decode a byte stream into UTF-8 with …","Incrementally decode a byte stream into UTF-8 <em>without </em>…","Decode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>with BOM removal</em> and …","Decode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>without BOM handling</em> …","Decode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>without BOM handling</em> …","Encode complete input to <code>Cow&lt;&#39;a, [u8]&gt;</code> using the <em>output </em>…","Incrementally encode into byte stream from UTF-16 with …","Incrementally encode into byte stream from UTF-16 <em>without </em>…","Incrementally encode into byte stream from UTF-8 with …","Incrementally encode into byte stream from UTF-8 with …","Incrementally encode into byte stream from UTF-8 <em>without </em>…","Incrementally encode into byte stream from UTF-8 <em>without </em>…","The <code>Encoding</code> this <code>Decoder</code> is for.","The <code>Encoding</code> this <code>Encoder</code> is for.","","","","","","","","","Performs non-incremental BOM sniffing.","Implements the <em>get an encoding</em> algorithm.","This method behaves the same as <code>for_label()</code>, except when …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns <code>true</code> if this is an ISO-2022-JP encoder that’s …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the bytes 0x00…0x7F map exclusively to …","Checks whether this encoding maps one byte to one Basic …","Validates ISO-2022-JP ASCII-state data.","Checks for compatibility with storing Unicode scalar …","Query the worst-case output size when encoding from UTF-16 …","Query the worst-case output size when encoding from UTF-16 …","Query the worst-case output size when encoding from UTF-8 …","Query the worst-case output size when encoding from UTF-8 …","Query the worst-case UTF-16 output size (with or without …","Query the worst-case UTF-8 output size <em>with replacement</em>.","Query the worst-case UTF-8 output size <em>without replacement</em>.","Functions for converting between different in-RAM …","Returns the name of this encoding.","Instantiates a new decoder for this encoding with BOM …","Instantiates a new decoder for this encoding with BOM …","Instantiates a new decoder for this encoding with BOM …","Instantiates a new encoder for the <em>output encoding</em> of this …","Returns the <em>output encoding</em> of this encoding. This is …","","","","","","","","","","","","","","","","","","","Validates UTF-8.","There is at least one right-to-left character.","Every character is below U+0100.","Classification of text as Latin1 (all code points are …","There is at least one character that’s U+0100 or higher, …","","","Checks whether a valid UTF-8 buffer contains code points …","Checks whether a potentially invalid UTF-16 buffer …","Checks whether a potentially invalid UTF-8 buffer contains …","Converts bytes whose unsigned value is interpreted as …","Converts bytes whose unsigned value is interpreted as …","Converts bytes whose unsigned value is interpreted as …","Converts bytes whose unsigned value is interpreted as …","Converts bytes whose unsigned value is interpreted as …","Converts valid UTF-8 to valid UTF-16.","If the input is valid UTF-16 representing only Unicode …","Converts potentially-invalid UTF-16 to valid UTF-8 with …","Converts potentially-invalid UTF-16 to valid UTF-8 with …","Converts potentially-invalid UTF-16 to valid UTF-8 with …","Converts potentially-invalid UTF-16 to valid UTF-8 with …","If the input is valid UTF-8 representing only Unicode code …","Converts potentially-invalid UTF-8 to valid UTF-16 with …","Converts potentially-invalid UTF-8 to valid UTF-16 …","Copies ASCII from source to destination up to the first …","Copies ASCII from source to destination zero-extending it …","Copies Basic Latin from source to destination narrowing it …","Converts bytes whose unsigned value is interpreted as …","If the input is valid UTF-8 representing only Unicode code …","Replaces unpaired surrogates in the input with the …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Checks whether the buffer is all-ASCII.","Checks whether the buffer is all-Basic Latin (i.e. UTF-16 …","Checks whether a scalar value triggers right-to-left …","Checks whether a valid UTF-8 buffer contains code points …","Checks whether the buffer represents only code points less …","Checks whether a UTF-16 buffer contains code points that …","Checks whether a UTF-16 code unit triggers right-to-left …","Checks whether the buffer represents only code point less …","Checks whether a potentially-invalid UTF-8 buffer contains …","Checks whether the buffer is valid UTF-8 representing only …","Returns the index of first byte that starts a non-Latin1 …","","","","Returns the index of the first unpaired surrogate or, if …","Returns the index of first byte that starts an invalid byte"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,16,0,0,0,0,0,0,11,10,11,16,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,9,15,10,11,16,4,9,15,10,11,16,4,4,9,9,9,9,9,9,9,9,4,4,4,4,15,15,15,15,15,15,9,15,4,10,11,16,4,10,11,16,4,4,4,4,9,15,10,11,16,15,4,4,9,15,10,11,16,4,4,4,9,15,15,15,15,9,9,9,0,4,4,4,4,4,4,4,9,15,10,11,16,4,9,15,10,11,16,4,9,15,10,11,16,4,23,23,0,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,23,23,23,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,5],[[4,[2,[1]]],[[8,[[7,[6]],4,5]]]],[[9,[2,[1]],6,5],[[8,[10,3,3,5]]]],[[9,[2,[1]],6,5],[[8,[11,3,3]]]],[[9,[2,[1]],12,5],[[8,[10,3,5]]]],[[9,[2,[1]],12,5],[[8,[11,3]]]],[[9,[2,[1]],[2,[13]],5],[[8,[10,3,3,5]]]],[[9,[2,[1]],[2,[13]],5],[[8,[11,3,3]]]],[[9,[2,[1]],[2,[1]],5],[[8,[10,3,3,5]]]],[[9,[2,[1]],[2,[1]],5],[[8,[11,3,3]]]],[[4,[2,[1]]],[[8,[[7,[6]],5]]]],[[4,[2,[1]]],[[8,[[7,[6]],5]]]],[[4,[2,[1]]],[[14,[[7,[6]]]]]],[[4,6],[[8,[[7,[[2,[1]]]],4,5]]]],[[15,[2,[13]],[2,[1]],5],[[8,[10,3,3,5]]]],[[15,[2,[13]],[2,[1]],5],[[8,[16,3,3]]]],[[15,6,[2,[1]],5],[[8,[10,3,3,5]]]],[[15,6,[17,[1]],5],[[8,[10,3,5]]]],[[15,6,[17,[1]],5],[[8,[16,3]]]],[[15,6,[2,[1]],5],[[8,[16,3,3]]]],[9,4],[15,4],[[4,4],5],[[10,10],5],[[11,11],5],[[16,16],5],[[4,18],19],[[10,18],19],[[11,18],19],[[16,18],19],[[[2,[1]]],[[14,[[8,[4,3]]]]]],[[[2,[1]]],[[14,[4]]]],[[[2,[1]]],[[14,[4]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,5],[[4,-1],8,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,5],[4,5],[[[2,[1]]],3],[[9,[2,[1]]],[[14,[3]]]],[[15,3],[[14,[3]]]],[[15,3],[[14,[3]]]],[[15,3],[[14,[3]]]],[[15,3],[[14,[3]]]],[[9,3],[[14,[3]]]],[[9,3],[[14,[3]]]],[[9,3],[[14,[3]]]],0,[4,6],[4,9],[4,9],[4,9],[4,15],[4,4],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[[2,[1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,23],[[[2,[13]]],23],[[[2,[1]]],23],[[[2,[1]],6],3],[[[2,[1]],6],[[8,[3,3]]]],[[[2,[1]],[2,[13]]],8],[[[2,[1]],[2,[1]]],3],[[[2,[1]],[2,[1]]],[[8,[3,3]]]],[[6,[2,[13]]],3],[[[2,[13]],[2,[1]]],8],[[[2,[13]],6],3],[[[2,[13]],6],[[8,[3,3]]]],[[[2,[13]],[2,[1]]],3],[[[2,[13]],[2,[1]]],[[8,[3,3]]]],[[[2,[1]],[2,[1]]],3],[[[2,[1]],[2,[13]]],3],[[[2,[1]],[2,[13]]],[[14,[3]]]],[[[2,[1]],[2,[1]]],3],[[[2,[1]],[2,[13]]],3],[[[2,[13]],[2,[1]]],3],[[[2,[1]]],[[7,[6]]]],[6,[[7,[[2,[1]]]]]],[[[2,[13]]],8],[[23,23],5],[[23,18],19],[-1,-1,[]],[-1,-2,[],[]],[[[2,[1]]],5],[[[2,[13]]],5],[24,5],[6,5],[6,5],[[[2,[13]]],5],[13,5],[[[2,[13]]],5],[[[2,[1]]],5],[[[2,[1]]],5],[6,3],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[[[2,[13]]],3],[[[2,[1]]],3]],"c":[],"p":[[15,"u8"],[15,"slice"],[15,"usize"],[3,"Encoding",0],[15,"bool"],[15,"str"],[4,"Cow",240],[15,"tuple"],[3,"Decoder",0],[4,"CoderResult",0],[4,"DecoderResult",0],[3,"String",241],[15,"u16"],[4,"Option",242],[3,"Encoder",0],[4,"EncoderResult",0],[3,"Vec",243],[3,"Formatter",244],[6,"Result",244],[8,"Hasher",245],[4,"Result",246],[3,"TypeId",247],[4,"Latin1Bidi",191],[15,"char"]]},\
"ff":{"doc":"This crate provides traits for working with finite fields.","t":"IDSSIISSSSISSQSSISSKLLLKLKLLLKALKLLLKLLLLKLLKKKLLLFF","n":["BatchInvert","BatchInverter","CAPACITY","DELTA","Field","FromUniformBytes","MODULUS","MULTIPLICATIVE_GENERATOR","NUM_BITS","ONE","PrimeField","ROOT_OF_UNITY","ROOT_OF_UNITY_INV","Repr","S","TWO_INV","WithSmallOrderMulGroup","ZERO","ZETA","batch_invert","borrow","borrow_mut","cube","double","from","from_repr","from_repr_vartime","from_str_vartime","from_u128","from_uniform_bytes","helpers","into","invert","invert_with_external_scratch","invert_with_internal_scratch","is_even","is_odd","is_zero","is_zero_vartime","pow","pow_vartime","random","sqrt","sqrt_alt","sqrt_ratio","square","to_repr","try_from","try_into","type_id","sqrt_ratio_generic","sqrt_tonelli_shanks"],"q":[[0,"ff"],[50,"ff::helpers"],[52,"subtle"],[53,"core::option"],[54,"subtle"],[55,"subtle"],[56,"rand_core"],[57,"core::result"],[58,"core::any"]],"d":["Extension trait for iterators over mutable field elements …","A non-allocating batch inverter.","How many bits of information can be reliably stored in the …","Generator of the <code>t-order</code> multiplicative subgroup.","This trait represents an element of a field.","Trait for constructing a <code>PrimeField</code> element from a …","Modulus of the field written as a string for debugging …","A fixed multiplicative generator of <code>modulus - 1</code> order. …","How many bits are needed to represent an element of this …","The one element of the field, the multiplicative identity.","This represents an element of a non-binary prime field.","The <code>2^s</code> root of unity.","Inverse of <code>Self::ROOT_OF_UNITY</code>.","The prime field can be converted back and forth into this …","An integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …","Inverse of $2$ in the field.","The subset of prime-order fields such that <code>(modulus - 1)</code> …","The zero element of the field, the additive identity.","A field element of small multiplicative order $N$.","Consumes this iterator and inverts each field element …","","","Cubes this element.","Doubles this element.","Returns the argument unchanged.","Attempts to convert a byte representation of a field …","Attempts to convert a byte representation of a field …","Interpret a string of numbers as a (congruent) prime field …","Obtains a field element congruent to the integer <code>v</code>.","Returns a field element that is congruent to the provided …","Helper methods for implementing the <code>ff</code> traits.","Calls <code>U::from(self)</code>.","Computes the multiplicative inverse of this element, …","Inverts each field element in <code>elements</code> (when nonzero). …","Inverts each field element in <code>items</code> (when nonzero). …","Returns true iff this element is even.","Returns true iff this element is odd.","Returns true iff this element is zero.","Returns true iff this element is zero.","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Returns an element chosen uniformly at random using a …","Returns the square root of the field element, if it is …","Equivalent to <code>Self::sqrt_ratio(self, one())</code>.","Computes:","Squares this element.","Converts an element of the prime field into the standard …","","","","Computes:","Constant-time implementation of Tonelli–Shanks’ …"],"i":[0,0,19,19,0,0,19,19,19,8,0,19,19,19,19,19,0,8,20,21,22,22,8,8,22,19,19,19,19,23,0,22,8,22,22,19,19,8,8,8,8,8,8,8,8,8,19,22,22,22,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[3,[[2,[-1]]],[]],[4,-1,[]],[[[6,[5]]],-1,[]],0,[-1,-2,[],[]],[-1,[[1,[-1]]],[]],[[[7,[-1]],[7,[-1]]],-1,[8,9]],[[[7,[-1]],-2,-3],-4,[],10,10,[8,9]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,12,[]],[[-1,-2],-1,[],[[14,[[7,[13]]]]]],[[-1,-2],-1,[],[[14,[[7,[13]]]]]],[-1,-2,15,[]],[-1,[[1,[-1]]],[]],[-1,[[16,[11,-1]]],[]],[[-1,-1],[[16,[11,-1]]],[]],[-1,-1,[]],[-1,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[[-1,-1],[[16,[11,-1]]],19],[[-1,-2],[[1,[-1]]],19,[[14,[[7,[13]]]]]]],"c":[],"p":[[3,"CtOption",52],[4,"Option",53],[15,"str"],[15,"u128"],[15,"u8"],[15,"array"],[15,"slice"],[8,"Field",0],[8,"ConstantTimeEq",52],[8,"Fn",54],[3,"Choice",52],[15,"bool"],[15,"u64"],[8,"AsRef",55],[8,"RngCore",56],[15,"tuple"],[4,"Result",57],[3,"TypeId",58],[8,"PrimeField",0],[8,"WithSmallOrderMulGroup",0],[8,"BatchInvert",0],[3,"BatchInverter",0],[8,"FromUniformBytes",0]]},\
"fnv":{"doc":"An implementation of the Fowler–Noll–Vo hash function.","t":"GGGDLLLLLLLLLLL","n":["FnvBuildHasher","FnvHashMap","FnvHashSet","FnvHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","with_key","write"],"q":[[0,"fnv"],[15,"core::result"],[16,"core::any"]],"d":["A builder for default FNV hashers.","A <code>HashMap</code> using a default FNV hasher.","A <code>HashSet</code> using a default FNV hasher.","An implementation of the Fowler–Noll–Vo hash function.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Create an FNV hasher starting with a state corresponding …",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[1,2],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[2,1],[[1,[6,[5]]],7]],"c":[],"p":[[3,"FnvHasher",0],[15,"u64"],[4,"Result",15],[3,"TypeId",16],[15,"u8"],[15,"slice"],[15,"tuple"]]},\
"form_urlencoded":{"doc":"Parser and serializer for the …","t":"DGQNDDDNILLKLLLLLLLLFLLLLLLKLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLL","n":["ByteSerialize","EncodingOverride","Finished","None","Parse","ParseIntoOwned","Serializer","Some","Target","append_key_only","append_pair","as_mut_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_serialize","clear","clone","clone_into","encoding_override","extend_keys_only","extend_pairs","finish","finish","fmt","for_suffix","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_owned","new","next","next","next","parse","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"form_urlencoded"],[62,"alloc::string"],[63,"core::iter::traits::collect"],[64,"core::fmt"],[65,"core::fmt"],[66,"core::result"],[67,"core::any"]],"d":["Return value of <code>byte_serialize()</code>.","","","No value.","The return type of <code>parse()</code>.","Like <code>Parse</code>, but yields pairs of <code>String</code> instead of pairs of …","The <code>application/x-www-form-urlencoded</code> serializer.","Some value of type <code>T</code>.","","Serialize and append a name of parameter without any value.","Serialize and append a name/value pair.","","","","","","","","","","The <code>application/x-www-form-urlencoded</code> byte serializer.","Remove any existing name/value pair.","","","Set the character encoding to be used for names and values …","Serialize and append a number of names without values.","Serialize and append a number of name/value pairs.","","If this serializer was constructed with a string, take and …","","Create a new <code>application/x-www-form-urlencoded</code> serializer …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return a new iterator that yields pairs of <code>String</code> instead …","Create a new <code>application/x-www-form-urlencoded</code> serializer …","","","","Convert a byte string in the …","","","","","","","","","","","","","",""],"i":[0,0,3,10,0,0,0,10,0,1,1,3,15,1,8,7,15,1,8,7,0,1,8,8,1,1,1,3,1,7,1,15,1,8,7,15,1,8,7,15,8,7,8,1,15,8,7,0,7,8,15,1,8,7,15,1,8,7,15,1,8,7],"f":[0,0,0,0,0,0,0,0,0,[[[1,[-1]],2],[[1,[-1]]],3],[[[1,[-1]],2,2],[[1,[-1]]],3],[-1,4,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[5]]],7],[[[1,[-1]]],[[1,[-1]]],3],[8,8],[[-1,-2],9,[],[]],[[[1,[-1]],10],[[1,[-1]]],3],[[[1,[-1]],-2],[[1,[-1]]],3,11],[[[1,[-1]],-2],[[1,[-1]]],3,11],[-1,[],[]],[[[1,[-1]]],[],3],[[7,12],13],[[-1,14],[[1,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,15],[-1,[[1,[-1]]],3],[15,16],[8,16],[7,[[16,[2]]]],[[[6,[5]]],8],[7,[[9,[14,[16,[14]]]]]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[3,"Serializer",0],[15,"str"],[8,"Target",0],[3,"String",62],[15,"u8"],[15,"slice"],[3,"ByteSerialize",0],[3,"Parse",0],[15,"tuple"],[6,"EncodingOverride",0],[8,"IntoIterator",63],[3,"Formatter",64],[6,"Result",64],[15,"usize"],[3,"ParseIntoOwned",0],[4,"Option",65],[4,"Result",66],[3,"TypeId",67]]},\
"futures_channel":{"doc":"Asynchronous channels.","t":"AADDDDDDDLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLDDDDLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["mpsc","oneshot","Receiver","SendError","Sender","TryRecvError","TrySendError","UnboundedReceiver","UnboundedSender","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","close","close_channel","close_channel","disconnect","disconnect","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash_receiver","hash_receiver","into","into","into","into","into","into","into","into_inner","into_send_error","is_closed","is_closed","is_connected_to","is_connected_to","is_disconnected","is_disconnected","is_empty","is_full","is_full","is_terminated","is_terminated","len","poll_next","poll_next","poll_ready","poll_ready","same_receiver","same_receiver","size_hint","size_hint","start_send","start_send","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_next","try_next","try_poll_next","try_poll_next","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded","unbounded_send","Canceled","Cancellation","Receiver","Sender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancellation","channel","clone","clone_into","close","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_future","into_future","is_canceled","is_connected_to","is_terminated","poll","poll","poll_canceled","send","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll","try_recv","type_id","type_id","type_id","type_id"],"q":[[0,"futures_channel"],[2,"futures_channel::mpsc"],[129,"futures_channel::oneshot"],[188,"core::clone"],[189,"core::cmp"],[190,"core::fmt"],[191,"core::fmt"],[192,"core::pin"],[193,"core::task::wake"],[194,"core::option"],[195,"core::task::poll"],[196,"core::result"],[197,"alloc::string"],[198,"core::any"],[199,"core::fmt"]],"d":["A multi-producer, single-consumer queue for sending values …","A channel for sending a single message between …","The receiving end of a bounded mpsc channel.","The error type for <code>Sender</code>s used as <code>Sink</code>s.","The transmission end of a bounded mpsc channel.","The error type returned from <code>try_next</code>.","The error type returned from <code>try_send</code>.","The receiving end of an unbounded mpsc channel.","The transmission end of an unbounded mpsc channel.","","","","","","","","","","","","","","","Creates a bounded mpsc channel for communicating between …","","","","","","","","","Closes the receiving half of a channel, without dropping …","Closes the receiving half of a channel, without dropping …","Closes this channel from the sender side, preventing any …","Closes this channel from the sender side, preventing any …","Disconnects this sender from the channel, closing it if …","Disconnects this sender from the channel, closing it if …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Hashes the receiver into the provided hasher","Hashes the receiver into the provided hasher","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the message that was attempted to be sent but …","Drops the message and converts into a <code>SendError</code>.","Returns whether this channel is closed without needing a …","Returns whether this channel is closed without needing a …","Returns whether the sender send to this receiver.","Returns whether the sender send to this receiver.","Returns <code>true</code> if this error is a result of the receiver …","Returns <code>true</code> if this error is a result of the receiver …","Return false is channel has no queued messages, true …","Returns <code>true</code> if this error is a result of the channel …","Returns <code>true</code> if this error is a result of the channel …","","","Return the number of messages in the queue or 0 if channel …","","","Polls the channel to determine if there is guaranteed …","Check if the channel is ready to receive a message.","Returns whether the senders send to the same receiver.","Returns whether the senders send to the same receiver.","","","Send a message on the channel.","Send a message on the channel.","","","","","","","","","","","","","","","","","","","","","","Tries to receive the next message without notifying a …","Tries to receive the next message without notifying a …","","","Attempts to send a message on this <code>Sender</code>, returning the …","","","","","","","","Creates an unbounded mpsc channel for communicating …","Sends a message along this channel.","Error returned from a <code>Receiver</code> when the corresponding …","A future that resolves when the receiving end of a channel …","A future for a value that will be provided by another …","A means of transmitting a single value to another task.","","","","","","","","","Creates a future that resolves when this <code>Sender</code>’s …","Creates a new one-shot channel for sending a single value …","","","Gracefully close this receiver, preventing any subsequent …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Tests to see whether this <code>Sender</code>’s corresponding <code>Receiver</code>","Tests to see whether this <code>Sender</code> is connected to the given …","","","","Polls this <code>Sender</code> half to detect whether its associated …","Completes this oneshot with a successful result.","","","","","","","","","","","","Attempts to receive a message outside of the context of a …","","","",""],"i":[0,0,0,0,0,0,0,0,0,2,5,3,9,14,6,7,2,5,3,9,14,6,7,0,2,5,6,7,2,5,6,7,3,9,2,5,2,5,3,9,6,7,6,7,2,5,3,9,14,14,6,6,7,7,2,5,3,9,14,6,7,2,5,2,5,3,9,14,6,7,7,7,2,5,2,5,6,7,5,6,7,3,9,5,3,9,2,5,2,5,3,9,2,5,2,5,6,7,14,6,7,2,5,3,9,14,6,7,2,5,3,9,14,6,7,3,9,3,9,2,2,5,3,9,14,6,7,0,5,0,0,0,0,25,23,24,26,25,23,24,26,23,0,26,26,25,25,23,26,26,25,23,24,26,26,25,23,24,26,25,23,24,26,25,24,23,23,25,25,24,23,23,26,26,25,23,24,26,25,23,24,26,25,25,25,23,24,26],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[[2,[-1]],[3,[-1]]]]],[]],[[[2,[-1]]],[[2,[-1]]],[]],[[[5,[-1]]],[[5,[-1]]],[]],[6,6],[[[7,[-1]]],[[7,[-1]]],8],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[3,[-1]]],4,[]],[[[9,[-1]]],4,[]],[[[2,[-1]]],4,[]],[[[5,[-1]]],4,[]],[[[2,[-1]]],4,[]],[[[5,[-1]]],4,[]],[[[3,[-1]]],4,[]],[[[9,[-1]]],4,[]],[[6,6],10],[[[7,[-1]],[7,[-1]]],10,11],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[2,[-1]],12],13,[]],[[[5,[-1]],12],13,[]],[[[3,[-1]],12],13,[]],[[[9,[-1]],12],13,[]],[[14,12],13],[[14,12],13],[[6,12],13],[[6,12],13],[[[7,[-1]],12],13,[]],[[[7,[-1]],12],13,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],-2],4,[],15],[[[5,[-1]],-2],4,[],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1]]],-1,[]],[[[7,[-1]]],6,[]],[[[2,[-1]]],10,[]],[[[5,[-1]]],10,[]],[[[2,[-1]],[3,[-1]]],10,[]],[[[5,[-1]],[9,[-1]]],10,[]],[6,10],[[[7,[-1]]],10,[]],[[[5,[-1]]],10,[]],[6,10],[[[7,[-1]]],10,[]],[[[3,[-1]]],10,[]],[[[9,[-1]]],10,[]],[[[5,[-1]]],1,[]],[[[16,[[3,[-1]]]],17],[[19,[[18,[-1]]]]],[]],[[[16,[[9,[-1]]]],17],[[19,[[18,[-1]]]]],[]],[[[2,[-1]],17],[[19,[[20,[4,6]]]]],[]],[[[5,[-1]],17],[[19,[[20,[4,6]]]]],[]],[[[2,[-1]],[2,[-1]]],10,[]],[[[5,[-1]],[5,[-1]]],10,[]],[[[3,[-1]]],[[4,[1,[18,[1]]]]],[]],[[[9,[-1]]],[[4,[1,[18,[1]]]]],[]],[[[2,[-1]],-1],[[20,[4,6]]],[]],[[[5,[-1]],-1],[[20,[4,6]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[3,[-1]]],[[20,[[18,[-1]],14]]],[]],[[[9,[-1]]],[[20,[[18,[-1]],14]]],[]],[[[16,[-1]],17],[[19,[[18,[20]]]]],[]],[[[16,[-1]],17],[[19,[[18,[20]]]]],[]],[[[2,[-1]],-1],[[20,[4,[7,[-1]]]]],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[],[[4,[[5,[-1]],[9,[-1]]]]],[]],[[[5,[-1]],-1],[[20,[4,[7,[-1]]]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[24,[-1]]],[]],[[],[[4,[[23,[-1]],[25,[-1]]]]],[]],[26,26],[[-1,-2],4,[],[]],[[[25,[-1]]],4,[]],[[[25,[-1]]],4,[]],[[[23,[-1]]],4,[]],[[26,26],10],[[-1,-2],10,[],[]],[[[25,[-1]],12],13,[]],[[[23,[-1]],12],13,[]],[[[24,[-1]],12],13,27],[[26,12],13],[[26,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[23,[-1]]],10,[]],[[[23,[-1]],[25,[-1]]],10,[]],[[[25,[-1]]],10,[]],[[[16,[[25,[-1]]]],17],[[19,[[20,[-1,26]]]]],[]],[[[16,[[24,[-1]]]],17],[[19,[4]]],[]],[[[23,[-1]],17],[[19,[4]]],[]],[[[23,[-1]],-1],[[20,[4,-1]]],[]],[-1,-2,[],[]],[-1,21,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[16,[-1]],17],19,[]],[[[25,[-1]]],[[20,[[18,[-1]],26]]],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]]],"c":[],"p":[[15,"usize"],[3,"Sender",2],[3,"Receiver",2],[15,"tuple"],[3,"UnboundedSender",2],[3,"SendError",2],[3,"TrySendError",2],[8,"Clone",188],[3,"UnboundedReceiver",2],[15,"bool"],[8,"PartialEq",189],[3,"Formatter",190],[6,"Result",190],[3,"TryRecvError",2],[8,"Hasher",191],[3,"Pin",192],[3,"Context",193],[4,"Option",194],[4,"Poll",195],[4,"Result",196],[3,"String",197],[3,"TypeId",198],[3,"Sender",129],[3,"Cancellation",129],[3,"Receiver",129],[3,"Canceled",129],[8,"Debug",190]]},\
"futures_core":{"doc":"Core traits and types for asynchronous operations in Rust.","t":"CCCCCCAOAAGQICGQIKKGQIQGQIIKKLKCCCCC","n":["FusedFuture","FusedStream","Future","Stream","TryFuture","TryStream","future","ready","stream","task","BoxFuture","Error","FusedFuture","Future","LocalBoxFuture","Ok","TryFuture","is_terminated","try_poll","BoxStream","Error","FusedStream","Item","LocalBoxStream","Ok","Stream","TryStream","is_terminated","poll_next","size_hint","try_poll_next","Context","Poll","RawWaker","RawWakerVTable","Waker"],"q":[[0,"futures_core"],[10,"futures_core::future"],[19,"futures_core::stream"],[31,"futures_core::task"],[36,"core::pin"],[37,"core::task::wake"],[38,"core::result"],[39,"core::task::poll"],[40,"core::option"]],"d":["","","","","","","Futures.","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","Asynchronous streams.","Task notification.","An owned dynamically typed <code>Future</code> for use in cases where …","The type of failures yielded by this future","A future which tracks whether or not the underlying future …","","<code>BoxFuture</code>, but without the <code>Send</code> requirement.","The type of successful values yielded by this future","A convenience for futures that return <code>Result</code> values that …","Returns <code>true</code> if the underlying future should no longer be …","Poll this <code>TryFuture</code> as if it were a <code>Future</code>.","An owned dynamically typed <code>Stream</code> for use in cases where …","The type of failures yielded by this future","A stream which tracks whether or not the underlying stream …","Values yielded by the stream.","<code>BoxStream</code>, but without the <code>Send</code> requirement.","The type of successful values yielded by this future","A stream of values produced asynchronously.","A convenience for streams that return <code>Result</code> values that …","Returns <code>true</code> if the stream should no longer be polled.","Attempt to pull out the next value of this stream, …","Returns the bounds on the remaining length of the stream.","Poll this <code>TryStream</code> as if it were a <code>Stream</code>.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,9,0,10,9,0,11,0,12,0,11,0,0,13,12,12,11,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[[[2,[-1]],3],[[5,[4]]],[]],0,0,0,0,0,0,0,0,[-1,1,[]],[[[2,[-1]],3],[[5,[6]]],[]],[-1,[[8,[7,[6,[7]]]]],[]],[[[2,[-1]],3],[[5,[[6,[4]]]]],[]],0,0,0,0,0],"c":[],"p":[[15,"bool"],[3,"Pin",36],[3,"Context",37],[4,"Result",38],[4,"Poll",39],[4,"Option",40],[15,"usize"],[15,"tuple"],[8,"TryFuture",10],[8,"FusedFuture",10],[8,"TryStream",19],[8,"Stream",19],[8,"FusedStream",19]]},\
"futures_io":{"doc":"Asynchronous I/O","t":"IIIICCCCCCKKKKKLLKKLL","n":["AsyncBufRead","AsyncRead","AsyncSeek","AsyncWrite","Error","ErrorKind","IoSlice","IoSliceMut","Result","SeekFrom","consume","poll_close","poll_fill_buf","poll_flush","poll_read","poll_read_vectored","poll_read_vectored","poll_seek","poll_write","poll_write_vectored","poll_write_vectored"],"q":[[0,"futures_io"],[21,"core::pin"],[22,"core::task::wake"],[23,"std::io::error"],[24,"core::task::poll"],[25,"std::io"],[26,"std::io"]],"d":["Read bytes asynchronously.","Read bytes asynchronously.","Seek bytes asynchronously.","Write bytes asynchronously.","","","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","Attempt to close the object.","Attempt to return the contents of the internal buffer, …","Attempt to flush the object, ensuring that any buffered …","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","Attempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored","Attempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored","Attempt to seek to an offset, in bytes, in a stream.","Attempt to write bytes from <code>buf</code> into the object.","Attempt to write bytes from <code>bufs</code> into the object using …","Attempt to write bytes from <code>bufs</code> into the object using …"],"i":[0,0,0,0,0,0,0,0,0,0,13,14,13,14,15,15,15,16,14,14,14],"f":[0,0,0,0,0,0,0,0,0,0,[[[1,[-1]],2],3,[]],[[[1,[-1]],4],[[6,[[5,[3]]]]],[]],[[[1,[-1]],4],[[6,[[5,[[8,[7]]]]]]],[]],[[[1,[-1]],4],[[6,[[5,[3]]]]],[]],[[[1,[-1]],4,[8,[7]]],[[6,[[5,[2]]]]],[]],[[[1,[-1]],4,[8,[9]]],[[6,[[5,[2]]]]],[]],[[[1,[-1]],4,[8,[9]]],[[6,[[5,[2]]]]],[]],[[[1,[-1]],4,10],[[6,[[5,[11]]]]],[]],[[[1,[-1]],4,[8,[7]]],[[6,[[5,[2]]]]],[]],[[[1,[-1]],4,[8,[12]]],[[6,[[5,[2]]]]],[]],[[[1,[-1]],4,[8,[12]]],[[6,[[5,[2]]]]],[]]],"c":[],"p":[[3,"Pin",21],[15,"usize"],[15,"tuple"],[3,"Context",22],[6,"Result",23],[4,"Poll",24],[15,"u8"],[15,"slice"],[3,"IoSliceMut",25],[4,"SeekFrom",25],[15,"u64"],[3,"IoSlice",25],[8,"AsyncBufRead",0],[8,"AsyncWrite",0],[8,"AsyncRead",0],[8,"AsyncSeek",0]]},\
"futures_sink":{"doc":"Asynchronous sinks","t":"QIKKKK","n":["Error","Sink","poll_close","poll_flush","poll_ready","start_send"],"q":[[0,"futures_sink"],[6,"core::pin"],[7,"core::task::wake"],[8,"core::result"],[9,"core::task::poll"]],"d":["The type of value produced by the sink when an error …","A <code>Sink</code> is a value into which other values can be sent, …","Flush any remaining output and close this sink, if …","Flush any remaining output from this sink.","Attempts to prepare the <code>Sink</code> to receive a value.","Begin the process of sending a value to the sink. Each …"],"i":[6,0,6,6,6,6],"f":[0,0,[[[1,[-1]],2],[[5,[[4,[3]]]]],[]],[[[1,[-1]],2],[[5,[[4,[3]]]]],[]],[[[1,[-1]],2],[[5,[[4,[3]]]]],[]],[[[1,[-1]],-2],[[4,[3]]],[],[]]],"c":[],"p":[[3,"Pin",6],[3,"Context",7],[15,"tuple"],[4,"Result",8],[4,"Poll",9],[8,"Sink",0]]},\
"futures_task":{"doc":"Tools for working with tasks.","t":"ICDDICCCIDICDLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLFFLLLKKLLLLLLLLLLLLLLLLLLLKFF","n":["ArcWake","Context","FutureObj","LocalFutureObj","LocalSpawn","Poll","RawWaker","RawWakerVTable","Spawn","SpawnError","UnsafeFutureObj","Waker","WakerRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into_future","into_future","into_future_obj","into_raw","is_shutdown","new","new","new","new_unowned","noop_waker","noop_waker_ref","poll","poll","shutdown","spawn_local_obj","spawn_obj","status","status","status_local","status_local","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wake","wake","wake_by_ref","waker","waker_ref"],"q":[[0,"futures_task"],[84,"core::task::wake"],[85,"core::future::future"],[86,"core::fmt"],[87,"core::fmt"],[88,"core::pin"],[89,"core::marker"],[90,"core::mem::manually_drop"],[91,"core::task::wake"],[92,"core::result"],[93,"alloc::string"],[94,"core::any"],[95,"alloc::sync"]],"d":["A way of waking up a specific task.","","A custom trait object for polling futures, roughly akin to …","A custom trait object for polling futures, roughly akin to …","The <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …","","","","The <code>Spawn</code> trait allows for pushing futures onto an …","An error that occurred during spawning.","A custom implementation of a future trait object for …","","A <code>Waker</code> that is only valid for a given lifetime.","","","","","","","","","","Drops the future represented by the given fat pointer.","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.","Convert an owned instance into a (conceptually owned) fat …","Check whether spawning failed to the executor being shut …","Create a <code>LocalFutureObj</code> from a custom trait object …","Create a <code>FutureObj</code> from a custom trait object …","Create a new <code>WakerRef</code> from a <code>Waker</code> reference.","Create a new <code>WakerRef</code> from a <code>Waker</code> that must not be …","Create a new <code>Waker</code> which does nothing when <code>wake()</code> is …","Get a static reference to a <code>Waker</code> which does nothing when …","","","Spawning failed because the executor has been shut down.","Spawns a future that will be run to completion.","Spawns a future that will be run to completion.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","","","","","","","","","","","","","","Indicates that the associated task is ready to make …","Indicates that the associated task is ready to make …","Indicates that the associated task is ready to make …","Creates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.","Creates a reference to a <code>Waker</code> from a reference to …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,9,1,6,5,9,1,1,14,5,6,6,5,9,1,6,5,5,5,5,5,5,9,9,9,9,9,1,6,5,9,1,5,9,5,14,6,5,9,1,1,0,0,5,9,6,23,24,24,24,23,23,6,6,5,9,1,6,5,9,1,6,5,9,1,22,22,22,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,4],[[[5,[-1]]],4,[]],[[6,7],8],[[6,7],8],[[[5,[-1]],7],8,[]],[[[9,[-1]],7],8,[]],[[1,7],8],[-1,-1,[]],[[[11,[[10,[-1]]]]],[[5,[4]]],3],[[[11,[[10,[3]]]]],[[5,[4]]]],[[[9,[-1]]],[[5,[-1]]],[]],[[[10,[3]]],[[5,[4]]]],[[[10,[-1]]],[[5,[4]]],3],[-1,-1,[]],[-1,-1,[]],[[[11,[[10,[-1]]]]],[[9,[4]]],[3,12]],[[[10,[3]]],[[9,[4]]]],[[[11,[[10,[3]]]]],[[9,[4]]]],[[[10,[-1]]],[[9,[4]]],[3,12]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[5,[-1]]],[[9,[-1]]],[]],[-1,3,[]],[6,13],[-2,[[5,[-1]]],[],[[14,[-1]]]],[-2,[[9,[-1]]],[],[[14,[-1]],12]],[2,1],[[[15,[2]]],1],[[],2],[[],2],[[[11,[[5,[-1]]]],16],[[17,[-1]]],[]],[[[11,[[9,[-1]]]],16],[[17,[-1]]],[]],[[],6],[[-1,[5,[4]]],[[18,[4,6]]],[]],[[-1,[9,[4]]],[[18,[4,6]]],[]],[-1,[[18,[4,6]]],[]],[-1,[[18,[4,6]]],[]],[-1,[[18,[4,6]]],[]],[-1,[[18,[4,6]]],[]],[-1,19,[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[[21,[-1]]],4,[]],[[[21,[-1]]],4,[]],[[[21,[-1]]],4,[]],[[[21,[-1]]],2,22],[[[21,[-1]]],1,22]],"c":[],"p":[[3,"WakerRef",0],[3,"Waker",84],[8,"Future",85],[15,"tuple"],[3,"LocalFutureObj",0],[3,"SpawnError",0],[3,"Formatter",86],[6,"Result",86],[3,"FutureObj",0],[3,"Box",87],[3,"Pin",88],[8,"Send",89],[15,"bool"],[8,"UnsafeFutureObj",0],[3,"ManuallyDrop",90],[3,"Context",84],[4,"Poll",91],[4,"Result",92],[3,"String",93],[3,"TypeId",94],[3,"Arc",95],[8,"ArcWake",0],[8,"LocalSpawn",0],[8,"Spawn",0]]},\
"futures_util":{"doc":"Combinators and utilities for working with <code>Future</code>s, <code>Stream</code>…","t":"CCCCCCCCCCCCCCCCAAAAOOAADDDDDGDNNEDQDDDICNNIDNNDDDDDDDDDDDNGDDDDDDEDQDDDDDDDNDDDDDDDIIDDDDDEDDIDDLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLFLLLLLLFLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLFLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIIIIIIIIDDDDDDDDDCCDDCCDDDDDDDDDDDCDDDCDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLFFFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDDDDDDDGDDDDDDDDDDDDQDDDDDGDDDDIDDDDDDDQDNGDDDDDDQDDDDDDDDEDDDNDDDDDDDIIDDDDDDDDDDDDDDDDDDDDDDIIDDDDDFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLFLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLFFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLFAFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLIDCDDIICCCIDIICDLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLFFLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLKFF","n":["AsyncBufRead","AsyncBufReadExt","AsyncRead","AsyncReadExt","AsyncSeek","AsyncSeekExt","AsyncWrite","AsyncWriteExt","Future","FutureExt","Stream","StreamExt","TryFuture","TryFutureExt","TryStream","TryStreamExt","future","io","lock","never","pin_mut","ready","stream","task","AbortHandle","AbortRegistration","Abortable","Aborted","AndThen","BoxFuture","CatchUnwind","Done","Done","Either","ErrInto","Error","Flatten","FlattenStream","Fuse","FusedFuture","Future","Future","Future","FutureExt","FutureObj","Gone","Gone","Inspect","InspectErr","InspectOk","IntoFuture","IntoStream","Join","Join3","Join4","Join5","JoinAll","Lazy","Left","LocalBoxFuture","LocalFutureObj","Map","MapErr","MapInto","MapOk","MapOkOrElse","MaybeDone","NeverError","Ok","OkInto","OptionFuture","OrElse","Pending","PollFn","PollImmediate","Ready","Right","Select","SelectAll","SelectOk","Shared","Then","TryFlatten","TryFlattenStream","TryFuture","TryFutureExt","TryJoin","TryJoin3","TryJoin4","TryJoin5","TryJoinAll","TryMaybeDone","TrySelect","UnitError","UnsafeFutureObj","UnwrapOrElse","WeakShared","abort","abortable","and_then","and_then","as_pin_mut","as_pin_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","boxed_local","boxed_local","catch_unwind","catch_unwind","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","consume","default","downgrade","drop","drop","eq","equivalent","err","err_into","err_into","factor_first","factor_second","flatten","flatten","flatten_stream","flatten_stream","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","fuse","fuse","handle","inspect","inspect","inspect_err","inspect_err","inspect_ok","inspect_ok","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_inner","into_raw","into_stream","into_stream","is_aborted","is_aborted","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","join","join3","join4","join5","join_all","lazy","left_future","left_future","map","map","map_err","map_err","map_into","map_into","map_ok","map_ok","map_ok_or_else","map_ok_or_else","maybe_done","never_error","never_error","new","new_pair","now_or_never","now_or_never","ok","ok_into","ok_into","or_else","or_else","output_mut","output_mut","peek","pending","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_close","poll_fill_buf","poll_flush","poll_fn","poll_immediate","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_read","poll_read_vectored","poll_seek","poll_unpin","poll_unpin","poll_write","poll_write_vectored","ptr_eq","ptr_hash","ready","right_future","right_future","select","select_all","select_ok","shared","shared","size_hint","size_hint","size_hint","size_hint","strong_count","take_output","take_output","terminated","then","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_flatten","try_flatten","try_flatten_stream","try_flatten_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_join","try_join3","try_join4","try_join5","try_join_all","try_maybe_done","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_unpin","try_poll_unpin","try_select","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit_error","unit_error","unwrap_or_else","unwrap_or_else","upgrade","weak_count","AllowStdIo","AsyncBufRead","AsyncBufReadExt","AsyncRead","AsyncReadExt","AsyncSeek","AsyncSeekExt","AsyncWrite","AsyncWriteExt","BufReader","BufWriter","Chain","Close","Copy","CopyBuf","CopyBufAbortable","Cursor","Empty","Error","ErrorKind","FillBuf","Flush","IoSlice","IoSliceMut","LineWriter","Lines","Read","ReadExact","ReadHalf","ReadLine","ReadToEnd","ReadToString","ReadUntil","ReadVectored","Repeat","Result","ReuniteError","SeeKRelative","Seek","SeekFrom","Sink","Take","Window","Write","WriteAll","WriteHalf","WriteVectored","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","buffer","chain","clone","clone","clone_into","clone_into","close","cmp","consume","consume","consume","consume","consume","consume","consume","consume","consume","consume_unpin","copy","copy_buf","copy_buf_abortable","default","empty","end","eq","equivalent","fill_buf","fill_buf","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","limit","lines","new","new","new","new","new","new","partial_cmp","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_close","poll_close","poll_close","poll_close","poll_close","poll_close","poll_close","poll_close","poll_close","poll_close","poll_close","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_next","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read_vectored","poll_read_vectored","poll_read_vectored","poll_read_vectored","poll_read_vectored","poll_read_vectored","poll_read_vectored","poll_read_vectored","poll_seek","poll_seek","poll_seek","poll_seek","poll_seek","poll_seek_relative","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","position","read","read","read_exact","read_exact","read_line","read_to_end","read_to_end","read_to_string","read_to_string","read_until","read_vectored","read_vectored","repeat","reunite","reunite","seek","seek","seek_relative","set","set_limit","set_position","sink","split","start","stream_position","take","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity","with_capacity","write","write","write_all","write_all","write_fmt","write_vectored","write_vectored","MappedMutexGuard","Mutex","MutexGuard","MutexLockFuture","OwnedMutexGuard","OwnedMutexLockFuture","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_mut","into","into","into","into","into","into","into_future","into_future","into_inner","is_terminated","is_terminated","lock","lock_owned","map","map","new","poll","poll","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock_owned","type_id","type_id","type_id","type_id","type_id","type_id","Never","AbortHandle","AbortRegistration","Abortable","Aborted","All","AndThen","Any","BoxStream","BufferUnordered","Buffered","CatchUnwind","Chain","Chunks","Collect","Concat","Count","Cycle","Empty","Enumerate","ErrInto","Error","Filter","FilterMap","FlatMap","FlatMapUnordered","Flatten","FlattenUnordered","Fold","ForEach","ForEachConcurrent","Fuse","FusedStream","FuturesOrdered","FuturesUnordered","Inspect","InspectErr","InspectOk","IntoAsyncRead","IntoStream","Item","Iter","Left","LocalBoxStream","Map","MapErr","MapOk","Next","NextIf","NextIfEq","Ok","Once","OrElse","Peek","PeekMut","Peekable","Pending","PollFn","PollImmediate","PollNext","ReadyChunks","Repeat","RepeatWith","Right","Scan","Select","SelectAll","SelectNextSome","SelectWithStrategy","Skip","SkipWhile","Stream","StreamExt","StreamFuture","Take","TakeUntil","TakeWhile","Then","TryBufferUnordered","TryBuffered","TryChunks","TryChunksError","TryCollect","TryConcat","TryFilter","TryFilterMap","TryFlatten","TryFlattenUnordered","TryFold","TryForEach","TryForEachConcurrent","TryNext","TryReadyChunks","TryReadyChunksError","TrySkipWhile","TryStream","TryStreamExt","TryTakeWhile","TryUnfold","Unfold","Unzip","Zip","abortable","all","all","and_then","and_then","any","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","boxed_local","boxed_local","buffer_unordered","buffer_unordered","buffered","buffered","by_ref","by_ref","catch_unwind","catch_unwind","chain","chain","chunks","chunks","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","concat","concat","consume","count","count","cycle","cycle","default","default","default","default","drop","empty","enumerate","enumerate","eq","eq","eq","equivalent","equivalent","equivalent","err_into","err_into","extend","extend","extend","filter","filter","filter_map","filter_map","flat_map","flat_map","flat_map_unordered","flat_map_unordered","flatten","flatten","flatten_unordered","flatten_unordered","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","for_each","for_each","for_each_concurrent","for_each_concurrent","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","fuse","fuse","futures_unordered","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","hash","inspect","inspect","inspect_err","inspect_err","inspect_ok","inspect_ok","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_async_read","into_async_read","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_stream","into_stream","is_done","is_empty","is_stopped","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","iter","left_stream","left_stream","len","map","map","map_err","map_err","map_ok","map_ok","new","next","next","next_if","next_if_eq","once","or_else","or_else","peek","peek_mut","peekable","peekable","pending","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_close","poll_fill_buf","poll_flush","poll_fn","poll_immediate","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next_unpin","poll_next_unpin","poll_peek","poll_peek_mut","poll_read","poll_write","push","push_back","push_front","ready_chunks","ready_chunks","repeat","repeat_with","right_stream","right_stream","scan","scan","select","select_all","select_all","select_next_some","select_next_some","select_with_strategy","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip","skip_while","skip_while","spawn_local_obj","spawn_obj","take","take","take_future","take_result","take_until","take_until","take_while","take_while","then","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","try_all","try_all","try_any","try_any","try_buffer_unordered","try_buffer_unordered","try_buffered","try_buffered","try_chunks","try_chunks","try_collect","try_collect","try_concat","try_concat","try_filter","try_filter","try_filter_map","try_filter_map","try_flatten","try_flatten","try_flatten_unordered","try_flatten_unordered","try_fold","try_fold","try_for_each","try_for_each","try_for_each_concurrent","try_for_each_concurrent","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_next","try_next","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next_unpin","try_poll_next_unpin","try_ready_chunks","try_ready_chunks","try_skip_while","try_skip_while","try_take_while","try_take_while","try_unfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unzip","unzip","zip","zip","FuturesUnordered","IntoIter","Iter","IterMut","IterPinMut","IterPinRef","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","iter_pin_mut","iter_pin_ref","len","new","next","next","next","next","next","push","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","IntoIter","Iter","IterMut","SelectAll","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","len","new","next","next","next","push","select_all","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArcWake","AtomicWaker","Context","FutureObj","LocalFutureObj","LocalSpawn","LocalSpawnExt","Poll","RawWaker","RawWakerVTable","Spawn","SpawnError","SpawnExt","UnsafeFutureObj","Waker","WakerRef","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into_future","into_future","into_future_obj","into_raw","is_shutdown","new","new","new","new","new_unowned","noop_waker","noop_waker_ref","poll","poll","register","shutdown","spawn","spawn","spawn_local","spawn_local","spawn_local_obj","spawn_obj","status","status_local","take","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","try_poll","type_id","type_id","type_id","type_id","type_id","wake","wake","wake_by_ref","waker","waker_ref"],"q":[[0,"futures_util"],[24,"futures_util::future"],[869,"futures_util::io"],[1423,"futures_util::lock"],[1506,"futures_util::never"],[1507,"futures_util::stream"],[2978,"futures_util::stream::futures_unordered"],[3048,"futures_util::stream::select_all"],[3093,"futures_util::task"],[3196,"core::future::future"],[3197,"core::marker"],[3198,"core::ops::function"],[3199,"core::pin"],[3200,"core::marker"],[3201,"core::clone"],[3202,"core::option"],[3203,"core::result"],[3204,"core::fmt"],[3205,"core::fmt"],[3206,"core::marker"],[3207,"core::task::wake"],[3208,"core::task::poll"],[3209,"core::ops::function"],[3210,"std::io"],[3211,"std::io"],[3212,"alloc::string"],[3213,"core::any"],[3214,"core::convert"],[3215,"core::convert"],[3216,"core::cmp"],[3217,"core::cmp"],[3218,"std::io"],[3219,"core::fmt"],[3220,"core::iter::traits::collect"],[3221,"core::task::wake"],[3222,"core::mem::manually_drop"]],"d":["","","","","","","","","","","","","","","","","Asynchronous values.","Asynchronous I/O.","Futures-powered synchronization primitives.","This module contains the <code>Never</code> type.","Pins a value on the stack.","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","Asynchronous streams.","Tools for working with tasks.","A handle to an <code>Abortable</code> task.","A registration handle for an <code>Abortable</code> task. Values of …","A future/stream which can be remotely short-circuited …","Indicator that the <code>Abortable</code> task was aborted.","Future for the <code>and_then</code> method.","An owned dynamically typed <code>Future</code> for use in cases where …","Future for the <code>catch_unwind</code> method.","The output of the completed future","The output of the completed future","Combines two different futures, streams, or sinks having …","Future for the <code>err_into</code> method.","The type of failures yielded by this future","Future for the <code>flatten</code> method.","Stream for the <code>flatten_stream</code> method.","Future for the <code>fuse</code> method.","A future which tracks whether or not the underlying future …","","A not-yet-completed future","A not-yet-completed future","An extension trait for <code>Future</code>s that provides a variety of …","A custom trait object for polling futures, roughly akin to …","The empty variant after the result of a <code>MaybeDone</code> has been …","The empty variant after the result of a <code>TryMaybeDone</code> has …","Future for the <code>inspect</code> method.","Future for the <code>inspect_err</code> method.","Future for the <code>inspect_ok</code> method.","Future for the <code>into_future</code> method.","Stream for the <code>into_stream</code> method.","Future for the <code>join</code> function.","Future for the <code>join3</code> function.","Future for the <code>join4</code> function.","Future for the <code>join5</code> function.","Future for the <code>join_all</code> function.","Future for the <code>lazy</code> function.","First branch of the type","<code>BoxFuture</code>, but without the <code>Send</code> requirement.","A custom trait object for polling futures, roughly akin to …","Future for the <code>map</code> method.","Future for the <code>map_err</code> method.","Future for the <code>map_into</code> combinator.","Future for the <code>map_ok</code> method.","Future for the <code>map_ok_or_else</code> method.","A future that may have completed.","Future for the <code>never_error</code> combinator.","The type of successful values yielded by this future","Future for the <code>ok_into</code> method.","A future representing a value which may or may not be …","Future for the <code>or_else</code> method.","Future for the <code>pending()</code> function.","Future for the <code>poll_fn</code> function.","Future for the <code>poll_immediate</code> function.","Future for the <code>ready</code> function.","Second branch of the type","Future for the <code>select()</code> function.","Future for the <code>select_all</code> function.","Future for the <code>select_ok</code> function.","Future for the <code>shared</code> method.","Future for the <code>then</code> method.","Future for the <code>try_flatten</code> method.","Future for the <code>try_flatten_stream</code> method.","A convenience for futures that return <code>Result</code> values that …","Adapters specific to <code>Result</code>-returning futures","Future for the <code>try_join</code> function.","Future for the <code>try_join3</code> function.","Future for the <code>try_join4</code> function.","Future for the <code>try_join5</code> function.","Future for the <code>try_join_all</code> function.","A future that may have completed with an error.","Future for the <code>try_select()</code> function.","Future for the <code>unit_error</code> combinator.","A custom implementation of a future trait object for …","Future for the <code>unwrap_or_else</code> method.","A weak reference to a <code>Shared</code> that can be upgraded much …","Abort the <code>Abortable</code> stream/future associated with this …","Creates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …","Executes another future after this one resolves …","Executes another future after this one resolves …","Convert <code>Pin&lt;&amp;mut Either&lt;A, B&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;A, B&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;A&gt;, Pin&lt;&amp;B&gt;&gt;</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap the future in a Box, pinning it.","Wrap the future in a Box, pinning it.","Wrap the future in a Box, pinning it.","Wrap the future in a Box, pinning it.","Catches unwinding panics while polling the future.","Catches unwinding panics while polling the future.","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>WeakShared</code> for this <code>Shared</code>.","Drops the future represented by the given fat pointer.","","","","Create a future that is immediately ready with an error …","Maps this future’s <code>Error</code> to a new error type using the …","Maps this future’s <code>Error</code> to a new error type using the …","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Flatten the execution of this future when the output of …","Flatten the execution of this future when the output of …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Fuse a future such that <code>poll</code> will never again be called …","Fuse a future such that <code>poll</code> will never again be called …","Create an <code>AbortHandle</code> from the given <code>AbortRegistration</code>.","Do something with the output of a future before passing it …","Do something with the output of a future before passing it …","Do something with the error value of a future before …","Do something with the error value of a future before …","Do something with the success value of a future before …","Do something with the success value of a future before …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Wraps a <code>TryFuture</code> into a type that implements <code>Future</code>.","Wraps a <code>TryFuture</code> into a type that implements <code>Future</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps the value from this immediately ready future.","Consumes this combinator, returning the underlying futures.","Extract the value of an either over two equivalent types.","Convert an owned instance into a (conceptually owned) fat …","Convert this future into a single element stream.","Convert this future into a single element stream.","Checks whether the task has been aborted. Note that all …","Checks whether <code>AbortHandle::abort</code> was <em>called</em> on any …","Returns <code>true</code> if the underlying future should no longer be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Joins the result of two futures, waiting for them both to …","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Creates a future which represents a collection of the …","Creates a new future that allows delayed execution of a …","Wrap this future in an <code>Either</code> future, making it the …","Wrap this future in an <code>Either</code> future, making it the …","Map this future’s output to a different type, returning …","Map this future’s output to a different type, returning …","Maps this future’s error value to a different value.","Maps this future’s error value to a different value.","Map this future’s output to a different type, returning …","Map this future’s output to a different type, returning …","Maps this future’s success value to a different value.","Maps this future’s success value to a different value.","Maps this future’s success value to a different value, …","Maps this future’s success value to a different value, …","Wraps a future into a <code>MaybeDone</code>","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Creates a new <code>Abortable</code> future/stream using an existing …","Creates an (<code>AbortHandle</code>, <code>AbortRegistration</code>) pair which can …","Evaluates and consumes the future, returning the resulting …","Evaluates and consumes the future, returning the resulting …","Create a future that is immediately ready with a success …","Maps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.","Maps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.","Executes another future if this one resolves to an error. …","Executes another future if this one resolves to an error. …","Returns an <code>Option</code> containing a mutable reference to the …","Returns an <code>Option</code> containing a mutable reference to the …","Returns <code>Some</code> containing a reference to this <code>Shared</code>’s …","Creates a future which never resolves, representing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new future wrapping around a function returning …","Creates a future that is immediately ready with an Option …","","","","","","","","","","A convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …","A convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …","","","Returns <code>true</code> if the two <code>Shared</code>s point to the same future …","Hashes the internal state of this <code>Shared</code> in a way that’s …","Creates a future that is immediately ready with a value.","Wrap this future in an <code>Either</code> future, making it the …","Wrap this future in an <code>Either</code> future, making it the …","Waits for either one of two differently-typed futures to …","Creates a new future which will select over a list of …","Creates a new future which will select the first …","Create a cloneable handle to this future where all handles …","Create a cloneable handle to this future where all handles …","","","","","Gets the number of strong pointers to this allocation.","Attempt to take the output of a <code>MaybeDone</code> without driving …","Attempt to take the output of a <code>TryMaybeDone</code> without …","Creates a new <code>Fuse</code>-wrapped future which is already …","Chain on a computation for when a future finished, passing …","Chain on a computation for when a future finished, passing …","","","","","","","","","","","","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Joins the result of two futures, waiting for them both to …","Same as <code>try_join</code>, but with more futures.","Same as <code>try_join</code>, but with more futures.","Same as <code>try_join</code>, but with more futures.","Creates a future which represents either a collection of …","Wraps a future into a <code>TryMaybeDone</code>","Poll this <code>TryFuture</code> as if it were a <code>Future</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A convenience method for calling <code>TryFuture::try_poll</code> on …","A convenience method for calling <code>TryFuture::try_poll</code> on …","Waits for either one of two differently-typed futures to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Unwraps this future’s output, producing a future with …","Unwraps this future’s output, producing a future with …","Attempts to upgrade this <code>WeakShared</code> into a <code>Shared</code>.","Gets the number of weak pointers to this allocation.","A simple wrapper type which allows types which implement …","Read bytes asynchronously.","An extension trait which adds utility methods to …","Read bytes asynchronously.","An extension trait which adds utility methods to <code>AsyncRead</code> …","Seek bytes asynchronously.","An extension trait which adds utility methods to <code>AsyncSeek</code> …","Write bytes asynchronously.","An extension trait which adds utility methods to <code>AsyncWrite</code>…","The <code>BufReader</code> struct adds buffering to any reader.","Wraps a writer and buffers its output.","Reader for the <code>chain</code> method.","Future for the <code>close</code> method.","Future for the <code>copy()</code> function.","Future for the <code>copy_buf()</code> function.","Future for the [<code>copy_buf()</code>] function.","A <code>Cursor</code> wraps an in-memory buffer and provides it with a …","Reader for the <code>empty()</code> function.","","","Future for the <code>fill_buf</code> method.","Future for the <code>flush</code> method.","","","Wrap a writer, like <code>BufWriter</code> does, but prioritizes …","Stream for the <code>lines</code> method.","Future for the <code>read</code> method.","Future for the <code>read_exact</code> method.","The readable half of an object returned from …","Future for the <code>read_line</code> method.","Future for the <code>read_to_end</code> method.","Future for the <code>read_to_string</code> method.","Future for the <code>read_until</code> method.","Future for the <code>read_vectored</code> method.","Reader for the <code>repeat()</code> function.","","Error indicating a <code>ReadHalf&lt;T&gt;</code> and <code>WriteHalf&lt;T&gt;</code> were not …","Future for the <code>BufReader::seek_relative</code> method.","Future for the <code>seek</code> method.","","Writer for the <code>sink()</code> function.","Reader for the <code>take</code> method.","An owned window around an underlying buffer.","Future for the <code>write</code> method.","Future for the <code>write_all</code> method.","The writable half of an object returned from …","Future for the <code>write_vectored</code> method.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the internally buffered data.","Returns a reference to the internally buffered data.","Returns a reference to <code>buf_writer</code>’s internally buffered …","Creates an adaptor which will chain this stream with …","","","","","Creates a future which will entirely close this <code>AsyncWrite</code>.","","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","","","","","","A convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …","Creates a future which copies all the bytes from one …","Creates a future which copies all the bytes from one …","Creates a future which copies all the bytes from one …","","Constructs a new handle to an empty reader.","Returns the end index of this window into the underlying …","","","Creates a future which will wait for a non-empty buffer to …","","Creates a future which will entirely flush this <code>AsyncWrite</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the contained IO object.","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Gets mutable references to the underlying readers in this …","Gets a mutable reference to the underlying value in this …","Acquires a mutable reference to the underlying sink or …","Gets a mutable reference to the underlying buffer inside …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Gets pinned mutable references to the underlying readers …","Acquires a pinned mutable reference to the underlying sink …","Returns a reference to the contained IO object.","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Gets references to the underlying readers in this <code>Chain</code>.","Gets a reference to the underlying value in this cursor.","Acquires a reference to the underlying sink or stream that …","Gets a shared reference to the underlying buffer inside of …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Consumes self and returns the contained IO object.","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes the <code>Chain</code>, returning the wrapped readers.","Consumes this cursor, returning the underlying value.","Consumes this combinator, returning the underlying sink or …","Consumes this <code>Window</code>, returning the underlying buffer.","Returns the remaining number of bytes that can be read …","Returns a stream over the lines of this reader. This …","Creates a new <code>AllowStdIo</code> from an existing IO object.","Creates a new <code>BufReader</code> with a default buffer capacity. …","Creates a new <code>BufWriter</code> with a default buffer capacity. …","Create a new <code>LineWriter</code> with default buffer capacity. The …","Creates a new cursor wrapping the provided underlying …","Creates a new window around the buffer <code>t</code> defaulting to the …","","","","","","","","","","","","","","","","","","","","Attempt to close the object.","","","","","Forward to <code>buf_writer</code> ’s <code>BufWriter::poll_close()</code>","","","","","","Attempt to return the contents of the internal buffer, …","","","","","","","","Attempt to flush the object, ensuring that any buffered …","","","","","Forward to <code>buf_writer</code> ’s <code>BufWriter::poll_flush()</code>","","","","","","","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","","","","","","","","","","Attempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored","","","","","","","","Attempt to seek to an offset, in bytes, in a stream.","","Seek to an offset, in bytes, in the underlying reader.","Seek to the offset, in bytes, in the underlying writer.","","Attempts to seek relative to the current position. If the …","Attempt to write bytes from <code>buf</code> into the object.","","","","","","","","","","","Attempt to write bytes from <code>bufs</code> into the object using …","","","","","","","","","","","Returns the current position of this cursor.","Tries to read some bytes directly into the given <code>buf</code> in …","","Creates a future which will read exactly enough bytes to …","","Creates a future which will read all the bytes associated …","Creates a future which will read all the bytes from this …","","Creates a future which will read all the bytes from this …","","Creates a future which will read all the bytes associated …","Creates a future which will read from the <code>AsyncRead</code> into …","","Creates an instance of a reader that infinitely repeats …","Attempts to put the two “halves” of a split …","Attempts to put the two “halves” of a split …","Creates a future which will seek an IO object, and then …","","Seeks relative to the current position. If the new …","Changes the range of this window to the range specified.","Sets the number of bytes that can be read before this …","Sets the position of this cursor.","Creates an instance of a writer which will successfully …","Helper method for splitting this read/write object into …","Returns the starting index of this window into the …","Creates a future which will return the current seek …","Creates an AsyncRead adapter which will read at most <code>limit</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>BufReader</code> with the specified buffer capacity.","Creates a new <code>BufWriter</code> with the specified buffer capacity.","Creates a new <code>LineWriter</code> with the specified buffer …","Creates a future which will write bytes from <code>buf</code> into the …","","Write data into this object.","","","Creates a future which will write bytes from <code>bufs</code> into the …","","An RAII guard returned by the <code>MutexGuard::map</code> and …","A futures-aware mutex.","An RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. …","A future which resolves when the target mutex has been …","An RAII guard returned by the <code>lock_owned</code> and <code>try_lock_owned</code>…","A future which resolves when the target mutex has been …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes this mutex, returning the underlying data.","","","Acquire the lock asynchronously.","Acquire the lock asynchronously.","Returns a locked view over a portion of the locked data.","Returns a locked view over a portion of the locked data.","Creates a new futures-aware mutex.","","","","","","","","","","","","","","","Attempt to acquire the lock immediately.","Attempt to acquire the lock immediately.","","","","","","","A type with no possible values.","A handle to an <code>Abortable</code> task.","A registration handle for an <code>Abortable</code> task. Values of …","A future/stream which can be remotely short-circuited …","Indicator that the <code>Abortable</code> task was aborted.","Future for the <code>all</code> method.","Stream for the <code>and_then</code> method.","Future for the <code>any</code> method.","An owned dynamically typed <code>Stream</code> for use in cases where …","Stream for the <code>buffer_unordered</code> method.","Stream for the <code>buffered</code> method.","Stream for the <code>catch_unwind</code> method.","Stream for the <code>chain</code> method.","Stream for the <code>chunks</code> method.","Future for the <code>collect</code> method.","Future for the <code>concat</code> method.","Future for the <code>count</code> method.","Stream for the <code>cycle</code> method.","Stream for the <code>empty</code> function.","Stream for the <code>enumerate</code> method.","Stream for the <code>err_into</code> method.","The type of failures yielded by this future","Stream for the <code>filter</code> method.","Stream for the <code>filter_map</code> method.","Stream for the <code>flat_map</code> method.","Stream for the <code>flat_map_unordered</code> method.","Stream for the <code>flatten</code> method.","Stream for the <code>flatten_unordered</code> method.","Future for the <code>fold</code> method.","Future for the <code>for_each</code> method.","Future for the <code>for_each_concurrent</code> method.","Stream for the <code>fuse</code> method.","A stream which tracks whether or not the underlying stream …","An unbounded queue of futures.","A set of futures which may complete in any order.","Stream for the <code>inspect</code> method.","Stream for the <code>inspect_err</code> method.","Stream for the <code>inspect_ok</code> method.","Reader for the <code>into_async_read</code> method.","Stream for the <code>into_stream</code> method.","Values yielded by the stream.","Stream for the <code>iter</code> function.","Poll the first stream.","<code>BoxStream</code>, but without the <code>Send</code> requirement.","Stream for the <code>map</code> method.","Stream for the <code>map_err</code> method.","Stream for the <code>map_ok</code> method.","Future for the <code>next</code> method.","Future for the <code>Peekable::next_if</code> method.","Future for the <code>Peekable::next_if_eq</code> method.","The type of successful values yielded by this future","A stream which emits single element and then EOF.","Stream for the <code>or_else</code> method.","Future for the <code>Peekable::peek</code> method.","Future for the <code>Peekable::peek_mut</code> method.","A <code>Stream</code> that implements a <code>peek</code> method.","Stream for the <code>pending()</code> function.","Stream for the <code>poll_fn</code> function.","Stream for the poll_immediate function.","Type to tell <code>SelectWithStrategy</code> which stream to poll next.","Stream for the <code>ready_chunks</code> method.","Stream for the <code>repeat</code> function.","An stream that repeats elements of type <code>A</code> endlessly by …","Poll the second stream.","Stream for the <code>scan</code> method.","Stream for the <code>select()</code> function.","An unbounded set of streams","Future for the <code>select_next_some</code> method.","Stream for the <code>select_with_strategy()</code> function. See …","Stream for the <code>skip</code> method.","Stream for the <code>skip_while</code> method.","A stream of values produced asynchronously.","An extension trait for <code>Stream</code>s that provides a variety of …","Future for the <code>into_future</code> method.","Stream for the <code>take</code> method.","Stream for the <code>take_until</code> method.","Stream for the <code>take_while</code> method.","Stream for the <code>then</code> method.","Stream for the <code>try_buffer_unordered</code> method.","Stream for the <code>try_buffered</code> method.","Stream for the <code>try_chunks</code> method.","Error indicating, that while chunk was collected inner …","Future for the <code>try_collect</code> method.","Future for the <code>try_concat</code> method.","Stream for the <code>try_filter</code> method.","Stream for the <code>try_filter_map</code> method.","Stream for the <code>try_flatten</code> method.","Stream for the <code>try_flatten_unordered</code> method.","Future for the <code>try_fold</code> method.","Future for the <code>try_for_each</code> method.","Future for the <code>try_for_each_concurrent</code> method.","Future for the <code>try_next</code> method.","Stream for the <code>try_ready_chunks</code> method.","Error indicating, that while chunk was collected inner …","Stream for the <code>try_skip_while</code> method.","A convenience for streams that return <code>Result</code> values that …","Adapters specific to <code>Result</code>-returning streams","Stream for the <code>try_take_while</code> method.","Stream for the <code>try_unfold</code> function.","Stream for the <code>unfold</code> function.","Future for the <code>unzip</code> method.","Stream for the <code>zip</code> method.","Creates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …","Execute predicate over asynchronous stream, and return <code>true</code>…","Execute predicate over asynchronous stream, and return <code>true</code>…","Chain on a computation for when a value is ready, passing …","Chain on a computation for when a value is ready, passing …","Execute predicate over asynchronous stream, and return <code>true</code>…","Execute predicate over asynchronous stream, and return <code>true</code>…rap the stream in a Box, pinning it.","Wrap the stream in a Box, pinning it.","Wrap the stream in a Box, pinning it.","Wrap the stream in a Box, pinning it.","An adaptor for creating a buffered list of pending futures …","An adaptor for creating a buffered list of pending futures …","An adaptor for creating a buffered list of pending futures.","An adaptor for creating a buffered list of pending futures.","Borrows a stream, rather than consuming it.","Borrows a stream, rather than consuming it.","Catches unwinding panics while polling the stream.","Catches unwinding panics while polling the stream.","Adapter for chaining two streams.","Adapter for chaining two streams.","An adaptor for chunking up items of the stream inside a …","An adaptor for chunking up items of the stream inside a …","","","","","","","","","","","","","","","Transforms a stream into a collection, returning a future …","Transforms a stream into a collection, returning a future …","Concatenate all items of a stream into a single extendable …","Concatenate all items of a stream into a single extendable …","","Drives the stream to completion, counting the number of …","Drives the stream to completion, counting the number of …","Repeats a stream endlessly.","Repeats a stream endlessly.","","","","","","Creates a stream which contains no elements.","Creates a stream which gives the current iteration count …","Creates a stream which gives the current iteration count …","","","","","","","Wraps the current stream in a new stream which converts …","Wraps the current stream in a new stream which converts …","","","","Filters the values produced by this stream according to …","Filters the values produced by this stream according to …","Filters the values produced by this stream while …","Filters the values produced by this stream while …","Maps a stream like <code>StreamExt::map</code> but flattens nested …","Maps a stream like <code>StreamExt::map</code> but flattens nested …","Maps a stream like <code>StreamExt::map</code> but flattens nested …","Maps a stream like <code>StreamExt::map</code> but flattens nested …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute an accumulating asynchronous computation over a …","Execute an accumulating asynchronous computation over a …","Runs this stream to completion, executing the provided …","Runs this stream to completion, executing the provided …","Runs this stream to completion, executing the provided …","Runs this stream to completion, executing the provided …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Fuse a stream such that <code>poll_next</code> will never again be …","Fuse a stream such that <code>poll_next</code> will never again be …","An unbounded set of futures.","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying streams …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying streams …","Acquires a mutable reference to the underlying streams …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying …","Acquires a pinned mutable reference to the underlying …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying streams that this …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying streams that this …","Acquires a reference to the underlying streams that this …","","Do something with each item of this stream, afterwards …","Do something with each item of this stream, afterwards …","Do something with the error value of this stream, …","Do something with the error value of this stream, …","Do something with the success value of this stream, …","Do something with the success value of this stream, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adapter that converts this stream into an <code>AsyncBufRead</code>.","Adapter that converts this stream into an <code>AsyncBufRead</code>.","Converts this stream into a future of …","Converts this stream into a future of …","","","","","","","","","","","","","","","","","","","","","","","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying streams.","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying streams.","Consumes this combinator, returning the underlying streams.","","","","","","","Wraps a <code>TryStream</code> into a type that implements <code>Stream</code>","Wraps a <code>TryStream</code> into a type that implements <code>Stream</code>","Returns whether the underlying stream has finished or not.","Returns <code>true</code> if the queue contains no futures","Whether the stream was stopped yet by the stopping future …","Returns <code>true</code> if the stream should no longer be polled.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an <code>Iterator</code> into a <code>Stream</code> which is always ready …","Wrap this stream in an <code>Either</code> stream, making it the …","Wrap this stream in an <code>Either</code> stream, making it the …","Returns the number of futures contained in the queue.","Maps this stream’s items to a different type, returning …","Maps this stream’s items to a different type, returning …","Wraps the current stream in a new stream which maps the …","Wraps the current stream in a new stream which maps the …","Wraps the current stream in a new stream which maps the …","Wraps the current stream in a new stream which maps the …","Constructs a new, empty <code>FuturesOrdered</code>","Creates a future that resolves to the next item in the …","Creates a future that resolves to the next item in the …","Creates a future which will consume and return the next …","Creates a future which will consume and return the next …","Creates a stream of a single element.","Chain on a computation for when an error happens, passing …","Chain on a computation for when an error happens, passing …","Produces a future which retrieves a reference to the next …","Produces a future which retrieves a mutable reference to …","Creates a new stream which exposes a <code>peek</code> method.","Creates a new stream which exposes a <code>peek</code> method.","Creates a stream which never returns any elements.","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new stream wrapping a function returning …","Creates a new stream that always immediately returns …","Attempt to pull out the next value of this stream, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>","A convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>","Peek retrieves a reference to the next item in the stream.","Peek retrieves a mutable reference to the next item in the …","","","Push a future into the queue.","Pushes a future to the back of the queue.","Pushes a future to the front of the queue.","An adaptor for chunking up ready items of the stream …","An adaptor for chunking up ready items of the stream …","Create a stream which produces the same item repeatedly.","Creates a new stream that repeats elements of type <code>A</code> …","Wrap this stream in an <code>Either</code> stream, making it the …","Wrap this stream in an <code>Either</code> stream, making it the …","Combinator similar to <code>StreamExt::fold</code> that holds internal …","Combinator similar to <code>StreamExt::fold</code> that holds internal …","This function will attempt to pull items from both …","An unbounded set of streams","Convert a list of streams into a <code>Stream</code> of results from …","Returns a <code>Future</code> that resolves when the next item in this …","Returns a <code>Future</code> that resolves when the next item in this …","This function will attempt to pull items from both …","Returns the bounds on the remaining length of the stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new stream which skips <code>n</code> items of the underlying …","Creates a new stream which skips <code>n</code> items of the underlying …","Skip elements on this stream while the provided …","Skip elements on this stream while the provided …","","","Creates a new stream of at most <code>n</code> items of the underlying …","Creates a new stream of at most <code>n</code> items of the underlying …","Extract the stopping future out of the combinator. The …","Once the stopping future is resolved, this method can be …","Take elements from this stream until the provided future …","Take elements from this stream until the provided future …","Take elements from this stream while the provided …","Take elements from this stream while the provided …","Computes from this stream’s items new items of a …","Computes from this stream’s items new items of a …","","","","","","","","","","Toggle the value and return the old one.","Attempt to execute a predicate over an asynchronous stream …","Attempt to execute a predicate over an asynchronous stream …","Attempt to execute a predicate over an asynchronous stream …","Attempt to execute a predicate over an asynchronous stream …","Attempt to execute several futures from a stream …","Attempt to execute several futures from a stream …","Attempt to execute several futures from a stream …","Attempt to execute several futures from a stream …","An adaptor for chunking up successful items of the stream …","An adaptor for chunking up successful items of the stream …","Attempt to transform a stream into a collection, returning …","Attempt to transform a stream into a collection, returning …","Attempt to concatenate all items of a stream into a single …","Attempt to concatenate all items of a stream into a single …","Attempt to filter the values produced by this stream …","Attempt to filter the values produced by this stream …","Attempt to filter the values produced by this stream while …","Attempt to filter the values produced by this stream while …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","Attempt to execute an accumulating asynchronous …","Attempt to execute an accumulating asynchronous …","Attempts to run this stream to completion, executing the …","Attempts to run this stream to completion, executing the …","Attempts to run this stream to completion, executing the …","Attempts to run this stream to completion, executing the …reates a future that attempts to resolve the next item in …","Creates a future that attempts to resolve the next item in …","","","","","","","","","","Poll this <code>TryStream</code> as if it were a <code>Stream</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A convenience method for calling <code>TryStream::try_poll_next</code> …","A convenience method for calling <code>TryStream::try_poll_next</code> …","An adaptor for chunking up successful, ready items of the …","An adaptor for chunking up successful, ready items of the …","Skip elements on this stream while the provided …","Skip elements on this stream while the provided …","Take elements on this stream while the provided …","Take elements on this stream while the provided …","Creates a <code>TryStream</code> from a seed and a closure returning a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Stream</code> from a seed and a closure returning a …","Converts a stream of pairs into a future, which resolves …","Converts a stream of pairs into a future, which resolves …","An adapter for zipping two streams together.","An adapter for zipping two streams together.","A set of futures which may complete in any order.","Owned iterator over all futures in the unordered set.","Immutable iterator over all the futures in the unordered …","Mutable iterator over all futures in the unordered set.","Mutable iterator over all futures in the unordered set.","Immutable iterator over all futures in the unordered set.","","","","","","","","","","","Clears the set, removing all futures.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if the set contains no futures.","Returns an iterator that allows inspecting each future in …","Returns an iterator that allows modifying each future in …","Returns an iterator that allows modifying each future in …","Returns an iterator that allows inspecting each future in …","Returns the number of futures contained in the set.","Constructs a new, empty <code>FuturesUnordered</code>.","","","","","","Push a future into the set.","","","","","","","","","","","","","","","","","","","","","Owned iterator over all streams in the unordered set.","Immutable iterator over all streams in the unordered set.","Mutable iterator over all streams in the unordered set.","An unbounded set of streams","","","","","","","Clears the set, removing all streams.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if the set contains no streams","Returns an iterator that allows inspecting each stream in …","Returns an iterator that allows modifying each stream in …","Returns the number of streams contained in the set.","Constructs a new, empty <code>SelectAll</code>","","","","Push a stream into the set.","Convert a list of streams into a <code>Stream</code> of results from …","","","","","","","","","","","","","A way of waking up a specific task.","A synchronization primitive for task wakeup.","","A custom trait object for polling futures, roughly akin to …","A custom trait object for polling futures, roughly akin to …","The <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …","Extension trait for <code>LocalSpawn</code>.","","","","The <code>Spawn</code> trait allows for pushing futures onto an …","An error that occurred during spawning.","Extension trait for <code>Spawn</code>.","A custom implementation of a future trait object for …","","A <code>Waker</code> that is only valid for a given lifetime.","","","","","","","","","","","","","Drops the future represented by the given fat pointer.","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.","Convert an owned instance into a (conceptually owned) fat …","Check whether spawning failed to the executor being shut …","Create a <code>LocalFutureObj</code> from a custom trait object …","Create an <code>AtomicWaker</code>.","Create a <code>FutureObj</code> from a custom trait object …","Create a new <code>WakerRef</code> from a <code>Waker</code> reference.","Create a new <code>WakerRef</code> from a <code>Waker</code> that must not be …","Create a new <code>Waker</code> which does nothing when <code>wake()</code> is …","Get a static reference to a <code>Waker</code> which does nothing when …","","","Registers the waker to be notified on calls to <code>wake</code>.","Spawning failed because the executor has been shut down.","Spawns a task that polls the given future with output <code>()</code> to","Spawns a task that polls the given future with output <code>()</code> to","Spawns a task that polls the given future with output <code>()</code> to","Spawns a task that polls the given future with output <code>()</code> to","Spawns a future that will be run to completion.","Spawns a future that will be run to completion.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","Returns the last <code>Waker</code> passed to <code>register</code>, so that the …","","","","","","","","","","","","","","","","","","","Indicates that the associated task is ready to make …","Calls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>.","Indicates that the associated task is ready to make …","Creates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.","Creates a reference to a <code>Waker</code> from a reference to …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,59,0,0,8,0,0,0,0,0,58,59,0,0,58,59,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,265,265,9,9,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,266,266,266,266,266,266,16,17,18,19,21,22,9,3,1,23,16,17,18,19,21,22,9,3,1,23,9,19,16,262,16,23,23,0,265,265,9,9,266,266,266,266,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,23,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,35,37,65,71,266,266,72,266,266,265,265,265,265,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,16,265,265,34,35,37,38,30,39,41,42,43,44,45,14,46,47,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,22,65,9,262,266,266,3,1,76,16,38,30,31,39,40,41,42,43,44,45,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,9,9,0,0,0,0,0,0,266,266,266,266,265,265,266,266,265,265,265,265,0,266,266,3,1,266,266,0,265,265,265,265,58,59,16,0,16,34,35,37,38,30,39,41,42,43,44,45,14,46,47,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,9,9,9,0,0,31,40,48,21,9,3,9,9,9,266,266,9,9,16,16,0,266,266,0,0,0,266,266,31,40,48,9,16,58,59,38,266,266,16,17,18,19,21,22,9,3,1,23,23,265,265,265,265,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,0,0,0,0,0,0,8,16,34,37,38,30,39,41,42,43,44,45,14,46,47,5,49,29,50,51,52,53,54,55,56,57,18,59,22,66,67,68,69,70,71,9,3,31,40,48,9,3,265,265,0,16,17,34,35,37,38,30,31,39,40,41,42,43,44,45,14,46,47,48,5,49,29,50,51,52,53,54,55,56,57,18,58,59,19,21,22,60,61,62,63,64,65,66,67,68,69,70,71,9,3,72,1,23,266,266,265,265,17,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,95,107,118,119,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,107,118,119,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,98,99,100,267,102,103,102,103,268,102,25,107,102,102,98,99,101,103,109,269,0,0,0,103,0,95,102,102,269,102,268,102,107,118,119,120,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,107,118,119,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,102,98,99,101,103,109,95,98,99,101,109,102,98,99,100,101,103,109,95,102,107,118,119,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,121,104,110,111,112,115,116,123,124,125,126,127,128,129,130,133,134,135,102,98,99,101,103,109,95,109,269,102,98,99,100,103,95,102,121,104,110,111,112,115,116,123,124,125,126,127,128,129,130,133,134,135,82,119,102,98,99,100,103,103,103,103,132,25,107,102,98,99,101,103,109,82,119,102,98,99,100,103,103,103,103,132,122,86,107,118,102,98,99,101,103,131,109,86,118,102,98,99,101,103,131,90,102,98,99,103,98,82,119,102,98,99,100,103,103,103,103,132,82,119,102,98,99,100,103,103,103,103,132,103,267,102,267,102,269,267,102,267,102,269,267,102,0,131,132,270,102,98,95,109,103,0,267,95,270,267,102,103,120,107,118,119,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,107,118,119,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,121,104,110,111,112,115,116,123,124,125,126,127,128,129,130,133,134,135,122,107,118,119,120,102,98,121,99,100,101,104,110,111,112,103,115,116,122,123,124,125,126,127,128,129,130,131,132,109,95,133,134,135,98,99,100,268,102,268,102,102,268,102,0,0,0,0,0,0,145,149,146,150,147,148,145,149,146,150,147,148,145,146,147,148,146,147,148,149,146,150,147,148,145,149,146,150,147,148,145,145,145,149,146,150,147,148,145,145,149,146,150,147,148,149,150,145,149,150,145,145,147,148,145,149,150,145,149,146,150,147,148,145,149,146,150,147,148,145,145,145,149,146,150,147,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,169,0,0,0,0,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,271,271,244,244,271,271,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,232,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,232,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,163,164,165,166,167,168,169,163,164,165,166,167,168,169,271,271,271,271,173,271,271,271,271,177,178,179,169,178,0,271,271,181,182,169,181,182,169,244,244,177,178,179,271,271,271,271,271,271,271,271,271,271,271,271,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,181,232,182,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,271,271,271,271,271,271,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,232,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,177,178,179,271,271,0,180,184,185,189,195,196,197,198,186,201,206,207,208,209,210,211,212,162,213,214,158,159,187,160,154,183,216,217,218,219,220,221,224,225,226,227,230,232,235,236,237,238,241,242,180,184,185,189,195,196,197,198,186,201,206,207,208,209,210,211,212,162,213,214,158,159,187,160,154,183,216,217,218,219,220,221,224,225,226,227,230,232,235,236,237,238,241,242,180,184,185,189,195,196,197,198,186,201,206,207,208,209,210,211,212,162,213,214,158,159,187,160,154,183,216,217,218,219,220,221,224,225,226,227,230,232,235,236,237,238,241,242,169,271,271,244,244,244,244,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,232,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,244,244,271,271,170,192,172,175,193,155,153,194,196,199,200,202,203,204,205,215,222,223,228,229,233,239,180,184,185,189,195,196,197,198,186,201,206,207,208,209,210,211,212,162,213,214,158,159,187,160,154,183,216,217,218,219,220,221,224,225,226,227,230,232,235,236,237,238,241,242,178,178,178,179,179,179,244,244,195,177,210,77,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,224,225,226,227,228,230,232,233,235,236,239,164,165,166,240,167,168,241,242,243,0,271,271,177,271,271,244,244,244,244,177,271,271,201,201,0,244,244,201,201,271,271,0,170,192,172,175,193,155,153,194,196,199,200,202,203,204,205,215,222,223,228,229,233,239,173,173,173,0,0,85,191,177,178,179,161,176,180,184,185,189,195,197,198,186,201,206,207,208,209,210,211,212,162,213,214,158,159,187,160,154,183,216,217,218,219,220,221,224,225,226,227,230,232,234,235,236,237,238,163,164,165,166,240,167,168,241,242,243,271,271,201,201,173,173,177,177,177,271,271,0,0,271,271,271,271,0,0,0,271,271,0,85,177,178,161,176,180,184,185,189,195,197,198,186,201,206,207,208,209,210,211,212,162,213,214,158,159,187,160,154,183,216,217,218,219,220,221,224,225,227,230,232,235,236,163,164,165,166,240,167,168,271,271,271,271,178,178,271,271,210,210,271,271,271,271,271,271,163,164,165,166,167,168,169,181,182,169,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,232,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,232,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,244,244,172,193,200,222,223,228,229,233,239,174,191,177,178,179,161,176,184,185,189,195,197,198,186,201,206,207,208,209,210,211,214,158,159,160,154,183,216,217,218,219,220,221,224,225,226,230,232,234,235,236,237,238,163,164,165,166,240,167,241,242,243,244,244,244,244,244,244,244,244,0,191,177,178,179,161,170,192,172,175,176,180,184,185,189,193,155,153,194,195,196,197,198,186,199,200,201,202,203,204,205,206,207,208,209,210,211,212,162,213,214,158,159,187,215,160,154,183,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,181,232,182,233,234,235,236,237,238,239,173,163,164,165,166,240,167,168,241,169,242,243,0,271,271,271,271,0,0,0,0,0,0,249,250,251,252,253,249,250,251,252,253,178,249,250,251,252,253,249,250,251,252,253,249,250,251,252,253,249,250,251,252,253,178,178,178,178,178,178,178,249,250,251,252,253,178,249,250,251,252,253,249,250,251,252,253,249,250,251,252,253,249,250,251,252,253,0,0,0,0,254,255,256,254,255,256,179,254,255,256,254,255,256,254,255,256,254,255,256,179,179,179,179,179,254,255,256,179,0,254,255,256,254,255,256,254,255,256,254,255,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,246,257,248,258,247,246,257,248,258,257,258,262,246,247,247,246,257,248,258,247,246,246,246,246,246,246,257,248,248,248,248,248,258,247,246,257,248,258,246,248,246,262,247,246,257,248,258,258,0,0,246,248,257,247,272,272,273,273,274,275,275,274,257,247,247,246,257,248,258,247,246,257,248,258,246,248,247,246,257,248,258,264,257,264,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,[[2,[[3,[-1]],1]]],4],[[-1,-2],[[5,[-1,-3,-2]]],6,7,8],[[-1,-2],[[5,[-1,-3,-2]]],6,7,8],[[[10,[[9,[-1,-2]]]]],[[9,[[10,[-1]],[10,[-2]]]]],[],[]],[[[10,[[9,[-1,-2]]]]],[[9,[[10,[-1]],[10,[-2]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,11,[6,12]],[-1,11,[6,12]],[-1,13,6],[-1,13,6],[-1,[[14,[-1]]],[6,15]],[-1,[[14,[-1]]],[6,15]],[[[16,[-1]]],[[16,[-1]]],4],[[[17,[-1]]],[[17,[-1]]],4],[[[18,[-1]]],[[18,[-1]]],[]],[[[19,[-1]]],[[19,[-1]]],20],[[[21,[-1]]],[[21,[-1]]],20],[[[22,[-1]]],[[22,[-1]]],20],[[[9,[-1,-2]]],[[9,[-1,-2]]],20,20],[[[3,[-1]]],[[3,[-1]]],20],[1,1],[23,23],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[10,[[9,[-1,-2]]]],24],2,25,25],[[],[[19,[-1]]],[]],[[[16,[-1]]],[[26,[[17,[-1]]]]],4],[4,2],[[[16,[-1]]],2,4],[[23,23],27],[[-1,-2],27,[],[]],[-1,[[22,[[28,[-2,-1]]]]],[],[]],[-1,[[29,[-1,-2]]],6,[]],[-1,[[29,[-1,-2]]],6,[]],[[[9,[[2,[-1,-2]],[2,[-1,-3]]]]],[[2,[-1,[9,[-2,-3]]]]],[],[],[]],[[[9,[[2,[-1,-2]],[2,[-3,-2]]]]],[[2,[[9,[-1,-3]],-2]]],[],[],[]],[-1,[[30,[-1]]],6],[-1,[[30,[-1]]],6],[-1,[[31,[-1]]],6],[-1,[[31,[-1]]],6],[[[16,[-1]],32],33,4],[[[17,[-1]],32],33,4],[[[34,[-1]],32],33,[]],[[[35,[-1]],32],33,[4,36]],[[[37,[-1]],32],33,[8,36]],[[[38,[-1]],32],33,36],[[[30,[-1]],32],33,4],[[[31,[-1]],32],33,4],[[[39,[-1,-2]],32],33,[],[]],[[[40,[-1]],32],33,[]],[[[41,[-1,-2]],32],33,[],[]],[[[42,[-1,-2,-3]],32],33,[],[],[]],[[[43,[-1,-2]],32],33,[],[]],[[[44,[-1]],32],33,[]],[[[45,[-1]],32],33,[]],[[[14,[-1]],32],33,36],[[[46,[-1]],32],33,36],[[[47,[-1,-2]],32],33,[],[]],[[[48,[-1]],32],33,8],[[[5,[-1,-2,-3]],32],33,[],[],[]],[[[49,[-1,-2,-3]],32],33,[],[],[]],[[[29,[-1,-2]],32],33,[],[]],[[[50,[-1,-2]],32],33,[],[]],[[[51,[-1,-2]],32],33,[],[]],[[[52,[-1,-2]],32],33,[],[]],[[[53,[-1,-2]],32],33,[],[]],[[[54,[-1,-2]],32],33,[],[]],[[[55,[-1,-2,-3]],32],33,[],[],[]],[[[56,[-1,-2]],32],33,[],[]],[[[57,[-1]],32],33,36],[[[18,[-1]],32],33,36],[[[58,[-1]],32],33,[36,4]],[[[59,[-1]],32],33,[36,8]],[[[19,[-1]],32],33,36],[[[21,[-1]],32],33,36],[[[22,[-1]],32],33,36],[[[60,[-1,-2]],32],33,[4,36],[4,36]],[[[61,[-1,-2,-3]],32],33,[4,36],[4,36],[4,36]],[[[62,[-1,-2,-3,-4]],32],33,[4,36],[4,36],[4,36],[4,36]],[[[63,[-1,-2,-3,-4,-5]],32],33,[4,36],[4,36],[4,36],[4,36],[4,36]],[[[64,[-1,-2]],32],33,36,36],[[[65,[-1]],32],33,36],[[[66,[-1,-2]],32],33,[8,36],[8,36]],[[[67,[-1,-2,-3]],32],33,[8,36],[8,36],[8,36]],[[[68,[-1,-2,-3,-4]],32],33,[8,36],[8,36],[8,36],[8,36]],[[[69,[-1,-2,-3,-4,-5]],32],33,[8,36],[8,36],[8,36],[8,36],[8,36]],[[[70,[-1,-2]],32],33,36,36],[[[71,[-1]],32],33,36],[[[9,[-1,-2]],32],33,36,36],[[[3,[-1]],32],33,36],[[72,32],33],[[1,32],33],[[23,32],33],[[23,32],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[-1]]],[[19,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[35,[-2]]],73,4],[-1,[[37,[-2]]],73,8],[-1,[[65,[-2]]],73,[4,74]],[-1,[[71,[-2]]],73,[8,74]],[-1,[[38,[-1]]],6],[-1,[[38,[-1]]],6],[72,1],[[-1,-2],[[43,[-1,-2]]],6,7],[[-1,-2],[[43,[-1,-2]]],6,7],[[-1,-2],[[52,[-1,-2]]],6,7],[[-1,-2],[[52,[-1,-2]]],6,7],[[-1,-2],[[51,[-1,-2]]],6,7],[[-1,-2],[[51,[-1,-2]]],6,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[[46,[-1]]],6],[-1,[[46,[-1]]],6],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[22,[-1]]],-1,[]],[[[65,[-1]]],[[75,[-1]]],[]],[[[9,[-1,-1]]],-1,[]],[-1,4,[]],[-1,[[40,[-1]]],6],[-1,[[40,[-1]]],6],[[[3,[-1]]],27,[]],[1,27],[-1,27,[]],[[[16,[-1]]],27,4],[[[38,[-1]]],27,4],[[[30,[-1]]],27,4],[[[31,[-1]]],27,4],[[[39,[-1,-2]]],27,[],[]],[[[40,[-1]]],27,[]],[[[41,[-1,-2]]],27,[],[]],[[[42,[-1,-2,-3]]],27,[],[],[]],[[[43,[-1,-2]]],27,[],[]],[[[44,[-1]]],27,[]],[[[45,[-1]]],27,[]],[[[46,[-1]]],27,[8,76]],[[[47,[-1,-2]]],27,[],[]],[[[48,[-1]]],27,8],[[[5,[-1,-2,-3]]],27,[],[],[]],[[[49,[-1,-2,-3]]],27,[],[],[]],[[[29,[-1,-2]]],27,[],[]],[[[50,[-1,-2]]],27,[],[]],[[[51,[-1,-2]]],27,[],[]],[[[52,[-1,-2]]],27,[],[]],[[[53,[-1,-2]]],27,[],[]],[[[54,[-1,-2]]],27,[],[]],[[[55,[-1,-2,-3]]],27,[],[],[]],[[[56,[-1,-2]]],27,[],[]],[[[57,[-1]]],27,7],[[[18,[-1]]],27,[]],[[[58,[-1]]],27,4],[[[59,[-1]]],27,8],[[[19,[-1]]],27,76],[[[21,[-1]]],27,4],[[[22,[-1]]],27,[]],[[[60,[-1,-2]]],27,76,76],[[[61,[-1,-2,-3]]],27,76,76,76],[[[62,[-1,-2,-3,-4]]],27,76,76,76,76],[[[63,[-1,-2,-3,-4,-5]]],27,76,76,76,76,76],[[[64,[-1,-2]]],27,[4,74],[4,74]],[[[9,[-1,-2]]],27,77,77],[[[9,[-1,-2]]],27,76,76],[[-1,-2],[[60,[-1,-2]]],4,4],[[-1,-2,-3],[[61,[-1,-2,-3]]],4,4,4],[[-1,-2,-3,-4],[[62,[-1,-2,-3,-4]]],4,4,4,4],[[-1,-2,-3,-4,-5],[[63,[-1,-2,-3,-4,-5]]],4,4,4,4,4],[-1,35,73],[-1,[[57,[-1]]],7],[-1,[[9,[-1,-2]]],6,4],[-1,[[9,[-1,-2]]],6,4],[[-1,-2],[[39,[-1,-2]]],6,7],[[-1,-2],[[39,[-1,-2]]],6,7],[[-1,-2],[[54,[-1,-2]]],6,7],[[-1,-2],[[54,[-1,-2]]],6,7],[-1,[[41,[-1,-2]]],6,[]],[-1,[[41,[-1,-2]]],6,[]],[[-1,-2],[[53,[-1,-2]]],6,7],[[-1,-2],[[53,[-1,-2]]],6,7],[[-1,-2,-3],[[55,[-1,-3,-2]]],6,7,7],[[-1,-2,-3],[[55,[-1,-3,-2]]],6,7,7],[-1,[[58,[-1]]],4],[-1,[[44,[-1]]],6],[-1,[[44,[-1]]],6],[[-1,72],[[3,[-1]]],[]],[[],[[2,[1,72]]]],[-1,26,6],[-1,26,6],[-1,[[22,[[28,[-1,-2]]]]],[],[]],[-1,[[50,[-1,-2]]],6,[]],[-1,[[50,[-1,-2]]],6,[]],[[-1,-2],[[49,[-1,-3,-2]]],6,7,8],[[-1,-2],[[49,[-1,-3,-2]]],6,7,8],[[[10,[[58,[-1]]]]],26,4],[[[10,[[59,[-1]]]]],26,8],[[[16,[-1]]],26,4],[[],[[18,[-1]]],[]],[[[10,[[16,[-1]]]],78],79,4],[[[10,[[34,[-1]]]],78],[[79,[-2]]],80,[]],[[[10,[[35,[-1]]]],78],79,4],[[[10,[[37,[-1]]]],78],79,8],[[[10,[[38,[-1]]]],78],79,4],[[[10,[[30,[-1]]]],78],79,4],[[[10,[[39,[-1,-2]]]],78],79,[],[]],[[[10,[[41,[-1,-2]]]],78],79,[],[]],[[[10,[[42,[-1,-2,-3]]]],78],79,[],[],[]],[[[10,[[43,[-1,-2]]]],78],79,[],[]],[[[10,[[44,[-1]]]],78],79,[]],[[[10,[[45,[-1]]]],78],79,[]],[[[10,[[14,[-1]]]],78],79,[4,15]],[[[10,[[46,[-1]]]],78],79,8],[[[10,[[47,[-1,-2]]]],78],79,[],[]],[[[10,[[5,[-1,-2,-3]]]],78],79,[],[],[]],[[[10,[[49,[-1,-2,-3]]]],78],79,[],[],[]],[[[10,[[29,[-1,-2]]]],78],79,[],[]],[[[10,[[50,[-1,-2]]]],78],79,[],[]],[[[10,[[51,[-1,-2]]]],78],79,[],[]],[[[10,[[52,[-1,-2]]]],78],79,[],[]],[[[10,[[53,[-1,-2]]]],78],79,[],[]],[[[10,[[54,[-1,-2]]]],78],79,[],[]],[[[10,[[55,[-1,-2,-3]]]],78],79,[],[],[]],[[[10,[[56,[-1,-2]]]],78],79,[],[]],[[[10,[[57,[-1]]]],78],[[79,[-2]]],7,[]],[[[10,[[18,[-1]]]],78],[[79,[-1]]],[]],[[[10,[[58,[-1]]]],78],79,4],[[[10,[[59,[-1]]]],78],79,8],[[[10,[[19,[-1]]]],78],79,4],[[[10,[[21,[-1]]]],78],[[79,[[26,[-2]]]]],4,[]],[[[10,[[22,[-1]]]],78],[[79,[-1]]],[]],[[[10,[[60,[-1,-2]]]],78],79,4,4],[[[10,[[61,[-1,-2,-3]]]],78],79,4,4,4],[[[10,[[62,[-1,-2,-3,-4]]]],78],79,4,4,4,4],[[[10,[[63,[-1,-2,-3,-4,-5]]]],78],79,4,4,4,4,4],[[[10,[[64,[-1,-2]]]],78],79,[4,74],[4,74]],[[[10,[[65,[-1]]]],78],79,[4,74]],[[[10,[[66,[-1,-2]]]],78],79,8,8],[[[10,[[67,[-1,-2,-3]]]],78],79,8,8,8],[[[10,[[68,[-1,-2,-3,-4]]]],78],79,8,8,8,8],[[[10,[[69,[-1,-2,-3,-4,-5]]]],78],79,8,8,8,8,8],[[[10,[[70,[-1,-2]]]],78],79,[8,74],[8,74]],[[[10,[[71,[-1]]]],78],79,[8,74]],[[[10,[[9,[-1,-2]]]],78],79,4,4],[[[10,[[3,[-1]]]],78],79,4],[[[10,[[9,[-1,-2]]]],78],[[79,[[81,[2]]]]],82,82],[[[10,[[9,[-1,-2]]]],78],[[79,[[81,[[84,[83]]]]]]],25,25],[[[10,[[9,[-1,-2]]]],78],[[79,[[81,[2]]]]],82,82],[-1,[[34,[-1]]],80],[-1,[[21,[-1]]],4],[[[10,[[31,[-1]]]],78],[[79,[26]]],4],[[[10,[[40,[-1]]]],78],[[79,[26]]],[]],[[[10,[[48,[-1]]]],78],[[79,[26]]],8],[[[10,[[21,[-1]]]],78],[[79,[26]]],4],[[[10,[[9,[-1,-2]]]],78],[[79,[26]]],85,85],[[[10,[[3,[-1]]]],78],[[79,[26]]],85],[[[10,[[9,[-1,-2]]]],78,[84,[83]]],[[79,[[81,[24]]]]],86,86],[[[10,[[9,[-1,-2]]]],78,[84,[87]]],[[79,[[81,[24]]]]],86,86],[[[10,[[9,[-1,-2]]]],78,88],[[79,[[81,[89]]]]],90,90],[[-1,78],79,74],[[-1,78],79,74],[[[10,[[9,[-1,-2]]]],78,[84,[83]]],[[79,[[81,[24]]]]],82,82],[[[10,[[9,[-1,-2]]]],78,[84,[91]]],[[79,[[81,[24]]]]],82,82],[[[16,[-1]],[16,[-1]]],27,4],[[[16,[-1]],-2],2,4,92],[-1,[[22,[-1]]],[]],[-1,[[9,[-2,-1]]],6,4],[-1,[[9,[-2,-1]]],6,4],[[-1,-2],[[64,[-1,-2]]],[4,74],[4,74]],[-1,65,73],[-1,71,73],[-1,[[16,[-1]]],6],[-1,[[16,[-1]]],6],[[[31,[-1]]],[[2,[24,[26,[24]]]]],4],[[[40,[-1]]],[[2,[24,[26,[24]]]]],[]],[[[48,[-1]]],[[2,[24,[26,[24]]]]],8],[[[9,[-1,-2]]],[[2,[24,[26,[24]]]]],85,85],[[[16,[-1]]],[[26,[24]]],4],[[[10,[[58,[-1]]]]],26,4],[[[10,[[59,[-1]]]]],26,8],[[],[[38,[-1]]],4],[[-1,-2],[[42,[-1,-3,-2]]],6,7,4],[[-1,-2],[[42,[-1,-3,-2]]],6,7,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,93,[]],[-1,[[47,[-1]]],6],[-1,[[47,[-1]]],6],[-1,[[48,[-1]]],6],[-1,[[48,[-1]]],6],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[-1,-2],[[66,[-1,-2]]],8,8],[[-1,-2,-3],[[67,[-1,-2,-3]]],8,8,8],[[-1,-2,-3,-4],[[68,[-1,-2,-3,-4]]],8,8,8,8],[[-1,-2,-3,-4,-5],[[69,[-1,-2,-3,-4,-5]]],8,8,8,8,8],[-1,37,73],[-1,[[59,[-1]]],8],[[[10,[-1]],78],[[79,[28]]],[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[-1,78],[[79,[28]]],74],[[-1,78],[[79,[28]]],74],[[-1,-2],[[70,[-1,-2]]],[8,74],[8,74]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,[[45,[-1]]],6],[-1,[[45,[-1]]],6],[[-1,-2],[[56,[-1,-2]]],6,7],[[-1,-2],[[56,[-1,-2]]],6,7],[[[17,[-1]]],[[26,[[16,[-1]]]]],4],[[[16,[-1]]],[[26,[24]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[95,[-1]]],[[84,[83]]],[[96,[[84,[83]]]]]],[[[95,[-1]]],[[84,[83]]],[[97,[[84,[83]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[98,[-1]]],[[84,[83]]],86],[[[99,[-1]]],[[84,[83]]],82],[[[100,[-1]]],[[84,[83]]],82],[[-1,-2],[[101,[-1,-2]]],6,86],[[[102,[-1]]],[[102,[-1]]],20],[[[103,[-1]]],[[103,[-1]]],20],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[104,[-1]]],74],[[[102,[-1]],[102,[-1]]],105,106],[[[10,[-1]],24],2,[]],[[[10,[107]],24],2],[[[102,[-1]],24],2,108],[[[10,[[102,[-1]]]],24],2,108],[[[10,[[98,[-1]]]],24],2,86],[[[10,[[99,[-1]]]],24],2,25],[[[10,[[101,[-1,-2]]]],24],2,25,25],[[[10,[[103,[-1]]]],24],2,[[97,[[84,[83]]]],74]],[[[10,[[109,[-1]]]],24],2,25],[[-1,24],2,74],[[-1,-2],[[110,[-1,-2]]],86,[82,74,6]],[[-1,-2],[[111,[-1,-2]]],25,[82,74,6]],[[-1,-2],[[2,[[112,[-1,-2]],1]]],25,[82,74,6]],[[],[[103,[-1]]],113],[[],107],[[[95,[-1]]],24,[[97,[[84,[83]]]]]],[[[102,[-1]],[102,[-1]]],27,114],[[-1,-2],27,[],[]],[-1,[[115,[-1]]],74],[[[102,[-1]]],[[81,[[84,[83]]]]],108],[-1,[[116,[-1]]],74],[[[102,[-1]]],[[81,[2]]],117],[[107,32],33],[[118,32],33],[[119,32],33],[[[120,[-1]],32],33,[]],[[[120,[-1]],32],33,[]],[[[102,[-1]],32],33,36],[[[98,[-1]],32],33,36],[[[121,[-1]],32],33,36],[[[99,[-1]],32],33,36],[[[100,[-1]],32],33,[36,82]],[[[101,[-1,-2]],32],33,36,36],[[[104,[-1]],32],33,[36,6]],[[[110,[-1,-2]],32],33,36,[36,6]],[[[111,[-1,-2]],32],33,36,[36,6]],[[[112,[-1,-2]],32],33,36,[36,6]],[[[103,[-1]],32],33,36],[[[115,[-1]],32],33,[36,6]],[[[116,[-1]],32],33,[36,6]],[[[122,[-1]],32],33,36],[[[123,[-1]],32],33,[36,6]],[[[124,[-1]],32],33,[36,6]],[[[125,[-1]],32],33,[36,6]],[[[126,[-1]],32],33,[36,6]],[[[127,[-1]],32],33,[36,6]],[[[128,[-1]],32],33,[36,6]],[[[129,[-1]],32],33,[36,6]],[[[130,[-1]],32],33,[36,6]],[[[131,[-1]],32],33,36],[[[132,[-1]],32],33,36],[[[109,[-1]],32],33,36],[[[95,[-1]],32],33,36],[[[133,[-1]],32],33,[36,6]],[[[134,[-1]],32],33,[36,6]],[[[135,[-1]],32],33,[36,6]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[102,[-1]]],-1,[]],[[[98,[-1]]],-1,86],[[[99,[-1]]],-1,82],[[[101,[-1,-2]]],[[2,[-1,-2]]],86,86],[[[103,[-1]]],-1,[]],[[[109,[-1]]],-1,86],[[[95,[-1]]],-1,[[97,[[84,[83]]]]]],[[[10,[[98,[-1]]]]],[[10,[-1]]],86],[[[10,[[99,[-1]]]]],[[10,[-1]]],82],[[[10,[[101,[-1,-2]]]]],[[2,[[10,[-1]],[10,[-2]]]]],86,86],[[[10,[[109,[-1]]]]],[[10,[-1]]],86],[[[102,[-1]]],-1,[]],[[[98,[-1]]],-1,86],[[[99,[-1]]],-1,82],[[[100,[-1]]],-1,82],[[[101,[-1,-2]]],[[2,[-1,-2]]],86,86],[[[103,[-1]]],-1,[]],[[[109,[-1]]],-1,86],[[[95,[-1]]],-1,[[97,[[84,[83]]]]]],[[[102,[-1]],-2],2,136,92],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[102,[-1]]],-1,[]],[[[98,[-1]]],-1,86],[[[99,[-1]]],-1,82],[[[101,[-1,-2]]],[[2,[-1,-2]]],86,86],[[[103,[-1]]],-1,[]],[[[109,[-1]]],-1,86],[[[95,[-1]]],-1,[[97,[[84,[83]]]]]],[[[109,[-1]]],89,86],[-1,[[122,[-1]]],6],[-1,[[102,[-1]]],[]],[-1,[[98,[-1]]],86],[-1,[[99,[-1]]],82],[-1,[[100,[-1]]],82],[-1,[[103,[-1]]],[]],[-1,[[95,[-1]]],[[97,[[84,[83]]]]]],[[[102,[-1]],[102,[-1]]],[[26,[105]]],137],[[[10,[[121,[-1]]]],78],79,[86,90]],[[[10,[[104,[-1]]]],78],79,[82,6,74]],[[[10,[[110,[-1,-2]]]],78],79,86,[82,74,6]],[[[10,[[111,[-1,-2]]]],78],79,25,[82,74,6]],[[[10,[[112,[-1,-2]]]],78],79,25,[82,74,6]],[[[10,[[115,[-1]]]],78],79,[25,6,74]],[[[10,[[116,[-1]]]],78],79,[82,6,74]],[[[10,[[123,[-1]]]],78],79,[86,6,74]],[[[10,[[124,[-1]]]],78],79,[86,6,74]],[[[10,[[125,[-1]]]],78],79,[86,6,74]],[[[10,[[126,[-1]]]],78],79,[25,6,74]],[[[10,[[127,[-1]]]],78],79,[86,6,74]],[[[10,[[128,[-1]]]],78],79,[86,6,74]],[[[10,[[129,[-1]]]],78],79,[25,6,74]],[[[10,[[130,[-1]]]],78],79,[90,6,74]],[[[10,[[133,[-1]]]],78],79,[82,6,74]],[[[10,[[134,[-1]]]],78],79,[82,6,74]],[[[10,[[135,[-1]]]],78],[[79,[[81,[2]]]]],[82,6,74]],[[[10,[-1]],78],[[79,[[28,[2,138]]]]],[]],[[[10,[119]],78],[[79,[[81,[2]]]]]],[[[10,[[102,[-1]]]],78],[[79,[[81,[2]]]]],117],[[[10,[[98,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[[99,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[[100,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[[103,[[139,[[84,[83]]]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[103,[[75,[83]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[103,[[75,[83]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[103,[[84,[83]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[132,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[-1]],78],[[79,[[28,[[84,[83]],138]]]]],[]],[[[10,[107]],78],[[79,[[81,[[84,[83]]]]]]]],[[[10,[[102,[-1]]]],78],[[79,[[81,[[84,[83]]]]]]],108],[[[10,[[98,[-1]]]],78],[[79,[[81,[[84,[83]]]]]]],86],[[[10,[[99,[-1]]]],78],[[79,[[81,[[84,[83]]]]]]],25],[[[10,[[101,[-1,-2]]]],78],[[79,[[81,[[84,[83]]]]]]],25,25],[[[10,[[103,[-1]]]],78],[[79,[[81,[[84,[83]]]]]]],[[97,[[84,[83]]]],74]],[[[10,[[109,[-1]]]],78],[[79,[[81,[[84,[83]]]]]]],25],[[[10,[-1]],78],[[79,[[28,[2,138]]]]],[]],[[[10,[119]],78],[[79,[[81,[2]]]]]],[[[10,[[102,[-1]]]],78],[[79,[[81,[2]]]]],117],[[[10,[[98,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[[99,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[[100,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[[103,[[75,[83]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[103,[[84,[83]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[103,[[75,[83]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[103,[[139,[[84,[83]]]]]]]],78],[[79,[[81,[2]]]]]],[[[10,[[132,[-1]]]],78],[[79,[[81,[2]]]]],82],[[[10,[[122,[-1]]]],78],[[79,[26]]],25],[[[10,[-1]],78,[84,[83]]],[[79,[[28,[24,138]]]]],[]],[[[10,[107]],78,[84,[83]]],[[79,[[81,[24]]]]]],[[[10,[118]],78,[84,[83]]],[[79,[[81,[24]]]]]],[[[10,[[102,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],140],[[[10,[[98,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],86],[[[10,[[99,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],86],[[[10,[[101,[-1,-2]]]],78,[84,[83]]],[[79,[[81,[24]]]]],86,86],[[[10,[[103,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],[[97,[[84,[83]]]],74]],[[[10,[[131,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],86],[[[10,[[109,[-1]]]],78,[84,[83]]],[[79,[[28,[24,138]]]]],86],[[[10,[-1]],78,[84,[87]]],[[79,[[28,[24,138]]]]],[]],[[[10,[118]],78,[84,[87]]],[[79,[[81,[24]]]]]],[[[10,[[102,[-1]]]],78,[84,[87]]],[[79,[[81,[24]]]]],140],[[[10,[[98,[-1]]]],78,[84,[87]]],[[79,[[81,[24]]]]],86],[[[10,[[99,[-1]]]],78,[84,[87]]],[[79,[[81,[24]]]]],86],[[[10,[[101,[-1,-2]]]],78,[84,[87]]],[[79,[[81,[24]]]]],86,86],[[[10,[[103,[-1]]]],78,[84,[87]]],[[79,[[81,[24]]]]],[[97,[[84,[83]]]],74]],[[[10,[[131,[-1]]]],78,[84,[87]]],[[79,[[81,[24]]]]],86],[[[10,[-1]],78,88],[[79,[[28,[89,138]]]]],[]],[[[10,[[102,[-1]]]],78,88],[[79,[[81,[89]]]]],141],[[[10,[[98,[-1]]]],78,88],[[79,[[81,[89]]]]],[86,90]],[[[10,[[99,[-1]]]],78,88],[[79,[[81,[89]]]]],[82,90]],[[[10,[[103,[-1]]]],78,88],[[79,[[81,[89]]]]],[[97,[[84,[83]]]],74]],[[[10,[[98,[-1]]]],78,142],[[79,[[81,[2]]]]],[86,90]],[[[10,[-1]],78,[84,[83]]],[[79,[[28,[24,138]]]]],[]],[[[10,[119]],78,[84,[83]]],[[79,[[81,[24]]]]]],[[[10,[[102,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],117],[[[10,[[98,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],82],[[[10,[[99,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],82],[[[10,[[100,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],82],[[[10,[[103,[[139,[[84,[83]]]]]]]],78,[84,[83]]],[[79,[[81,[24]]]]]],[[[10,[[103,[[75,[83]]]]]],78,[84,[83]]],[[79,[[81,[24]]]]]],[[[10,[[103,[[84,[83]]]]]],78,[84,[83]]],[[79,[[81,[24]]]]]],[[[10,[[103,[[75,[83]]]]]],78,[84,[83]]],[[79,[[81,[24]]]]]],[[[10,[[132,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],82],[[[10,[-1]],78,[84,[91]]],[[79,[[28,[24,138]]]]],[]],[[[10,[119]],78,[84,[91]]],[[79,[[81,[24]]]]]],[[[10,[[102,[-1]]]],78,[84,[91]]],[[79,[[81,[24]]]]],117],[[[10,[[98,[-1]]]],78,[84,[91]]],[[79,[[81,[24]]]]],82],[[[10,[[99,[-1]]]],78,[84,[91]]],[[79,[[81,[24]]]]],82],[[[10,[[100,[-1]]]],78,[84,[91]]],[[79,[[81,[24]]]]],82],[[[10,[[103,[[75,[83]]]]]],78,[84,[91]]],[[79,[[81,[24]]]]]],[[[10,[[103,[[75,[83]]]]]],78,[84,[91]]],[[79,[[81,[24]]]]]],[[[10,[[103,[[139,[[84,[83]]]]]]]],78,[84,[91]]],[[79,[[81,[24]]]]]],[[[10,[[103,[[84,[83]]]]]],78,[84,[91]]],[[79,[[81,[24]]]]]],[[[10,[[132,[-1]]]],78,[84,[91]]],[[79,[[81,[24]]]]],82],[[[103,[-1]]],89,[]],[[-1,[84,[83]]],[[123,[-1]]],74],[[[102,[-1]],[84,[83]]],[[81,[24]]],140],[[-1,[84,[83]]],[[125,[-1]]],74],[[[102,[-1]],[84,[83]]],[[81,[2]]],140],[[-1,93],[[126,[-1]]],74],[[-1,[75,[83]]],[[127,[-1]]],74],[[[102,[-1]],[75,[83]]],[[81,[24]]],140],[[-1,93],[[128,[-1]]],74],[[[102,[-1]],93],[[81,[24]]],140],[[-1,83,[75,[83]]],[[129,[-1]]],74],[[-1,[84,[87]]],[[124,[-1]]],74],[[[102,[-1]],[84,[87]]],[[81,[24]]],140],[83,118],[[[131,[-1]],[132,[-1]]],[[28,[-1,[120,[-1]]]]],74],[[[132,[-1]],[131,[-1]]],[[28,[-1,[120,[-1]]]]],74],[[-1,88],[[130,[-1]]],74],[[[102,[-1]],88],[[81,[89]]],141],[[[10,[[98,[-1]]]],142],[[121,[-1]]],[86,90]],[[[95,[-1]],-2],2,[[97,[[84,[83]]]]],[[143,[24]]]],[[[109,[-1]],89],2,86],[[[103,[-1]],89],2,[]],[[],119],[-1,[[2,[[131,[-1]],[132,[-1]]]]],[82,6]],[[[95,[-1]]],24,[[97,[[84,[83]]]]]],[-1,[[130,[-1]]],74],[[-1,89],[[109,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,93,[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[[24,-1],[[98,[-1]]],86],[[24,-1],[[99,[-1]]],82],[[24,-1],[[100,[-1]]],82],[[-1,[84,[83]]],[[133,[-1]]],74],[[[102,[-1]],[84,[83]]],[[81,[24]]],117],[[-1,[84,[83]]],[[135,[-1]]],74],[[[102,[-1]],[84,[83]]],[[81,[2]]],117],[[[102,[-1]],144],[[81,[2]]],117],[[-1,[84,[91]]],[[134,[-1]]],74],[[[102,[-1]],[84,[91]]],[[81,[24]]],117],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[145,[-1]]],113],[[[146,[-1]]],-1,6],[[[147,[-1]]],-1,6],[[[148,[-1,-2]]],-2,6,6],[[[146,[-1]]],-1,6],[[[147,[-1]]],-1,6],[[[148,[-1,-2]]],-2,6,6],[[[149,[-1]]],2,6],[[[146,[-1]]],2,6],[[[150,[-1]]],2,6],[[[147,[-1]]],2,6],[[[148,[-1,-2]]],2,6,6],[[[145,[-1]],32],33,6],[[[149,[-1]],32],33,6],[[[146,[-1]],32],33,[6,36]],[[[150,[-1]],32],33,6],[[[147,[-1]],32],33,[6,36]],[[[148,[-1,-2]],32],33,6,[6,36]],[-1,[[145,[-1]]],[]],[-1,-1,[]],[151,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[145,[-1]]],-1,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[145,[-1]]],-1,[]],[[[149,[-1]]],27,6],[[[150,[-1]]],27,6],[[[145,[-1]]],[[150,[-1]]],6],[[[152,[[145,[-1]]]]],[[149,[-1]]],6],[[[147,[-1]],-2],[[148,[-1,-3]]],6,7,6],[[[148,[-1,-2]],-3],[[148,[-1,-4]]],6,6,7,6],[-1,[[145,[-1]]],[]],[[[10,[[149,[-1]]]],78],79,6],[[[10,[[150,[-1]]]],78],79,6],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[[145,[-1]]],[[26,[[147,[-1]]]]],6],[[[152,[[145,[-1]]]]],[[26,[[146,[-1]]]]],6],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[2,[[3,[-1]],1]]],85],[[-1,-2],[[153,[-1,-3,-2]]],6,80,4],[[-1,-2],[[153,[-1,-3,-2]]],6,80,4],[[-1,-2],[[154,[-1,-3,-2]]],6,80,8],[[-1,-2],[[154,[-1,-3,-2]]],6,80,8],[[-1,-2],[[155,[-1,-3,-2]]],6,80,4],[[-1,-2],[[155,[-1,-3,-2]]],6,80,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,156,[6,12]],[-1,156,[6,12]],[-1,157,6],[-1,157,6],[[-1,24],[[158,[-1]]],6],[[-1,24],[[158,[-1]]],6],[[-1,24],[[159,[-1]]],6],[[-1,24],[[159,[-1]]],6],[-1,-1,[]],[-1,-1,[]],[-1,[[160,[-1]]],[6,15]],[-1,[[160,[-1]]],[6,15]],[[-1,-2],[[161,[-1,-2]]],6,85],[[-1,-2],[[161,[-1,-2]]],6,85],[[-1,24],[[162,[-1]]],6],[[-1,24],[[162,[-1]]],6],[[[163,[-1]]],[[163,[-1]]],20],[[[164,[-1]]],[[164,[-1]]],20],[[[165,[-1]]],[[165,[-1]]],20],[[[166,[-1]]],[[166,[-1]]],[]],[[[167,[-1]]],[[167,[-1]]],[]],[[[168,[-1]]],[[168,[-1]]],20],[169,169],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[170,[-1,-2]]],6,[113,171]],[-1,[[170,[-1,-2]]],6,[113,171]],[-1,[[172,[-1]]],6],[-1,[[172,[-1]]],6],[[[10,[[173,[-1]]]],24],2,174],[-1,[[175,[-1]]],6],[-1,[[175,[-1]]],6],[-1,[[176,[-1]]],[6,20]],[-1,[[176,[-1]]],[6,20]],[[],[[177,[-1]]],4],[[],[[178,[-1]]],[]],[[],[[179,[-1]]],[85,74]],[[],169],[[[178,[-1]]],2,[]],[[],[[166,[-1]]],[]],[-1,[[180,[-1]]],6],[-1,[[180,[-1]]],6],[[[181,[-1,-2]],[181,[-1,-2]]],27,114,114],[[[182,[-1,-2]],[182,[-1,-2]]],27,114,114],[[169,169],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[-1,[[183,[-1,-2]]],6,[]],[-1,[[183,[-1,-2]]],6,[]],[[[177,[-1]],-2],2,4,73],[[[178,[-1]],-2],2,[],73],[[[179,[-1]],-2],2,[85,74],73],[[-1,-2],[[184,[-1,-3,-2]]],6,80,4],[[-1,-2],[[184,[-1,-3,-2]]],6,80,4],[[-1,-2],[[185,[-1,-3,-2]]],6,80,4],[[-1,-2],[[185,[-1,-3,-2]]],6,80,4],[[-1,-2],[[186,[-1,-3,-2]]],6,80,85],[[-1,-2],[[186,[-1,-3,-2]]],6,80,85],[[-1,-2,-3],[[187,[-1,-4,-3]]],6,[[188,[[26,[24]]]]],80,[85,74]],[[-1,-2,-3],[[187,[-1,-4,-3]]],6,[[188,[[26,[24]]]]],80,[85,74]],[-1,[[189,[-1]]],6],[-1,[[189,[-1]]],6],[[-1,-2],[[190,[-1]]],6,[[188,[[26,[24]]]]]],[[-1,-2],[[190,[-1]]],6,[[188,[[26,[24]]]]]],[[[191,[-1]],32],33,[]],[[[177,[-1]],32],33,4],[[[178,[-1]],32],33,[]],[[[179,[-1]],32],33,36],[[[161,[-1,-2]],32],33,36,36],[[[170,[-1,-2]],32],33,36,36],[[[192,[-1,-2,-3]],32],33,36,36,36],[[[172,[-1]],32],33,[36,85]],[[[175,[-1]],32],33,36],[[[176,[-1]],32],33,36],[[[180,[-1]],32],33,36],[[[184,[-1,-2,-3]],32],33,[85,36],36,[]],[[[185,[-1,-2,-3]],32],33,36,36,[]],[[[189,[-1]],32],33,85],[[[193,[-1,-2,-3,-4]],32],33,36,36,36,[]],[[[155,[-1,-2,-3]],32],33,36,36,[]],[[[153,[-1,-2,-3]],32],33,36,36,[]],[[[194,[-1,-2,-3]],32],33,36,36,[]],[[[195,[-1]],32],33,36],[[[196,[-1]],32],33,36],[[[197,[-1,-2]],32],33,[],[]],[[[198,[-1,-2]],32],33,36,[]],[[[186,[-1,-2,-3]],32],33,[],[],[]],[[[199,[-1]],32],33,[36,6]],[[[200,[-1]],32],33,[36,6]],[[[201,[-1]],32],33,[36,85]],[[[202,[-1]],32],33,[85,36]],[[[203,[-1]],32],33,[85,36]],[[[204,[-1,-2]],32],33,[85,36],[]],[[[205,[-1,-2]],32],33,[85,36],6],[[[206,[-1]],32],33,36],[[[207,[-1,-2,-3]],32],33,[85,36],36,[]],[[[208,[-1]],32],33,36],[[[209,[-1,-2,-3]],32],33,[85,36],36,[]],[[[210,[-1,-2]],32],33,[85,36],[4,36]],[[[211,[-1,-2,-3]],32],33,36,36,[]],[[[212,[-1,-2]],32],33,[36,85],[36,85]],[[[162,[-1]],32],33,[36,85]],[[[213,[-1]],32],33,[36,85]],[[[214,[-1,-2,-3,-4]],32],33,[85,36],36,36,[]],[[[158,[-1]],32],33,[85,36]],[[[159,[-1]],32],33,[85,36]],[[[187,[-1,-2,-3]],32],33,85,[85,74],80],[[[215,[-1,-2,-3]],32],33,36,36,[]],[[[160,[-1]],32],33,36],[[[154,[-1,-2,-3]],32],33,36,36,[]],[[[183,[-1,-2]],32],33,[],[]],[[[216,[-1,-2]],32],33,[],[]],[[[217,[-1,-2]],32],33,[],[]],[[[218,[-1]],32],33,36],[[[219,[-1,-2]],32],33,[],[]],[[[220,[-1,-2]],32],33,[],[]],[[[221,[-1,-2,-3]],32],33,36,36,[]],[[[222,[-1]],32],33,[36,6]],[[[223,[-1,-2,-3]],32],33,36,36,[]],[[[224,[-1,-2,-3]],32],33,[174,36],36,[]],[[[225,[-1,-2,-3]],32],33,36,36,[]],[[[226,[-1]],32],33,[174,36]],[[[227,[-1]],32],33,174],[[[228,[-1,-2]],32],33,36,36],[[[229,[-1]],32],33,[36,174]],[[[230,[-1]],32],33,[36,174]],[[[181,[-1,-2]],32],33,[],36],[[[181,[-1,-2]],32],33,[],231],[[[232,[-1]],32],33,[36,174]],[[[182,[-1,-2]],32],33,[],231],[[[182,[-1,-2]],32],33,[],36],[[[233,[-1,-2,-3,-4]],32],33,36,36,36,[]],[[[234,[-1,-2,-3]],32],33,36,[],36],[[[235,[-1,-2,-3]],32],33,[174,36],36,[]],[[[236,[-1,-2,-3]],32],33,[174,36],36,[]],[[[237,[-1]],32],33,[174,36]],[[[238,[-1]],32],33,[174,36]],[[[239,[-1,-2,-3]],32],33,36,36,[]],[[[173,[-1]],32],33,[174,36]],[[[163,[-1]],32],33,36],[[[164,[-1]],32],33,36],[[[165,[-1]],32],33,36],[[[166,[-1]],32],33,36],[[[240,[-1]],32],33,36],[[[167,[-1]],32],33,36],[[[168,[-1]],32],33,36],[[[241,[-1,-2]],32],33,36,36],[[169,32],33],[[[242,[-1,-2,-3,-4]],32],33,36,36,[],36],[[[243,[-1,-2,-3]],32],33,36,[],36],[[-1,-2,-3],[[193,[-1,-4,-2,-3]]],6,[],80,4],[[-1,-2,-3],[[193,[-1,-4,-2,-3]]],6,[],80,4],[[-1,-2],[[194,[-1,-3,-2]]],6,80,4],[[-1,-2],[[194,[-1,-3,-2]]],6,80,4],[[-1,-2,-3],[[215,[-1,-4,-3]]],6,[[188,[[26,[24]]]]],80,4],[[-1,-2,-3],[[215,[-1,-4,-3]]],6,[[188,[[26,[24]]]]],80,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[177,[-2]]],73,4],[-1,[[178,[-2]]],73,[]],[-1,[[179,[-2]]],73,[85,74]],[-1,[[195,[-1]]],6],[-1,[[195,[-1]]],6],0,[[[180,[-1]]],-1,85],[[[184,[-1,-2,-3]]],-1,85,4,0],[[[185,[-1,-2,-3]]],-1,85,4,80],[[[189,[-1]]],-1,85],[[[195,[-1]]],-1,[]],[[[196,[-1]]],[[26,[-1]]],[85,74]],[[[197,[-1,-2]]],-1,[],[]],[[[198,[-1,-2]]],-1,[],[]],[[[186,[-1,-2,-3]]],-1,[],[],[]],[[[201,[-1]]],-1,85],[[[206,[-1]]],-1,85],[[[207,[-1,-2,-3]]],-1,85,4,80],[[[208,[-1]]],-1,85],[[[209,[-1,-2,-3]]],-1,85,4,80],[[[210,[-1,-2]]],-1,85,4],[[[211,[-1,-2,-3]]],-1,85,[],80],[[[212,[-1,-2]]],[[2,[-1,-2]]],85,85],[[[162,[-1]]],-1,85],[[[213,[-1]]],-1,85],[[[214,[-1,-2,-3,-4]]],-1,85,[],4,80],[[[158,[-1]]],-1,85],[[[159,[-1]]],-1,85],[[[187,[-1,-2,-3]]],-1,85,[85,74],80],[[[160,[-1]]],-1,[85,15]],[[[154,[-1,-2,-3]]],-1,174,8,80],[[[183,[-1,-2]]],-1,[],[]],[[[216,[-1,-2]]],-1,[],[]],[[[217,[-1,-2]]],-1,[],[]],[[[218,[-1]]],-1,[]],[[[219,[-1,-2]]],-1,[],[]],[[[220,[-1,-2]]],-1,[],[]],[[[221,[-1,-2,-3]]],-1,174,8,80],[[[224,[-1,-2,-3]]],-1,174,[],[]],[[[225,[-1,-2,-3]]],-1,[],[],[]],[[[226,[-1]]],-1,174],[[[227,[-1]]],-1,174],[[[230,[-1]]],-1,174],[[[232,[-1]]],-1,174],[[[235,[-1,-2,-3]]],-1,174,8,80],[[[236,[-1,-2,-3]]],-1,174,8,80],[[[237,[-1]]],-1,174],[[[238,[-1]]],-1,174],[[[241,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[242,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[]],[[[10,[[180,[-1]]]]],[[10,[-1]]],85],[[[10,[[184,[-1,-2,-3]]]]],[[10,[-1]]],85,4,0],[[[10,[[185,[-1,-2,-3]]]]],[[10,[-1]]],85,4,80],[[[10,[[189,[-1]]]]],[[10,[-1]]],85],[[[10,[[195,[-1]]]]],[[10,[-1]]],[]],[[[10,[[196,[-1]]]]],[[26,[[10,[-1]]]]],[85,74]],[[[10,[[197,[-1,-2]]]]],[[10,[-1]]],[],[]],[[[10,[[198,[-1,-2]]]]],[[10,[-1]]],[],[]],[[[10,[[186,[-1,-2,-3]]]]],[[10,[-1]]],[],[],[]],[[[10,[[201,[-1]]]]],[[10,[-1]]],85],[[[10,[[206,[-1]]]]],[[10,[-1]]],85],[[[10,[[207,[-1,-2,-3]]]]],[[10,[-1]]],85,4,80],[[[10,[[208,[-1]]]]],[[10,[-1]]],85],[[[10,[[209,[-1,-2,-3]]]]],[[10,[-1]]],85,4,80],[[[10,[[210,[-1,-2]]]]],[[10,[-1]]],85,4],[[[10,[[211,[-1,-2,-3]]]]],[[10,[-1]]],85,[],80],[[[10,[[212,[-1,-2]]]]],[[2,[[10,[-1]],[10,[-2]]]]],85,85],[[[10,[[162,[-1]]]]],[[10,[-1]]],85],[[[10,[[213,[-1]]]]],[[10,[-1]]],85],[[[10,[[214,[-1,-2,-3,-4]]]]],[[10,[-1]]],85,[],4,80],[[[10,[[158,[-1]]]]],[[10,[-1]]],85],[[[10,[[159,[-1]]]]],[[10,[-1]]],85],[[[10,[[187,[-1,-2,-3]]]]],[[10,[-1]]],85,[85,74],80],[[[10,[[160,[-1]]]]],[[10,[-1]]],[85,15]],[[[10,[[154,[-1,-2,-3]]]]],[[10,[-1]]],174,8,80],[[[10,[[183,[-1,-2]]]]],[[10,[-1]]],[],[]],[[[10,[[216,[-1,-2]]]]],[[10,[-1]]],[],[]],[[[10,[[217,[-1,-2]]]]],[[10,[-1]]],[],[]],[[[10,[[218,[-1]]]]],[[10,[-1]]],[]],[[[10,[[219,[-1,-2]]]]],[[10,[-1]]],[],[]],[[[10,[[220,[-1,-2]]]]],[[10,[-1]]],[],[]],[[[10,[[221,[-1,-2,-3]]]]],[[10,[-1]]],174,8,80],[[[10,[[224,[-1,-2,-3]]]]],[[10,[-1]]],174,[],[]],[[[10,[[225,[-1,-2,-3]]]]],[[10,[-1]]],[],[],[]],[[[10,[[226,[-1]]]]],[[10,[-1]]],174],[[[10,[[227,[-1]]]]],[[10,[-1]]],174],[[[10,[[230,[-1]]]]],[[10,[-1]]],174],[[[10,[[232,[-1]]]]],[[10,[-1]]],174],[[[10,[[235,[-1,-2,-3]]]]],[[10,[-1]]],174,8,80],[[[10,[[236,[-1,-2,-3]]]]],[[10,[-1]]],174,8,80],[[[10,[[237,[-1]]]]],[[10,[-1]]],174],[[[10,[[238,[-1]]]]],[[10,[-1]]],174],[[[10,[[241,[-1,-2]]]]],[[2,[[10,[-1]],[10,[-2]]]]],[],[]],[[[10,[[242,[-1,-2,-3,-4]]]]],[[2,[[10,[-1]],[10,[-2]]]]],[],[],[],[]],[[[180,[-1]]],-1,85],[[[184,[-1,-2,-3]]],-1,85,4,0],[[[185,[-1,-2,-3]]],-1,85,4,80],[[[189,[-1]]],-1,85],[[[195,[-1]]],-1,[]],[[[196,[-1]]],[[26,[-1]]],[85,74]],[[[197,[-1,-2]]],-1,[],[]],[[[198,[-1,-2]]],-1,[],[]],[[[186,[-1,-2,-3]]],-1,[],[],[]],[[[201,[-1]]],-1,85],[[[206,[-1]]],-1,85],[[[207,[-1,-2,-3]]],-1,85,4,80],[[[208,[-1]]],-1,85],[[[209,[-1,-2,-3]]],-1,85,4,80],[[[210,[-1,-2]]],-1,85,4],[[[211,[-1,-2,-3]]],-1,85,[],80],[[[212,[-1,-2]]],[[2,[-1,-2]]],85,85],[[[162,[-1]]],-1,85],[[[213,[-1]]],-1,85],[[[214,[-1,-2,-3,-4]]],-1,85,[],4,80],[[[158,[-1]]],-1,85],[[[159,[-1]]],-1,85],[[[187,[-1,-2,-3]]],-1,85,[85,74],80],[[[160,[-1]]],-1,[85,15]],[[[154,[-1,-2,-3]]],-1,174,8,80],[[[183,[-1,-2]]],-1,[],[]],[[[216,[-1,-2]]],-1,[],[]],[[[217,[-1,-2]]],-1,[],[]],[[[218,[-1]]],-1,[]],[[[219,[-1,-2]]],-1,[],[]],[[[220,[-1,-2]]],-1,[],[]],[[[221,[-1,-2,-3]]],-1,174,8,80],[[[224,[-1,-2,-3]]],-1,174,[],[]],[[[225,[-1,-2,-3]]],-1,[],[],[]],[[[226,[-1]]],-1,174],[[[227,[-1]]],-1,174],[[[230,[-1]]],-1,174],[[[232,[-1]]],-1,174],[[[235,[-1,-2,-3]]],-1,174,8,80],[[[236,[-1,-2,-3]]],-1,174,8,80],[[[237,[-1]]],-1,174],[[[238,[-1]]],-1,174],[[[241,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[242,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[]],[[169,-1],2,92],[[-1,-2],[[197,[-1,-2]]],6,80],[[-1,-2],[[197,[-1,-2]]],6,80],[[-1,-2],[[217,[-1,-2]]],6,80],[[-1,-2],[[217,[-1,-2]]],6,80],[[-1,-2],[[216,[-1,-2]]],6,80],[[-1,-2],[[216,[-1,-2]]],6,80],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[173,[-1]]],[6,244]],[-1,[[173,[-1]]],[6,244]],[-1,[[196,[-1]]],[6,74]],[-1,[[196,[-1]]],[6,74]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[180,[-1]]],-1,85],[[[184,[-1,-2,-3]]],-1,85,4,0],[[[185,[-1,-2,-3]]],-1,85,4,80],[[[189,[-1]]],-1,85],[[[195,[-1]]],-1,[]],[[[196,[-1]]],[[26,[-1]]],[85,74]],[[[197,[-1,-2]]],-1,[],[]],[[[198,[-1,-2]]],-1,[],[]],[[[186,[-1,-2,-3]]],-1,[],[],[]],[[[201,[-1]]],-1,85],[[[206,[-1]]],-1,85],[[[207,[-1,-2,-3]]],-1,85,4,80],[[[208,[-1]]],-1,85],[[[209,[-1,-2,-3]]],-1,85,4,80],[[[210,[-1,-2]]],-1,85,4],[[[211,[-1,-2,-3]]],-1,85,[],80],[[[212,[-1,-2]]],[[2,[-1,-2]]],85,85],[[[162,[-1]]],-1,85],[[[213,[-1]]],-1,85],[[[214,[-1,-2,-3,-4]]],-1,85,[],4,80],[[[158,[-1]]],-1,85],[[[159,[-1]]],-1,85],[[[187,[-1,-2,-3]]],-1,85,[85,74],80],[[[160,[-1]]],-1,[85,15]],[[[154,[-1,-2,-3]]],-1,174,8,80],[[[183,[-1,-2]]],-1,[],[]],[[[216,[-1,-2]]],-1,[],[]],[[[217,[-1,-2]]],-1,[],[]],[[[218,[-1]]],-1,[]],[[[219,[-1,-2]]],-1,[],[]],[[[220,[-1,-2]]],-1,[],[]],[[[221,[-1,-2,-3]]],-1,174,8,80],[[[224,[-1,-2,-3]]],-1,174,[],[]],[[[225,[-1,-2,-3]]],-1,[],[],[]],[[[226,[-1]]],-1,174],[[[227,[-1]]],-1,174],[[[230,[-1]]],-1,174],[[[232,[-1]]],-1,174],[[[235,[-1,-2,-3]]],-1,174,8,80],[[[236,[-1,-2,-3]]],-1,174,8,80],[[[237,[-1]]],-1,174],[[[238,[-1]]],-1,174],[[[241,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[242,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[]],[[[178,[-1]]],[],74],[[[178,[-1]]],[],74],[[[178,[-1]]],[],74],[[[179,[-1]]],[],[85,74]],[[[179,[-1]]],[],[85,74]],[[[179,[-1]]],[],[85,74]],[-1,[[218,[-1]]],6],[-1,[[218,[-1]]],6],[[[195,[-1]]],27,[]],[[[177,[-1]]],27,4],[[[210,[-1,-2]]],27,85,4],[-1,27,[]],[[[177,[-1]]],27,4],[[[178,[-1]]],27,4],[[[179,[-1]]],27,[85,74]],[[[161,[-1,-2]]],27,85,77],[[[170,[-1,-2]]],27,77,[113,171]],[[[192,[-1,-3,-5]]],27,77,[],[113,[171,[-2]]],[],[113,[171,[-4]]]],[[[172,[-1]]],27,77],[[[175,[-1]]],27,77],[[[176,[-1]]],27,[20,85]],[[[180,[-1]]],27,[85,77]],[[[184,[-1,-2,-3]]],27,[85,77],4,80],[[[185,[-1,-2,-3]]],27,[85,77],4,0],[[[189,[-1]]],27,85],[[[193,[-1,-2,-3,-4]]],27,85,4,[],80],[[[155,[-1,-2,-3]]],27,85,4,80],[[[153,[-1,-2,-3]]],27,85,4,80],[[[194,[-1,-2,-3]]],27,77,4,80],[[[195,[-1]]],27,85],[[[196,[-1]]],27,[85,74]],[[[197,[-1,-2]]],27,[],[]],[[[198,[-1,-2]]],27,77,0],[[[186,[-1,-2,-3]]],27,[],[],[]],[[[199,[-1]]],27,[6,77,74]],[[[200,[-1]]],27,[6,77,74]],[[[201,[-1]]],27,85],[[[202,[-1]]],27,85],[[[203,[-1]]],27,85],[[[204,[-1,-2]]],27,85,0],[[[205,[-1,-2]]],27,85,6],[[[206,[-1]]],27,77],[[[207,[-1,-2,-3]]],27,77,4,80],[[[208,[-1]]],27,77],[[[209,[-1,-2,-3]]],27,77,4,80],[[[210,[-1,-2]]],27,85,4],[[[211,[-1,-2,-3]]],27,77,4,80],[[[212,[-1,-2]]],27,85,85],[[[162,[-1]]],27,77],[[[213,[-1]]],27,85],[[[214,[-1,-2,-3,-4]]],27,77,[],4,80],[[[158,[-1]]],27,85],[[[159,[-1]]],27,85],[[[187,[-1,-2,-3]]],27,85,[85,74],80],[[[215,[-1,-2,-3]]],27,85,4,80],[[[160,[-1]]],27,[77,15]],[[[154,[-1,-2,-3]]],27,[174,77],8,80],[[[183,[-1,-2]]],27,[],[]],[[[216,[-1,-2]]],27,[],[]],[[[217,[-1,-2]]],27,[],[]],[[[218,[-1]]],27,[174,77]],[[[219,[-1,-2]]],27,[],[]],[[[220,[-1,-2]]],27,[],[]],[[[221,[-1,-2,-3]]],27,[174,77],8,80],[[[222,[-1]]],27,[6,174,74,77]],[[[224,[-1,-2,-3]]],27,[174,77],4,80],[[[225,[-1,-2,-3]]],27,[174,77],8,80],[[[226,[-1]]],27,[174,77]],[[[227,[-1]]],27,174],[[[228,[-1,-2]]],27,[174,77],[113,171]],[[[230,[-1]]],27,[174,77]],[[[232,[-1]]],27,[174,77]],[[[233,[-1,-2,-3,-4]]],27,174,8,[],80],[[[235,[-1,-2,-3]]],27,[174,77],8,80],[[[236,[-1,-2,-3]]],27,[174,77],8,80],[[[239,[-1,-2,-3]]],27,174,4,80],[[[164,[-1]]],27,20],[[[165,[-1]]],27,80],[[[166,[-1]]],27,[]],[[[240,[-1]]],27,4],[[[167,[-1]]],27,[]],[[[168,[-1]]],27,85],[[[241,[-1,-2]]],27,85,85],[[[242,[-1,-2,-3,-4]]],27,85,85,80,[]],[[[243,[-1,-2,-3]]],27,[],80,4],[-1,163,73],[-1,[[9,[-1,-2]]],6,85],[-1,[[9,[-1,-2]]],6,85],[[[177,[-1]]],24,4],[[-1,-2],[[198,[-1,-2]]],6,80],[[-1,-2],[[198,[-1,-2]]],6,80],[[-1,-2],[[220,[-1,-2]]],6,80],[[-1,-2],[[220,[-1,-2]]],6,80],[[-1,-2],[[219,[-1,-2]]],6,80],[[-1,-2],[[219,[-1,-2]]],6,80],[[],[[177,[-1]]],4],[-1,[[199,[-1]]],74],[-1,[[199,[-1]]],74],[[[10,[[201,[-1]]]],-2],[[204,[-1,-2]]],85,7],[[[10,[[201,[-1]]]],-2],[[205,[-1,-2]]],85,6],[-1,[[240,[-1]]],4],[[-1,-2],[[221,[-1,-3,-2]]],6,80,8],[[-1,-2],[[221,[-1,-3,-2]]],6,80,8],[[[10,[[201,[-1]]]]],[[202,[-1]]],85],[[[10,[[201,[-1]]]]],[[203,[-1]]],85],[-1,[[201,[-1]]],6],[-1,[[201,[-1]]],6],[[],[[167,[-1]]],[]],[[[10,[[170,[-1,-2]]]],78],[[79,[-2]]],85,[113,171]],[[[10,[[192,[-1,-3,-5]]]],78],[[79,[[2,[-3,-5]]]]],85,[],[113,[171,[-2]]],[],[113,[171,[-4]]]],[[[10,[[172,[-1]]]],78],79,85],[[[10,[[175,[-1]]]],78],79,85],[[[10,[[193,[-1,-2,-3,-4]]]],78],[[79,[-3]]],85,4,[],80],[[[10,[[155,[-1,-2,-3]]]],78],[[79,[27]]],85,4,80],[[[10,[[153,[-1,-2,-3]]]],78],[[79,[27]]],85,4,80],[[[10,[[194,[-1,-2,-3]]]],78],[[79,[2]]],85,4,80],[[[10,[[196,[-1]]]],78],79,[85,74]],[[[10,[[199,[-1]]]],78],79,[6,85,74]],[[[10,[[200,[-1]]]],78],79,[6,77,74]],[[[10,[[202,[-1]]]],78],79,85],[[[10,[[203,[-1]]]],78],79,85],[[[10,[[204,[-1,-2]]]],78],79,85,0],[[[10,[[205,[-1,-2]]]],78],79,85,6],[[[10,[[215,[-1,-2,-3]]]],78],[[79,[2]]],85,4,80],[[[10,[[222,[-1]]]],78],79,[6,174,74]],[[[10,[[223,[-1,-2,-3]]]],78],79,174,8,80],[[[10,[[228,[-1,-2]]]],78],79,174,[113,171]],[[[10,[[229,[-1]]]],78],79,174],[[[10,[[233,[-1,-2,-3,-4]]]],78],79,174,8,[],80],[[[10,[[239,[-1,-2,-3]]]],78],79,174,4,80],[[[10,[[173,[-1]]]],78],[[79,[[81,[2]]]]],[174,82]],[[[10,[[173,[-1]]]],78],[[79,[[81,[[84,[83]]]]]]],174],[[[10,[[173,[-1]]]],78],[[79,[[81,[2]]]]],[174,82]],[-1,[[191,[-1]]],80],[-1,[[168,[-1]]],85],[[[10,[-1]],78],[[79,[26]]],[]],[[[10,[[191,[-1]]]],78],[[79,[[26,[-2]]]]],80,[]],[[[10,[[177,[-1]]]],78],[[79,[26]]],4],[[[10,[[178,[-1]]]],78],[[79,[26]]],4],[[[10,[[179,[-1]]]],78],[[79,[26]]],[85,74]],[[[10,[[161,[-1,-2]]]],78],[[79,[26]]],85,85],[[[10,[[176,[-1]]]],78],[[79,[26]]],[20,85]],[[[10,[[180,[-1]]]],78],[[79,[26]]],85],[[[10,[[184,[-1,-2,-3]]]],78],[[79,[26]]],85,4,0],[[[10,[[185,[-1,-2,-3]]]],78],[[79,[[26,[-4]]]]],85,4,0,[]],[[[10,[[189,[-1]]]],78],[[79,[26]]],85],[[[10,[[195,[-1]]]],78],[[79,[26]]],85],[[[10,[[197,[-1,-2]]]],78],[[79,[26]]],[],[]],[[[10,[[198,[-1,-2]]]],78],[[79,[26]]],85,0],[[[10,[[186,[-1,-2,-3]]]],78],[[79,[26]]],[],[],[]],[[[10,[[201,[-1]]]],78],[[79,[26]]],85],[[[10,[[206,[-1]]]],78],[[79,[26]]],85],[[[10,[[207,[-1,-2,-3]]]],78],[[79,[26]]],85,4,80],[[[10,[[208,[-1]]]],78],[[79,[26]]],85],[[[10,[[209,[-1,-2,-3]]]],78],[[79,[26]]],85,4,80],[[[10,[[210,[-1,-2]]]],78],[[79,[26]]],85,4],[[[10,[[211,[-1,-2,-3]]]],78],[[79,[26]]],85,4,80],[[[10,[[212,[-1,-2]]]],78],[[79,[26]]],85,85],[[[10,[[162,[-1]]]],78],[[79,[26]]],85],[[[10,[[213,[-1]]]],78],[[79,[26]]],85],[[[10,[[214,[-1,-2,-3,-4]]]],78],[[79,[[26,[-5]]]]],85,[],4,80,[]],[[[10,[[158,[-1]]]],78],[[79,[26]]],85],[[[10,[[159,[-1]]]],78],[[79,[26]]],85],[[[10,[[187,[-1,-2,-3]]]],78],[[79,[26]]],85,[85,74],80],[[[10,[[160,[-1]]]],78],[[79,[26]]],[85,15]],[[[10,[[154,[-1,-2,-3]]]],78],[[79,[26]]],174,8,80],[[[10,[[183,[-1,-2]]]],78],[[79,[26]]],[],[]],[[[10,[[216,[-1,-2]]]],78],[[79,[26]]],[],[]],[[[10,[[217,[-1,-2]]]],78],[[79,[26]]],[],[]],[[[10,[[218,[-1]]]],78],[[79,[26]]],174],[[[10,[[219,[-1,-2]]]],78],[[79,[26]]],[],[]],[[[10,[[220,[-1,-2]]]],78],[[79,[26]]],[],[]],[[[10,[[221,[-1,-2,-3]]]],78],[[79,[26]]],174,8,80],[[[10,[[224,[-1,-2,-3]]]],78],[[79,[26]]],174,4,80],[[[10,[[225,[-1,-2,-3]]]],78],[[79,[26]]],174,8,80],[[[10,[[226,[-1]]]],78],[[79,[26]]],174],[[[10,[[227,[-1]]]],78],[[79,[26]]],174],[[[10,[[230,[-1]]]],78],[[79,[26]]],174],[[[10,[[232,[-1]]]],78],[[79,[26]]],174],[[[10,[[234,[-1,-2,-3]]]],78],[[79,[26]]],[],80,8],[[[10,[[235,[-1,-2,-3]]]],78],[[79,[26]]],174,8,80],[[[10,[[236,[-1,-2,-3]]]],78],[[79,[26]]],174,8,80],[[[10,[[237,[-1]]]],78],[[79,[26]]],174],[[[10,[[238,[-1]]]],78],[[79,[26]]],174],[[[10,[[163,[-1]]]],78],[[79,[26]]],245],[[[10,[[164,[-1]]]],78],[[79,[26]]],20],[[[10,[[165,[-1]]]],78],[[79,[26]]],80],[[[10,[[166,[-1]]]],78],[[79,[26]]],[]],[[[10,[[240,[-1]]]],78],[[79,[26]]],4],[[[10,[[167,[-1]]]],78],[[79,[26]]],[]],[[[10,[[168,[-1]]]],78],[[79,[26]]],85],[[[10,[[241,[-1,-2]]]],78],[[79,[26]]],85,85],[[[10,[[242,[-1,-2,-3,-4]]]],78],[[79,[26]]],85,85,80,[]],[[[10,[[243,[-1,-2,-3]]]],78],[[79,[26]]],[],80,4],[[-1,78],[[79,[26]]],74],[[-1,78],[[79,[26]]],74],[[[10,[[201,[-1]]]],78],[[79,[26]]],85],[[[10,[[201,[-1]]]],78],[[79,[26]]],85],[[[10,[[173,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],174],[[[10,[[173,[-1]]]],78,[84,[83]]],[[79,[[81,[24]]]]],[174,82]],[[[177,[-1]],-1],2,4],[[[177,[-1]],-1],2,4],[[[177,[-1]],-1],2,4],[[-1,24],[[213,[-1]]],6],[[-1,24],[[213,[-1]]],6],[-1,[[164,[-1]]],20],[-1,[[165,[-1]]],80],[-1,[[9,[-2,-1]]],6,85],[-1,[[9,[-2,-1]]],6,85],[[-1,-2,-3],[[214,[-1,-2,-4,-3]]],6,[],80,4],[[-1,-2,-3],[[214,[-1,-2,-4,-3]]],6,[],80,4],[[-1,-2],[[241,[-1,-2]]],85,85],0,[-1,179,73],[-1,[[200,[-1]]],[74,77]],[-1,[[200,[-1]]],[74,77]],[[-1,-2,-3],[[242,[-1,-2,-3,-4]]],85,85,80,113],[-1,[[2,[24,[26,[24]]]]],[]],[[[177,[-1]]],[[2,[24,[26,[24]]]]],4],[[[178,[-1]]],[[2,[24,[26,[24]]]]],4],[[[161,[-1,-2]]],[[2,[24,[26,[24]]]]],85,85],[[[176,[-1]]],[[2,[24,[26,[24]]]]],[20,85]],[[[180,[-1]]],[[2,[24,[26,[24]]]]],85],[[[184,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],85,4,0],[[[185,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],85,4,0],[[[189,[-1]]],[[2,[24,[26,[24]]]]],85],[[[195,[-1]]],[[2,[24,[26,[24]]]]],85],[[[197,[-1,-2]]],[[2,[24,[26,[24]]]]],[],[]],[[[198,[-1,-2]]],[[2,[24,[26,[24]]]]],85,0],[[[186,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],[],[],[]],[[[201,[-1]]],[[2,[24,[26,[24]]]]],85],[[[206,[-1]]],[[2,[24,[26,[24]]]]],85],[[[207,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],85,4,80],[[[208,[-1]]],[[2,[24,[26,[24]]]]],85],[[[209,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],85,4,80],[[[210,[-1,-2]]],[[2,[24,[26,[24]]]]],85,4],[[[211,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],85,4,80],[[[212,[-1,-2]]],[[2,[24,[26,[24]]]]],85,85],[[[162,[-1]]],[[2,[24,[26,[24]]]]],85],[[[213,[-1]]],[[2,[24,[26,[24]]]]],85],[[[214,[-1,-2,-3,-4]]],[[2,[24,[26,[24]]]]],85,[],4,80],[[[158,[-1]]],[[2,[24,[26,[24]]]]],85],[[[159,[-1]]],[[2,[24,[26,[24]]]]],85],[[[187,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],85,[85,74],80],[[[160,[-1]]],[[2,[24,[26,[24]]]]],[85,15]],[[[154,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],174,8,80],[[[183,[-1,-2]]],[[2,[24,[26,[24]]]]],[],[]],[[[216,[-1,-2]]],[[2,[24,[26,[24]]]]],[],[]],[[[217,[-1,-2]]],[[2,[24,[26,[24]]]]],[],[]],[[[218,[-1]]],[[2,[24,[26,[24]]]]],174],[[[219,[-1,-2]]],[[2,[24,[26,[24]]]]],[],[]],[[[220,[-1,-2]]],[[2,[24,[26,[24]]]]],[],[]],[[[221,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],174,8,80],[[[224,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],174,4,80],[[[225,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],174,8,80],[[[227,[-1]]],[[2,[24,[26,[24]]]]],174],[[[230,[-1]]],[[2,[24,[26,[24]]]]],174],[[[232,[-1]]],[[2,[24,[26,[24]]]]],174],[[[235,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],174,8,80],[[[236,[-1,-2,-3]]],[[2,[24,[26,[24]]]]],174,8,80],[[[163,[-1]]],[[2,[24,[26,[24]]]]],245],[[[164,[-1]]],[[2,[24,[26,[24]]]]],20],[[[165,[-1]]],[[2,[24,[26,[24]]]]],80],[[[166,[-1]]],[[2,[24,[26,[24]]]]],[]],[[[240,[-1]]],[[2,[24,[26,[24]]]]],4],[[[167,[-1]]],[[2,[24,[26,[24]]]]],[]],[[[168,[-1]]],[[2,[24,[26,[24]]]]],85],[[-1,24],[[206,[-1]]],6],[[-1,24],[[206,[-1]]],6],[[-1,-2],[[207,[-1,-3,-2]]],6,80,4],[[-1,-2],[[207,[-1,-3,-2]]],6,80,4],[[[178,[[246,[2]]]],[246,[2]]],[[28,[2,247]]]],[[[178,[[248,[2]]]],[248,[2]]],[[28,[2,247]]]],[[-1,24],[[208,[-1]]],6],[[-1,24],[[208,[-1]]],6],[[[210,[-1,-2]]],[[26,[-2]]],85,4],[[[210,[-1,-2]]],26,85,4],[[-1,-2],[[210,[-1,-2]]],6,4],[[-1,-2],[[210,[-1,-2]]],6,4],[[-1,-2],[[209,[-1,-3,-2]]],6,80,4],[[-1,-2],[[209,[-1,-3,-2]]],6,80,4],[[-1,-2],[[211,[-1,-3,-2]]],6,80,4],[[-1,-2],[[211,[-1,-3,-2]]],6,80,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,93,[]],[-1,93,[]],[169,169],[[-1,-2],[[0,[-1,-3,-2]]],6,80,4],[[-1,-2],[[0,[-1,-3,-2]]],6,80,4],[[-1,-2],[[0,[-1,-3,-2]]],6,80,4],[[-1,-2],[[0,[-1,-3,-2]]],6,80,4],[[-1,24],[[237,[-1]]],6],[[-1,24],[[237,[-1]]],6],[[-1,24],[[238,[-1]]],6],[[-1,24],[[238,[-1]]],6],[[-1,24],[[230,[-1]]],6],[[-1,24],[[230,[-1]]],6],[-1,[[228,[-1,-2]]],6,[113,171]],[-1,[[228,[-1,-2]]],6,[113,171]],[-1,[[229,[-1]]],6],[-1,[[229,[-1]]],6],[[-1,-2],[[224,[-1,-3,-2]]],6,80,4],[[-1,-2],[[224,[-1,-3,-2]]],6,80,4],[[-1,-2],[[225,[-1,-3,-2]]],6,80,8],[[-1,-2],[[225,[-1,-3,-2]]],6,80,8],[-1,[[226,[-1]]],6],[-1,[[226,[-1]]],6],[[-1,-2],[[227,[-1]]],6,[[188,[[26,[24]]]]]],[[-1,-2],[[227,[-1]]],6,[[188,[[26,[24]]]]]],[[-1,-2,-3],[[233,[-1,-4,-2,-3]]],6,[],80,8],[[-1,-2,-3],[[233,[-1,-4,-2,-3]]],6,[],80,8],[[-1,-2],[[223,[-1,-3,-2]]],6,80,8],[[-1,-2],[[223,[-1,-3,-2]]],6,80,8],[[-1,-2,-3],[[239,[-1,-4,-3]]],6,[[188,[[26,[24]]]]],80,4],[[-1,-2,-3],[[239,[-1,-4,-3]]],6,[[188,[[26,[24]]]]],80,4],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[222,[-1]]],74],[-1,[[222,[-1]]],74],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[[10,[-1]],78],[[79,[[26,[28]]]]],[]],[[-1,78],[[79,[[26,[28]]]]],74],[[-1,78],[[79,[[26,[28]]]]],74],[[-1,24],[[232,[-1]]],6],[[-1,24],[[232,[-1]]],6],[[-1,-2],[[235,[-1,-3,-2]]],6,80,8],[[-1,-2],[[235,[-1,-3,-2]]],6,80,8],[[-1,-2],[[236,[-1,-3,-2]]],6,80,8],[[-1,-2],[[236,[-1,-3,-2]]],6,80,8],[[-1,-2],[[234,[-1,-2,-3]]],[],80,8],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[[-1,-2],[[243,[-1,-2,-3]]],[],80,4],[-1,[[192,[-1,-3,-5]]],[6,85],[],[113,[171,[-2]]],[],[113,[171,[-4]]]],[-1,[[192,[-1,-3,-5]]],[6,85],[],[113,[171,[-2]]],[],[113,[171,[-4]]]],[[-1,-2],[[212,[-1,-2]]],6,85],[[-1,-2],[[212,[-1,-2]]],6,85],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[178,[-1]]],2,[]],[[[249,[-1]],32],33,36],[[[250,[-1]],32],33,[36,74]],[[[251,[-1]],32],33,36],[[[252,[-1]],32],33,[36,74]],[[[253,[-1]],32],33,[36,74]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[178,[-1]]],27,[]],[[[178,[-1]]],[[252,[-1]]],74],[[[178,[-1]]],[[250,[-1]]],74],[[[10,[[178,[-1]]]]],[[249,[-1]]],[]],[[[10,[[178,[-1]]]]],[[251,[-1]]],[]],[[[178,[-1]]],24,[]],[[],[[178,[-1]]],[]],[[[249,[-1]]],26,[]],[[[250,[-1]]],26,74],[[[251,[-1]]],26,[]],[[[252,[-1]]],26,74],[[[253,[-1]]],26,74],[[[178,[-1]],-1],2,[]],[[[249,[-1]]],[[2,[24,[26,[24]]]]],[]],[[[250,[-1]]],[[2,[24,[26,[24]]]]],74],[[[251,[-1]]],[[2,[24,[26,[24]]]]],[]],[[[252,[-1]]],[[2,[24,[26,[24]]]]],74],[[[253,[-1]]],[[2,[24,[26,[24]]]]],74],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[179,[-1]]],2,[85,74]],[[[254,[-1]],32],33,[36,74]],[[[255,[-1]],32],33,[36,74]],[[[256,[-1]],32],33,[36,74]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[179,[-1]]],27,[85,74]],[[[179,[-1]]],[[254,[-1]]],[85,74]],[[[179,[-1]]],[[255,[-1]]],[85,74]],[[[179,[-1]]],24,[85,74]],[[],[[179,[-1]]],[85,74]],[[[254,[-1]]],26,[85,74]],[[[255,[-1]]],26,[85,74]],[[[256,[-1]]],26,[85,74]],[[[179,[-1]],-1],2,[85,74]],[-1,179,73],[[[254,[-1]]],[[2,[24,[26,[24]]]]],[85,74]],[[[255,[-1]]],[[2,[24,[26,[24]]]]],[85,74]],[[[256,[-1]]],[[2,[24,[26,[24]]]]],[85,74]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],257],[258,259],[4,2],[[[246,[-1]]],2,[]],[[247,32],[[28,[2,260]]]],[[247,32],[[28,[2,260]]]],[[[246,[-1]],32],[[28,[2,260]]],[]],[[257,32],[[28,[2,260]]]],[[[248,[-1]],32],[[28,[2,260]]],[]],[[258,32],[[28,[2,260]]]],[-1,-1,[]],[[[10,[[139,[4,261]]]]],[[246,[2]]]],[[[248,[-1]]],[[246,[-1]]],[]],[[[139,[4,261]]],[[246,[2]]]],[[[10,[[139,[-1,261]]]]],[[246,[2]]],4],[[[139,[-1,261]]],[[246,[2]]],4],[-1,-1,[]],[-1,-1,[]],[[[139,[4,261]]],[[248,[2]]]],[[[10,[[139,[4,261]]]]],[[248,[2]]]],[[[10,[[139,[-1,261]]]]],[[248,[2]]],[4,12]],[-1,-1,[]],[[[139,[-1,261]]],[[248,[2]]],[4,12]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[246,[-1]]],[[248,[-1]]],[]],[-1,4,[]],[247,27],[-2,[[246,[-1]]],[],[[262,[-1]]]],[[],257],[-2,[[248,[-1]]],[],[[262,[-1]],12]],[259,258],[[[263,[259]]],258],[[],259],[[],259],[[[10,[[246,[-1]]]],78],[[79,[-1]]],[]],[[[10,[[248,[-1]]]],78],[[79,[-1]]],[]],[[257,259],2],[[],247],[[-1,-2],[[28,[2,247]]],[],[4,12]],[[-1,-2],[[28,[2,247]]],[],[4,12]],[[-1,-2],[[28,[2,247]]],[],4],[[-1,-2],[[28,[2,247]]],[],4],[[-1,[246,[2]]],[[28,[2,247]]],[]],[[-1,[248,[2]]],[[28,[2,247]]],[]],[-1,[[28,[2,247]]],[]],[-1,[[28,[2,247]]],[]],[257,[[26,[259]]]],[-1,93,[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[[10,[-1]],78],79,[]],[[[10,[-1]],78],79,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[-1,94,[]],[[[152,[-1,261]]],2,[]],[257,2],[[[152,[-1,261]]],2,[]],[[[152,[-1,261]]],259,264],[[[152,[-1,261]]],258,264]],"c":[2528],"p":[[3,"AbortHandle",24],[15,"tuple"],[3,"Abortable",24],[8,"Future",3196],[3,"AndThen",24],[8,"Sized",3197],[8,"FnOnce",3198],[8,"TryFuture",24],[4,"Either",24],[3,"Pin",3199],[6,"BoxFuture",24],[8,"Send",3197],[6,"LocalBoxFuture",24],[3,"CatchUnwind",24],[8,"UnwindSafe",3200],[3,"Shared",24],[3,"WeakShared",24],[3,"Pending",24],[3,"OptionFuture",24],[8,"Clone",3201],[3,"PollImmediate",24],[3,"Ready",24],[3,"Aborted",24],[15,"usize"],[8,"AsyncBufRead",869],[4,"Option",3202],[15,"bool"],[4,"Result",3203],[3,"ErrInto",24],[3,"Flatten",24],[3,"FlattenStream",24],[3,"Formatter",3204],[6,"Result",3204],[3,"PollFn",24],[3,"JoinAll",24],[8,"Debug",3204],[3,"TryJoinAll",24],[3,"Fuse",24],[3,"Map",24],[3,"IntoStream",24],[3,"MapInto",24],[3,"Then",24],[3,"Inspect",24],[3,"NeverError",24],[3,"UnitError",24],[3,"IntoFuture",24],[3,"TryFlatten",24],[3,"TryFlattenStream",24],[3,"OrElse",24],[3,"OkInto",24],[3,"InspectOk",24],[3,"InspectErr",24],[3,"MapOk",24],[3,"MapErr",24],[3,"MapOkOrElse",24],[3,"UnwrapOrElse",24],[3,"Lazy",24],[4,"MaybeDone",24],[4,"TryMaybeDone",24],[3,"Join",24],[3,"Join3",24],[3,"Join4",24],[3,"Join5",24],[3,"Select",24],[3,"SelectAll",24],[3,"TryJoin",24],[3,"TryJoin3",24],[3,"TryJoin4",24],[3,"TryJoin5",24],[3,"TrySelect",24],[3,"SelectOk",24],[3,"AbortRegistration",24],[8,"IntoIterator",3205],[8,"Unpin",3197],[3,"Vec",3206],[8,"FusedFuture",24],[8,"FusedStream",1507],[3,"Context",3207],[4,"Poll",3208],[8,"FnMut",3198],[6,"Result",3209],[8,"AsyncWrite",869],[15,"u8"],[15,"slice"],[8,"Stream",1507],[8,"AsyncRead",869],[3,"IoSliceMut",3210],[4,"SeekFrom",3210],[15,"u64"],[8,"AsyncSeek",869],[3,"IoSlice",3210],[8,"Hasher",3211],[3,"String",3212],[3,"TypeId",3213],[3,"Window",869],[8,"AsMut",3214],[8,"AsRef",3214],[3,"BufReader",869],[3,"BufWriter",869],[3,"LineWriter",869],[3,"Chain",869],[3,"AllowStdIo",869],[3,"Cursor",869],[3,"Close",869],[4,"Ordering",3215],[8,"Ord",3215],[3,"Empty",869],[8,"BufRead",3210],[3,"Take",869],[3,"Copy",869],[3,"CopyBuf",869],[3,"CopyBufAbortable",869],[8,"Default",3216],[8,"PartialEq",3215],[3,"FillBuf",869],[3,"Flush",869],[8,"Write",3210],[3,"Repeat",869],[3,"Sink",869],[3,"ReuniteError",869],[3,"SeeKRelative",869],[3,"Lines",869],[3,"Read",869],[3,"ReadVectored",869],[3,"ReadExact",869],[3,"ReadLine",869],[3,"ReadToEnd",869],[3,"ReadToString",869],[3,"ReadUntil",869],[3,"Seek",869],[3,"ReadHalf",869],[3,"WriteHalf",869],[3,"Write",869],[3,"WriteVectored",869],[3,"WriteAll",869],[8,"Hash",3211],[8,"PartialOrd",3215],[3,"Error",3209],[3,"Box",3217],[8,"Read",3210],[8,"Seek",3210],[15,"i64"],[8,"RangeBounds",3218],[3,"Arguments",3204],[3,"Mutex",1423],[3,"OwnedMutexGuard",1423],[3,"MutexGuard",1423],[3,"MappedMutexGuard",1423],[3,"OwnedMutexLockFuture",1423],[3,"MutexLockFuture",1423],[15,"never"],[3,"Arc",3219],[3,"All",1507],[3,"AndThen",1507],[3,"Any",1507],[6,"BoxStream",1507],[6,"LocalBoxStream",1507],[3,"BufferUnordered",1507],[3,"Buffered",1507],[3,"CatchUnwind",1507],[3,"Chain",1507],[3,"Chunks",1507],[3,"Iter",1507],[3,"Repeat",1507],[3,"RepeatWith",1507],[3,"Empty",1507],[3,"Pending",1507],[3,"PollImmediate",1507],[4,"PollNext",1507],[3,"Collect",1507],[8,"Extend",3205],[3,"Concat",1507],[3,"IntoAsyncRead",1507],[8,"TryStream",1507],[3,"Count",1507],[3,"Cycle",1507],[3,"FuturesOrdered",1507],[3,"FuturesUnordered",1507],[3,"SelectAll",1507],[3,"Enumerate",1507],[3,"TryChunksError",1507],[3,"TryReadyChunksError",1507],[3,"ErrInto",1507],[3,"Filter",1507],[3,"FilterMap",1507],[3,"FlatMap",1507],[3,"FlatMapUnordered",1507],[8,"Into",3214],[3,"Flatten",1507],[6,"FlattenUnordered",1507],[3,"PollFn",1507],[3,"Unzip",1507],[3,"Fold",1507],[3,"ForEach",1507],[3,"Fuse",1507],[3,"StreamFuture",1507],[3,"Inspect",1507],[3,"Map",1507],[3,"Next",1507],[3,"SelectNextSome",1507],[3,"Peekable",1507],[3,"Peek",1507],[3,"PeekMut",1507],[3,"NextIf",1507],[3,"NextIfEq",1507],[3,"Skip",1507],[3,"SkipWhile",1507],[3,"Take",1507],[3,"TakeWhile",1507],[3,"TakeUntil",1507],[3,"Then",1507],[3,"Zip",1507],[3,"ReadyChunks",1507],[3,"Scan",1507],[3,"ForEachConcurrent",1507],[3,"InspectOk",1507],[3,"InspectErr",1507],[3,"IntoStream",1507],[3,"MapOk",1507],[3,"MapErr",1507],[3,"OrElse",1507],[3,"TryNext",1507],[3,"TryForEach",1507],[3,"TryFilter",1507],[3,"TryFilterMap",1507],[3,"TryFlatten",1507],[3,"TryFlattenUnordered",1507],[3,"TryCollect",1507],[3,"TryConcat",1507],[3,"TryChunks",1507],[8,"Display",3204],[3,"TryReadyChunks",1507],[3,"TryFold",1507],[3,"TryUnfold",1507],[3,"TrySkipWhile",1507],[3,"TryTakeWhile",1507],[3,"TryBufferUnordered",1507],[3,"TryBuffered",1507],[3,"TryForEachConcurrent",1507],[3,"Once",1507],[3,"Select",1507],[3,"SelectWithStrategy",1507],[3,"Unfold",1507],[8,"TryStreamExt",1507],[8,"Iterator",3220],[3,"LocalFutureObj",3093],[3,"SpawnError",3093],[3,"FutureObj",3093],[3,"IterPinMut",2978],[3,"IterMut",2978],[3,"IterPinRef",2978],[3,"Iter",2978],[3,"IntoIter",2978],[3,"Iter",3048],[3,"IterMut",3048],[3,"IntoIter",3048],[3,"AtomicWaker",3093],[3,"WakerRef",3093],[3,"Waker",3207],[3,"Error",3204],[3,"Global",3221],[8,"UnsafeFutureObj",3093],[3,"ManuallyDrop",3222],[8,"ArcWake",3093],[8,"TryFutureExt",24],[8,"FutureExt",24],[8,"AsyncReadExt",869],[8,"AsyncWriteExt",869],[8,"AsyncBufReadExt",869],[8,"AsyncSeekExt",869],[8,"StreamExt",1507],[8,"SpawnExt",3093],[8,"LocalSpawnExt",3093],[8,"LocalSpawn",3093],[8,"Spawn",3093]]},\
"generic_array":{"doc":"This crate implements a structure that can be used as a …","t":"IQDCLAOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLALLLLLALLLLLLLBLLIGQIQIGLLLDLLLLLLLLLLLLLLLLLLLLLLLLIQIQIQQQQQGIQIKKKKKKK","n":["ArrayLength","ArrayType","GenericArray","GenericArrayIter","append","arr","arr","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_slice","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from_slice","clone_into","cmp","concat","default","deref","deref_mut","eq","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_exact_iter","from_iter","from_mut_slice","from_slice","functional","generate","hash","into","into_iter","into_iter","into_iter","iter","map","partial_cmp","pop_back","pop_front","prepend","sequence","split","split","split","to_owned","try_from","try_into","type_id","typenum","zeroize","zip","AddLength","Inc","Output","FunctionalSequence","Mapped","MappedGenericSequence","MappedSequence","fold","map","zip","GenericArrayIter","as_mut_slice","as_slice","borrow","borrow_mut","clone","clone_into","count","drop","fmt","fold","from","into","into_iter","last","len","next","next_back","nth","rfold","size_hint","to_owned","try_from","try_into","type_id","Concat","First","GenericSequence","Length","Lengthen","Longer","Output","Rest","Second","Sequence","SequenceItem","Shorten","Shorter","Split","append","concat","generate","pop_back","pop_front","prepend","split"],"q":[[0,"generic_array"],[444,"generic_array::arr"],[447,"generic_array::functional"],[454,"generic_array::iter"],[479,"generic_array::sequence"],[500,"typenum::bit"],[501,"core::ops::arith"],[502,"typenum::generated::consts"],[503,"typenum::generated::consts"],[504,"core::cmp"],[505,"core::cmp"],[506,"core::cmp"],[507,"core::fmt"],[508,"core::option"],[509,"core::iter::traits::collect"],[510,"core::hash"],[511,"core::hash"],[512,"core::any"],[513,"zeroize"]],"d":["Trait making <code>GenericArray</code> work, marking types to be used …","Associated type representing the array type for the number","Struct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …","","","Implementation for <code>arr!</code> macro.","Macro allowing for easy generation of Generic Arrays. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts a mutable slice containing the entire array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts a slice containing the entire array.","","","","","","Construct a <code>GenericArray</code> from a slice by cloning its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts slice to a generic array reference with inferred …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts mutable slice to a mutable generic array reference","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>GenericArray</code> instance from an iterator with …","","Converts mutable slice to a mutable generic array reference","Converts slice to a generic array reference with inferred …","Functional programming with generic sequences","","","Calls <code>U::from(self)</code>.","","","","<code>GenericArray</code> iterator implementation.","","","","","","Useful traits for manipulating sequences of data stored in …","","","","","","","","","","","Helper trait for <code>arr!</code> macro","Helper type for <code>arr!</code> macro","Resulting length","Defines functional programming methods for generic …","Mapped sequence type","Defines the relationship between one generic sequence and …","Accessor type for a mapped generic sequence","Folds (or reduces) a sequence of data into a single value.","Maps a <code>GenericSequence</code> to another <code>GenericSequence</code>.","Combines two <code>GenericSequence</code> instances and iterates …","An iterator that moves out of a <code>GenericArray</code>","Returns the remaining items of this iterator as a mutable …","Returns the remaining items of this iterator as a slice","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Defines <code>GenericSequence</code>s which can be joined together, …","First part of the resulting split array","Defines some sequence with an associated length and …","<code>GenericArray</code> associated length","Defines any <code>GenericSequence</code> which can be lengthened or …","<code>GenericSequence</code> that has one more element than <code>Self</code>","Resulting sequence formed by the concatenation.","Sequence to be concatenated with <code>self</code>","Second part of the resulting split array","Concrete sequence type used in conjuction with reference …","Accessor for <code>GenericSequence</code> item type, which is really …","Defines a <code>GenericSequence</code> which can be shortened by …","<code>GenericSequence</code> that has one less element than <code>Self</code>","Defines a <code>GenericSequence</code> that can be split into two parts …","Returns a new array with the given element appended to the …","Concatenate, or join, two sequences.","Initializes a new sequence instance using the given …","Returns a new array without the last element, and the last …","Returns a new array without the first element, and the …","Returns a new array with the given element prepended to …","Splits an array at the given index, returning the separate …"],"i":[0,4,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,110,0,106,0,0,111,111,111,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,0,112,0,107,0,113,114,114,112,107,0,0,115,0,113,114,107,115,115,113,112],"f":[0,0,0,0,[[[1,[-1,-2]],-1],[],[],[[3,[2]],[4,[-1]]]],0,0,[[[1,[-1,5]]],[[6,[-1]]],[]],[[[1,[-1,7]]],[[6,[-1]]],[]],[[[1,[-1,8]]],[[6,[-1]]],[]],[[[1,[-1,9]]],[[6,[-1]]],[]],[[[1,[-1,10]]],[[6,[-1]]],[]],[[[1,[-1,11]]],[[6,[-1]]],[]],[[[1,[-1,12]]],[[6,[-1]]],[]],[[[1,[-1,13]]],[[6,[-1]]],[]],[[[1,[-1,14]]],[[6,[-1]]],[]],[[[1,[-1,15]]],[[6,[-1]]],[]],[[[1,[-1,16]]],[[6,[-1]]],[]],[[[1,[-1,17]]],[[6,[-1]]],[]],[[[1,[-1,18]]],[[6,[-1]]],[]],[[[1,[-1,19]]],[[6,[-1]]],[]],[[[1,[-1,20]]],[[6,[-1]]],[]],[[[1,[-1,21]]],[[6,[-1]]],[]],[[[1,[-1,22]]],[[6,[-1]]],[]],[[[1,[-1,23]]],[[6,[-1]]],[]],[[[1,[-1,24]]],[[6,[-1]]],[]],[[[1,[-1,25]]],[[6,[-1]]],[]],[[[1,[-1,26]]],[[6,[-1]]],[]],[[[1,[-1,27]]],[[6,[-1]]],[]],[[[1,[-1,28]]],[[6,[-1]]],[]],[[[1,[-1,29]]],[[6,[-1]]],[]],[[[1,[-1,30]]],[[6,[-1]]],[]],[[[1,[-1,31]]],[[6,[-1]]],[]],[[[1,[-1,32]]],[[6,[-1]]],[]],[[[1,[-1,33]]],[[6,[-1]]],[]],[[[1,[-1,34]]],[[6,[-1]]],[]],[[[1,[-1,35]]],[[6,[-1]]],[]],[[[1,[-1,36]]],[[6,[-1]]],[]],[[[1,[-1,37]]],[[6,[-1]]],[]],[[[1,[-1,38]]],[[6,[-1]]],[]],[[[1,[-1,39]]],[[6,[-1]]],[]],[[[1,[-1,40]]],[[6,[-1]]],[]],[[[1,[-1,41]]],[[6,[-1]]],[]],[[[1,[-1,42]]],[[6,[-1]]],[]],[[[1,[-1,43]]],[[6,[-1]]],[]],[[[1,[-1,44]]],[[6,[-1]]],[]],[[[1,[-1,45]]],[[6,[-1]]],[]],[[[1,[-1,46]]],[[6,[-1]]],[]],[[[1,[-1,47]]],[[6,[-1]]],[]],[[[1,[-1,48]]],[[6,[-1]]],[]],[[[1,[-1,49]]],[[6,[-1]]],[]],[[[1,[-1,50]]],[[6,[-1]]],[]],[[[1,[-1,51]]],[[6,[-1]]],[]],[[[1,[-1,52]]],[[6,[-1]]],[]],[[[1,[-1,53]]],[[6,[-1]]],[]],[[[1,[-1,54]]],[[6,[-1]]],[]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[[[1,[-1,56]]],[[6,[-1]]],[]],[[[1,[-1,57]]],[[6,[-1]]],[]],[[[1,[-1,58]]],[[6,[-1]]],[]],[[[1,[-1,59]]],[[6,[-1]]],[]],[[[1,[-1,60]]],[[6,[-1]]],[]],[[[1,[-1,61]]],[[6,[-1]]],[]],[[[1,[-1,62]]],[[6,[-1]]],[]],[[[1,[-1,63]]],[[6,[-1]]],[]],[[[1,[-1,64]]],[[6,[-1]]],[]],[[[1,[-1,65]]],[[6,[-1]]],[]],[[[1,[-1,66]]],[[6,[-1]]],[]],[[[1,[-1,67]]],[[6,[-1]]],[]],[[[1,[-1,68]]],[[6,[-1]]],[]],[[[1,[-1,69]]],[[6,[-1]]],[]],[[[1,[-1,70]]],[[6,[-1]]],[]],[[[1,[-1,71]]],[[6,[-1]]],[]],[[[1,[-1,72]]],[[6,[-1]]],[]],[[[1,[-1,73]]],[[6,[-1]]],[]],[[[1,[-1,74]]],[[6,[-1]]],[]],[[[1,[-1,75]]],[[6,[-1]]],[]],[[[1,[-1,76]]],[[6,[-1]]],[]],[[[1,[-1,77]]],[[6,[-1]]],[]],[[[1,[-1,78]]],[[6,[-1]]],[]],[[[1,[-1,79]]],[[6,[-1]]],[]],[[[1,[-1,80]]],[[6,[-1]]],[]],[[[1,[-1,81]]],[[6,[-1]]],[]],[[[1,[-1,82]]],[[6,[-1]]],[]],[[[1,[-1,83]]],[[6,[-1]]],[]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[[[1,[-1,58]]],[[6,[-1]]],[]],[[[1,[-1,24]]],[[6,[-1]]],[]],[[[1,[-1,37]]],[[6,[-1]]],[]],[[[1,[-1,16]]],[[6,[-1]]],[]],[[[1,[-1,41]]],[[6,[-1]]],[]],[[[1,[-1,49]]],[[6,[-1]]],[]],[[[1,[-1,72]]],[[6,[-1]]],[]],[[[1,[-1,78]]],[[6,[-1]]],[]],[[[1,[-1,5]]],[[6,[-1]]],[]],[[[1,[-1,81]]],[[6,[-1]]],[]],[[[1,[-1,23]]],[[6,[-1]]],[]],[[[1,[-1,44]]],[[6,[-1]]],[]],[[[1,[-1,43]]],[[6,[-1]]],[]],[[[1,[-1,68]]],[[6,[-1]]],[]],[[[1,[-1,11]]],[[6,[-1]]],[]],[[[1,[-1,17]]],[[6,[-1]]],[]],[[[1,[-1,65]]],[[6,[-1]]],[]],[[[1,[-1,38]]],[[6,[-1]]],[]],[[[1,[-1,15]]],[[6,[-1]]],[]],[[[1,[-1,47]]],[[6,[-1]]],[]],[[[1,[-1,45]]],[[6,[-1]]],[]],[[[1,[-1,35]]],[[6,[-1]]],[]],[[[1,[-1,57]]],[[6,[-1]]],[]],[[[1,[-1,27]]],[[6,[-1]]],[]],[[[1,[-1,46]]],[[6,[-1]]],[]],[[[1,[-1,7]]],[[6,[-1]]],[]],[[[1,[-1,67]]],[[6,[-1]]],[]],[[[1,[-1,21]]],[[6,[-1]]],[]],[[[1,[-1,52]]],[[6,[-1]]],[]],[[[1,[-1,8]]],[[6,[-1]]],[]],[[[1,[-1,25]]],[[6,[-1]]],[]],[[[1,[-1,76]]],[[6,[-1]]],[]],[[[1,[-1,73]]],[[6,[-1]]],[]],[[[1,[-1,29]]],[[6,[-1]]],[]],[[[1,[-1,20]]],[[6,[-1]]],[]],[[[1,[-1,48]]],[[6,[-1]]],[]],[[[1,[-1,66]]],[[6,[-1]]],[]],[[[1,[-1,64]]],[[6,[-1]]],[]],[[[1,[-1,70]]],[[6,[-1]]],[]],[[[1,[-1,34]]],[[6,[-1]]],[]],[[[1,[-1,50]]],[[6,[-1]]],[]],[[[1,[-1,83]]],[[6,[-1]]],[]],[[[1,[-1,69]]],[[6,[-1]]],[]],[[[1,[-1,31]]],[[6,[-1]]],[]],[[[1,[-1,33]]],[[6,[-1]]],[]],[[[1,[-1,22]]],[[6,[-1]]],[]],[[[1,[-1,62]]],[[6,[-1]]],[]],[[[1,[-1,59]]],[[6,[-1]]],[]],[[[1,[-1,19]]],[[6,[-1]]],[]],[[[1,[-1,79]]],[[6,[-1]]],[]],[[[1,[-1,9]]],[[6,[-1]]],[]],[[[1,[-1,39]]],[[6,[-1]]],[]],[[[1,[-1,75]]],[[6,[-1]]],[]],[[[1,[-1,63]]],[[6,[-1]]],[]],[[[1,[-1,77]]],[[6,[-1]]],[]],[[[1,[-1,32]]],[[6,[-1]]],[]],[[[1,[-1,26]]],[[6,[-1]]],[]],[[[1,[-1,30]]],[[6,[-1]]],[]],[[[1,[-1,74]]],[[6,[-1]]],[]],[[[1,[-1,53]]],[[6,[-1]]],[]],[[[1,[-1,10]]],[[6,[-1]]],[]],[[[1,[-1,56]]],[[6,[-1]]],[]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[[[1,[-1,12]]],[[6,[-1]]],[]],[[[1,[-1,61]]],[[6,[-1]]],[]],[[[1,[-1,71]]],[[6,[-1]]],[]],[[[1,[-1,14]]],[[6,[-1]]],[]],[[[1,[-1,51]]],[[6,[-1]]],[]],[[[1,[-1,40]]],[[6,[-1]]],[]],[[[1,[-1,54]]],[[6,[-1]]],[]],[[[1,[-1,36]]],[[6,[-1]]],[]],[[[1,[-1,82]]],[[6,[-1]]],[]],[[[1,[-1,13]]],[[6,[-1]]],[]],[[[1,[-1,18]]],[[6,[-1]]],[]],[[[1,[-1,28]]],[[6,[-1]]],[]],[[[1,[-1,60]]],[[6,[-1]]],[]],[[[1,[-1,42]]],[[6,[-1]]],[]],[[[1,[-1,80]]],[[6,[-1]]],[]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[1,[-1,-2]]],84,[[4,[-1]]]],[[[55,[-1]]],[[1,[-1,-2]]],84,[[4,[-1]]]],[[-1,-2],85,[],[]],[[[1,[-1,-2]],[1,[-1,-2]]],86,87,[[4,[-1]]]],[[[1,[-1,-3]]],[],[],[[4,[-1]]],[[4,[-1]],[3,[-2]]]],[[],[[1,[-1,-2]]],88,[[4,[-1]]]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[[[1,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[[[1,[-1,-2]],[1,[-1,-2]]],89,90,[[4,[-1]]]],[[[1,[91,-1]],92],93,[]],[[[1,[-1,-2]],92],93,94,[[4,[-1]]]],[[[1,[91,-1]],92],93,[]],[[[1,[-1,-2]],-3,-4],-3,[],[[4,[-1]]],[],95],[[[6,[-1]]],[[1,[-1,66]]],[]],[[[6,[-1]]],[[1,[-1,45]]],[]],[[[6,[-1]]],[[1,[-1,42]]],[]],[[[6,[-1]]],[[1,[-1,83]]],[]],[[[6,[-1]]],[[1,[-1,49]]],[]],[[[6,[-1]]],[[1,[-1,68]]],[]],[[[6,[-1]]],[[1,[-1,37]]],[]],[[[6,[-1]]],[[1,[-1,21]]],[]],[[[6,[-1]]],[[1,[-1,75]]],[]],[[[6,[-1]]],[[1,[-1,49]]],[]],[[[6,[-1]]],[[1,[-1,29]]],[]],[[[6,[-1]]],[[1,[-1,60]]],[]],[[[6,[-1]]],[[1,[-1,59]]],[]],[[[6,[-1]]],[[1,[-1,73]]],[]],[[[6,[-1]]],[[1,[-1,31]]],[]],[[[6,[-1]]],[[1,[-1,81]]],[]],[[[6,[-1]]],[[1,[-1,5]]],[]],[[[6,[-1]]],[[1,[-1,36]]],[]],[[[6,[-1]]],[[1,[-1,62]]],[]],[[[6,[-1]]],[[1,[-1,54]]],[]],[[[6,[-1]]],[[1,[-1,71]]],[]],[[[6,[-1]]],[[1,[-1,80]]],[]],[[[6,[-1]]],[[1,[-1,51]]],[]],[[[6,[-1]]],[[1,[-1,46]]],[]],[[[6,[-1]]],[[1,[-1,47]]],[]],[[[6,[-1]]],[[1,[-1,16]]],[]],[[[6,[-1]]],[[1,[-1,76]]],[]],[[[6,[-1]]],[[1,[-1,50]]],[]],[[[6,[-1]]],[[1,[-1,10]]],[]],[[[6,[-1]]],[[1,[-1,42]]],[]],[[[6,[-1]]],[[1,[-1,7]]],[]],[[[6,[-1]]],[[1,[-1,77]]],[]],[[[6,[-1]]],[[1,[-1,64]]],[]],[[[6,[-1]]],[[1,[-1,47]]],[]],[-1,-1,[]],[[[6,[-1]]],[[1,[-1,53]]],[]],[[[6,[-1]]],[[1,[-1,39]]],[]],[[[6,[-1]]],[[1,[-1,12]]],[]],[[[6,[-1]]],[[1,[-1,52]]],[]],[[[6,[-1]]],[[1,[-1,32]]],[]],[[[6,[-1]]],[[1,[-1,57]]],[]],[[[6,[-1]]],[[1,[-1,34]]],[]],[[[6,[-1]]],[[1,[-1,16]]],[]],[[[6,[-1]]],[[1,[-1,53]]],[]],[[[6,[-1]]],[[1,[-1,56]]],[]],[[[6,[-1]]],[[1,[-1,82]]],[]],[[[6,[-1]]],[[1,[-1,26]]],[]],[[[6,[-1]]],[[1,[-1,69]]],[]],[[[6,[-1]]],[[1,[-1,8]]],[]],[[[6,[-1]]],[[1,[-1,24]]],[]],[[[6,[-1]]],[[1,[-1,34]]],[]],[[[6,[-1]]],[[1,[-1,41]]],[]],[[[6,[-1]]],[[1,[-1,79]]],[]],[[[6,[-1]]],[[1,[-1,44]]],[]],[[[6,[-1]]],[[1,[-1,27]]],[]],[[[6,[-1]]],[[1,[-1,73]]],[]],[[[6,[-1]]],[[1,[-1,69]]],[]],[[[6,[-1]]],[[1,[-1,47]]],[]],[[[6,[-1]]],[[1,[-1,70]]],[]],[[[6,[-1]]],[[1,[-1,67]]],[]],[[[6,[-1]]],[[1,[-1,28]]],[]],[[[6,[-1]]],[[1,[-1,83]]],[]],[[[55,[-1]]],[[1,[-1,-2]]],[],[[4,[-1]]]],[[[6,[-1]]],[[1,[-1,22]]],[]],[[[6,[-1]]],[[1,[-1,66]]],[]],[[[6,[-1]]],[[1,[-1,37]]],[]],[[[6,[-1]]],[[1,[-1,77]]],[]],[[[6,[-1]]],[[1,[-1,27]]],[]],[[[6,[-1]]],[[1,[-1,74]]],[]],[[[6,[-1]]],[[1,[-1,29]]],[]],[[[6,[-1]]],[[1,[-1,33]]],[]],[[[6,[-1]]],[[1,[-1,79]]],[]],[[[6,[-1]]],[[1,[-1,18]]],[]],[[[6,[-1]]],[[1,[-1,35]]],[]],[[[6,[-1]]],[[1,[-1,72]]],[]],[[[6,[-1]]],[[1,[-1,28]]],[]],[[[6,[-1]]],[[1,[-1,56]]],[]],[[[6,[-1]]],[[1,[-1,19]]],[]],[[[6,[-1]]],[[1,[-1,70]]],[]],[[[6,[-1]]],[[1,[-1,46]]],[]],[[[6,[-1]]],[[1,[-1,41]]],[]],[[[6,[-1]]],[[1,[-1,79]]],[]],[[[6,[-1]]],[[1,[-1,61]]],[]],[[[6,[-1]]],[[1,[-1,9]]],[]],[[[6,[-1]]],[[1,[-1,25]]],[]],[[[6,[-1]]],[[1,[-1,78]]],[]],[[[6,[-1]]],[[1,[-1,78]]],[]],[[[6,[-1]]],[[1,[-1,23]]],[]],[[[6,[-1]]],[[1,[-1,58]]],[]],[[[6,[-1]]],[[1,[-1,59]]],[]],[[[6,[-1]]],[[1,[-1,14]]],[]],[[[6,[-1]]],[[1,[-1,50]]],[]],[[[6,[-1]]],[[1,[-1,50]]],[]],[[[6,[-1]]],[[1,[-1,13]]],[]],[[[6,[-1]]],[[1,[-1,11]]],[]],[[[6,[-1]]],[[1,[-1,40]]],[]],[[[6,[-1]]],[[1,[-1,59]]],[]],[[[6,[-1]]],[[1,[-1,61]]],[]],[[[6,[-1]]],[[1,[-1,39]]],[]],[[[6,[-1]]],[[1,[-1,18]]],[]],[[[6,[-1]]],[[1,[-1,44]]],[]],[[[6,[-1]]],[[1,[-1,11]]],[]],[[[6,[-1]]],[[1,[-1,22]]],[]],[[[6,[-1]]],[[1,[-1,81]]],[]],[[[6,[-1]]],[[1,[-1,20]]],[]],[[[6,[-1]]],[[1,[-1,46]]],[]],[[[6,[-1]]],[[1,[-1,48]]],[]],[[[6,[-1]]],[[1,[-1,60]]],[]],[[[6,[-1]]],[[1,[-1,30]]],[]],[[[6,[-1]]],[[1,[-1,40]]],[]],[[[6,[-1]]],[[1,[-1,38]]],[]],[[[6,[-1]]],[[1,[-1,17]]],[]],[[[6,[-1]]],[[1,[-1,67]]],[]],[[[6,[-1]]],[[1,[-1,45]]],[]],[[[6,[-1]]],[[1,[-1,15]]],[]],[[[6,[-1]]],[[1,[-1,64]]],[]],[[[6,[-1]]],[[1,[-1,70]]],[]],[[[6,[-1]]],[[1,[-1,61]]],[]],[[[6,[-1]]],[[1,[-1,64]]],[]],[[[6,[-1]]],[[1,[-1,41]]],[]],[[[6,[-1]]],[[1,[-1,49]]],[]],[[[6,[-1]]],[[1,[-1,42]]],[]],[[[6,[-1]]],[[1,[-1,69]]],[]],[[[6,[-1]]],[[1,[-1,63]]],[]],[[[6,[-1]]],[[1,[-1,74]]],[]],[[[6,[-1]]],[[1,[-1,43]]],[]],[[[6,[-1]]],[[1,[-1,48]]],[]],[[[6,[-1]]],[[1,[-1,78]]],[]],[[[6,[-1]]],[[1,[-1,65]]],[]],[[[6,[-1]]],[[1,[-1,58]]],[]],[[[6,[-1]]],[[1,[-1,26]]],[]],[[[6,[-1]]],[[1,[-1,5]]],[]],[[[6,[-1]]],[[1,[-1,51]]],[]],[[[6,[-1]]],[[1,[-1,12]]],[]],[[[6,[-1]]],[[1,[-1,28]]],[]],[[[6,[-1]]],[[1,[-1,80]]],[]],[[[6,[-1]]],[[1,[-1,29]]],[]],[[[6,[-1]]],[[1,[-1,81]]],[]],[[[6,[-1]]],[[1,[-1,25]]],[]],[[[6,[-1]]],[[1,[-1,15]]],[]],[[[6,[-1]]],[[1,[-1,43]]],[]],[[[6,[-1]]],[[1,[-1,38]]],[]],[[[6,[-1]]],[[1,[-1,66]]],[]],[[[6,[-1]]],[[1,[-1,75]]],[]],[[[6,[-1]]],[[1,[-1,17]]],[]],[[[6,[-1]]],[[1,[-1,14]]],[]],[[[6,[-1]]],[[1,[-1,68]]],[]],[[[6,[-1]]],[[1,[-1,9]]],[]],[[[6,[-1]]],[[1,[-1,80]]],[]],[[[55,[-1]]],[[1,[-1,-2]]],[],[[4,[-1]]]],[[[6,[-1]]],[[1,[-1,57]]],[]],[[[6,[-1]]],[[1,[-1,82]]],[]],[[[6,[-1]]],[[1,[-1,10]]],[]],[[[6,[-1]]],[[1,[-1,7]]],[]],[[[6,[-1]]],[[1,[-1,9]]],[]],[[[6,[-1]]],[[1,[-1,33]]],[]],[[[6,[-1]]],[[1,[-1,71]]],[]],[[[6,[-1]]],[[1,[-1,40]]],[]],[[[6,[-1]]],[[1,[-1,76]]],[]],[[[6,[-1]]],[[1,[-1,77]]],[]],[[[6,[-1]]],[[1,[-1,24]]],[]],[[[6,[-1]]],[[1,[-1,68]]],[]],[[[6,[-1]]],[[1,[-1,73]]],[]],[[[6,[-1]]],[[1,[-1,20]]],[]],[[[6,[-1]]],[[1,[-1,32]]],[]],[[[6,[-1]]],[[1,[-1,27]]],[]],[[[6,[-1]]],[[1,[-1,37]]],[]],[[[6,[-1]]],[[1,[-1,31]]],[]],[[[6,[-1]]],[[1,[-1,54]]],[]],[[[6,[-1]]],[[1,[-1,65]]],[]],[[[6,[-1]]],[[1,[-1,12]]],[]],[[[6,[-1]]],[[1,[-1,22]]],[]],[[[6,[-1]]],[[1,[-1,63]]],[]],[[[6,[-1]]],[[1,[-1,51]]],[]],[[[6,[-1]]],[[1,[-1,8]]],[]],[[[6,[-1]]],[[1,[-1,52]]],[]],[[[6,[-1]]],[[1,[-1,30]]],[]],[[[6,[-1]]],[[1,[-1,67]]],[]],[[[6,[-1]]],[[1,[-1,45]]],[]],[[[6,[-1]]],[[1,[-1,35]]],[]],[[[6,[-1]]],[[1,[-1,63]]],[]],[[[6,[-1]]],[[1,[-1,36]]],[]],[[[6,[-1]]],[[1,[-1,43]]],[]],[[[6,[-1]]],[[1,[-1,31]]],[]],[[[6,[-1]]],[[1,[-1,19]]],[]],[[[6,[-1]]],[[1,[-1,71]]],[]],[[[6,[-1]]],[[1,[-1,32]]],[]],[[[6,[-1]]],[[1,[-1,8]]],[]],[[[6,[-1]]],[[1,[-1,18]]],[]],[[[6,[-1]]],[[1,[-1,38]]],[]],[[[6,[-1]]],[[1,[-1,82]]],[]],[[[6,[-1]]],[[1,[-1,23]]],[]],[[[6,[-1]]],[[1,[-1,52]]],[]],[[[6,[-1]]],[[1,[-1,21]]],[]],[[[6,[-1]]],[[1,[-1,30]]],[]],[[[6,[-1]]],[[1,[-1,54]]],[]],[[[6,[-1]]],[[1,[-1,44]]],[]],[[[6,[-1]]],[[1,[-1,58]]],[]],[[[6,[-1]]],[[1,[-1,17]]],[]],[[[6,[-1]]],[[1,[-1,35]]],[]],[[[6,[-1]]],[[1,[-1,15]]],[]],[[[6,[-1]]],[[1,[-1,72]]],[]],[[[6,[-1]]],[[1,[-1,25]]],[]],[[[6,[-1]]],[[1,[-1,39]]],[]],[[[6,[-1]]],[[1,[-1,21]]],[]],[[[6,[-1]]],[[1,[-1,72]]],[]],[[[6,[-1]]],[[1,[-1,34]]],[]],[[[6,[-1]]],[[1,[-1,26]]],[]],[[[6,[-1]]],[[1,[-1,23]]],[]],[[[6,[-1]]],[[1,[-1,48]]],[]],[[[6,[-1]]],[[1,[-1,19]]],[]],[[[6,[-1]]],[[1,[-1,76]]],[]],[[[6,[-1]]],[[1,[-1,62]]],[]],[[[6,[-1]]],[[1,[-1,74]]],[]],[[[6,[-1]]],[[1,[-1,62]]],[]],[[[6,[-1]]],[[1,[-1,24]]],[]],[[[6,[-1]]],[[1,[-1,20]]],[]],[[[6,[-1]]],[[1,[-1,75]]],[]],[[[6,[-1]]],[[1,[-1,65]]],[]],[[[6,[-1]]],[[1,[-1,33]]],[]],[[[6,[-1]]],[[1,[-1,83]]],[]],[[[6,[-1]]],[[1,[-1,56]]],[]],[[[6,[-1]]],[[1,[-1,10]]],[]],[[[6,[-1]]],[[1,[-1,13]]],[]],[[[6,[-1]]],[[1,[-1,14]]],[]],[[[6,[-1]]],[[1,[-1,7]]],[]],[[[6,[-1]]],[[1,[-1,60]]],[]],[[[6,[-1]]],[[1,[-1,57]]],[]],[[[6,[-1]]],[[1,[-1,53]]],[]],[[[6,[-1]]],[[1,[-1,16]]],[]],[[[6,[-1]]],[[1,[-1,36]]],[]],[[[6,[-1]]],[[1,[-1,13]]],[]],[[[6,[-1]]],[[1,[-1,11]]],[]],[[[6,[-1]]],[[1,[-1,5]]],[]],[-1,[[96,[[1,[-2,-3]]]]],97,[],[[4,[-2]]]],[-1,[[1,[-2,-3]]],97,[],[[4,[-2]]]],[[[55,[-1]]],[[1,[-1,-2]]],[],[[4,[-1]]]],[[[55,[-1]]],[[1,[-1,-2]]],[],[[4,[-1]]]],0,[-1,[[1,[-2,-3]]],95,[],[[4,[-2]]]],[[[1,[-1,-2]],-3],85,98,[[4,[-1]]],99],[-1,-2,[],[]],[[[1,[-1,-2]]],[],[],[[4,[-1]]]],[[[1,[-1,-2]]],[],[],[[4,[-1]]]],[[[1,[-1,-2]]],[],[],[[4,[-1]]]],0,[[[1,[-1,-2]],-3],[[100,[[1,[-1,-2]],-1,-4]]],[],[[4,[-1]]],95,[]],[[[1,[-1,-2]],[1,[-1,-2]]],[[96,[86]]],101,[[4,[-1]]]],[[[1,[-1,-2]]],[[85,[-1]]],[],[[102,[2]],[4,[-1]]]],[[[1,[-1,-2]]],[[85,[-1]]],[],[[102,[2]],[4,[-1]]]],[[[1,[-1,-2]],-1],[],[],[[3,[2]],[4,[-1]]]],0,[[[1,[-1,-3]]],85,[],[[4,[-1]]],[[4,[-1]],[102,[-2]]]],[[[1,[-1,-3]]],85,[],[[4,[-1]]],[[4,[-1]],[102,[-2]]]],[[[1,[-1,-3]]],85,[],[[4,[-1]]],[[4,[-1]],[102,[-2]]]],[-1,-2,[],[]],[-1,[[103,[-2]]],[],[]],[-1,[[103,[-2]]],[],[]],[-1,104,[]],0,[[[1,[-1,-2]]],85,105,[[4,[-1]]]],[[[1,[-1,-2]],-5,-6],[[100,[[1,[-1,-2]],-1,-4]]],[],[[4,[-1]]],[],[],[[106,[-3,-4]],[107,[-3]]],95],0,0,0,0,0,0,0,[[-1,-2,-3],-2,[],[],95],[[-3,-4],[[100,[-3,-1,-2]]],[],[],[[106,[-1,-2]]],95],[[-3,-5,-6],[[100,[-3,-1,-2]]],[],[],[[106,[-1,-2]]],[],[[106,[-4,-2]],[107,[-4]]],95],0,[[[108,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[[[108,[-1,-2]]],[[55,[-1]]],[],[[4,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[108,[-1,-2]]],[[108,[-1,-2]]],84,[[4,[-1]]]],[[-1,-2],85,[],[]],[[[108,[-1,-2]]],109,[],[[4,[-1]]]],[[[108,[-1,-2]]],85,[],[[4,[-1]]]],[[[108,[-1,-2]],92],93,94,[[4,[-1]]]],[[[108,[-1,-2]],-3,-4],-3,[],[[4,[-1]]],[],95],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[108,[-1,-2]]],[[96,[-1]]],[],[[4,[-1]]]],[[[108,[-1,-2]]],109,[],[[4,[-1]]]],[[[108,[-1,-2]]],[[96,[-1]]],[],[[4,[-1]]]],[[[108,[-1,-2]]],[[96,[-1]]],[],[[4,[-1]]]],[[[108,[-1,-2]],109],[[96,[-1]]],[],[[4,[-1]]]],[[[108,[-1,-2]],-3,-4],-3,[],[[4,[-1]]],[],95],[[[108,[-1,-2]]],[[85,[109,[96,[109]]]]],[],[[4,[-1]]]],[-1,-2,[],[]],[-1,[[103,[-2]]],[],[]],[-1,[[103,[-2]]],[],[]],[-1,104,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[],[],[]],[-1,[],[]],[-1,[],95],[-1,[[85,[-2]]],[],[]],[-1,[[85,[-2]]],[],[]],[[-1,-2],[],[],[]],[-1,85,[]]],"c":[],"p":[[3,"GenericArray",0],[3,"B1",500],[8,"Add",501],[8,"ArrayLength",0],[6,"U11",502],[15,"array"],[6,"U32",502],[6,"U49",502],[6,"U63",502],[6,"U41",502],[6,"U10",502],[6,"U27",502],[6,"U12",502],[6,"U43",502],[6,"U40",502],[6,"U1000",502],[6,"U90",502],[6,"U23",502],[6,"U62",502],[6,"U56",502],[6,"U70",502],[6,"U26",502],[6,"U4",502],[6,"U22",502],[6,"U47",502],[6,"U58",502],[6,"U1",502],[6,"U51",502],[6,"U17",502],[6,"U128",502],[6,"U44",502],[6,"U100",502],[6,"U37",502],[6,"U6",502],[6,"U46",502],[6,"U57",502],[6,"U5",502],[6,"U28",502],[6,"U9",502],[6,"U16",502],[6,"U25",502],[6,"U8",502],[6,"U18",502],[6,"U19",502],[6,"U52",502],[6,"U7",502],[6,"U13",502],[6,"U30",502],[6,"U31",502],[6,"U1024",502],[6,"U59",502],[6,"U36",502],[6,"U54",502],[6,"U300",502],[15,"slice"],[6,"U53",502],[6,"U35",502],[6,"U512",502],[6,"U500",502],[6,"U33",502],[6,"U64",502],[6,"U55",502],[6,"U80",502],[6,"U34",502],[6,"U3",502],[6,"U45",502],[6,"U200",502],[6,"U21",502],[6,"U48",502],[6,"U60",502],[6,"U14",502],[6,"U29",502],[6,"U20",502],[6,"U24",502],[6,"U42",502],[6,"U61",502],[6,"U38",502],[6,"U50",502],[6,"U39",502],[6,"U256",502],[6,"U400",502],[6,"U15",502],[6,"U2",502],[8,"Clone",503],[15,"tuple"],[4,"Ordering",504],[8,"Ord",504],[8,"Default",505],[15,"bool"],[8,"PartialEq",504],[15,"u8"],[3,"Formatter",506],[6,"Result",506],[8,"Debug",506],[8,"FnMut",507],[4,"Option",508],[8,"IntoIterator",509],[8,"Hash",510],[8,"Hasher",510],[6,"MappedSequence",447],[8,"PartialOrd",504],[8,"Sub",501],[4,"Result",511],[3,"TypeId",512],[8,"Zeroize",513],[8,"MappedGenericSequence",447],[8,"GenericSequence",479],[3,"GenericArrayIter",454],[15,"usize"],[8,"AddLength",444],[8,"FunctionalSequence",447],[8,"Split",479],[8,"Lengthen",479],[8,"Concat",479],[8,"Shorten",479]]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":"SSDSSSSSSSSSSSSLLLLLLLLLLLFFLLLLLLL","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","equivalent","fmt","fmt","from","from","getrandom","getrandom_uninit","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"],[35,"core::num::nonzero"],[36,"core::fmt"],[37,"core::fmt"],[38,"core::mem::maybe_uninit"],[39,"core::option"],[40,"alloc::string"],[41,"core::any"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[1,3],[[1,1],4],[[-1,-2],4,[],[]],[[1,5],6],[[1,5],6],[3,1],[-1,-1,[]],[[[8,[7]]],[[9,[2,1]]]],[[[8,[[10,[7]]]]],[[9,[[8,[7]],1]]]],[-1,-2,[],[]],[1,[[12,[11]]]],[-1,-2,[],[]],[-1,13,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]]],"c":[],"p":[[3,"Error",0],[15,"tuple"],[3,"NonZeroU32",35],[15,"bool"],[3,"Formatter",36],[6,"Result",36],[15,"u8"],[15,"slice"],[4,"Result",37],[19,"MaybeUninit",38],[15,"i32"],[4,"Option",39],[3,"String",40],[3,"TypeId",41]]},\
"gnostr_bech32_to_any":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_bech32_to_any"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_bins":{"doc":"","t":"FFFFF","n":["fetch_by_filter","fetch_by_id","post_event","print_event","url_to_host_and_uri"],"q":[[0,"gnostr_bins"],[5,"nostr_types::types::filter"],[6,"nostr_types::types::event"],[7,"alloc::vec"],[8,"nostr_types::types::id"],[9,"core::option"],[10,"alloc::string"],[11,"http::uri"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":[[[1,2],[[4,[3]]]],[[1,5],[[6,[3]]]],[[1,3],7],[3,7],[1,[[7,[8,9]]]]],"c":[],"p":[[15,"str"],[3,"Filter",5],[6,"Event",6],[3,"Vec",7],[3,"IdHex",8],[4,"Option",9],[15,"tuple"],[3,"String",10],[3,"Uri",11]]},\
"gnostr_decrypt_private_key":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_decrypt_private_key"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_dump_relay":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_dump_relay"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_encrypt_private_key":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_encrypt_private_key"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_fetch_by_id":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_fetch_by_id"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_fetch_by_kind_and_author":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_fetch_by_kind_and_author"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_fetch_metadata":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_fetch_metadata"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_fetch_nip11":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_fetch_nip11"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_fetch_relay_list":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_fetch_relay_list"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_form_event_addr":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_form_event_addr"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_generate_keypair":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_generate_keypair"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_post_event":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_post_event"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_privkey_to_bech32":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_privkey_to_bech32"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_pubkey_to_bech32":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_pubkey_to_bech32"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"gnostr_verify_keypair":{"doc":"","t":"F","n":["main"],"q":[[0,"gnostr_verify_keypair"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"group":{"doc":"","t":"QIIIIIQQIIQIDDIDLLLLLLLLLLLLLAKCLLLLLLKKKKKKLLLKLLLLAKKLLLLKKLLKLLLLLLLLLQIIIQQQKKKKKLKKQQIIIQKKKK","n":["AffineRepr","Curve","Group","GroupEncoding","GroupOps","GroupOpsOwned","Repr","Scalar","ScalarMul","ScalarMulOwned","Uncompressed","UncompressedEncoding","Wnaf","WnafBase","WnafGroup","WnafScalar","base","base","batch_normalize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cofactor","double","ff","fmt","fmt","fmt","from","from","from","from_bytes","from_bytes_unchecked","from_uncompressed","from_uncompressed_unchecked","generator","identity","into","into","into","is_identity","mul","new","new","new","prime","random","recommended_wnaf_for_num_scalars","scalar","scalar","shared","shared","to_affine","to_bytes","to_owned","to_owned","to_uncompressed","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Affine","CofactorCurve","CofactorCurveAffine","CofactorGroup","Curve","Scalar","Subgroup","clear_cofactor","generator","identity","into_subgroup","is_identity","is_small_order","is_torsion_free","to_curve","Affine","Curve","PrimeCurve","PrimeCurveAffine","PrimeGroup","Scalar","generator","identity","is_identity","to_curve"],"q":[[0,"group"],[73,"group::cofactor"],[88,"group::prime"],[98,"alloc::vec"],[99,"core::convert"],[100,"core::convert"],[101,"ff"],[102,"core::fmt"],[103,"core::fmt"],[104,"subtle"],[105,"core::result"],[106,"core::any"]],"d":["The affine representation for this elliptic curve.","Efficient representation of an elliptic curve point …","This trait represents an element of a cryptographic group.","","A helper trait for types with a group operation.","A helper trait for references with a group operation.","The encoding of group elements.","Scalars modulo the order of this group’s scalar field.","A helper trait for types implementing group scalar …","A helper trait for references implementing group scalar …","","Affine representation of a point on an elliptic curve that …","A “w-ary non-adjacent form” scalar multiplication …","A fixed window table for a group element, precomputed to …","Extension trait on a <code>Group</code> that provides helpers used by …","A “w-ary non-adjacent form” scalar, that uses …","Performs exponentiation given a base.","Given a base and a number of scalars, compute a window …","Converts a batch of projective elements into affine …","","","","","","","","","","","","Doubles this element.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to deserialize a group element from its encoding.","Attempts to deserialize a group element, not checking if …","Attempts to deserialize an element from its uncompressed …","Attempts to deserialize an uncompressed element, not …","Returns a fixed generator of the prime-order subgroup.","Returns the additive identity, also known as the “…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this point is the identity.","","Construct a new wNAF context without allocating.","Computes the w-NAF representation of the given scalar with …","Computes a window table for the given base with the …","","Returns an element chosen uniformly at random from the …","Recommends a wNAF window size given the number of scalars …","Performs exponentiation given a scalar.","Given a scalar, compute its wNAF representation and return …","Constructs new space for the scalar representation while …","Constructs new space for the window table while borrowing …","Converts this element into its affine representation.","Converts this element into its byte encoding. This may or …","","","Converts this element into its uncompressed encoding, so …","","","","","","","","","","","Efficient representation of an elliptic curve point …","Affine representation of an elliptic curve point …","This trait represents an element of a cryptographic group …","","","The large prime-order subgroup in which cryptographic …","Maps <code>self</code> to the prime-order subgroup by multiplying this …","Returns a fixed generator of unknown exponent.","Returns the additive identity.","Returns <code>self</code> if it is contained in the prime-order …","Determines if this point represents the point at infinity; …","Determines if this element is of small order.","Determines if this element is “torsion free”, i.e., is …","Converts this element to its curve representation.","","","Efficient representation of an elliptic curve point …","Affine representation of an elliptic curve point …","This trait represents an element of a prime-order …","","Returns a fixed generator of unknown exponent.","Returns the additive identity.","Determines if this point represents the point at infinity; …","Converts this element to its curve representation."],"i":[23,0,0,0,0,0,24,3,0,0,25,0,0,0,0,0,2,2,23,2,11,14,2,11,14,11,14,11,14,0,3,0,2,11,14,2,11,14,24,24,25,25,3,3,2,11,14,3,14,2,11,14,0,3,10,2,2,2,2,23,24,11,14,25,2,11,14,2,11,14,2,11,14,26,0,0,0,27,27,28,28,27,27,28,27,28,28,27,29,30,0,0,0,30,30,30,30,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1,-2,-3]],-1],-1,3,[[5,[[4,[-1]]]]],[[8,[[7,[6]]]]]],[[[2,[9,[4,[-1]],[4,[6]]]],-1,1],[[2,[1,[7,[-1]],[4,[6]]]]],10],[[[7,[-1]],7],9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1]]],[[11,[-1]]],[12,13]],[[[14,[-1]]],[[14,[-1]]],[12,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[-1,-1,[]],0,[[[2,[-1,-2,-3]],15],16,17,17,17],[[[11,[-1]],15],16,[17,13]],[[[14,[-1]],15],16,[17,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[18,[-1]]],[]],[[],[[18,[-1]]],[]],[[],[[18,[-1]]],[]],[[],[[18,[-1]]],[]],[[],-1,[]],[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,19,[]],[[[14,[-1]],11],[],3],[[],[[2,[9,[4,[-1]],[4,[6]]]]],3],[-1,[[11,[-1]]],13],[-1,[[14,[-1]]],3],0,[-1,-2,20,[]],[1,1],[[[2,[1,-2,-3]]],-1,3,[[8,[[7,[-1]]]]],[[5,[[4,[6]]]]]],[[[2,[9,[4,[-1]],[4,[6]]]]],[[2,[1,[4,[-1]],[7,[6]]]]],10],[[[2,[1,[7,[-1]],[4,[6]]]]],[[2,[1,[7,[-1]],[4,[6]]]]],3],[[[2,[1,[4,[-1]],[7,[6]]]]],[[2,[1,[4,[-1]],[7,[6]]]]],3],[-1,[],[]],[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],0,0,0,0,0,0,0,[-1,[],[]],[[],-1,[]],[[],-1,[]],[-1,18,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,[],[]],0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],[-1,19,[]],[-1,[],[]]],"c":[],"p":[[15,"usize"],[3,"Wnaf",0],[8,"Group",0],[3,"Vec",98],[8,"AsMut",99],[15,"i64"],[15,"slice"],[8,"AsRef",99],[15,"tuple"],[8,"WnafGroup",0],[3,"WnafScalar",0],[8,"Clone",100],[8,"PrimeField",101],[3,"WnafBase",0],[3,"Formatter",102],[6,"Result",102],[8,"Debug",102],[3,"CtOption",103],[3,"Choice",103],[8,"RngCore",104],[4,"Result",105],[3,"TypeId",106],[8,"Curve",0],[8,"GroupEncoding",0],[8,"UncompressedEncoding",0],[8,"CofactorCurve",73],[8,"CofactorCurveAffine",73],[8,"CofactorGroup",73],[8,"PrimeCurve",88],[8,"PrimeCurveAffine",88]]},\
"h2":{"doc":"An asynchronous, HTTP/2 server and client implementation.","t":"SSSSDSSDSSSSSDDDSDDSSDDLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CANCEL","COMPRESSION_ERROR","CONNECT_ERROR","ENHANCE_YOUR_CALM","Error","FLOW_CONTROL_ERROR","FRAME_SIZE_ERROR","FlowControl","HTTP_1_1_REQUIRED","INADEQUATE_SECURITY","INTERNAL_ERROR","NO_ERROR","PROTOCOL_ERROR","Ping","PingPong","Pong","REFUSED_STREAM","Reason","RecvStream","SETTINGS_TIMEOUT","STREAM_CLOSED","SendStream","StreamId","as_u32","available_capacity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","client","clone","clone","clone","clone_into","clone_into","clone_into","data","description","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","ext","flow_control","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_io","hash","into","into","into","into","into","into","into","into","into","into_io","is_end_stream","is_go_away","is_io","is_library","is_remote","is_reset","opaque","ping","poll_capacity","poll_data","poll_reset","reason","release_capacity","reserve_capacity","send_data","send_reset","send_trailers","server","stream_id","stream_id","stream_id","to_owned","to_owned","to_owned","to_string","to_string","trailers","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","used_capacity","Builder","Connection","PushPromise","PushPromises","PushedResponseFuture","ReadySendRequest","ResponseFuture","SendRequest","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","enable_push","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","handshake","handshake","initial_connection_window_size","initial_max_send_streams","initial_window_size","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_parts","is_extended_connect_protocol_enabled","max_concurrent_recv_streams","max_concurrent_reset_streams","max_concurrent_send_streams","max_concurrent_streams","max_frame_size","max_header_list_size","max_pending_accept_reset_streams","max_send_buffer_size","new","ping_pong","poll","poll","poll","poll","poll_ready","push_promise","push_promises","ready","request","request_mut","reset_stream_duration","send_request","set_initial_window_size","set_target_window_size","stream_id","stream_id","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","try_poll","try_poll","try_poll","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Protocol","as_ref","as_str","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","from","from","from_static","into","to_owned","try_from","try_into","type_id","Builder","Connection","Handshake","SendPushedResponse","SendResponse","abrupt_shutdown","accept","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","enable_connect_protocol","enable_connect_protocol","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","graceful_shutdown","handshake","handshake","initial_connection_window_size","initial_window_size","into","into","into","into","into","into_future","max_concurrent_recv_streams","max_concurrent_reset_streams","max_concurrent_send_streams","max_concurrent_streams","max_frame_size","max_header_list_size","max_pending_accept_reset_streams","max_send_buffer_size","new","ping_pong","poll","poll_closed","poll_reset","poll_reset","push_request","reset_stream_duration","send_reset","send_reset","send_response","send_response","set_initial_window_size","set_target_window_size","stream_id","stream_id","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"h2"],[151,"h2::client"],[272,"h2::ext"],[291,"h2::server"],[375,"bytes::buf::buf_impl"],[376,"bytes::bytes"],[377,"core::result"],[378,"core::option"],[379,"core::fmt"],[380,"core::fmt"],[381,"core::hash"],[382,"core::task::wake"],[383,"core::task::poll"],[384,"http::header::map"],[385,"alloc::string"],[386,"core::any"],[387,"tokio::io::async_read"],[388,"tokio::io::async_write"],[389,"core::marker"],[390,"core::future::future"],[391,"http::request"],[392,"core::pin"],[393,"core::time"],[394,"http::response"]],"d":["Used by the endpoint to indicate that the stream is no …","The endpoint is unable to maintain the header compression …","The connection established in response to a CONNECT …","The endpoint detected that its peer is exhibiting a …","Represents HTTP/2 operation errors.","The endpoint detected that its peer violated the …","The endpoint received a frame with an invalid size.","A handle to release window capacity to a remote stream.","The endpoint requires that HTTP/1.1 be used instead of …","The underlying transport has properties that do not meet …","The endpoint encountered an unexpected internal error.","The associated condition is not a result of an error.","The endpoint detected an unspecific protocol error.","Sent via <code>PingPong</code> to send a PING frame to a peer.","A handle to send and receive PING frames with the peer.","Received via <code>PingPong</code> when a peer acknowledges a <code>Ping</code>.","The endpoint refused the stream prior to performing any …","HTTP/2 error codes.","Receives the body stream and trailers from the remote peer.","The endpoint sent a SETTINGS frame but did not receive a …","The endpoint received a frame after a stream was …","Sends the body stream and trailers to the remote peer.","A stream identifier, as described in Section 5.1.1 of RFC …","Returns the <code>u32</code> corresponding to this <code>StreamId</code>","Get the current available capacity of data this stream …","","","","","","","","","","","","","","","","","","","Returns the stream’s current send capacity.","Client implementation of the HTTP/2 protocol.","","","","","","","Get the next data frame.","Get a string description of the error code.","","","","","","","","Extensions specific to the HTTP/2 protocol.","Get a mutable reference to this stream’s <code>FlowControl</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the error if the error is an io::Error","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the error if the error is an io::Error","Returns true if the receive half has reached the end of …","Returns true if the error is from a <code>GOAWAY</code>.","Returns true if the error is an io::Error","Returns true if the error was created by <code>h2</code>.","Returns true if the error was received in a frame from the …","Returns true if the error is from a <code>RST_STREAM</code>.","Creates a new opaque <code>Ping</code> to be sent via a <code>PingPong</code>.","Send a PING frame and wait for the peer to send the pong.","Requests to be notified when the stream’s capacity …","Poll for the next data frame.","Polls to be notified when the client resets this stream.","If the error was caused by the remote peer, the error …","Release window capacity back to remote stream.","Requests capacity to send data.","Sends a single data frame to the remote peer.","Resets the stream.","Sends trailers to the remote peer.","Server implementation of the HTTP/2 protocol.","Returns the stream ID of this stream.","Returns the stream ID of this <code>SendStream</code>.","Returns the stream ID of the stream whose capacity will be …","","","","","","Get optional trailers for this stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the currently <em>used</em> capacity for this stream.","Builds client connections with custom configuration values.","Manages all state associated with an HTTP/2 client …","A pushed response and corresponding request headers","A stream of pushed responses and corresponding promised …","A future of a pushed HTTP response.","Returns a <code>SendRequest</code> instance once it is ready to send at …","A future of an HTTP response.","Initializes new HTTP/2 streams on a connection by sending …","","","","","","","","","","","","","","","","","","","","","","Enables or disables server push promises.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new configured HTTP/2 client with default …","Creates a new configured HTTP/2 client backed by <code>io</code>.","Indicates the initial window size (in octets) for …","Sets the initial maximum of locally initiated (send) …","Indicates the initial window size (in octets) for …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Consumes <code>self</code>, returning the push promise’s request …","Returns whether the extended CONNECT protocol is enabled …","Returns the maximum number of concurrent streams that may …","Sets the maximum number of concurrent locally reset …","Returns the maximum number of concurrent streams that may …","Sets the maximum number of concurrent streams.","Indicates the size (in octets) of the largest HTTP/2 frame …","Sets the max size of received header frames.","Sets the maximum number of pending-accept remotely-reset …","Sets the maximum send buffer size per stream.","Returns a new client builder instance initialized with …","Takes a <code>PingPong</code> instance from the connection.","","","","","Returns <code>Ready</code> when the connection can initialize a new …","Get the next <code>PushPromise</code>.","Returns a stream of PushPromises","Consumes <code>self</code>, returning a future that returns <code>self</code> back …","Returns a reference to the push promise’s request …","Returns a mutable reference to the push promise’s …","Sets the duration to remember locally reset streams.","Sends a HTTP/2 request to the server.","Set a new <code>INITIAL_WINDOW_SIZE</code> setting (in octets) for …","Sets the target window size for the whole connection.","Returns the stream ID of the response stream.","Returns the stream ID of the response stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents the <code>:protocol</code> pseudo-header used by the …","","Returns a str representation of the header.","","","","","","","","","","Returns the argument unchanged.","Converts a static string to a protocol name.","Calls <code>U::from(self)</code>.","","","","","Builds server connections with custom configuration values.","Accepts inbound HTTP/2 streams on a connection.","In progress HTTP/2 connection handshake future.","Send a response to a promised request","Send a response back to the client","Sets the connection to a GOAWAY state.","Accept the next incoming request on this connection.","","","","","","","","","","","","","","Enables the extended CONNECT protocol.","Enables the extended CONNECT protocol.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Starts a graceful shutdown process.","Creates a new configured HTTP/2 server with default …","Creates a new configured HTTP/2 server backed by <code>io</code>.","Indicates the initial window size (in octets) for …","Indicates the initial window size (in octets) for …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the maximum number of concurrent streams that may …","Sets the maximum number of concurrent locally reset …","Returns the maximum number of concurrent streams that may …","Sets the maximum number of concurrent streams.","Indicates the size (in octets) of the largest HTTP/2 frame …","Sets the max size of received header frames.","Sets the maximum number of pending-accept remotely-reset …","Sets the maximum send buffer size per stream.","Returns a new server builder instance initialized with …","Takes a <code>PingPong</code> instance from the connection.","","Returns <code>Ready</code> when the underlying connection has closed.","Polls to be notified when the client resets this stream.","Polls to be notified when the client resets this stream.","Push a request and response to the client","Sets the maximum number of concurrent locally reset …","Send a stream reset to the peer.","Send a stream reset to the peer.","Send a response to a promised request.","Send a response to a client request.","Set a new <code>INITIAL_WINDOW_SIZE</code> setting (in octets) for …","Sets the target window size for the whole connection.","Returns the stream ID of the response stream.","Returns the stream ID of the response stream.","","","","","","","","","","","","","","","","",""],"i":[8,8,8,8,0,8,8,0,8,8,8,8,8,0,0,0,8,0,0,8,8,0,0,1,3,10,19,20,21,12,8,5,1,3,10,19,20,21,12,8,5,1,3,5,0,8,1,3,8,1,3,10,8,10,8,1,8,8,1,1,0,10,10,19,20,21,12,12,8,8,5,1,3,10,19,20,21,12,12,8,8,5,1,3,12,1,10,19,20,21,12,8,5,1,3,12,10,12,12,12,12,12,20,19,5,10,5,12,3,5,5,5,5,0,10,5,3,8,1,3,12,8,10,10,19,20,21,12,8,5,1,3,10,19,20,21,12,8,5,1,3,10,19,20,21,12,8,5,1,3,3,0,0,0,0,0,0,0,0,30,32,35,36,37,38,39,31,30,32,35,36,37,38,39,31,30,31,30,31,31,31,30,32,35,36,37,38,39,31,30,32,35,36,37,38,39,31,0,31,31,31,31,30,32,35,36,37,38,39,31,32,35,36,37,38,30,32,31,32,31,31,31,31,31,31,32,32,35,36,37,30,39,36,30,38,38,31,30,32,32,36,37,30,31,30,32,35,36,37,38,39,31,30,32,35,36,37,38,39,31,32,35,36,37,30,32,35,36,37,38,39,31,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,48,48,51,48,52,50,49,51,48,52,50,49,50,50,50,48,50,51,48,52,50,49,51,48,52,50,49,48,0,50,50,50,51,48,52,50,49,51,48,50,48,50,50,50,50,50,50,48,51,48,52,49,49,50,52,49,52,49,48,48,52,49,50,51,48,52,50,49,51,48,52,50,49,51,51,48,52,50,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],6,7],0,[8,8],[1,1],[3,3],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[10,[[14,[[13,[11,12]]]]]],[8,15],[10,9],[[8,8],16],[[1,1],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],0,[10,3],[[10,17],18],[[19,17],18],[[20,17],18],[[21,17],18],[[12,17],18],[[12,17],18],[[8,17],18],[[8,17],18],[[[5,[-1]],17],18,22],[[1,17],18],[[3,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,12],[2,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[12,[[14,[23]]]],[[1,-1],9,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,[[14,[23]]]],[10,16],[12,16],[12,16],[12,16],[12,16],[12,16],[[],20],[[19,20],[[13,[21,12]]]],[[[5,[-1]],25],[[26,[[14,[[13,[6,12]]]]]]],7],[[10,25],[[26,[[14,[[13,[11,12]]]]]]]],[[[5,[-1]],25],[[26,[[13,[8,12]]]]],7],[12,[[14,[8]]]],[[3,6],[[13,[9,12]]]],[[[5,[-1]],6],9,7],[[[5,[-1]],-1,16],[[13,[9,12]]],7],[[[5,[-1]],8],9,7],[[[5,[-1]],27],[[13,[9,12]]],7],0,[10,1],[[[5,[-1]]],1,7],[3,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[10,[[13,[[14,[27]],12]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[3,6],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1]]],[[30,[-1]]],7],[31,31],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[],31],[[31,16],31],[[[30,[-1]],17],18,7],[[[32,[-1,-2]],17],18,[33,34,22],[22,7]],[[[35,[-1]],17],18,[22,7]],[[36,17],18],[[37,17],18],[[38,17],18],[[39,17],18],[[31,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[[9,[[30,[11]],[32,[-1,11]]]],12]]],[33,34,40]],[[31,-1],[[0,[41]]],[33,34,40]],[[31,2],31],[[31,6],31],[[31,2],31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[38,[[9,[[42,[9]],37]]]],[[[30,[-1]]],16,7],[[[32,[-1,-2]]],6,[33,34,40],7],[[31,6],31],[[[32,[-1,-2]]],6,[33,34,40],7],[[31,2],31],[[31,2],31],[[31,2],31],[[31,6],31],[[31,6],31],[[],31],[[[32,[-1,-2]]],[[14,[19]]],[33,34,40],7],[[[43,[[32,[-1,-2]]]],25],26,[33,34,40],7],[[[43,[[35,[-1]]]],25],26,7],[[[43,[36]],25],26],[[[43,[37]],25],26],[[[30,[-1]],25],[[26,[[13,[9,12]]]]],7],[39,[[14,[[13,[38,12]]]]]],[36,39],[[[30,[-1]]],[[35,[-1]]],7],[38,[[42,[9]]]],[38,[[42,[9]]]],[[31,44],31],[[[30,[-1]],[42,[9]],16],[[13,[[9,[36,[5,[-1]]]],12]]],7],[[[32,[-1,-2]],2],[[13,[9,12]]],[33,34,40],7],[[[32,[-1,-2]],2],9,[33,34,40],7],[36,1],[37,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[[43,[-1]],25],26,[]],[[[43,[-1]],25],26,[]],[[[43,[-1]],25],26,[]],[[[43,[-1]],25],26,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],0,[45,[[47,[46]]]],[45,15],[-1,-2,[],[]],[-1,-2,[],[]],[45,45],[[-1,-2],9,[],[]],[[45,45],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[45,17],18],[15,45],[-1,-1,[]],[15,45],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,29,[]],0,0,0,0,0,[[[48,[-1,-2]],8],9,[33,34,40],7],[[[48,[-1,-2]]],[[14,[[13,[[9,[[42,[10]],[49,[-2]]]],12]]]]],[33,34,40],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,50],[[-1,-2],9,[],[]],[[],50],[[[48,[-1,-2]]],[[13,[9,12]]],[33,34,40],7],[50,50],[[[51,[-1,-2]],17],18,[33,34,22],[22,7]],[[[48,[-1,-2]],17],18,22,[22,7]],[[[52,[-1]],17],18,[7,22]],[[50,17],18],[[[49,[-1]],17],18,[22,7]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1,-2]]],9,[33,34,40],7],[-1,[[51,[-1,11]]],[33,34,40]],[[50,-1],[[51,[-1,-2]]],[33,34,40],7],[[50,2],50],[[50,2],50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[48,[-1,-2]]],6,[33,34,40],7],[[50,6],50],[[[48,[-1,-2]]],6,[33,34,40],7],[[50,2],50],[[50,2],50],[[50,2],50],[[50,6],50],[[50,6],50],[[],50],[[[48,[-1,-2]]],[[14,[19]]],[33,34,40],7],[[[43,[[51,[-1,-2]]]],25],26,[33,34,40],7],[[[48,[-1,-2]],25],[[26,[[13,[9,12]]]]],[33,34,40],7],[[[52,[-1]],25],[[26,[[13,[8,12]]]]],7],[[[49,[-1]],25],[[26,[[13,[8,12]]]]],7],[[[49,[-1]],[42,[9]]],[[13,[[52,[-1]],12]]],7],[[50,44],50],[[[52,[-1]],8],9,7],[[[49,[-1]],8],9,7],[[[52,[-1]],[53,[9]],16],[[13,[[5,[-1]],12]]],7],[[[49,[-1]],[53,[9]],16],[[13,[[5,[-1]],12]]],7],[[[48,[-1,-2]],2],[[13,[9,12]]],[33,34,40],7],[[[48,[-1,-2]],2],9,[33,34,40],7],[[[52,[-1]]],1,7],[[[49,[-1]]],1,7],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[[43,[-1]],25],26,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]]],"c":[],"p":[[3,"StreamId",0],[15,"u32"],[3,"FlowControl",0],[15,"isize"],[3,"SendStream",0],[15,"usize"],[8,"Buf",375],[3,"Reason",0],[15,"tuple"],[3,"RecvStream",0],[3,"Bytes",376],[3,"Error",0],[4,"Result",377],[4,"Option",378],[15,"str"],[15,"bool"],[3,"Formatter",379],[6,"Result",379],[3,"PingPong",0],[3,"Ping",0],[3,"Pong",0],[8,"Debug",379],[3,"Error",380],[8,"Hasher",381],[3,"Context",382],[4,"Poll",383],[3,"HeaderMap",384],[3,"String",385],[3,"TypeId",386],[3,"SendRequest",151],[3,"Builder",151],[3,"Connection",151],[8,"AsyncRead",387],[8,"AsyncWrite",388],[3,"ReadySendRequest",151],[3,"ResponseFuture",151],[3,"PushedResponseFuture",151],[3,"PushPromise",151],[3,"PushPromises",151],[8,"Unpin",389],[8,"Future",390],[3,"Request",391],[3,"Pin",392],[3,"Duration",393],[3,"Protocol",272],[15,"u8"],[15,"slice"],[3,"Connection",291],[3,"SendResponse",291],[3,"Builder",291],[3,"Handshake",291],[3,"SendPushedResponse",291],[3,"Response",394]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":"NNDDELLLLLLLAALALLLLMEDDEEDDDDDDDNNNDDDDDEDDNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLDDDEDDDDNDDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","EntryRef","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","entry_ref","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","raw_table","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Difference","Drain","DrainFilter","Entry","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","or_insert","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Bucket","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","allocator","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","default","drain","drain_iter_from","drop","drop","drop","drop","erase","erase_entry","erase_no_drop","find","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert_entry","insert_no_grow","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","is_empty","iter","iter","iter","iter_hash","len","new","new_in","next","next","next","next","read","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_no_grow","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write"],"q":[[0,"hashbrown"],[20,"hashbrown::TryReserveError"],[21,"hashbrown::hash_map"],[421,"hashbrown::hash_set"],[634,"hashbrown::raw"],[759,"core::fmt"],[760,"core::fmt"],[761,"core::any"],[762,"core::clone"],[763,"core::ops::function"],[764,"core::marker"],[765,"core::borrow"],[766,"core::hash"],[767,"core::cmp"],[768,"core::hash"],[769,"core::ops::function"],[770,"core::marker"],[771,"core::convert"],[772,"core::ops::function"],[773,"alloc::borrow"],[774,"core::ptr::non_null"]],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Calls <code>U::from(self)</code>.","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates a consuming iterator, that is, one that moves each …","Creates an iterator over the entries of a <code>HashMap</code> in …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Returns a mutable reference to the <code>RawTable</code> used …","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A view into a single entry in a set, which may either be …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","Gets the given value’s corresponding entry in the set …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","A reference to a hash table bucket containing a <code>T</code>.","Iterator which consumes elements without freeing the table …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","Returns a reference to the underlying allocator.","","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","","Returns pointer to one past last element of data table.","","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it in …","Erases an element from the table without dropping it.","Searches for an element in the table.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to an element in the table.","Attempts to get mutable references to <code>N</code> entries in the …","","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, without growing the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns an iterator which consumes all elements from the …","Returns <code>true</code> if the table contains no elements.","Returns an iterator over every element in the table. It is …","","","Returns an iterator over occupied buckets that could match …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","Creates a new empty hash table without allocating any …","","","","","","Refresh the iterator so that it reflects an insertion into …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function to …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","Attempts to insert a new element without growing the table …","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least enough …","Attempts to allocate a new hash table using the given …","","","","","","","Allocates a new hash table with at least enough capacity …","Allocates a new hash table using the given allocator, with …",""],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,71,0,0,0,0,0,0,0,0,0,0,0,0,10,12,13,0,0,0,0,0,0,0,0,10,12,13,0,0,0,0,8,10,12,13,10,12,13,72,8,17,31,32,33,34,18,19,24,25,35,36,10,37,38,39,12,40,41,13,42,43,44,72,8,17,31,32,33,34,18,19,24,25,35,36,10,37,38,39,12,40,41,13,42,43,44,8,8,8,17,18,19,8,8,17,18,19,8,8,8,8,25,8,44,8,8,8,8,8,8,17,31,32,33,34,18,19,24,35,36,10,37,38,39,12,40,41,13,42,43,44,44,72,8,17,31,32,33,34,18,19,24,25,35,36,10,37,38,39,12,40,41,13,42,43,44,36,39,8,36,39,36,39,8,37,40,42,8,37,8,37,8,8,8,8,8,37,40,42,8,8,8,10,37,38,12,40,41,13,42,43,38,37,8,38,72,8,17,31,32,33,34,18,19,24,25,35,36,10,37,38,39,12,40,41,13,42,43,44,8,8,8,17,31,32,33,34,18,19,24,25,35,37,41,43,37,8,37,40,42,8,8,8,8,37,12,40,41,13,42,43,37,8,8,17,31,32,33,34,18,19,24,35,17,31,32,33,34,18,19,24,25,35,12,13,10,12,13,10,12,13,12,13,8,8,8,8,37,40,42,8,37,40,42,40,42,37,40,42,40,42,8,8,8,8,17,31,32,33,34,18,19,24,25,35,8,17,18,19,44,72,8,17,31,32,33,34,18,19,24,25,35,36,10,37,38,39,12,40,41,13,42,43,44,8,72,8,17,31,32,33,34,18,19,24,25,35,36,10,37,38,39,12,40,41,13,42,43,44,8,72,8,17,31,32,33,34,18,19,24,25,35,36,10,37,38,39,12,40,41,13,42,43,44,44,8,8,8,8,8,8,0,0,0,0,0,0,0,0,60,0,0,0,60,0,52,52,52,52,52,53,61,58,59,54,55,56,57,60,62,63,52,53,61,58,59,54,55,56,57,60,62,63,52,52,52,53,54,55,56,57,52,52,53,54,55,56,57,52,52,52,52,52,59,52,52,52,52,52,53,61,58,54,55,56,57,60,62,63,52,52,53,61,58,59,54,55,56,57,60,62,63,52,52,60,62,63,52,52,52,52,52,60,63,52,52,52,53,61,58,59,54,55,56,57,60,62,63,52,52,53,61,58,59,54,55,56,57,63,52,52,52,52,52,52,53,61,58,53,61,58,59,54,55,56,57,60,52,62,52,62,52,52,52,52,53,61,58,59,54,55,56,57,52,52,52,52,53,54,55,56,57,52,53,61,58,59,54,55,56,57,60,62,63,52,53,61,58,59,54,55,56,57,60,62,63,52,52,53,61,58,59,54,55,56,57,60,62,63,52,52,52,52,52,0,0,0,0,0,0,50,65,65,65,65,50,66,69,68,70,65,50,66,69,68,70,50,50,50,50,50,50,65,50,66,50,50,65,50,66,65,50,50,50,50,65,50,69,68,50,50,50,50,65,50,66,69,68,70,50,50,50,50,50,50,50,65,50,66,69,68,70,50,66,69,68,70,50,50,50,69,68,50,50,50,50,66,69,68,70,65,66,66,50,50,50,50,50,66,69,68,65,50,66,65,50,66,69,68,70,50,65,50,66,69,68,70,50,50,50,65,50,66,69,68,70,50,50,65],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[1,4],5],[-1,-1,[]],0,0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[-1,-2,-3,-4]]],-4,[],[],[],[0,9]],[[[10,[-1,-2,-3,-4]],-5],[[10,[-1,-2,-3,-4]]],[],[],[],[0,9],11],[[[12,[-1,-2,-3,-4]],-5],[[12,[-1,-2,-3,-4]]],[],[],[],[0,9],11],[[[13,[-1,-2,-3,-4,-5]],-6],[[13,[-1,-2,-3,-4,-5]]],[],14,[],[],[0,9],11],[[[10,[-1,-2,-3,-4]],-5],[[10,[-1,-2,-3,-4]]],[],[],[],[0,9],11],[[[12,[-1,-2,-3,-4]],-5],[[12,[-1,-2,-3,-4]]],[],[],[],[0,9],11],[[[13,[-2,-1,-3,-4,-5]],-6],[[13,[-2,-1,-3,-4,-5]]],14,[[15,[-1]]],[],[],[0,9],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1,-2,-3,-4]]],16,[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],2,[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[8,[-1,-2,-3,-4]]],9,9,9,[0,9]],[[[17,[-1,-2]]],[[17,[-1,-2]]],[],[]],[[[18,[-1,-2]]],[[18,[-1,-2]]],[],[]],[[[19,[-1,-2]]],[[19,[-1,-2]]],[],[]],[[[8,[-1,-2,-3,-4]],[8,[-1,-2,-3,-4]]],2,9,9,9,[0,9]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[8,[-2,-3,-4,-5]],-1],3,[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[],[[8,[-1,-2,-3,-4]]],[],[],23,[23,0,9]],[[[8,[-1,-2,-3,-4]]],[[24,[-1,-2,-4]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]],-5],[[25,[-1,-2,-5,-4]]],[],[],[],[0,9],26],[[[25,[-1,-2,-3,-4]]],2,[],[],26,[0,9]],[[[8,[-1,-2,-3,-4]],-1],[[12,[-1,-2,-3,-4]]],[21,20],[],22,[0,9]],0,[[[8,[-2,-3,-4,-5]],-1],[[13,[-2,-1,-3,-4,-5]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[8,[-1,-2,-3,-4]],[8,[-1,-2,-3,-4]]],3,[21,20],27,22,[0,9]],[[[8,[-1,-2,-3,-4]],-5],2,[21,20],[],22,[0,9],28],[[[8,[-1,-2,-3,-4]],-5],2,[21,20,29],29,22,[0,9],28],[[[8,[-1,-2,-3,-4]],-5],2,[21,20,29],29,22,[0,9],28],[[[8,[-1,-2,-3,-4]],4],5,30,30,[],[0,9]],[[[17,[-1,-2]],4],5,30,30],[[[31,[-1,-2]],4],5,30,30],[[[32,[-1,-2,-3]],4],5,30,30,[0,9]],[[[33,[-1,-2,-3]],4],5,30,30,[0,9]],[[[34,[-1,-2,-3]],4],5,[],30,[0,9]],[[[18,[-1,-2]],4],5,30,[]],[[[19,[-1,-2]],4],5,[],30],[[[24,[-1,-2,-3]],4],5,30,30,[0,9]],[[[35,[-1,-2]],4],5,[],30],[[[36,[-1,-2,-3,-4]],4],5,[],[],[],[0,9]],[[[10,[-1,-2,-3,-4]],4],5,30,30,[],[0,9]],[[[37,[-1,-2,-3,-4]],4],5,30,30,[],[0,9]],[[[38,[-1,-2,-3,-4]],4],5,[],[],[],[0,9]],[[[39,[-1,-2,-3,-4]],4],5,[],[],[],[0,9]],[[[12,[-1,-2,-3,-4]],4],5,30,30,[],[0,9]],[[[40,[-1,-2,-3,-4]],4],5,30,30,[],[0,9]],[[[41,[-1,-2,-3,-4]],4],5,30,[],[],[0,9]],[[[13,[-2,-1,-3,-4,-5]],4],5,[14,30],[[15,[-1]]],30,[],[0,9]],[[[42,[-2,-1,-3,-4,-5]],4],5,[14,30],[[15,[-1]]],30,[],[0,9]],[[[43,[-2,-1,-3,-4,-5]],4],5,[14,30],[[15,[-1]]],[],[],[0,9]],[[[44,[-1,-2,-3,-4]],4],5,30,30,[],[0,9]],[[[44,[-1,-2,-3,-4]],4],5,30,30,[],[0,9]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[36,[-1,-2,-3,-4]],45,-5],[[10,[-1,-2,-3,-4]]],[],[],[],[0,9],26],[[[39,[-1,-2,-3,-4]],45,-5],[[46,[[2,[-1,-2]]]]],[],[],[],[0,9],26],[-1,[[8,[-2,-3,-4,-5]]],28,[21,20],[],[22,23],[23,0,9]],[[[36,[-2,-3,-4,-5]],-1],[[10,[-2,-3,-4,-5]]],[20,21,14],[[15,[-1]]],[],22,[0,9]],[[[39,[-2,-3,-4,-5]],-1],[[46,[[2,[-2,-3]]]]],[20,21,14],[[15,[-1]]],[],22,[0,9]],[[[36,[-2,-3,-4,-5]],45,-1],[[10,[-2,-3,-4,-5]]],[21,14],[[15,[-1]]],[],[],[0,9]],[[[39,[-2,-3,-4,-5]],45,-1],[[46,[[2,[-2,-3]]]]],[21,14],[[15,[-1]]],[],[],[0,9]],[[[8,[-2,-3,-4,-5]],-1],[[46,[-3]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[42,[-1,-2,-3,-4,-5]]],-3,[],14,[],[],[0,9]],[[[8,[-2,-3,-4,-5]],-1],[[46,[[2,[-2,-3]]]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[0,9]],[[[8,[-2,-3,-4,-5]],-1],[[46,[[2,[-2,-3]]]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[0,9]],[[[8,[-2,-3,-4,-5]],[47,[-1]]],[[46,[[47,[[2,[-2,-3]]]]]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[8,[-2,-3,-4,-5]],[47,[-1]]],[[46,[[47,[[2,[-2,-3]]]]]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[8,[-2,-3,-4,-5]],[47,[-1]]],[[46,[[47,[-3]]]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[8,[-2,-3,-4,-5]],[47,[-1]]],[[46,[[47,[-3]]]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[8,[-2,-3,-4,-5]],-1],[[46,[-3]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[42,[-1,-2,-3,-4,-5]]],-3,[],14,[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],-3,[],[],[],[0,9]],[[[8,[-2,-3,-4,-5]],-1],-3,[21,20,14],[21,20,[15,[-1]]],[],22,[0,9]],[[[8,[-1,-2,-3,-4]],-1,-2],[[46,[-2]]],[21,20],[],22,[0,9]],[[[10,[-1,-2,-3,-4]],-1,-2],[[37,[-1,-2,-3,-4]]],20,[],22,[0,9]],[[[37,[-1,-2,-3,-4]],-2],-2,[],[],[],[0,9]],[[[38,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],20,[],22,[0,9]],[[[12,[-1,-2,-3,-4]],-2],[[40,[-1,-2,-3,-4]]],20,[],22,[0,9]],[[[40,[-1,-2,-3,-4]],-2],-2,[],[],[],[0,9]],[[[41,[-1,-2,-3,-4]],-2],-2,20,[],22,[0,9]],[[[13,[-2,-1,-3,-4,-5]],-3],[[42,[-2,-1,-3,-4,-5]]],14,[20,[48,[-1]]],[],22,[0,9]],[[[42,[-1,-2,-3,-4,-5]],-3],-3,[],14,[],[],[0,9]],[[[43,[-2,-1,-3,-4,-5]],-3],-3,14,[20,[48,[-1]]],[],22,[0,9]],[[[38,[-1,-2,-3,-4]],45,-1,-2],[[2,[-1,-2]]],20,[],22,[0,9]],[[[37,[-1,-2,-3,-4]],-1],-1,[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],[21,20],[],22,[0,9]],[[[38,[-1,-2,-3,-4]],45,-1,-2,-5],[[2,[-1,-2]]],[],[],[],[0,9],49],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1,-2,-3,-4]]],[[17,[-1,-2]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[32,[-1,-2,-4]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[31,[-1,-2]]],[],[],[],[0,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[41,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[43,[-2,-1,-3,-4,-5]]],-2,14,[[48,[-1]]],[],[],[0,9]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[33,[-1,-2,-4]]],[],[],[],[0,9]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[42,[-1,-2,-3,-4,-5]]],-3,[],14,[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[34,[-1,-2,-4]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],3,[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[17,[-1,-2]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[31,[-1,-2]]],[],[],[],[0,9]],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[12,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[40,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[41,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[13,[-2,-1,-3,-4,-5]]],-1,14,[[15,[-1]]],[],[],[0,9]],[[[42,[-2,-1,-3,-4,-5]]],-1,14,[[15,[-1]]],[],[],[0,9]],[[[43,[-2,-1,-3,-4,-5]]],-1,14,[[15,[-1]]],[],[],[0,9]],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[18,[-1,-2]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],16,[],[],[],[0,9]],[[[17,[-1,-2]]],16,[],[]],[[[31,[-1,-2]]],16,[],[]],[[[32,[-1,-2,-3]]],16,[],[],[0,9]],[[[33,[-1,-2,-3]]],16,[],[],[0,9]],[[[34,[-1,-2,-3]]],16,[],[],[0,9]],[[[18,[-1,-2]]],16,[],[]],[[[19,[-1,-2]]],16,[],[]],[[[24,[-1,-2,-3]]],16,[],[],[0,9]],[[[35,[-1,-2]]],16,[],[]],[[[17,[-1,-2]]],[[46,[[2,[-1,-2]]]]],[],[]],[[[31,[-1,-2]]],[[46,[[2,[-1,-2]]]]],[],[]],[[[32,[-1,-2,-3]]],[[46,[[2,[-1,-2]]]]],[],[],[0,9]],[[[33,[-1,-2,-3]]],[[46,[-1]]],[],[],[0,9]],[[[34,[-1,-2,-3]]],[[46,[-2]]],[],[],[0,9]],[[[18,[-1,-2]]],[[46,[-1]]],[],[]],[[[19,[-1,-2]]],[[46,[-2]]],[],[]],[[[24,[-1,-2,-3]]],[[46,[[2,[-1,-2]]]]],[],[],[0,9]],[[[25,[-1,-2,-3,-4]]],46,[],[],26,[0,9]],[[[35,[-1,-2]]],[[46,[-2]]],[],[]],[[[12,[-1,-2,-3,-4]]],-2,20,23,22,[0,9]],[[[13,[-2,-1,-3,-4,-5]]],-3,14,[20,[48,[-1]]],23,22,[0,9]],[[[10,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],20,[],22,[0,9]],[[[12,[-1,-2,-3,-4]],-2],-2,20,[],22,[0,9]],[[[13,[-2,-1,-3,-4,-5]],-3],-3,14,[20,[48,[-1]]],[],22,[0,9]],[[[10,[-1,-2,-3,-4]],-5],[[2,[-1,-2]]],20,[],22,[0,9],11],[[[12,[-1,-2,-3,-4]],-5],-2,20,[],22,[0,9],11],[[[13,[-2,-1,-3,-4,-5]],-6],-3,14,[20,[48,[-1]]],[],22,[0,9],11],[[[12,[-1,-2,-3,-4]],-5],-2,20,[],22,[0,9],11],[[[13,[-2,-1,-3,-4,-5]],-6],-3,14,[20,[15,[-1]],[48,[-1]]],[],22,[0,9],11],[[[8,[-1,-2,-3,-4]]],[[39,[-1,-2,-3,-4]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[36,[-1,-2,-3,-4]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[50,[[2,[-1,-2]],-4]]],[],[],[],[0,9]],[[[8,[-2,-3,-4,-5]],-1],[[46,[-3]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],[0,9]],[[[42,[-1,-2,-3,-4,-5]]],-3,[],14,[],[],[0,9]],[[[8,[-2,-3,-4,-5]],-1],[[46,[[2,[-2,-3]]]]],[20,21,14],[[15,[-1]],21,20],[],22,[0,9]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[0,9]],[[[40,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],[0,9]],[[[42,[-1,-2,-3,-4,-5]]],[[2,[-1,-3]]],[],14,[],[],[0,9]],[[[40,[-1,-2,-3,-4]],-2],[[2,[-1,-2]]],[],[],[],[0,9]],[[[42,[-2,-1,-3,-4,-5]],-3],[[2,[-2,-3]]],14,[[48,[-1]]],[],[],[0,9]],[[[37,[-1,-2,-3,-4]],-5],[[10,[-1,-2,-3,-4]]],[],[],[],[0,9],11],[[[40,[-1,-2,-3,-4]],-5],[[12,[-1,-2,-3,-4]]],[],[],[],[0,9],11],[[[42,[-2,-1,-3,-4,-5]],-6],[[13,[-2,-1,-3,-4,-5]]],14,[[15,[-1]]],[],[],[0,9],11],[[[40,[-1,-2,-3,-4]]],-1,[],[],[],[0,9]],[[[42,[-2,-1,-3,-4,-5]]],-2,14,[[48,[-1]]],[],[],[0,9]],[[[8,[-1,-2,-3,-4]],16],2,[21,20],[],22,[0,9]],[[[8,[-1,-2,-3,-4]],-5],2,[],[],[],[0,9],26],[[[8,[-1,-2,-3,-4]],16],2,[21,20],[],22,[0,9]],[[[8,[-1,-2,-3,-4]]],2,[21,20],[],22,[0,9]],[[[17,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[]],[[[31,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[]],[[[32,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[],[],[0,9]],[[[33,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[],[],[0,9]],[[[34,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[],[],[0,9]],[[[18,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[]],[[[19,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[]],[[[24,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[],[],[0,9]],[[[25,[-1,-2,-3,-4]]],[[2,[16,[46,[16]]]]],[],[],26,[0,9]],[[[35,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[8,[-1,-2,-3,-4]],-1,-2],[[6,[-2,[44,[-1,-2,-3,-4]]]]],[21,20],[],22,[0,9]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[8,[-1,-2,-3,-4]],16],[[6,[2,1]]],[21,20],[],22,[0,9]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,[[[8,[-1,-2,-3,-4]]],[[19,[-1,-2]]],[],[],[],[0,9]],[[[8,[-1,-2,-3,-4]]],[[35,[-1,-2]]],[],[],[],[0,9]],[[16,-1],[[8,[-2,-3,-1]]],[],[],[]],[[16,-1,-2],[[8,[-3,-4,-1,-2]]],[],[0,9],[],[]],[-1,[[8,[-2,-3,-1]]],[],[],[]],[[-1,-2],[[8,[-3,-4,-1,-2]]],[],[0,9],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[52,[-1,-2,-3]]],-3,[],[],[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],[[52,[-1,-2]]],[21,20,9],[22,23],[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],[[52,[-1,-2]]],[21,20,9],[22,23],[0,9]],[[[52,[-1,-2]],[52,[-1,-2]]],[[52,[-1,-2]]],[21,20,9],[22,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1,-2,-3]]],16,[],[],[0,9]],[[[52,[-1,-2,-3]]],2,[],[],[0,9]],[[[52,[-1,-2,-3]]],[[52,[-1,-2,-3]]],9,9,[0,9]],[[[53,[-1]]],[[53,[-1]]],[]],[[[54,[-1,-2,-3]]],[[54,[-1,-2,-3]]],[],[],[0,9]],[[[55,[-1,-2,-3]]],[[55,[-1,-2,-3]]],[],[],[0,9]],[[[56,[-1,-2,-3]]],[[56,[-1,-2,-3]]],[],[],[0,9]],[[[57,[-1,-2,-3]]],[[57,[-1,-2,-3]]],[],[],[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],2,9,9,[0,9]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[52,[-2,-3,-4]],-1],3,[20,21,14],[[15,[-1]],21,20],22,[0,9]],[[],[[52,[-1,-2,-3]]],[],23,[23,0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],[[55,[-1,-2,-3]]],[21,20],22,[0,9]],[[[52,[-1,-2,-3]]],[[58,[-1,-3]]],[],[],[0,9]],[[[52,[-1,-2,-3]],-4],[[59,[-1,-4,-3]]],[],[],[0,9],26],[[[59,[-1,-2,-3]]],2,[],26,[0,9]],[[[52,[-1,-2,-3]],-1],[[60,[-1,-2,-3]]],[21,20],22,[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],3,[21,20],22,[0,9]],[[[52,[-1,-2,-3]],-4],2,[21,20],22,[0,9],28],[[[52,[-1,-2,-3]],-4],2,[21,20,29],22,[0,9],28],[[[52,[-1,-2,-3]],4],5,30,[],[0,9]],[[[53,[-1]],4],5,30],[[[61,[-1,-2]],4],5,30,[0,9]],[[[58,[-1,-2]],4],5,30,[0,9]],[[[54,[-1,-2,-3]],4],5,[30,21,20],22,[0,9]],[[[55,[-1,-2,-3]],4],5,[30,21,20],22,[0,9]],[[[56,[-1,-2,-3]],4],5,[30,21,20],22,[0,9]],[[[57,[-1,-2,-3]],4],5,[30,21,20],22,[0,9]],[[[60,[-1,-2,-3]],4],5,30,[],[0,9]],[[[62,[-1,-2,-3]],4],5,30,[],[0,9]],[[[63,[-1,-2,-3]],4],5,30,[],[0,9]],[[[8,[-1,2,-2,-3]]],[[52,[-1,-2,-3]]],[],[],[0,9]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[52,[-2,-3,-4]]],28,[21,20],[22,23],[23,0,9]],[[[52,[-2,-3,-4]],-1],[[46,[-2]]],[20,21,14],[[15,[-1]],21,20],22,[0,9]],[[[60,[-1,-2,-3]]],-1,[],[],[0,9]],[[[62,[-1,-2,-3]]],-1,[],[],[0,9]],[[[63,[-1,-2,-3]]],-1,[],[],[0,9]],[[[52,[-1,-2,-3]],-1],-1,[21,20],22,[0,9]],[[[52,[-2,-3,-4]],-1],-2,[20,21,64,14],[[15,[-1]],21,20],22,[0,9]],[[[52,[-2,-3,-4]],-1,-5],-2,[20,21,14],[[15,[-1]],21,20],22,[0,9],11],[[[52,[-1,-2,-3]]],-2,[],[],[0,9]],[[[52,[-1,-2,-3]],-1],3,[21,20],22,[0,9]],[[[60,[-1,-2,-3]]],[[62,[-1,-2,-3]]],20,22,[0,9]],[[[63,[-1,-2,-3]]],2,20,22,[0,9]],[[[52,[-1,-2,-3]],-1],-1,[21,20],22,[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],[[54,[-1,-2,-3]]],[21,20],22,[0,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1,-2,-3]]],[[53,[-1]]],[],[],[0,9]],[[[52,[-1,-2,-3]]],[[61,[-1,-3]]],[],[],[0,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1,-2,-3]]],-1,[],[],[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],3,[21,20],22,[0,9]],[[[52,[-1,-2,-3]]],3,[],[],[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],3,[21,20],22,[0,9]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],3,[21,20],22,[0,9]],[[[52,[-1,-2,-3]]],[[53,[-1]]],[],[],[0,9]],[[[52,[-1,-2,-3]]],16,[],[],[0,9]],[[[53,[-1]]],16,[]],[[[61,[-1,-2]]],16,[],[0,9]],[[[58,[-1,-2]]],16,[],[0,9]],[[[53,[-1]]],[[46,[-1]]],[]],[[[61,[-1,-2]]],[[46,[-1]]],[],[0,9]],[[[58,[-1,-2]]],[[46,[-1]]],[],[0,9]],[[[59,[-1,-2,-3]]],46,[],26,[0,9]],[[[54,[-1,-2,-3]]],[[46,[-1]]],[21,20],22,[0,9]],[[[55,[-1,-2,-3]]],[[46,[-1]]],[21,20],22,[0,9]],[[[56,[-1,-2,-3]]],[[46,[-1]]],[21,20],22,[0,9]],[[[57,[-1,-2,-3]]],[[46,[-1]]],[21,20],22,[0,9]],[[[60,[-1,-2,-3]]],2,20,22,[0,9]],[[[52,[-2,-3,-4]],-1],3,[20,21,14],[[15,[-1]],21,20],22,[0,9]],[[[62,[-1,-2,-3]]],-1,[],[],[0,9]],[[[52,[-1,-2,-3]],-1],[[46,[-1]]],[21,20],22,[0,9]],[[[62,[-1,-2,-3]]],-1,[],[],[0,9]],[[[52,[-1,-2,-3]],16],2,[21,20],22,[0,9]],[[[52,[-1,-2,-3]],-4],2,[],[],[0,9],26],[[[52,[-1,-2,-3]],16],2,[21,20],22,[0,9]],[[[52,[-1,-2,-3]]],2,[21,20],22,[0,9]],[[[53,[-1]]],[[2,[16,[46,[16]]]]],[]],[[[61,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[0,9]],[[[58,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[0,9]],[[[59,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[],26,[0,9]],[[[54,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[21,20],22,[0,9]],[[[55,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[21,20],22,[0,9]],[[[56,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[21,20],22,[0,9]],[[[57,[-1,-2,-3]]],[[2,[16,[46,[16]]]]],[21,20],22,[0,9]],[[[52,[-1,-2]],[52,[-1,-2]]],[[52,[-1,-2]]],[21,20,9],[22,23]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],[[56,[-1,-2,-3]]],[21,20],22,[0,9]],[[[52,[-2,-3,-4]],-1],[[46,[-2]]],[20,21,14],[[15,[-1]],21,20],22,[0,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[52,[-1,-2,-3]],16],[[6,[2,1]]],[21,20],22,[0,9]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[[[52,[-1,-2,-3]],[52,[-1,-2,-3]]],[[57,[-1,-2,-3]]],[21,20],22,[0,9]],[[16,-1],[[52,[-2,-1,0]]],[],[]],[[16,-1,-2],[[52,[-3,-1,-2]]],[],[0,9],[]],[-1,[[52,[-2,-1,0]]],[],[]],[[-1,-2],[[52,[-3,-1,-2]]],[],[0,9],[]],0,0,0,0,0,0,[[[50,[-1,-2]]],-2,[],[0,9]],[[[65,[-1]]],-1,[]],[[[65,[-1]]],[],[]],[[[65,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1,-2]],16],[[65,[-1]]],[],[0,9]],[[[50,[-1,-2]],[65,[-1]]],16,[],[0,9]],[[[50,[-1,-2]]],16,[],[0,9]],[[[50,[-1,-2]]],16,[],[0,9]],[[[50,[-1,-2]]],2,[],[0,9]],[[[50,[-1,-2]]],2,[],[0,9]],[[[65,[-1]]],[[65,[-1]]],[]],[[[50,[-1,-2]]],[[50,[-1,-2]]],9,[0,9]],[[[66,[-1]]],[[66,[-1]]],[]],[[[50,[-1,-2]],[50,[-1,-2]]],2,9,[0,9]],[[[50,[-1,-2]],[50,[-1,-2]],-3],2,9,[0,9],49],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[65,[-1]],[65,[-1]]],2,[]],[[[50,[-1,-2]]],[[67,[-1]]],[],[0,9]],[[],[[50,[-1,-2]]],[],[0,9,23]],[[[50,[-1,-2]]],[[68,[-1,-2]]],[],[0,9]],[[[50,[-1,-2]],[66,[-1]]],[[68,[-1,-2]]],[],[0,9]],[[[65,[-1]]],2,[]],[[[50,[-1,-2]]],2,[],[0,9]],[[[69,[-1,-2]]],2,[],[0,9]],[[[68,[-1,-2]]],2,[],[0,9]],[[[50,[-1,-2]],[65,[-1]]],2,[],[0,9]],[[[50,[-1,-2]],45,-3],3,[],[0,9],26],[[[50,[-1,-2]],[65,[-1]]],2,[],[0,9]],[[[50,[-1,-2]],45,-3],[[46,[[65,[-1]]]]],[],[0,9],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[50,[-1,-2]],45,-3],[[46,[-1]]],[],[0,9],26],[[[50,[-1,-2]],[47,[45]],-3],[[46,[[47,[-1]]]]],[],[0,9],26],[[[50,[-1,-2]],[47,[45]],-3],[[46,[[47,[-1]]]]],[],[0,9],26],[[[50,[-1,-2]],45,-3],[[46,[-1]]],[],[0,9],26],[[[50,[-1,-2]],45,-1,-3],[[65,[-1]]],[],[0,9],49],[[[50,[-1,-2]],45,-1,-3],-1,[],[0,9],49],[[[50,[-1,-2]],45,-1],[[65,[-1]]],[],[0,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1,-2]]],[[69,[-1,-2]]],[],[0,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1,-2]],[66,[-1]]],[[69,[-1,-2]]],[],[0,9]],[[[50,[-1,-2]]],3,[],[0,9]],[[[50,[-1,-2]]],[[66,[-1]]],[],[0,9]],[[[69,[-1,-2]]],[[66,[-1]]],[],[0,9]],[[[68,[-1,-2]]],[[66,[-1]]],[],[0,9]],[[[50,[-1,-2]],45],[[70,[-1,-2]]],[],[0,9]],[[[50,[-1,-2]]],16,[],[0,9]],[[],[[50,[-1,0]]],[]],[-1,[[50,[-2,-1]]],[0,9],[]],[[[66,[-1]]],[[46,[[65,[-1]]]]],[]],[[[69,[-1,-2]]],[[46,[-1]]],[],[0,9]],[[[68,[-1,-2]]],[[46,[-1]]],[],[0,9]],[[[70,[-1,-2]]],[[46,[[65,[-1]]]]],[],[0,9]],[[[65,[-1]]],-1,[]],[[[66,[-1]],[65,[-1]]],2,[]],[[[66,[-1]],[65,[-1]]],2,[]],[[[50,[-1,-2]],[65,[-1]]],-1,[],[0,9]],[[[50,[-1,-2]],45,-3],[[46,[-1]]],[],[0,9],26],[[[50,[-1,-2]],[65,[-1]],-3],3,[],[0,9],11],[[[50,[-1,-2]],16,-3],2,[],[0,9],49],[[[50,[-1,-2]],16,-3],2,[],[0,9],49],[[[66,[-1]]],[[2,[16,[46,[16]]]]],[]],[[[69,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[0,9]],[[[68,[-1,-2]]],[[2,[16,[46,[16]]]]],[],[0,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[50,[-1,-2]],45,-1],[[6,[[65,[-1]],-1]]],[],[0,9]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[50,[-1,-2]],16,-3],[[6,[2,1]]],[],[0,9],49],[16,[[6,[[50,[-1,0]],1]]],[]],[[16,-1],[[6,[[50,[-2,-1]],1]]],[0,9],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[16,[[50,[-1,0]]],[]],[[16,-1],[[50,[-2,-1]]],[0,9],[]],[[[65,[-1]],-1],2,[]]],"c":[681],"p":[[4,"TryReserveError",0],[15,"tuple"],[15,"bool"],[3,"Formatter",759],[6,"Result",759],[4,"Result",760],[3,"TypeId",761],[3,"HashMap",21],[8,"Clone",762],[4,"RawEntryMut",21],[8,"FnOnce",763],[4,"Entry",21],[4,"EntryRef",21],[8,"Sized",764],[8,"Borrow",765],[15,"usize"],[3,"Iter",21],[3,"Keys",21],[3,"Values",21],[8,"Hash",766],[8,"Eq",767],[8,"BuildHasher",766],[8,"Default",768],[3,"Drain",21],[3,"DrainFilter",21],[8,"FnMut",763],[8,"PartialEq",767],[8,"IntoIterator",769],[8,"Copy",764],[8,"Debug",759],[3,"IterMut",21],[3,"IntoIter",21],[3,"IntoKeys",21],[3,"IntoValues",21],[3,"ValuesMut",21],[3,"RawEntryBuilderMut",21],[3,"RawOccupiedEntryMut",21],[3,"RawVacantEntryMut",21],[3,"RawEntryBuilder",21],[3,"OccupiedEntry",21],[3,"VacantEntry",21],[3,"OccupiedEntryRef",21],[3,"VacantEntryRef",21],[3,"OccupiedError",21],[15,"u64"],[4,"Option",770],[15,"array"],[8,"From",771],[8,"Fn",763],[3,"RawTable",634],[3,"String",772],[3,"HashSet",421],[3,"Iter",421],[3,"Intersection",421],[3,"Difference",421],[3,"SymmetricDifference",421],[3,"Union",421],[3,"Drain",421],[3,"DrainFilter",421],[4,"Entry",421],[3,"IntoIter",421],[3,"OccupiedEntry",421],[3,"VacantEntry",421],[8,"ToOwned",773],[3,"Bucket",634],[3,"RawIter",634],[3,"NonNull",774],[3,"RawDrain",634],[3,"RawIntoIter",634],[3,"RawIterHash",634],[13,"AllocError",20],[4,"DefaultHashBuilder",21]]},\
"hex":{"doc":"Encoding and decoding hex strings.","t":"QIENNNILLLLFFFKKFFLLLLKLLLLLLMM","n":["Error","FromHex","FromHexError","InvalidHexCharacter","InvalidStringLength","OddLength","ToHex","borrow","borrow_mut","clone","clone_into","decode","decode_to_slice","encode","encode_hex","encode_hex_upper","encode_to_slice","encode_upper","eq","fmt","fmt","from","from_hex","into","to_owned","to_string","try_from","try_into","type_id","c","index"],"q":[[0,"hex"],[29,"hex::FromHexError"],[31,"alloc::vec"],[32,"core::result"],[33,"core::convert"],[34,"alloc::string"],[35,"core::iter::traits::collect"],[36,"core::fmt"],[37,"core::fmt"]],"d":["","Types that can be decoded from a hex string.","The error type for decoding a hex string into <code>Vec&lt;u8&gt;</code> or …","An invalid character was found. Valid ones are: <code>0...9</code>, …","If the hex string is decoded into a fixed sized container, …","A hex string’s length needs to be even, as two digits …","Encoding values as hex string.","","","","","Decodes a hex string into raw bytes.","Decode a hex string into a mutable bytes slice.","Encodes <code>data</code> as hex string using lowercase characters.","Encode the hex strict representing <code>self</code> into the result. …","Encode the hex strict representing <code>self</code> into the result. …","Encodes some bytes into a mutable slice of bytes.","Encodes <code>data</code> as hex string using uppercase characters.","","","","Returns the argument unchanged.","Creates an instance of type <code>Self</code> from the given hex …","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[15,0,0,1,1,1,0,1,1,1,1,0,0,0,16,16,0,0,1,1,1,1,15,1,1,1,1,1,1,17,17],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[-1,[[5,[[4,[3]],1]]],[[7,[[6,[3]]]]]],[[-1,[6,[3]]],[[5,[2,1]]],[[7,[[6,[3]]]]]],[-1,8,[[7,[[6,[3]]]]]],[-1,-2,[],[[10,[9]]]],[-1,-2,[],[[10,[9]]]],[[-1,[6,[3]]],[[5,[2,1]]],[[7,[[6,[3]]]]]],[-1,8,[[7,[[6,[3]]]]]],[[1,1],11],[[1,12],13],[[1,12],13],[-1,-1,[]],[-1,[[5,[-2]]],[[7,[[6,[3]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,8,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,14,[]],0,0],"c":[],"p":[[4,"FromHexError",0],[15,"tuple"],[15,"u8"],[3,"Vec",31],[4,"Result",32],[15,"slice"],[8,"AsRef",33],[3,"String",34],[15,"char"],[8,"FromIterator",35],[15,"bool"],[3,"Formatter",36],[6,"Result",36],[3,"TypeId",37],[8,"FromHex",0],[8,"ToHex",0],[13,"InvalidHexCharacter",29]]},\
"hkdf":{"doc":"An implementation of HKDF, the HMAC-based …","t":"DDIDDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Hkdf","HkdfExtract","HmacImpl","InvalidLength","InvalidPrkLength","SimpleHkdf","SimpleHkdfExtract","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","expand","expand_multi_info","extract","finalize","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_prk","hmac","input_ikm","into","into","into","into","new","new","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"hkdf"],[64,"crypto_common"],[65,"core::clone"],[66,"core::result"],[67,"core::option"],[68,"crypto_common"],[69,"core::fmt"],[70,"core::any"]],"d":["Structure representing the HKDF, capable of HKDF-Expand …","Structure representing the streaming context of an …","Sealed trait implemented for <code>Hmac</code> and <code>SimpleHmac</code>.","Structure for InvalidLength, used for output error …","Error that is returned when supplied pseudorandom key …","<code>Hkdf</code> variant which uses <code>SimpleHmac</code> for underlying HMAC …","<code>HkdfExtract</code> variant which uses <code>SimpleHmac</code> for underlying …","","","","","","","","","","","","","","","","","The RFC5869 HKDF-Expand operation","The RFC5869 HKDF-Expand operation. This is equivalent to …","The RFC5869 HKDF-Extract operation returning both the …","Completes the HKDF-Extract operation, returning both the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create <code>Hkdf</code> from an already cryptographically strong …","","Feeds in additional input key material to the HKDF-Extract …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initiates the HKDF-Extract context with the given optional …","Convenience method for <code>extract</code> when the generated …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,7,1,2,3,7,1,2,3,7,1,2,3,7,7,7,7,3,1,1,2,2,3,7,1,2,3,7,7,0,3,1,2,3,7,3,7,1,2,3,7,1,2,1,2,3,7,1,2,3,7,1,2,3,7],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[[3,[-1,-2]]],[[3,[-1,-2]]],[4,5],[[6,[-1]],5]],[[[7,[-1,-2]]],[[7,[-1,-2]]],[5,4],[5,[6,[-1]]]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[7,[-1,-2]],[10,[9]],[10,[9]]],[[11,[8,2]]],4,[[6,[-1]]]],[[[7,[-1,-2]],[10,[[10,[9]]]],[10,[9]]],[[11,[8,2]]],4,[[6,[-1]]]],[[[12,[[10,[9]]]],[10,[9]]],[[8,[[13,[-1]],[7,[-1,-2]]]]],4,[[6,[-1]]]],[[[3,[-1,-2]]],[[8,[[13,[-1]],[7,[-1,-2]]]]],4,[[6,[-1]]]],[[1,14],15],[[1,14],[[11,[8,16]]]],[[2,14],[[11,[8,16]]]],[[2,14],15],[[[3,[-1,-2]],14],15,[4,17],[[6,[-1]]]],[[[7,[-1,-2]],14],15,[4,17],[[6,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[10,[9]]],[[11,[[7,[-1,-2]],1]]],4,[[6,[-1]]]],0,[[[3,[-1,-2]],[10,[9]]],8,4,[[6,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[[10,[9]]]]],[[3,[-1,-2]]],4,[[6,[-1]]]],[[[12,[[10,[9]]]],[10,[9]]],[[7,[-1,-2]]],4,[[6,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,18,[]],[-1,18,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]]],"c":[],"p":[[3,"InvalidPrkLength",0],[3,"InvalidLength",0],[3,"HkdfExtract",0],[8,"OutputSizeUser",64],[8,"Clone",65],[8,"HmacImpl",0],[3,"Hkdf",0],[15,"tuple"],[15,"u8"],[15,"slice"],[4,"Result",66],[4,"Option",67],[6,"Output",64],[3,"Formatter",68],[6,"Result",68],[3,"Error",68],[8,"AlgorithmName",64],[3,"String",69],[3,"TypeId",70]]},\
"hmac":{"doc":"Generic implementation of Hash-based Message …","t":"GDIDLLLLLKLLLLLCKLLLLLLLKLLLLLLLLKLLLKLLLLKLLLLLLLLLLLLKLLLLKLKLKLKLKLKLL","n":["Hmac","HmacCore","Mac","SimpleHmac","borrow","borrow","borrow_mut","borrow_mut","box_clone","chain_update","chain_update","clone","clone","clone_into","clone_into","digest","finalize","finalize","finalize","finalize_fixed_core","finalize_into","finalize_into","finalize_into_reset","finalize_into_reset","finalize_reset","finalize_reset","finalize_reset","fmt","fmt","from","from","into","into","new","new","new","new","new_from_slice","new_from_slice","new_from_slice","new_from_slice","output_size","reset","reset","reset","reset","reset","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update","update","update","update_blocks","verify","verify","verify_reset","verify_reset","verify_slice","verify_slice","verify_slice_reset","verify_slice_reset","verify_truncated_left","verify_truncated_left","verify_truncated_right","verify_truncated_right","write_alg_name"],"q":[[0,"hmac"],[73,"digest::digest"],[74,"alloc::alloc"],[75,"alloc::boxed"],[76,"core::convert"],[77,"digest::core_api::wrapper"],[78,"core::clone"],[79,"digest::digest"],[80,"digest::mac"],[81,"digest::core_api"],[82,"crypto_common"],[83,"core::result"],[84,"digest"],[85,"core::fmt"],[86,"crypto_common"],[87,"crypto_common"]],"d":["Generic HMAC instance.","Generic core HMAC instance, which operates over blocks.","Convenience wrapper trait covering functionality of …","Simplified HMAC instance able to operate over hash …","","","","","","Process input data in a chained manner.","","","","","","","Obtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …","","","","","","","","Obtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new value from fixed size key.","","","","Create new value from variable size key.","","","","","Reset MAC instance to its initial state.","","","","","","","","","","","","","Update state using the provided data.","","","","","Check if tag/code value is correct for the processed input.","","Check if tag/code value is correct for the processed input …","","Check truncated tag correctness using all bytes of …","","Check truncated tag correctness using all bytes of …","","Check truncated tag correctness using left side bytes …","","Check truncated tag correctness using right side bytes …","",""],"i":[0,0,0,0,7,9,7,9,9,32,9,7,9,7,9,0,32,9,9,7,9,9,9,9,32,9,9,7,9,7,9,7,9,32,7,9,9,32,7,9,9,9,32,7,9,9,9,7,9,7,9,7,9,7,9,32,9,9,9,7,32,9,32,9,32,9,32,9,32,9,32,9,7],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[1,2]]],[]],[[-1,-2],-1,[],[[6,[[5,[4]]]]]],[[-1,-2],-3,[],[[6,[[5,[4]]]]],[]],[[[7,[-1]]],[[7,[-1]]],8],[[[9,[-1]]],[[9,[-1]]],[10,11,12]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,[-1,[[14,[-1]]],[]],[[[3,[-1,2]]],[[3,[[5,[4]],2]]],[]],[-1,[[14,[-2]]],[],[]],[[[7,[-1]],[15,[[7,[-1]]]],[16,[[7,[-1]]]]],13,8],[[[9,[-1]],[16,[[9,[-1]]]]],13,[11,12]],[[-1,[5,[4]]],[[18,[13,17]]],[]],[[-1,[5,[4]]],[[18,[13,17]]],[]],[[[9,[-1]],[16,[[9,[-1]]]]],13,[11,12,19]],[-1,[[14,[-1]]],19],[-1,[[14,[-2]]],[],19],[-1,[[3,[[5,[4]],2]]],[]],[[[7,[-1]],20],21,8],[[[9,[-1]],20],21,[11,12,22]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[4]]],-1,24],[[[25,[[7,[-1]]]]],[[7,[-1]]],8],[[[25,[[9,[-1]]]]],[[9,[-1]]],[11,12]],[[[23,[4]]],-1,24],[[[5,[4]]],[[18,[-1,26]]],24],[[[5,[4]]],[[18,[[7,[-1]],26]]],8],[[[5,[4]]],[[18,[[9,[-1]],26]]],[11,12]],[[[5,[4]]],[[18,[-1,26]]],24],[-1,27,[]],[-1,13,28],[[[7,[-1]]],13,8],[-1,13,[]],[[[9,[-1]]],13,[11,12,28]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[[-1,[5,[4]]],13,[]],[[-1,[5,[4]]],13,[]],[[-1,[5,[4]]],13,[]],[[[9,[-1]],[5,[4]]],13,[11,12]],[[[7,[-1]],[5,[[30,[[7,[-1]]]]]]],13,8],[[-1,[23,[4]]],[[18,[13,31]]],[]],[[-1,[23,[4]]],[[18,[13,31]]],[]],[[-1,[23,[4]]],[[18,[13,31]]],19],[[-1,[23,[4]]],[[18,[13,31]]],[]],[[-1,[5,[4]]],[[18,[13,31]]],[]],[[-1,[5,[4]]],[[18,[13,31]]],[]],[[-1,[5,[4]]],[[18,[13,31]]],19],[[-1,[5,[4]]],[[18,[13,31]]],[]],[[-1,[5,[4]]],[[18,[13,31]]],[]],[[-1,[5,[4]]],[[18,[13,31]]],[]],[[-1,[5,[4]]],[[18,[13,31]]],[]],[[-1,[5,[4]]],[[18,[13,31]]],[]],[20,21]],"c":[],"p":[[8,"DynDigest",73],[3,"Global",74],[3,"Box",75],[15,"u8"],[15,"slice"],[8,"AsRef",76],[3,"HmacCore",0],[8,"CoreProxy",77],[3,"SimpleHmac",0],[8,"Clone",78],[8,"Digest",73],[8,"BlockSizeUser",79],[15,"tuple"],[3,"CtOutput",80],[6,"Buffer",81],[6,"Output",79],[3,"InvalidBufferSize",82],[4,"Result",83],[8,"FixedOutputReset",82],[3,"Formatter",84],[6,"Result",84],[8,"Debug",84],[3,"GenericArray",85],[8,"KeyInit",79],[6,"Key",79],[3,"InvalidLength",79],[15,"usize"],[8,"Reset",79],[3,"TypeId",86],[6,"Block",79],[3,"MacError",80],[8,"Mac",0]]},\
"http":{"doc":"A general purpose library of common HTTP types","t":"NDDCCCCNCCGCCCLLLLLLLLLLLLLLLLLLLLLLALLLLLLALLAALALLLLLLLAARRRRRRRRRRRRRRRRRIRRRRRRRRRRRRRRRRDRRRERRDRDDDRRRRRIDDDDDDRRRRRNDRRRRRRRRRRRRRRRRRRRRRDRRRRRNDDDDDDRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSDDSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLMLLDDDLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLMLSSSSSSSSSSSSSSSSSSDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDSSDDDDDDDLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSDLLLLLLLLLLLLLLLLL","n":["Err","Error","Extensions","HeaderMap","HeaderName","HeaderValue","Method","Ok","Request","Response","Result","StatusCode","Uri","Version","borrow","borrow","borrow_mut","borrow_mut","clear","default","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get","get_mut","get_ref","header","insert","into","into","is","is_empty","len","method","new","remove","request","response","source","status","to_string","try_from","try_from","try_into","try_into","type_id","type_id","uri","version","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_RANGES","ACCESS_CONTROL_ALLOW_CREDENTIALS","ACCESS_CONTROL_ALLOW_HEADERS","ACCESS_CONTROL_ALLOW_METHODS","ACCESS_CONTROL_ALLOW_ORIGIN","ACCESS_CONTROL_EXPOSE_HEADERS","ACCESS_CONTROL_MAX_AGE","ACCESS_CONTROL_REQUEST_HEADERS","ACCESS_CONTROL_REQUEST_METHOD","AGE","ALLOW","ALT_SVC","AUTHORIZATION","AsHeaderName","CACHE_CONTROL","CACHE_STATUS","CDN_CACHE_CONTROL","CONNECTION","CONTENT_DISPOSITION","CONTENT_ENCODING","CONTENT_LANGUAGE","CONTENT_LENGTH","CONTENT_LOCATION","CONTENT_RANGE","CONTENT_SECURITY_POLICY","CONTENT_SECURITY_POLICY_REPORT_ONLY","CONTENT_TYPE","COOKIE","DATE","DNT","Drain","ETAG","EXPECT","EXPIRES","Entry","FORWARDED","FROM","GetAll","HOST","HeaderMap","HeaderName","HeaderValue","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","IF_UNMODIFIED_SINCE","IntoHeaderName","IntoIter","InvalidHeaderName","InvalidHeaderValue","Iter","IterMut","Keys","LAST_MODIFIED","LINK","LOCATION","MAX_FORWARDS","ORIGIN","Occupied","OccupiedEntry","PRAGMA","PROXY_AUTHENTICATE","PROXY_AUTHORIZATION","PUBLIC_KEY_PINS","PUBLIC_KEY_PINS_REPORT_ONLY","RANGE","REFERER","REFERRER_POLICY","REFRESH","RETRY_AFTER","SEC_WEBSOCKET_ACCEPT","SEC_WEBSOCKET_EXTENSIONS","SEC_WEBSOCKET_KEY","SEC_WEBSOCKET_PROTOCOL","SEC_WEBSOCKET_VERSION","SERVER","SET_COOKIE","STRICT_TRANSPORT_SECURITY","TE","TRAILER","TRANSFER_ENCODING","ToStrError","UPGRADE","UPGRADE_INSECURE_REQUESTS","USER_AGENT","VARY","VIA","Vacant","VacantEntry","ValueDrain","ValueIter","ValueIterMut","Values","ValuesMut","WARNING","WWW_AUTHENTICATE","X_CONTENT_TYPE_OPTIONS","X_DNS_PREFETCH_CONTROL","X_FRAME_OPTIONS","X_XSS_PROTECTION","append","append","as_bytes","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains_key","default","drain","drop","drop","drop","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_iter","from_lowercase","from_maybe_shared","from_maybe_shared_unchecked","from_name","from_static","from_static","from_str","from_str","from_str","get","get","get_all","get_mut","get_mut","hash","hash","index","insert","insert","insert","insert_entry","insert_mult","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","is_empty","is_sensitive","iter","iter","iter","iter_mut","iter_mut","key","key","key","keys","keys_len","len","len","new","next","next","next","next","next","next","next","next","next","next","next_back","next_back","or_insert","or_insert_with","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove_entry","remove_entry_mult","reserve","set_sensitive","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","try_entry","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","CONNECT","DELETE","GET","HEAD","InvalidMethod","Method","OPTIONS","PATCH","POST","PUT","TRACE","as_ref","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_bytes","from_str","hash","into","into","is_idempotent","is_safe","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Builder","Parts","Request","body","body","body_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","connect","default","default","delete","extension","extensions","extensions","extensions_mut","extensions_mut","extensions_ref","fmt","fmt","fmt","from","from","from","from_parts","get","head","header","headers","headers","headers_mut","headers_mut","headers_ref","into","into","into","into_body","into_parts","map","method","method","method","method_mut","method_ref","new","new","options","patch","post","put","trace","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uri","uri","uri","uri_mut","uri_ref","version","version","version","version_mut","version_ref","Builder","Parts","Response","body","body","body_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","default","default","extension","extensions","extensions","extensions_mut","extensions_mut","extensions_ref","fmt","fmt","fmt","from","from","from","from_parts","header","headers","headers","headers_mut","headers_mut","headers_ref","into","into","into","into_body","into_parts","map","new","new","status","status","status","status_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version","version","version_mut","ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","CONFLICT","CONTINUE","CREATED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","IM_A_TEAPOT","IM_USED","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","InvalidStatusCode","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_NOT_ALLOWED","MISDIRECTED_REQUEST","MOVED_PERMANENTLY","MULTIPLE_CHOICES","MULTI_STATUS","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","PARTIAL_CONTENT","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","RANGE_NOT_SATISFIABLE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","StatusCode","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","VARIANT_ALSO_NEGOTIATES","as_str","as_u16","borrow","borrow","borrow_mut","borrow_mut","canonical_reason","clone","clone_into","cmp","default","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_bytes","from_str","from_u16","hash","into","into","is_client_error","is_informational","is_redirection","is_server_error","is_success","partial_cmp","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Authority","Builder","HTTP","HTTPS","InvalidUri","InvalidUriParts","Parts","PathAndQuery","Port","Scheme","Uri","as_ref","as_ref","as_ref","as_str","as_str","as_str","as_str","as_u16","authority","authority","authority","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_maybe_shared","from_maybe_shared","from_maybe_shared","from_parts","from_static","from_static","from_static","from_str","from_str","from_str","from_str","hash","hash","hash","hash","host","host","into","into","into","into","into","into","into","into","into","into_parts","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","path","path_and_query","path_and_query","path_and_query","port","port","port_u16","port_u16","query","query","scheme","scheme","scheme","scheme_str","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","HTTP_09","HTTP_10","HTTP_11","HTTP_2","HTTP_3","Version","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id"],"q":[[0,"http"],[59,"http::header"],[500,"http::method"],[551,"http::request"],[626,"http::response"],[685,"http::status"],[792,"http::uri"],[999,"http::version"],[1022,"core::fmt"],[1023,"core::fmt"],[1024,"core::option"],[1025,"core::marker"],[1026,"core::marker"],[1027,"alloc::string"],[1028,"core::result"],[1029,"core::any"],[1030,"core::clone"],[1031,"core::cmp"],[1032,"core::cmp"],[1033,"core::fmt"],[1034,"core::ops::function"],[1035,"std::collections::hash::map"],[1036,"core::cmp"],[1037,"core::default"],[1038,"core::any"]],"d":["Contains the error value","A generic “error” for HTTP connections","A type map of protocol extensions.","","","","","Contains the success value","","","A <code>Result</code> typedef to use with the <code>http::Error</code> type","","","","","","","","Clear the <code>Extensions</code> of all inserted extensions.","","Extends <code>self</code> with another <code>Extensions</code>.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Get a reference to a type previously inserted on this …","Get a mutable reference to a type previously inserted on …","Return a reference to the lower level, inner error.","HTTP header types","Insert a type into this <code>Extensions</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if the underlying error has the same type as T.","Check whether the extension set is empty or not.","Get the numer of extensions available.","The HTTP request method","Create an empty <code>Extensions</code>.","Remove a type from this <code>Extensions</code>.","HTTP request types.","HTTP response types.","","HTTP status codes","","","","","","","","URI component of request and response lines","HTTP version","Advertises which content types the client is able to …","Advertises which character set the client is able to …","Advertises which content encoding the client is able to …","Advertises which languages the client is able to …","Marker used by the server to advertise partial request …","Preflight response indicating if the response to the …","Preflight response indicating permitted HTTP headers.","Preflight header response indicating permitted access …","Indicates whether the response can be shared with …","Indicates which headers can be exposed as part of the …","Indicates how long the results of a preflight request can …","Informs the server which HTTP headers will be used when an …","Informs the server know which HTTP method will be used …","Indicates the time in seconds the object has been in a …","Lists the set of methods support by a resource.","Advertises the availability of alternate services to …","Contains the credentials to authenticate a user agent with …","A marker trait used to identify values that can be used as …","Specifies directives for caching mechanisms in both …","Indicates how caches have handled a response and its …","Specifies directives that allow origin servers to control …","Controls whether or not the network connection stays open …","Indicates if the content is expected to be displayed …","Used to compress the media-type.","Used to describe the languages intended for the audience.","Indicates the size of the entity-body.","Indicates an alternate location for the returned data.","Indicates where in a full body message a partial message …","Allows controlling resources the user agent is allowed to …","Allows experimenting with policies by monitoring their …","Used to indicate the media type of the resource.","Contains stored HTTP cookies previously sent by the server …","Contains the date and time at which the message was …","Indicates the client’s tracking preference.","A drain iterator for <code>HeaderMap</code>.","Identifier for a specific version of a resource.","Indicates expectations that need to be fulfilled by the …","Contains the date/time after which the response is …","A view into a single location in a <code>HeaderMap</code>, which may be …","Contains information from the client-facing side of proxy …","Contains an Internet email address for a human user who …","A view to all values stored in a single entry.","Specifies the domain name of the server and (optionally) …","A set of HTTP headers","Represents an HTTP header field name","Represents an HTTP header field value.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on the modification date.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on range.","Makes the request conditional based on the last …","A marker trait used to identify values that can be used as …","An owning iterator over the entries of a <code>HeaderMap</code>.","A possible error when converting a <code>HeaderName</code> from another …","A possible error when converting a <code>HeaderValue</code> from a …","<code>HeaderMap</code> entry iterator.","<code>HeaderMap</code> mutable entry iterator","An iterator over <code>HeaderMap</code> keys.","Content-Types that are acceptable for the response.","Allows the server to point an interested client to another …","Indicates the URL to redirect a page to.","Indicates the max number of intermediaries the request …","Indicates where a fetch originates from.","An occupied entry","A view into a single occupied location in a <code>HeaderMap</code>.","HTTP/1.0 header usually used for backwards compatibility.","Defines the authentication method that should be used to …","Contains the credentials to authenticate a user agent to a …","Associates a specific cryptographic public key with a …","Sends reports of pinning violation to the report-uri …","Indicates the part of a document that the server should …","Contains the address of the previous web page from which a …","Governs which referrer information should be included with …","Informs the web browser that the current page or frame …","The Retry-After response HTTP header indicates how long …","The |Sec-WebSocket-Accept| header field is used in the …","The |Sec-WebSocket-Extensions| header field is used in the …","The |Sec-WebSocket-Key| header field is used in the …","The |Sec-WebSocket-Protocol| header field is used in the …","The |Sec-WebSocket-Version| header field is used in the …","Contains information about the software used by the origin …","Used to send cookies from the server to the user agent.","Tells the client to communicate with HTTPS instead of …","Informs the server of transfer encodings willing to be …","Allows the sender to include additional fields at the end …","Specifies the form of encoding used to safely transfer the …","A possible error when converting a <code>HeaderValue</code> to a string …","Used as part of the exchange to upgrade the protocol.","Sends a signal to the server expressing the client’s …","Contains a string that allows identifying the requesting …","Determines how to match future requests with cached …","Added by proxies to track routing.","A vacant entry","A view into a single empty location in a <code>HeaderMap</code>.","An drain iterator of all values associated with a single …","An iterator of all values associated with a single header …","A mutable iterator of all values associated with a single …","<code>HeaderMap</code> value iterator.","<code>HeaderMap</code> mutable value iterator","General HTTP header contains information about possible …","Defines the authentication method that should be used to …","Marker used by the server to indicate that the MIME types …","Controls DNS prefetching.","Indicates whether or not a browser should be allowed to …","Stop pages from loading when an XSS attack is detected.","Inserts a key-value pair into the map.","Insert the value into the entry.","Converts a <code>HeaderValue</code> to a byte slice.","","","","Returns a <code>str</code> representation of the header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of headers the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","Returns true if the map contains a value for the specified …","","Clears the map, returning all entries as an iterator.","","","","Gets the given key’s corresponding entry in the map for …","","","","Performs a case-insensitive comparison of the string …","","Performs a case-insensitive comparison of the string …","","","","","","","","","","","Extend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Converts a slice of bytes to an HTTP header name.","Attempt to convert a byte slice to a <code>HeaderValue</code>.","","Converts a slice of bytes to an HTTP header name.","Attempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.","Convert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …","Converts a HeaderName into a HeaderValue","Converts a static string to a HTTP header name.","Convert a static string to a <code>HeaderValue</code>.","","","Attempt to convert a string to a <code>HeaderValue</code>.","Returns a reference to the value associated with the key.","Get a reference to the first value in the entry.","Returns a view of all values associated with a key.","Returns a mutable reference to the value associated with …","Get a mutable reference to the first value in the entry.","","","Panics","Inserts a key-value pair into the map.","Insert the value into the entry.","Sets the value of the entry.","Insert the value into the entry.","Sets the value of the entry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves keys …","","","","","","","","","","","","","","","","","Take ownership of the key","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns true if the map contains no elements.","Returns true if the <code>HeaderValue</code> has a length of zero bytes.","Returns <code>true</code> if the value represents sensitive data.","An iterator visiting all key-value pairs.","Returns an iterator visiting all values associated with …","Returns an iterator visiting all values associated with …","An iterator visiting all key-value pairs, with mutable …","Returns an iterator mutably visiting all values associated …","Returns a reference to the entry’s key","Returns a reference to the entry’s key","Returns a reference to the entry’s key.","An iterator visiting all keys.","Returns the number of keys stored in the map.","Returns the number of headers stored in the map.","Returns the length of <code>self</code>.","Create an empty <code>HeaderMap</code>.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","","","","","","","Removes a key from the map, returning the value associated …","Remove the entry from the map.","Remove the entry from the map.","Remove the entry from the map.","Reserves capacity for at least <code>additional</code> more headers to …","Mark that the header value represents sensitive …","","","","","","","","","","","","","Yields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …","","","","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values.","An iterator visiting all values mutably.","Create an empty <code>HeaderMap</code> with the specified capacity.","CONNECT","DELETE","GET","HEAD","A possible error value when converting <code>Method</code> from bytes.","The Request Method (VERB)","OPTIONS","PATCH","POST","PUT","TRACE","","Return a &amp;str representation of the HTTP method","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a slice of bytes to an HTTP method.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether a method is considered “idempotent”, meaning …","Whether a method is considered “safe”, meaning the …","","","","","","","","","","","","An HTTP request builder","Component parts of an HTTP <code>Request</code>","Represents an HTTP request.","Returns a reference to the associated HTTP body.","“Consumes” this builder, using the provided <code>body</code> to …","Returns a mutable reference to the associated HTTP body.","","","","","","","Creates a new builder-style object to manufacture a <code>Request</code>","Creates a new <code>Builder</code> initialized with a CONNECT method …","","","Creates a new <code>Builder</code> initialized with a DELETE method and …","Adds an extension to this builder","Returns a reference to the associated extensions.","The request’s extensions","Returns a mutable reference to the associated extensions.","Get a mutable reference to the extensions for this request …","Get a reference to the extensions for this request builder.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Request</code> with the given components parts and …","Creates a new <code>Builder</code> initialized with a GET method and …","Creates a new <code>Builder</code> initialized with a HEAD method and …","Appends a header to this request builder.","Returns a reference to the associated header field map.","The request’s headers","Returns a mutable reference to the associated header field …","Get headers on this request builder.","Get header on this request builder. when builder has error …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the request, returning just the body.","Consumes the request returning the head and body parts.","Consumes the request returning a new request with body …","Returns a reference to the associated HTTP method.","Set the HTTP method for this request.","The request’s method","Returns a mutable reference to the associated HTTP method.","Get the HTTP Method for this request.","Creates a new blank <code>Request</code> with the body","Creates a new default instance of <code>Builder</code> to construct a …","Creates a new <code>Builder</code> initialized with an OPTIONS method …","Creates a new <code>Builder</code> initialized with a PATCH method and …","Creates a new <code>Builder</code> initialized with a POST method and …","Creates a new <code>Builder</code> initialized with a PUT method and …","Creates a new <code>Builder</code> initialized with a TRACE method and …","","","","","","","","","","Returns a reference to the associated URI.","Set the URI for this request.","The request’s URI","Returns a mutable reference to the associated URI.","Get the URI for this request","Returns the associated version.","Set the HTTP version for this request.","The request’s version","Returns a mutable reference to the associated version.","Get the HTTP version for this request","An HTTP response builder","Component parts of an HTTP <code>Response</code>","Represents an HTTP response","Returns a reference to the associated HTTP body.","“Consumes” this builder, using the provided <code>body</code> to …","Returns a mutable reference to the associated HTTP body.","","","","","","","Creates a new builder-style object to manufacture a …","","","Adds an extension to this builder","Returns a reference to the associated extensions.","The response’s extensions","Returns a mutable reference to the associated extensions.","Get a mutable reference to the extensions for this …","Get a reference to the extensions for this response …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Response</code> with the given head and body","Appends a header to this response builder.","Returns a reference to the associated header field map.","The response’s headers","Returns a mutable reference to the associated header field …","Get header on this response builder. when builder has …","Get header on this response builder.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the response, returning just the body.","Consumes the response returning the head and body parts.","Consumes the response returning a new response with body …","Creates a new blank <code>Response</code> with the body","Creates a new default instance of <code>Builder</code> to construct …","Returns the <code>StatusCode</code>.","Set the HTTP status for this response.","The response’s status","Returns a mutable reference to the associated <code>StatusCode</code>.","","","","","","","","","","Returns a reference to the associated version.","Set the HTTP version for this response.","The response’s version","Returns a mutable reference to the associated version.","202 Accepted [RFC7231, Section 6.3.3]","208 Already Reported [RFC5842]","502 Bad Gateway [RFC7231, Section 6.6.3]","400 Bad Request [RFC7231, Section 6.5.1]","409 Conflict [RFC7231, Section 6.5.8]","100 Continue [RFC7231, Section 6.2.1]","201 Created [RFC7231, Section 6.3.2]","417 Expectation Failed [RFC7231, Section 6.5.14]","424 Failed Dependency [RFC4918]","403 Forbidden [RFC7231, Section 6.5.3]","302 Found [RFC7231, Section 6.4.3]","504 Gateway Timeout [RFC7231, Section 6.6.5]","410 Gone [RFC7231, Section 6.5.9]","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]","418 I’m a teapot [curiously not registered by IANA but …","226 IM Used [RFC3229]","507 Insufficient Storage [RFC4918]","500 Internal Server Error [RFC7231, Section 6.6.1]","A possible error value when converting a <code>StatusCode</code> from a …","411 Length Required [RFC7231, Section 6.5.10]","423 Locked [RFC4918]","508 Loop Detected [RFC5842]","405 Method Not Allowed [RFC7231, Section 6.5.5]","421 Misdirected Request RFC7540, Section 9.1.2","301 Moved Permanently [RFC7231, Section 6.4.2]","300 Multiple Choices [RFC7231, Section 6.4.1]","207 Multi-Status [RFC4918]","511 Network Authentication Required [RFC6585]","203 Non-Authoritative Information [RFC7231, Section 6.3.4]","406 Not Acceptable [RFC7231, Section 6.5.6]","510 Not Extended [RFC2774]","404 Not Found [RFC7231, Section 6.5.4]","501 Not Implemented [RFC7231, Section 6.6.2]","304 Not Modified [RFC7232, Section 4.1]","204 No Content [RFC7231, Section 6.3.5]","200 OK [RFC7231, Section 6.3.1]","206 Partial Content [RFC7233, Section 4.1]","413 Payload Too Large [RFC7231, Section 6.5.11]","402 Payment Required [RFC7231, Section 6.5.2]","308 Permanent Redirect [RFC7238]","412 Precondition Failed [RFC7232, Section 4.2]","428 Precondition Required [RFC6585]","102 Processing [RFC2518]","407 Proxy Authentication Required [RFC7235, Section 3.2]","416 Range Not Satisfiable [RFC7233, Section 4.4]","431 Request Header Fields Too Large [RFC6585]","408 Request Timeout [RFC7231, Section 6.5.7]","205 Reset Content [RFC7231, Section 6.3.6]","303 See Other [RFC7231, Section 6.4.4]","503 Service Unavailable [RFC7231, Section 6.6.4]","101 Switching Protocols [RFC7231, Section 6.2.2]","An HTTP status code (<code>status-code</code> in RFC 7230 et al.).","307 Temporary Redirect [RFC7231, Section 6.4.7]","429 Too Many Requests [RFC6585]","401 Unauthorized [RFC7235, Section 3.1]","451 Unavailable For Legal Reasons [RFC7725]","422 Unprocessable Entity [RFC4918]","415 Unsupported Media Type [RFC7231, Section 6.5.13]","426 Upgrade Required [RFC7231, Section 6.5.15]","414 URI Too Long [RFC7231, Section 6.5.12]","305 Use Proxy [RFC7231, Section 6.4.5]","506 Variant Also Negotiates [RFC2295]","Returns a &amp;str representation of the <code>StatusCode</code>","Returns the <code>u16</code> corresponding to this <code>StatusCode</code>.","","","","","Get the standardised <code>reason-phrase</code> for this status code.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a &amp;u8 to a status code","","Converts a u16 to a status code.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if status is within 400-499.","Check if status is within 100-199.","Check if status is within 300-399.","Check if status is within 500-599.","Check if status is within 200-299.","","","","","","","","","","","","","","Represents the authority component of a URI.","A builder for <code>Uri</code>s.","HTTP protocol scheme","HTTP protocol over TLS.","An error resulting from a failed attempt to construct a …","An error resulting from a failed attempt to construct a …","The various parts of a URI.","Represents the path component of a URI","The port component of a URI.","Represents the scheme component of a URI","The URI component of a request.","","","","Returns the port number as a <code>str</code>.","Return a str representation of the authority","Returns the path and query as a string component.","Return a str representation of the scheme","Returns the port number as a <code>u16</code>.","Set the <code>Authority</code> for this URI.","Get the authority of this <code>Uri</code>.","The authority component of a URI","","","","","","","","","","","","","","","","","","","Consumes this builder, and tries to construct a valid <code>Uri</code> …","Creates a new builder-style object to manufacture a <code>Uri</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempt to convert a <code>Bytes</code> buffer to a <code>Authority</code>.","Attempt to convert a <code>Bytes</code> buffer to a <code>PathAndQuery</code>.","Attempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.","Attempt to convert a <code>Parts</code> into a <code>Uri</code>.","Attempt to convert an <code>Authority</code> from a static string.","Convert a <code>PathAndQuery</code> from a static string.","Convert a <code>Uri</code> from a static string.","","","","","","","","","Get the host of this <code>Authority</code>.","Get the host of this <code>Uri</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a <code>Uri</code> into <code>Parts</code>.","Creates a new default instance of <code>Builder</code> to construct a …","","","","","","","","","Returns the path component","Get the path of this <code>Uri</code>.","Set the <code>PathAndQuery</code> for this URI.","Returns the path &amp; query components of the Uri","The origin-form component of a URI","Get the port part of this <code>Authority</code>.","Get the port part of this <code>Uri</code>.","Get the port of this <code>Authority</code> as a <code>u16</code>.","Get the port of this <code>Uri</code> as a <code>u16</code>.","Returns the query string component","Get the query string of this <code>Uri</code>, starting after the <code>?</code>.","Set the <code>Scheme</code> for this URI.","Get the scheme of this <code>Uri</code>.","The scheme component of a URI","Get the scheme of this <code>Uri</code> as a <code>&amp;str</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>HTTP/0.9</code>","<code>HTTP/1.0</code>","<code>HTTP/1.1</code>","<code>HTTP/2.0</code>","<code>HTTP/3.0</code>","Represents a version of the HTTP spec.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[69,0,0,0,0,0,0,69,0,0,0,0,0,0,3,1,3,1,1,1,1,3,3,1,3,3,3,3,3,3,3,3,1,1,1,3,0,1,3,1,3,1,1,0,1,1,0,0,3,0,3,3,1,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,22,24,25,28,28,25,28,9,8,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,28,25,50,9,8,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,25,50,22,22,22,28,25,22,28,25,25,22,22,22,34,33,35,22,22,38,28,28,28,28,28,25,25,25,25,25,25,22,28,25,22,22,9,9,8,8,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,28,25,50,50,9,8,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,28,25,25,25,25,25,25,25,25,25,25,25,50,28,25,22,28,25,25,25,28,25,28,25,25,22,24,22,22,24,28,25,22,22,47,24,47,24,9,8,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,25,50,22,22,22,42,43,34,44,45,46,33,38,38,24,24,24,48,49,35,47,24,22,25,25,22,38,24,22,24,36,47,24,22,22,22,25,22,42,43,34,44,45,46,33,48,49,35,48,49,36,36,25,25,25,25,25,25,22,24,24,24,22,25,42,43,34,44,45,46,33,48,35,22,28,25,25,9,8,28,50,22,9,8,22,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,28,28,28,28,28,25,25,25,25,25,25,50,9,8,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,25,50,9,8,22,42,43,34,44,45,46,33,38,36,47,24,48,49,35,28,25,50,22,22,22,66,66,66,66,0,0,66,66,66,66,66,66,66,12,66,12,66,66,66,66,66,66,66,66,66,66,12,12,66,66,12,66,66,66,66,66,12,66,66,66,66,12,66,12,66,66,66,12,66,12,66,0,0,0,67,68,67,67,72,68,67,72,68,67,67,67,68,67,68,67,72,67,68,68,67,72,68,67,72,68,67,67,67,68,67,72,67,68,68,67,72,68,67,67,67,67,68,72,67,68,67,68,67,67,67,67,67,67,72,68,67,72,68,67,72,68,67,68,72,67,68,67,68,72,67,68,0,0,0,75,76,75,75,77,76,75,77,76,75,75,76,76,75,77,75,76,76,75,77,76,75,77,76,75,76,75,77,75,76,76,75,77,76,75,75,75,75,76,75,76,77,75,75,77,76,75,77,76,75,77,76,75,76,77,75,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,78,78,78,78,78,78,78,78,78,78,78,78,11,78,11,78,78,78,78,78,78,78,78,78,11,11,78,78,11,78,78,78,78,78,78,11,78,78,78,78,78,78,78,78,11,78,11,78,78,78,78,11,78,11,78,0,0,81,81,0,0,0,0,0,0,0,79,80,81,79,80,82,81,79,83,73,84,79,80,83,82,81,73,84,6,10,79,80,83,82,81,73,84,6,10,83,73,80,82,81,73,80,82,81,73,83,73,84,79,79,80,80,80,80,82,82,82,82,81,81,73,73,73,80,82,81,73,79,79,80,80,83,82,82,81,81,73,73,84,6,6,10,10,79,80,83,82,81,73,73,73,84,84,6,10,80,82,73,73,80,82,73,80,82,81,73,80,82,81,73,80,73,79,80,83,82,81,73,84,6,10,73,83,80,80,80,80,82,82,82,82,82,73,83,73,84,80,73,80,73,82,73,83,73,84,73,80,82,81,73,79,80,82,81,73,6,10,79,80,80,80,80,80,83,82,82,82,82,82,82,81,81,81,73,73,73,73,73,73,73,73,84,6,10,79,80,83,82,81,73,84,6,10,79,80,83,82,81,73,84,6,10,74,74,74,74,74,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[],1],[[1,1],2],[[3,4],5],[[3,4],5],[[1,4],5],[6,3],[7,3],[8,3],[9,3],[10,3],[-1,-1,[]],[11,3],[12,3],[-1,-1,[]],[1,[[13,[-1]]],[14,15]],[1,[[13,[-1]]],[14,15]],[3,16],0,[[1,-1],[[13,[-1]]],[14,15]],[-1,-2,[],[]],[-1,-2,[],[]],[3,17],[1,17],[1,18],0,[[],1],[1,[[13,[-1]]],[14,15]],0,0,[3,[[13,[16]]]],0,[-1,19,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[22,[-1]],-2,-1],17,[],23],[[[24,[-1]],-1],2,[]],[25,[[27,[26]]]],[28,[[27,[26]]]],[28,29],[25,[[27,[26]]]],[28,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],18,[]],[[[22,[-1]]],2,[]],[[[22,[-1]]],[[22,[-1]]],30],[28,28],[25,25],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[25,25],31],[[[22,[-1]],-2],17,[],32],[[],[[22,[-1]]],[]],[[[22,[-1]]],[[33,[-1]]],[]],[[[34,[-1]]],2,[]],[[[33,[-1]]],2,[]],[[[35,[-1]]],2,[]],[[[22,[-1]],-2],[[36,[-1]]],[],23],[[[22,[-1]],[22,[-1]]],17,37],[[[38,[-1]],[38,[-1]]],17,37],[[28,28],17],[[28,29],17],[[28,28],17],[[28,29],17],[[28,28],17],[[25,-1],17,39],[[25,19],17],[[25,29],17],[[25,[27,[26]]],17],[[25,25],17],[[25,25],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[[22,[-1]],-2],2,[],40],[[[22,[-1]],-2],2,[],40],[[9,4],5],[[9,4],5],[[8,4],5],[[8,4],5],[[[22,[-1]],4],5,41],[[[42,[-1]],4],5,41],[[[43,[-1]],4],5,41],[[[34,[-1]],4],5,41],[[[44,[-1]],4],5,41],[[[45,[-1]],4],5,41],[[[46,[-1]],4],5,41],[[[33,[-1]],4],5,41],[[[38,[-1]],4],5,41],[[[36,[-1]],4],5,41],[[[47,[-1]],4],5,41],[[[24,[-1]],4],5,41],[[[48,[-1]],4],5,41],[[[49,[-1]],4],5,41],[[[35,[-1]],4],5,41],[[28,4],5],[[28,4],5],[[25,4],5],[[50,4],5],[[50,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[28,28],[28,25],[18,25],[51,25],[52,25],[53,25],[54,25],[55,25],[25,25],[-1,-1,[]],[56,25],[57,25],[-1,-1,[]],[[[27,[26]]],[[20,[28,9]]]],[[[27,[26]]],[[20,[25,8]]]],[-1,[[22,[-2]]],40,[]],[[[27,[26]]],[[20,[28,9]]]],[-1,[[20,[25,8]]],[[58,[[27,[26]]]]]],[-1,25,[[58,[[27,[26]]]]]],[28,25],[29,28],[29,25],[29,[[20,[28,9]]]],[29,[[20,[25]]]],[29,[[20,[25,8]]]],[[[22,[-1]],-2],[[13,[-1]]],[],32],[[[24,[-1]]],-1,[]],[[[22,[-1]],-2],[[38,[-1]]],[],32],[[[22,[-1]],-2],[[13,[-1]]],[],32],[[[24,[-1]]],-1,[]],[[28,-1],2,59],[[25,-1],2,59],[[[22,[-1]],-2],-1,[],32],[[[22,[-1]],-2,-1],[[13,[-1]]],[],23],[[[47,[-1]],-1],-1,[]],[[[24,[-1]],-1],-1,[]],[[[47,[-1]],-1],[[24,[-1]]],[]],[[[24,[-1]],-1],[[35,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[43,[-1]]],[]],[[[22,[-1]]],[[34,[-1]]],[]],[[[22,[-1]]],[[42,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]]],[[48,[-1]]],[]],[[[38,[-1]]],[[48,[-1]]],[]],[[[24,[-1]]],[[48,[-1]]],[]],[[[24,[-1]]],[[49,[-1]]],[]],[[[24,[-1]]],[[49,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[47,[-1]]],28,[]],[[[24,[-1]]],-1,[]],[[[22,[-1]]],17,[]],[25,17],[25,17],[[[22,[-1]]],[[42,[-1]]],[]],[[[38,[-1]]],[[48,[-1]]],[]],[[[24,[-1]]],[[48,[-1]]],[]],[[[22,[-1]]],[[43,[-1]]],[]],[[[24,[-1]]],[[49,[-1]]],[]],[[[36,[-1]]],28,[]],[[[47,[-1]]],28,[]],[[[24,[-1]]],28,[]],[[[22,[-1]]],[[44,[-1]]],[]],[[[22,[-1]]],18,[]],[[[22,[-1]]],18,[]],[25,18],[[],22],[[[42,[-1]]],13,[]],[[[43,[-1]]],13,[]],[[[34,[-1]]],13,[]],[[[44,[-1]]],13,[]],[[[45,[-1]]],13,[]],[[[46,[-1]]],13,[]],[[[33,[-1]]],13,[]],[[[48,[-1]]],13,[]],[[[49,[-1]]],13,[]],[[[35,[-1]]],[[13,[-1]]],[]],[[[48,[-1]]],13,[]],[[[49,[-1]]],13,[]],[[[36,[-1]],-1],-1,[]],[[[36,[-1]],-2],-1,[],60],[[25,-1],[[13,[31]]],39],[[25,29],[[13,[31]]]],[[25,19],[[13,[31]]]],[[25,[27,[26]]],[[13,[31]]]],[[25,25],[[13,[31]]]],[[25,25],[[13,[31]]]],[[[22,[-1]],-2],[[13,[-1]]],[],32],[[[24,[-1]]],-1,[]],[[[24,[-1]]],[[2,[28,-1]]],[]],[[[24,[-1]]],[[2,[28,[35,[-1]]]]],[]],[[[22,[-1]],18],2,[]],[[25,17],2],[[[42,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[43,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[34,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[44,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[45,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[46,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[33,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[48,[-1]]],[[2,[18,[13,[18]]]]],[]],[[[35,[-1]]],[[2,[18,[13,[18]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,[[20,[29,50]]]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[[22,[-1]],-2],[[20,[[36,[-1]],9]]],[],32],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[61,[-1,-2]]],[[20,[[22,[-3]]]]],[62,63],[],[[64,[-2]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[19,[[20,[28]]]],[19,[[20,[28]]]],[-1,[[20,[-2]]],[],[]],[[[65,[26]]],[[20,[28]]]],[29,[[20,[28]]]],[[[27,[26]]],[[20,[28]]]],[19,[[20,[25]]]],[-1,[[20,[-2]]],[],[]],[19,[[20,[25]]]],[29,[[20,[25]]]],[[[65,[26]]],[[20,[25]]]],[[[27,[26]]],[[20,[25]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[22,[-1]]],[[45,[-1]]],[]],[[[22,[-1]]],[[46,[-1]]],[]],[18,[[22,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,[66,29],[66,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,66],[[-1,-2],2,[],[]],[[],66],[[66,29],17],[[66,66],17],[[66,66],17],[[66,66],17],[[66,29],17],[[-1,-2],17,[],[]],[[12,4],5],[[12,4],5],[[66,4],5],[[66,4],5],[-1,-1,[]],[-1,-1,[]],[66,66],[[[27,[26]]],[[20,[66,12]]]],[29,[[20,[66]]]],[[66,-1],2,59],[-1,-2,[],[]],[-1,-2,[],[]],[66,17],[66,17],[-1,-2,[],[]],[-1,19,[]],[-1,19,[]],[-1,[[20,[-2]]],[],[]],[29,[[20,[66]]]],[[[27,[26]]],[[20,[66]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],0,0,0,[[[67,[-1]]],-1,[]],[[68,-1],[[69,[[67,[-1]]]]],[]],[[[67,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],68],[-1,68,[]],[[],[[67,[-1]]],70],[[],68],[-1,68,[]],[[68,-1],68,[71,14,15]],[[[67,[-1]]],1,[]],0,[[[67,[-1]]],1,[]],[68,[[13,[1]]]],[68,[[13,[1]]]],[[[67,[-1]],4],5,41],[[72,4],5],[[68,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[72,-1],[[67,[-1]]],[]],[-1,68,[]],[-1,68,[]],[[68,-1,-2],68,[],[]],[[[67,[-1]]],[[22,[25]]],[]],0,[[[67,[-1]]],[[22,[25]]],[]],[68,[[13,[[22,[25]]]]]],[68,[[13,[[22,[25]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1]]],-1,[]],[[[67,[-1]]],[[2,[72,-1]]],[]],[[[67,[-1]],-2],[[67,[-3]]],[],60,[]],[[[67,[-1]]],66,[]],[[68,-1],68,[]],0,[[[67,[-1]]],66,[]],[68,[[13,[66]]]],[-1,[[67,[-1]]],[]],[[],68],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[67,[-1]]],73,[]],[[68,-1],68,[]],0,[[[67,[-1]]],73,[]],[68,[[13,[73]]]],[[[67,[-1]]],74,[]],[[68,74],68],0,[[[67,[-1]]],74,[]],[68,[[13,[74]]]],0,0,0,[[[75,[-1]]],-1,[]],[[76,-1],[[69,[[75,[-1]]]]],[]],[[[75,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],76],[[],[[75,[-1]]],70],[[],76],[[76,-1],76,[71,14,15]],[[[75,[-1]]],1,[]],0,[[[75,[-1]]],1,[]],[76,[[13,[1]]]],[76,[[13,[1]]]],[[[75,[-1]],4],5,41],[[77,4],5],[[76,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[77,-1],[[75,[-1]]],[]],[[76,-1,-2],76,[],[]],[[[75,[-1]]],[[22,[25]]],[]],0,[[[75,[-1]]],[[22,[25]]],[]],[76,[[13,[[22,[25]]]]]],[76,[[13,[[22,[25]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[-1]]],-1,[]],[[[75,[-1]]],[[2,[77,-1]]],[]],[[[75,[-1]],-2],[[75,[-3]]],[],60,[]],[-1,[[75,[-1]]],[]],[[],76],[[[75,[-1]]],78,[]],[[76,-1],76,[]],0,[[[75,[-1]]],78,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[75,[-1]]],74,[]],[[76,74],76],0,[[[75,[-1]]],74,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[78,29],[78,52],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[78,[[13,[29]]]],[78,78],[[-1,-2],2,[],[]],[[78,78],31],[[],78],[[78,52],17],[[78,78],17],[[-1,-2],17,[],[]],[[11,4],5],[[11,4],5],[[78,4],5],[[78,4],5],[-1,-1,[]],[-1,-1,[]],[78,78],[[[27,[26]]],[[20,[78,11]]]],[29,[[20,[78,11]]]],[52,[[20,[78,11]]]],[[78,-1],2,59],[-1,-2,[],[]],[-1,-2,[],[]],[78,17],[78,17],[78,17],[78,17],[78,17],[[78,78],[[13,[31]]]],[-1,-2,[],[]],[-1,19,[]],[-1,19,[]],[-1,[[20,[-2]]],[],[]],[29,[[20,[78]]]],[-1,[[20,[-2]]],[],[]],[[[27,[26]]],[[20,[78]]]],[52,[[20,[78]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,0,0,0,0,0,[[[79,[-1]]],29,[[58,[29]]]],[80,29],[81,29],[[[79,[-1]]],29,[[58,[29]]]],[80,29],[82,29],[81,29],[[[79,[-1]]],52,[]],[[83,-1],83,[]],[73,[[13,[80]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[83,[[20,[73,3]]]],[[],83],[80,80],[82,82],[81,81],[73,73],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],83],[[],73],[[],84],[[[79,[-1]],[79,[-2]]],17,[],[]],[[[79,[-1]],52],17,[]],[[80,29],17],[[80,29],17],[[80,80],17],[[80,19],17],[[82,29],17],[[82,19],17],[[82,82],17],[[82,29],17],[[81,29],17],[[81,81],17],[[73,73],17],[[73,29],17],[[73,29],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[[79,[-1]],4],5,41],[[[79,[-1]],4],5,[]],[[80,4],5],[[80,4],5],[[83,4],5],[[82,4],5],[[82,4],5],[[81,4],5],[[81,4],5],[[73,4],5],[[73,4],5],[[84,4],5],[[6,4],5],[[6,4],5],[[10,4],5],[[10,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[80,73],[82,73],[-1,-1,[]],[73,84],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[20,[80,6]]],[[58,[[27,[26]]]]]],[-1,[[20,[82,6]]],[[58,[[27,[26]]]]]],[-1,[[20,[73,6]]],[[58,[[27,[26]]]]]],[84,[[20,[73,10]]]],[29,80],[29,82],[29,73],[29,[[20,[80,6]]]],[29,[[20,[82,6]]]],[29,[[20,[81]]]],[29,[[20,[73,6]]]],[[80,-1],2,59],[[82,-1],2,59],[[81,-1],2,59],[[73,-1],2,59],[80,29],[73,[[13,[29]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[73,84],[[],83],[[80,19],[[13,[31]]]],[[80,29],[[13,[31]]]],[[80,29],[[13,[31]]]],[[80,80],[[13,[31]]]],[[82,29],[[13,[31]]]],[[82,82],[[13,[31]]]],[[82,19],[[13,[31]]]],[[82,29],[[13,[31]]]],[82,29],[73,29],[[83,-1],83,[]],[73,[[13,[82]]]],0,[80,[[13,[[79,[29]]]]]],[73,[[13,[[79,[29]]]]]],[80,[[13,[52]]]],[73,[[13,[52]]]],[82,[[13,[29]]]],[73,[[13,[29]]]],[[83,-1],83,[]],[73,[[13,[81]]]],0,[73,[[13,[29]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,[[20,[-2]]],[],[]],[29,[[20,[80]]]],[-1,[[20,[-2]]],[],[]],[19,[[20,[80]]]],[[[27,[26]]],[[20,[80]]]],[[[65,[26]]],[[20,[80]]]],[-1,[[20,[-2]]],[],[]],[29,[[20,[82]]]],[-1,[[20,[-2]]],[],[]],[[[27,[26]]],[[20,[82]]]],[[[65,[26]]],[[20,[82]]]],[19,[[20,[82]]]],[19,[[20,[82]]]],[29,[[20,[81]]]],[-1,[[20,[-2]]],[],[]],[[[27,[26]]],[[20,[81]]]],[[[65,[26]]],[[20,[73]]]],[19,[[20,[73]]]],[29,[[20,[73]]]],[-1,[[20,[-2]]],[],[]],[73,[[20,[73]]]],[84,[[20,[73]]]],[[[27,[26]]],[[20,[73]]]],[19,[[20,[73]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[74,74],[[-1,-2],2,[],[]],[[74,74],31],[[],74],[[74,74],17],[[-1,-2],17,[],[]],[[74,4],5],[-1,-1,[]],[[74,-1],2,59],[-1,-2,[],[]],[[74,74],[[13,[31]]]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]]],"c":[],"p":[[3,"Extensions",0],[15,"tuple"],[3,"Error",0],[3,"Formatter",1022],[6,"Result",1022],[3,"InvalidUri",792],[4,"Infallible",1023],[3,"InvalidHeaderValue",59],[3,"InvalidHeaderName",59],[3,"InvalidUriParts",792],[3,"InvalidStatusCode",685],[3,"InvalidMethod",500],[4,"Option",1024],[8,"Send",1025],[8,"Sync",1025],[8,"Error",1026],[15,"bool"],[15,"usize"],[3,"String",1027],[4,"Result",1028],[3,"TypeId",1029],[3,"HeaderMap",59],[8,"IntoHeaderName",59],[3,"OccupiedEntry",59],[3,"HeaderValue",59],[15,"u8"],[15,"slice"],[3,"HeaderName",59],[15,"str"],[8,"Clone",1030],[4,"Ordering",1031],[8,"AsHeaderName",59],[3,"Drain",59],[3,"IntoIter",59],[3,"ValueDrain",59],[4,"Entry",59],[8,"PartialEq",1031],[3,"GetAll",59],[8,"Sized",1025],[8,"IntoIterator",1032],[8,"Debug",1022],[3,"Iter",59],[3,"IterMut",59],[3,"Keys",59],[3,"Values",59],[3,"ValuesMut",59],[3,"VacantEntry",59],[3,"ValueIter",59],[3,"ValueIterMut",59],[3,"ToStrError",59],[15,"isize"],[15,"u16"],[15,"u64"],[15,"i32"],[15,"u32"],[15,"i64"],[15,"i16"],[8,"AsRef",1023],[8,"Hasher",1033],[8,"FnOnce",1034],[3,"HashMap",1035],[8,"Eq",1031],[8,"Hash",1033],[8,"TryFrom",1023],[3,"Vec",1036],[3,"Method",500],[3,"Request",551],[3,"Builder",551],[6,"Result",0],[8,"Default",1037],[8,"Any",1029],[3,"Parts",551],[3,"Uri",792],[3,"Version",999],[3,"Response",626],[3,"Builder",626],[3,"Parts",626],[3,"StatusCode",685],[3,"Port",792],[3,"Authority",792],[3,"Scheme",792],[3,"PathAndQuery",792],[3,"Builder",792],[3,"Parts",792]]},\
"http_body":{"doc":"Asynchronous HTTP request or response body.","t":"IDQDQDDDDDLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Body","Data","Data","Empty","Error","Full","LengthLimitError","Limited","SizeHint","Trailers","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed_unsync","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combinators","data","default","default","default","exact","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_future","into_future","is_end_stream","is_end_stream","is_end_stream","is_end_stream","lower","map_data","map_err","new","new","new","new","poll","poll","poll_data","poll_data","poll_data","poll_data","poll_trailers","poll_trailers","poll_trailers","poll_trailers","set_exact","set_lower","set_upper","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","trailers","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upper","with_exact","BoxBody","MapData","MapErr","UnsyncBoxBody","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","fmt","fmt","fmt","fmt","from","from","from","from","get_mut","get_mut","get_pin_mut","get_pin_mut","get_ref","get_ref","into","into","into","into","into_inner","into_inner","is_end_stream","is_end_stream","is_end_stream","is_end_stream","new","new","poll_data","poll_data","poll_data","poll_data","poll_trailers","poll_trailers","poll_trailers","poll_trailers","size_hint","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"http_body"],[127,"http_body::combinators"],[196,"core::marker"],[197,"core::marker"],[198,"core::marker"],[199,"core::option"],[200,"core::fmt"],[201,"core::fmt"],[202,"alloc::vec"],[203,"alloc::string"],[204,"bytes::bytes"],[205,"alloc::borrow"],[206,"alloc::borrow"],[207,"core::pin"],[208,"core::task::wake"],[209,"core::task::poll"],[210,"core::result"],[211,"http::header::map"],[212,"core::any"]],"d":["Trait representing a streaming body of a Request or …","Future that resolves to the next data chunk from <code>Body</code>","Values yielded by the <code>Body</code>.","A body that is always empty.","The error type this <code>Body</code> might generate.","A body that consists of a single chunk.","An error returned when body length exceeds the configured …","A length limited body.","A <code>Body</code> size hint","Future that resolves to the optional trailers from <code>Body</code>","","","","","","","","","","","","","","","Turn this body into a boxed trait object.","Turn this body into a boxed trait object that is !Sync.","","","","","","","","","Combinators for the <code>Body</code> trait.","Returns future that resolves to next data chunk, if any.","","Create an empty <code>Full</code>.","","Returns the exact size of data that will be yielded <strong>if</strong> the …","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> when the end of stream has been reached.","","","Returns the lower bound of data that the <code>Body</code> will yield …","Maps this body’s data value to a different value.","Maps this body’s error value to a different value.","Create a new <code>Empty</code>.","Create a new <code>Full</code>.","Create a new <code>Limited</code>.","Returns a new <code>SizeHint</code> with default values","","","Attempt to pull out the next data buffer of this stream.","","","","Poll for an optional <strong>single</strong> <code>HeaderMap</code> of trailers.","","","","Set the value of the <code>lower</code> and <code>upper</code> bounds to exactly the …","Set the value of the <code>lower</code> hint.","Set the value of the <code>upper</code> hint value.","","Returns the bounds on the remaining length of the stream.","","","","","","","","Returns future that resolves to trailers, if any.","","","","","","","","","","","","","","","","","","","","","","Returns the upper bound of data the <code>Body</code> will yield before …","Returns a new <code>SizeHint</code> with both upper and lower bounds …","A boxed <code>Body</code> trait object.","Body returned by the <code>map_data</code> combinator.","Body returned by the <code>map_err</code> combinator.","A boxed <code>Body</code> trait object that is !Sync.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to the inner body","Get a mutable reference to the inner body","Get a pinned mutable reference to the inner body","Get a pinned mutable reference to the inner body","Get a reference to the inner body","Get a reference to the inner body","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume <code>self</code>, returning the inner body","Consume <code>self</code>, returning the inner body","","","","","Create a new <code>BoxBody</code>.","Create a new <code>BoxBody</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,32,0,32,0,0,0,0,0,6,7,9,20,12,21,10,6,7,9,20,12,21,10,32,32,6,7,9,10,6,7,9,10,0,32,6,7,10,10,6,7,9,20,20,12,21,10,6,7,7,7,7,7,7,7,9,20,12,21,10,6,7,9,20,12,21,10,12,21,6,32,7,9,10,32,32,6,7,9,10,12,21,32,6,7,9,32,6,7,9,10,10,10,6,32,7,9,6,7,9,10,20,32,6,7,9,20,12,21,10,6,7,9,20,12,21,10,6,7,9,20,12,21,10,10,10,0,0,0,0,1,5,33,35,1,5,33,35,33,35,33,35,1,5,1,5,33,35,1,5,33,35,33,35,33,35,33,35,1,5,33,35,33,35,1,5,33,35,1,5,1,5,33,35,1,5,33,35,1,5,35,33,35,1,5,33,35,1,5,33,35,1,5,33,35],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[2,3,4]],[-1,5,[2,3]],[[[6,[-1]]],[[6,[-1]]],[]],[[[7,[-1]]],[[7,[-1]]],8],[[[9,[-1]]],[[9,[-1]]],8],[10,10],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,[-1,[[12,[-1]]],[13,2]],[[],[[6,[-1]]],[]],[[],[[7,[-1]]],14],[[],10],[10,[[16,[15]]]],[[[6,[-1]],17],18,[]],[[[7,[-1]],17],18,19],[[[9,[-1]],17],18,19],[[20,17],18],[[20,17],18],[[[12,[-1]],17],18,[19,2]],[[[21,[-1]],17],18,[19,2]],[[10,17],18],[-1,-1,[]],[[[23,[22]]],[[7,[-1]]],[14,[24,[[23,[22]]]]]],[25,[[7,[-1]]],[14,[24,[25]]]],[[[26,[22]]],[[7,[-1]]],[14,[24,[[26,[22]]]]]],[-1,-1,[]],[27,[[7,[-1]]],[14,[24,[27]]]],[28,[[7,[-1]]],[14,[24,[28]]]],[[[29,[-1]]],[[7,[-2]]],[30,2],[14,[24,[-1]],24]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[6,[-1]]],31,14],[-1,31,[]],[[[7,[-1]]],31,14],[[[9,[-1]]],31,32],[10,15],[[-1,-2],[[33,[-1,-2]]],2,34],[[-1,-2],[[35,[-1,-2]]],2,34],[[],[[6,[-1]]],[]],[-1,[[7,[-1]]],14],[[-1,36],[[9,[-1]]],[]],[[],10],[[[37,[[12,[-1]]]],38],39,[32,13,2]],[[[37,[[21,[-1]]]],38],39,[32,13,2]],[[[37,[-1]],38],[[39,[[16,[40]]]]],[]],[[[37,[[6,[-1]]]],38],[[39,[[16,[40]]]]],14],[[[37,[[7,[-1]]]],38],[[39,[[16,[[40,[-1]]]]]]],14],[[[37,[[9,[-1]]]],38],[[39,[[16,[40]]]]],32],[[[37,[-1]],38],[[39,[[40,[[16,[41]]]]]]],[]],[[[37,[[6,[-1]]]],38],[[39,[[40,[[16,[41]]]]]]],14],[[[37,[[7,[-1]]]],38],[[39,[[40,[[16,[41]]]]]]],14],[[[37,[[9,[-1]]]],38],[[39,[[40,[[16,[41]]]]]]],32],[[10,15],11],[[10,15],11],[[10,15],11],[[[6,[-1]]],10,14],[-1,10,[]],[[[7,[-1]]],10,14],[[[9,[-1]]],10,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,27,[]],[-1,[[21,[-1]]],[13,2]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[10,[[16,[15]]]],[15,10],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1,-2]]],[[33,[-1,-2]]],8,8],[[[35,[-1,-2]]],[[35,[-1,-2]]],8,8],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[],[[1,[-1,-2]]],14,[]],[[],[[5,[-1,-2]]],14,[]],[[[1,[-1,-2]],17],18,[],[]],[[[5,[-1,-2]],17],18,[],[]],[[[33,[-1,-2]],17],18,19,[]],[[[35,[-1,-2]],17],18,19,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[33,[-1,-2]]],-1,[],[]],[[[35,[-1,-2]]],-1,[],[]],[[[37,[[33,[-1,-2]]]]],[[37,[-1]]],[],[]],[[[37,[[35,[-1,-2]]]]],[[37,[-1]]],[],[]],[[[33,[-1,-2]]],-1,[],[]],[[[35,[-1,-2]]],-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1,-2]]],-1,[],[]],[[[35,[-1,-2]]],-1,[],[]],[[[1,[-1,-2]]],31,14,[]],[[[5,[-1,-2]]],31,14,[]],[[[33,[-1,-2]]],31,32,34],[[[35,[-1,-2]]],31,32,34],[-1,[[1,[-2,-3]]],[32,3,4],14,[]],[-1,[[5,[-2,-3]]],[32,3],14,[]],[[[37,[[1,[-1,-2]]]],38],[[39,[[16,[40]]]]],14,[]],[[[37,[[5,[-1,-2]]]],38],[[39,[[16,[40]]]]],14,[]],[[[37,[[33,[-1,-2]]]],38],[[39,[[16,[40]]]]],32,34],[[[37,[[35,[-1,-2]]]],38],[[39,[[16,[40]]]]],32,34],[[[37,[[1,[-1,-2]]]],38],[[39,[[40,[[16,[41]]]]]]],14,[]],[[[37,[[5,[-1,-2]]]],38],[[39,[[40,[[16,[41]]]]]]],14,[]],[[[37,[[33,[-1,-2]]]],38],[[39,[[40,[[16,[41]]]]]]],32,34],[[[37,[[35,[-1,-2]]]],38],[[39,[[40,[[16,[41]]]]]]],32,34],[[[1,[-1,-2]]],10,14,[]],[[[5,[-1,-2]]],10,14,[]],[[[35,[-1,-2]]],10,32,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]]],"c":[],"p":[[3,"BoxBody",127],[8,"Sized",196],[8,"Send",196],[8,"Sync",196],[3,"UnsyncBoxBody",127],[3,"Empty",0],[3,"Full",0],[8,"Clone",197],[3,"Limited",0],[3,"SizeHint",0],[15,"tuple"],[3,"Data",0],[8,"Unpin",196],[8,"Buf",198],[15,"u64"],[4,"Option",199],[3,"Formatter",200],[6,"Result",200],[8,"Debug",200],[3,"LengthLimitError",0],[3,"Trailers",0],[15,"u8"],[15,"slice"],[8,"From",201],[15,"str"],[3,"Vec",202],[3,"String",203],[3,"Bytes",204],[4,"Cow",205],[8,"ToOwned",205],[15,"bool"],[8,"Body",0],[3,"MapData",127],[8,"FnMut",206],[3,"MapErr",127],[15,"usize"],[3,"Pin",207],[3,"Context",208],[4,"Poll",209],[4,"Result",210],[3,"HeaderMap",211],[3,"TypeId",212]]},\
"httparse":{"doc":"httparse","t":"NRNEDNNDNNDNDDGENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMLLMLLLLLFFLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMM","n":["Complete","EMPTY_HEADER","Err","Error","Header","HeaderName","HeaderValue","InvalidChunkSize","NewLine","Ok","ParserConfig","Partial","Request","Response","Result","Status","Status","Token","TooManyHeaders","Version","allow_multiple_spaces_in_request_line_delimiters","allow_multiple_spaces_in_response_status_delimiters","allow_obsolete_multiline_headers_in_responses","allow_spaces_after_header_name_in_responses","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","default","description","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","headers","headers","ignore_invalid_headers_in_responses","into","into","into","into","into","into","into","is_complete","is_partial","method","multiple_spaces_in_request_line_delimiters_are_allowed","multiple_spaces_in_response_status_delimiters_are_allowed","name","new","new","obsolete_multiline_headers_in_responses_are_allowed","parse","parse","parse_chunk_size","parse_headers","parse_request","parse_request_with_uninit_headers","parse_response","parse_response_with_uninit_headers","parse_with_uninit_headers","path","reason","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","value","version","version"],"q":[[0,"httparse"],[138,"core::clone"],[139,"core::cmp"],[140,"core::fmt"],[141,"core::fmt"],[142,"core::mem::maybe_uninit"],[143,"alloc::string"],[144,"core::any"]],"d":["The completed result.","An empty header, useful for constructing a <code>Header</code> array to …","Contains the error value","An error in parsing.","Represents a parsed header.","Invalid byte in header name.","Invalid byte in header value.","An error in parsing a chunk size.","Invalid byte in new line.","Contains the success value","Parser configuration.","A partial result.","A parsed Request.","A parsed Response.","A Result of any parsing action.","The result of a successful parse pass.","Invalid byte in Response status.","Invalid byte where token is required.","Parsed more headers than provided buffer can contain.","Invalid byte in HTTP version.","Sets whether multiple spaces are allowed as delimiters in …","Sets whether multiple spaces are allowed as delimiters in …","Sets whether obsolete multiline headers should be allowed.","Sets whether spaces and tabs should be allowed after …","","","","","","","","","","","","","","","","","","","","","","","The response code, such as <code>200</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The request headers.","The response headers.","Sets whether invalid header lines should be silently …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convenience method to check if status is complete.","Convenience method to check if status is partial.","The request method, such as <code>GET</code>.","Whether multiple spaces are allowed as delimiters in …","Whether multiple spaces are allowed as delimiters in …","The name portion of a header.","Creates a new Request, using a slice of headers you …","Creates a new <code>Response</code> using a slice of <code>Header</code>s you have …","Whether obsolete multiline headers should be allowed.","Try to parse a buffer of bytes into the Request.","Try to parse a buffer of bytes into this <code>Response</code>.","Parse a buffer of bytes as a chunk size.","Parse a buffer of bytes as headers.","Parses a request with the given config.","Parses a request with the given config and buffer for …","Parses a response with the given config.","Parses a response with the given config and buffer for …","Try to parse a buffer of bytes into the Request, except …","The request path, such as <code>/about-us</code>.","The response reason-phrase, such as <code>OK</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience method to unwrap a Complete value. Panics if …","The value portion of a header.","The request minor version, such as <code>1</code> for <code>HTTP/1.1</code>.","The response minor version, such as <code>1</code> for <code>HTTP/1.1</code>."],"i":[4,0,19,0,0,3,3,0,3,19,0,4,0,0,0,0,3,3,3,3,1,1,1,1,3,9,4,1,11,12,6,3,9,4,1,11,12,6,3,4,1,6,3,4,1,6,12,1,3,3,9,4,11,12,6,3,9,4,11,12,6,3,3,9,9,4,1,11,12,6,3,9,4,1,11,12,6,11,12,1,3,9,4,1,11,12,6,4,4,11,1,1,6,11,12,1,11,12,0,0,1,1,1,1,11,11,12,3,4,1,6,3,9,3,9,4,1,11,12,6,3,9,4,1,11,12,6,3,9,4,1,11,12,6,4,6,11,12],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[[4,[-1]]],[[4,[-1]]],5],[1,1],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[],1],[3,8],[[3,3],2],[[9,9],2],[[[4,[-1]],[4,[-1]]],2,10],[[11,11],2],[[12,12],2],[[6,6],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[3,13],14],[[3,13],14],[[9,13],14],[[9,13],14],[[[4,[-1]],13],14,15],[[1,13],14],[[11,13],14],[[12,13],14],[[6,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[1,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],2,[]],[[[4,[-1]]],2,[]],0,[1,2],[1,2],0,[[[16,[6]]],11],[[[16,[6]]],12],[1,2],[[11,[16,[17]]],[[19,[18]]]],[[12,[16,[17]]],[[19,[18]]]],[[[16,[17]]],[[21,[[4,[[7,[18,20]]]],9]]]],[[[16,[17]],[16,[6]]],[[19,[[7,[18,[16,[6]]]]]]]],[[1,11,[16,[17]]],[[19,[18]]]],[[1,11,[16,[17]],[16,[[22,[6]]]]],[[19,[18]]]],[[1,12,[16,[17]]],[[19,[18]]]],[[1,12,[16,[17]],[16,[[22,[6]]]]],[[19,[18]]]],[[11,[16,[17]],[16,[[22,[6]]]]],[[19,[18]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[[4,[-1]]],-1,[]],0,0,0],"c":[],"p":[[3,"ParserConfig",0],[15,"bool"],[4,"Error",0],[4,"Status",0],[8,"Clone",138],[3,"Header",0],[15,"tuple"],[15,"str"],[3,"InvalidChunkSize",0],[8,"PartialEq",139],[3,"Request",0],[3,"Response",0],[3,"Formatter",140],[6,"Result",140],[8,"Debug",140],[15,"slice"],[15,"u8"],[15,"usize"],[6,"Result",0],[15,"u64"],[4,"Result",141],[19,"MaybeUninit",142],[3,"String",143],[3,"TypeId",144]]},\
"httpdate":{"doc":"Date and time utils for HTTP.","t":"DDLLLLLLLLLLLLLFLLLLLLLFLLLLLLLLLL","n":["Error","HttpDate","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","fmt","fmt","fmt_http_date","from","from","from","from_str","hash","into","into","parse_http_date","partial_cmp","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"httpdate"],[34,"core::cmp"],[35,"core::fmt"],[36,"core::fmt"],[37,"std::time"],[38,"alloc::string"],[39,"core::hash"],[40,"core::option"],[41,"core::any"]],"d":["An opaque error type for all parsing errors.","HTTP timestamp type.","","","","","","","","","","","","","","Format a date to be used in a HTTP header field.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parse a date from an HTTP header field.","","","","","","","","","",""],"i":[0,0,1,7,1,7,1,1,1,1,1,1,1,7,7,0,1,1,7,1,1,1,7,0,1,1,1,7,1,7,1,7,1,7],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[1,1],4],[[-1,-2],4,[],[]],[[1,5],6],[[1,5],6],[[7,5],6],[[7,5],[[9,[2,8]]]],[10,11],[-1,-1,[]],[10,1],[-1,-1,[]],[12,[[9,[1,7]]]],[[1,-1],2,13],[-1,-2,[],[]],[-1,-2,[],[]],[12,[[9,[10,7]]]],[[1,1],[[14,[3]]]],[-1,-2,[],[]],[-1,11,[]],[-1,11,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,15,[]],[-1,15,[]]],"c":[],"p":[[3,"HttpDate",0],[15,"tuple"],[4,"Ordering",34],[15,"bool"],[3,"Formatter",35],[6,"Result",35],[3,"Error",0],[3,"Error",35],[4,"Result",36],[3,"SystemTime",37],[3,"String",38],[15,"str"],[8,"Hasher",39],[4,"Option",40],[3,"TypeId",41]]},\
"hyper":{"doc":"hyper","t":"SSSSCSSSSCSSNDSSSSSSSSSSSSSCSSSSSSSSSSSSDSSSSSSSSSSNSSSSSSSSSSSSSSSDDGSSSDSSSSSSSSSSDSDLLLLLALLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLDIDQQIDDLKLFLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLDDCDLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLDIDIDDLLLLLLLLLFLLLLLLKLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRIRRRRRRRRRRRRRRRRDRRRERRDRDDDRRRRRIDDDDDDRRRRRNDRRRRRRRRRRRRRRRRRRRRRDRRRRRNDDDDDDRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKQQQIKFKFDDDLLLLLLLLLLLLLLLLLMLFLLLLLLMLLLLLLLLLL","n":["ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","Body","CONFLICT","CONNECT","CONTINUE","CREATED","Client","DELETE","EXPECTATION_FAILED","Err","Error","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GET","GONE","HEAD","HTTP_09","HTTP_10","HTTP_11","HTTP_2","HTTP_3","HTTP_VERSION_NOT_SUPPORTED","HeaderMap","IM_A_TEAPOT","IM_USED","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_NOT_ALLOWED","MISDIRECTED_REQUEST","MOVED_PERMANENTLY","MULTIPLE_CHOICES","MULTI_STATUS","Method","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","OPTIONS","Ok","PARTIAL_CONTENT","PATCH","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","POST","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","PUT","RANGE_NOT_SATISFIABLE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","RESET_CONTENT","Request","Response","Result","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","StatusCode","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","TRACE","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","Uri","VARIANT_ALSO_NEGOTIATES","Version","as_ref","as_str","as_str","as_u16","authority","body","body","body","body_mut","body_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","builder","builder","canonical_reason","client","client_connect_info","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","connect","default","default","default","default","default","default","delete","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","ext","extensions","extensions","extensions_mut","extensions_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_maybe_shared","from_parts","from_parts","from_parts","from_static","from_str","from_str","from_str","from_u16","get","hash","hash","hash","hash","head","header","headers","headers","headers_mut","headers_mut","host","into","into","into","into","into","into","into","into_body","into_body","into_cause","into_parts","into_parts","into_parts","is_body_write_aborted","is_canceled","is_client_error","is_closed","is_connect","is_end_stream","is_end_stream","is_idempotent","is_incomplete_message","is_informational","is_parse","is_parse_status","is_parse_too_large","is_redirection","is_safe","is_server_error","is_success","is_timeout","is_user","map","map","message","method","method_mut","new","new","options","partial_cmp","partial_cmp","patch","path","path_and_query","poll_data","poll_data","poll_trailers","poll_trailers","port","port_u16","post","put","query","rt","scheme","scheme_str","service","size_hint","size_hint","source","status","status_mut","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","uri","uri_mut","version","version","version_mut","version_mut","Body","Buf","Bytes","Data","Error","HttpBody","Sender","SizeHint","abort","advance","advance","aggregate","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed_unsync","chain","channel","chunk","chunk","chunks_vectored","clear","clone","clone","clone_into","clone_into","cmp","copy_from_slice","copy_to_bytes","copy_to_bytes","copy_to_slice","data","default","default","default","deref","drop","empty","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","exact","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_static","get_f32","get_f32_le","get_f32_ne","get_f64","get_f64_le","get_f64_ne","get_i128","get_i128_le","get_i128_ne","get_i16","get_i16_le","get_i16_ne","get_i32","get_i32_le","get_i32_ne","get_i64","get_i64_le","get_i64_ne","get_i8","get_int","get_int_le","get_int_ne","get_u128","get_u128_le","get_u128_ne","get_u16","get_u16_le","get_u16_ne","get_u32","get_u32_le","get_u32_ne","get_u64","get_u64_le","get_u64_ne","get_u8","get_uint","get_uint_le","get_uint_ne","has_remaining","hash","into","into","into","into","into_iter","into_iter","is_empty","is_end_stream","is_end_stream","len","lower","map_data","map_err","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","poll_data","poll_data","poll_ready","poll_trailers","poll_trailers","reader","remaining","remaining","send_data","send_trailers","set_exact","set_lower","set_upper","size_hint","size_hint","slice","slice_ref","split_off","split_to","take","to_bytes","to_owned","to_owned","trailers","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_send_data","type_id","type_id","type_id","type_id","upper","with_exact","Builder","Client","HttpConnector","ResponseFuture","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_http","builder","call","call","clone","clone","clone_into","clone_into","conn","connect","default","default","executor","fmt","fmt","fmt","from","from","from","get","http09_responses","http1_allow_obsolete_multiline_headers_in_responses","http1_allow_spaces_after_header_name_in_responses","http1_ignore_invalid_headers_in_responses","http1_max_buf_size","http1_preserve_header_case","http1_read_buf_exact_size","http1_title_case_headers","http1_writev","http2_adaptive_window","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_keep_alive_interval","http2_keep_alive_timeout","http2_keep_alive_while_idle","http2_max_concurrent_reset_streams","http2_max_frame_size","http2_max_send_buf_size","http2_only","into","into","into","into_future","new","poll","poll_ready","poll_ready","pool_idle_timeout","pool_max_idle_per_host","request","retry_canceled_requests","service","set_host","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","Builder","Connection","Parts","ResponseFuture","SendRequest","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone_into","executor","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handshake","handshake","http09_responses","http1_allow_obsolete_multiline_headers_in_responses","http1_allow_spaces_after_header_name_in_responses","http1_ignore_invalid_headers_in_responses","http1_max_buf_size","http1_preserve_header_case","http1_read_buf_exact_size","http1_title_case_headers","http1_writev","http2_adaptive_window","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_is_extended_connect_protocol_enabled","http2_keep_alive_interval","http2_keep_alive_timeout","http2_keep_alive_while_idle","http2_max_concurrent_reset_streams","http2_max_frame_size","http2_max_send_buf_size","http2_only","into","into","into","into","into","into_future","into_future","into_parts","io","new","poll","poll","poll_ready","poll_ready","poll_without_shutdown","read_buf","send_request","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","try_poll","type_id","type_id","type_id","type_id","type_id","without_shutdown","CaptureConnection","Connect","Connected","Connection","HttpConnector","HttpInfo","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","capture_connection","clone","clone","clone","clone_into","clone_into","clone_into","connected","connection_metadata","dns","enforce_http","extra","fmt","fmt","fmt","fmt","from","from","from","from","get_extras","into","into","into","into","is_negotiated_h2","is_proxied","local_addr","negotiated_h2","new","new","new_with_resolver","poison","poll_ready","proxy","remote_addr","set_connect_timeout","set_happy_eyeballs_timeout","set_keepalive","set_local_address","set_local_addresses","set_nodelay","set_recv_buffer_size","set_reuse_address","set_send_buffer_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wait_for_connection_metadata","GaiAddrs","GaiFuture","GaiResolver","InvalidNameError","Name","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","drop","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","hash","into","into","into","into","into","into_future","into_iter","new","next","poll","poll_ready","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","Connect","borrow","borrow_mut","call","fmt","from","into","new","poll_ready","try_from","try_into","type_id","Protocol","ReasonPhrase","as_bytes","as_ref","as_ref","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from_bytes_unchecked","from_static","from_static","hash","into","into","into","partial_cmp","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_RANGES","ACCESS_CONTROL_ALLOW_CREDENTIALS","ACCESS_CONTROL_ALLOW_HEADERS","ACCESS_CONTROL_ALLOW_METHODS","ACCESS_CONTROL_ALLOW_ORIGIN","ACCESS_CONTROL_EXPOSE_HEADERS","ACCESS_CONTROL_MAX_AGE","ACCESS_CONTROL_REQUEST_HEADERS","ACCESS_CONTROL_REQUEST_METHOD","AGE","ALLOW","ALT_SVC","AUTHORIZATION","AsHeaderName","CACHE_CONTROL","CACHE_STATUS","CDN_CACHE_CONTROL","CONNECTION","CONTENT_DISPOSITION","CONTENT_ENCODING","CONTENT_LANGUAGE","CONTENT_LENGTH","CONTENT_LOCATION","CONTENT_RANGE","CONTENT_SECURITY_POLICY","CONTENT_SECURITY_POLICY_REPORT_ONLY","CONTENT_TYPE","COOKIE","DATE","DNT","Drain","ETAG","EXPECT","EXPIRES","Entry","FORWARDED","FROM","GetAll","HOST","HeaderMap","HeaderName","HeaderValue","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","IF_UNMODIFIED_SINCE","IntoHeaderName","IntoIter","InvalidHeaderName","InvalidHeaderValue","Iter","IterMut","Keys","LAST_MODIFIED","LINK","LOCATION","MAX_FORWARDS","ORIGIN","Occupied","OccupiedEntry","PRAGMA","PROXY_AUTHENTICATE","PROXY_AUTHORIZATION","PUBLIC_KEY_PINS","PUBLIC_KEY_PINS_REPORT_ONLY","RANGE","REFERER","REFERRER_POLICY","REFRESH","RETRY_AFTER","SEC_WEBSOCKET_ACCEPT","SEC_WEBSOCKET_EXTENSIONS","SEC_WEBSOCKET_KEY","SEC_WEBSOCKET_PROTOCOL","SEC_WEBSOCKET_VERSION","SERVER","SET_COOKIE","STRICT_TRANSPORT_SECURITY","TE","TRAILER","TRANSFER_ENCODING","ToStrError","UPGRADE","UPGRADE_INSECURE_REQUESTS","USER_AGENT","VARY","VIA","Vacant","VacantEntry","ValueDrain","ValueIter","ValueIterMut","Values","ValuesMut","WARNING","WWW_AUTHENTICATE","X_CONTENT_TYPE_OPTIONS","X_DNS_PREFETCH_CONTROL","X_FRAME_OPTIONS","X_XSS_PROTECTION","append","append","as_bytes","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains_key","default","drain","drop","drop","drop","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_iter","from_lowercase","from_maybe_shared","from_maybe_shared_unchecked","from_name","from_static","from_static","from_str","from_str","from_str","get","get","get_all","get_mut","get_mut","hash","hash","index","insert","insert","insert","insert_entry","insert_mult","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","is_empty","is_sensitive","iter","iter","iter","iter_mut","iter_mut","key","key","key","keys","keys_len","len","len","new","next","next","next","next","next","next","next","next","next","next","next_back","next_back","or_insert","or_insert_with","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove_entry","remove_entry_mult","reserve","set_sensitive","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","try_entry","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","Executor","execute","Error","Future","Response","Service","call","make_service_fn","poll_ready","service_fn","OnUpgrade","Parts","Upgraded","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","downcast","fmt","fmt","fmt","from","from","from","into","into","into","into_future","io","is_write_vectored","on","poll","poll_flush","poll_read","poll_shutdown","poll_write","poll_write_vectored","read_buf","try_from","try_from","try_from","try_into","try_into","try_into","try_poll","type_id","type_id","type_id"],"q":[[0,"hyper"],[316,"hyper::body"],[500,"hyper::client"],[576,"hyper::client::conn"],[663,"hyper::client::connect"],[739,"hyper::client::connect::dns"],[809,"hyper::client::service"],[821,"hyper::ext"],[867,"hyper::header"],[1311,"hyper::rt"],[1313,"hyper::service"],[1321,"hyper::upgrade"],[1361,"http::uri::authority"],[1362,"core::option"],[1363,"http::request"],[1364,"http::response"],[1365,"http::uri::builder"],[1366,"core::cmp"],[1367,"core::default"],[1368,"http::extensions"],[1369,"core::fmt"],[1370,"core::fmt"],[1371,"core::fmt"],[1372,"http::method"],[1373,"http::status"],[1374,"http::uri"],[1375,"core::convert"],[1376,"http::request"],[1377,"core::error"],[1378,"alloc::boxed"],[1379,"core::ops::function"],[1380,"core::fmt"],[1381,"core::task::wake"],[1382,"core::task::poll"],[1383,"http::uri::port"],[1384,"http::uri::scheme"],[1385,"alloc::string"],[1386,"alloc::alloc"],[1387,"alloc::vec"],[1388,"core::any"],[1389,"http_body::combinators::box_body"],[1390,"core::marker"],[1391,"core::marker"],[1392,"std::io"],[1393,"http_body::next"],[1394,"core::marker"],[1395,"alloc::borrow"],[1396,"http::header::name"],[1397,"http::byte_str"],[1398,"core::iter::traits::collect"],[1399,"http_body::combinators::map_data"],[1400,"core::ops::function"],[1401,"bytes::buf::reader"],[1402,"core::ops::range"],[1403,"bytes::buf::take"],[1404,"http_body::next"],[1405,"core::future::future"],[1406,"core::convert"],[1407,"tokio::io::async_read"],[1408,"tokio::io::async_write"],[1409,"core::ops::deref"],[1410,"core::net::socket_addr"],[1411,"core::net::ip_addr"],[1412,"core::net::ip_addr"],[1413,"std::collections::hash::map"],[1414,"std::collections::hash::map"]],"d":["202 Accepted [RFC7231, Section 6.3.3]","208 Already Reported [RFC5842]","502 Bad Gateway [RFC7231, Section 6.6.3]","400 Bad Request [RFC7231, Section 6.5.1]","","409 Conflict [RFC7231, Section 6.5.8]","CONNECT","100 Continue [RFC7231, Section 6.2.1]","201 Created [RFC7231, Section 6.3.2]","","DELETE","417 Expectation Failed [RFC7231, Section 6.5.14]","Contains the error value","Represents errors that can occur handling HTTP streams.","424 Failed Dependency [RFC4918]","403 Forbidden [RFC7231, Section 6.5.3]","302 Found [RFC7231, Section 6.4.3]","504 Gateway Timeout [RFC7231, Section 6.6.5]","GET","410 Gone [RFC7231, Section 6.5.9]","HEAD","<code>HTTP/0.9</code>","<code>HTTP/1.0</code>","<code>HTTP/1.1</code>","<code>HTTP/2.0</code>","<code>HTTP/3.0</code>","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]","","418 I’m a teapot [curiously not registered by IANA but …","226 IM Used [RFC3229]","507 Insufficient Storage [RFC4918]","500 Internal Server Error [RFC7231, Section 6.6.1]","411 Length Required [RFC7231, Section 6.5.10]","423 Locked [RFC4918]","508 Loop Detected [RFC5842]","405 Method Not Allowed [RFC7231, Section 6.5.5]","421 Misdirected Request RFC7540, Section 9.1.2","301 Moved Permanently [RFC7231, Section 6.4.2]","300 Multiple Choices [RFC7231, Section 6.4.1]","207 Multi-Status [RFC4918]","The Request Method (VERB)","511 Network Authentication Required [RFC6585]","203 Non-Authoritative Information [RFC7231, Section 6.3.4]","406 Not Acceptable [RFC7231, Section 6.5.6]","510 Not Extended [RFC2774]","404 Not Found [RFC7231, Section 6.5.4]","501 Not Implemented [RFC7231, Section 6.6.2]","304 Not Modified [RFC7232, Section 4.1]","204 No Content [RFC7231, Section 6.3.5]","200 OK [RFC7231, Section 6.3.1]","OPTIONS","Contains the success value","206 Partial Content [RFC7233, Section 4.1]","PATCH","413 Payload Too Large [RFC7231, Section 6.5.11]","402 Payment Required [RFC7231, Section 6.5.2]","308 Permanent Redirect [RFC7238]","POST","412 Precondition Failed [RFC7232, Section 4.2]","428 Precondition Required [RFC6585]","102 Processing [RFC2518]","407 Proxy Authentication Required [RFC7235, Section 3.2]","PUT","416 Range Not Satisfiable [RFC7233, Section 4.4]","431 Request Header Fields Too Large [RFC6585]","408 Request Timeout [RFC7231, Section 6.5.7]","205 Reset Content [RFC7231, Section 6.3.6]","Represents an HTTP request.","Represents an HTTP response","Result type often returned from methods that can have …","303 See Other [RFC7231, Section 6.4.4]","503 Service Unavailable [RFC7231, Section 6.6.4]","101 Switching Protocols [RFC7231, Section 6.2.2]","An HTTP status code (<code>status-code</code> in RFC 7230 et al.).","307 Temporary Redirect [RFC7231, Section 6.4.7]","429 Too Many Requests [RFC6585]","TRACE","401 Unauthorized [RFC7235, Section 3.1]","451 Unavailable For Legal Reasons [RFC7725]","422 Unprocessable Entity [RFC4918]","415 Unsupported Media Type [RFC7231, Section 6.5.13]","426 Upgrade Required [RFC7231, Section 6.5.15]","414 URI Too Long [RFC7231, Section 6.5.12]","305 Use Proxy [RFC7231, Section 6.4.5]","The URI component of a request.","506 Variant Also Negotiates [RFC2295]","Represents a version of the HTTP spec.","","Return a &amp;str representation of the HTTP method","Returns a &amp;str representation of the <code>StatusCode</code>","Returns the <code>u16</code> corresponding to this <code>StatusCode</code>.","Get the authority of this <code>Uri</code>.","Streaming bodies for Requests and Responses","Returns a reference to the associated HTTP body.","Returns a reference to the associated HTTP body.","Returns a mutable reference to the associated HTTP body.","Returns a mutable reference to the associated HTTP body.","","","","","","","","","","","","","","","Creates a new builder-style object to manufacture a <code>Request</code>","Creates a new builder-style object to manufacture a …","Creates a new builder-style object to manufacture a <code>Uri</code>.","Get the standardised <code>reason-phrase</code> for this status code.","HTTP Client","Returns the info of the client connection on which this …","","","","","","","","","","","Creates a new <code>Builder</code> initialized with a CONNECT method …","","","","","","","Creates a new <code>Builder</code> initialized with a DELETE method and …","","","","","","","","","","","","","","","","","","","","HTTP extensions.","Returns a reference to the associated extensions.","Returns a reference to the associated extensions.","Returns a mutable reference to the associated extensions.","Returns a mutable reference to the associated extensions.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Converts a slice of bytes to an HTTP method.","Converts a &amp;u8 to a status code","Attempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.","Creates a new <code>Request</code> with the given components parts and …","Creates a new <code>Response</code> with the given head and body","Attempt to convert a <code>Parts</code> into a <code>Uri</code>.","Convert a <code>Uri</code> from a static string.","","","","Converts a u16 to a status code.","Creates a new <code>Builder</code> initialized with a GET method and …","","","","","Creates a new <code>Builder</code> initialized with a HEAD method and …","HTTP header types","Returns a reference to the associated header field map.","Returns a reference to the associated header field map.","Returns a mutable reference to the associated header field …","Returns a mutable reference to the associated header field …","Get the host of this <code>Uri</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the request, returning just the body.","Consumes the response, returning just the body.","Consumes the error, returning its cause.","Consumes the request returning the head and body parts.","Consumes the response returning the head and body parts.","Convert a <code>Uri</code> into <code>Parts</code>.","Returns true if the body write was aborted.","Returns true if this was about a <code>Request</code> that was canceled.","Check if status is within 400-499.","Returns true if a sender’s channel is closed.","Returns true if this was an error from <code>Connect</code>.","","","Whether a method is considered “idempotent”, meaning …","Returns true if the connection closed before a message …","Check if status is within 100-199.","Returns true if this was an HTTP parse error.","Returns true if this was an HTTP parse error caused by an …","Returns true if this was an HTTP parse error caused by a …","Check if status is within 300-399.","Whether a method is considered “safe”, meaning the …","Check if status is within 500-599.","Check if status is within 200-299.","Returns true if the error was caused by a timeout.","Returns true if this error was caused by user code.","Consumes the request returning a new request with body …","Consumes the response returning a new response with body …","The error’s standalone message, without the message from …","Returns a reference to the associated HTTP method.","Returns a mutable reference to the associated HTTP method.","Creates a new blank <code>Request</code> with the body","Creates a new blank <code>Response</code> with the body","Creates a new <code>Builder</code> initialized with an OPTIONS method …","","","Creates a new <code>Builder</code> initialized with a PATCH method and …","Get the path of this <code>Uri</code>.","Returns the path &amp; query components of the Uri","","","","","Get the port part of this <code>Uri</code>.","Get the port of this <code>Uri</code> as a <code>u16</code>.","Creates a new <code>Builder</code> initialized with a POST method and …","Creates a new <code>Builder</code> initialized with a PUT method and …","Get the query string of this <code>Uri</code>, starting after the <code>?</code>.","Runtime components","Get the scheme of this <code>Uri</code>.","Get the scheme of this <code>Uri</code> as a <code>&amp;str</code>.","Asynchronous Services","","","","Returns the <code>StatusCode</code>.","Returns a mutable reference to the associated <code>StatusCode</code>.","","","","","","","","","Creates a new <code>Builder</code> initialized with a TRACE method and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","HTTP Upgrades","Returns a reference to the associated URI.","Returns a mutable reference to the associated URI.","Returns the associated version.","Returns a reference to the associated version.","Returns a mutable reference to the associated version.","Returns a mutable reference to the associated version.","A stream of <code>Bytes</code>, used when receiving bodies.","Read bytes from a buffer.","A cheaply cloneable and sliceable chunk of contiguous …","Values yielded by the <code>Body</code>.","The error type this <code>Body</code> might generate.","Trait representing a streaming body of a Request or …","A sender half created through <code>Body::channel()</code>.","A <code>Body</code> size hint","Aborts the body in an abnormal fashion.","Advance the internal cursor of the Buf","","Aggregate the data buffers from a body asynchronously.","","","","","","","","","","","Turn this body into a boxed trait object.","Turn this body into a boxed trait object that is !Sync.","Creates an adaptor which will chain this buffer with …","Create a <code>Body</code> stream with an associated sender half.","Returns a slice starting at the current position and of …","","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","Clears the buffer, removing all data.","","","","","","Creates <code>Bytes</code> instance from slice, by copying it.","Consumes <code>len</code> bytes inside self and returns new instance of …","","Copies bytes from <code>self</code> into <code>dst</code>.","Returns future that resolves to next data chunk, if any.","Returns <code>Body::empty()</code>.","","","","","Create an empty <code>Body</code> stream.","","","","","","","","","","Returns the exact size of data that will be yielded <strong>if</strong> the …","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Creates a new <code>Bytes</code> from a static slice.","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets a signed 128 bit integer from <code>self</code> in big-endian byte …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets a signed 128 bit integer from <code>self</code> in native-endian …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in native-endian …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in native-endian …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in native-endian …","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in native-endian …","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in native-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in native-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in native-endian …","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in native-endian …","Returns true if there are any more bytes to consume","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the <code>Bytes</code> has a length of 0.","","Returns <code>true</code> when the end of stream has been reached.","Returns the number of bytes contained in this <code>Bytes</code>.","Returns the lower bound of data that the <code>Body</code> will yield …","Maps this body’s data value to a different value.","Maps this body’s error value to a different value.","Creates a new empty <code>Bytes</code>.","Returns a new <code>SizeHint</code> with default values","","","","","","","Attempt to pull out the next data buffer of this stream.","","Check to see if this <code>Sender</code> can send more data.","Poll for an optional <strong>single</strong> <code>HeaderMap</code> of trailers.","","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Returns the number of bytes between the current position …","","Send data on data channel when it is ready.","Send trailers on trailers channel.","Set the value of the <code>lower</code> and <code>upper</code> bounds to exactly the …","Set the value of the <code>lower</code> hint.","Set the value of the <code>upper</code> hint value.","","Returns the bounds on the remaining length of the stream.","Returns a slice of self for the provided range.","Returns a slice of self that is equivalent to the given …","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Creates an adaptor which will read at most <code>limit</code> bytes …","Concatenate the buffers from a body into a single <code>Bytes</code> …","","","Returns future that resolves to trailers, if any.","Shortens the buffer, keeping the first <code>len</code> bytes and …","","","","","","","","","Try to send data on this channel.","","","","","Returns the upper bound of data the <code>Body</code> will yield before …","Returns a new <code>SizeHint</code> with both upper and lower bounds …","A builder to configure a new <code>Client</code>.","A Client to make outgoing HTTP requests.","","A <code>Future</code> that will resolve to an HTTP Response.","","","","","","","Combine the configuration of this builder with a connector …","Builder a client with this configuration and the default …","Create a builder to configure a new <code>Client</code>.","","","","","","","Lower-level client connection API.","Connectors used by the <code>Client</code>.","","","Provide an executor to execute background <code>Connection</code> tasks.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Send a <code>GET</code> request to the supplied <code>Uri</code>.","Set whether HTTP/0.9 responses should be tolerated.","Set whether HTTP/1 connections will accept obsolete line …","Set whether HTTP/1 connections will accept spaces between …","Sets whether invalid header lines should be silently …","Set the maximum buffer size for the connection.","Set whether to support preserving original header cases.","Sets the exact size of the read buffer to <em>always</em> use.","Set whether HTTP/1 connections will write header names as …","Set whether HTTP/1 connections should try to use vectored …","Sets whether to use an adaptive flow control.","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Sets an interval for HTTP2 Ping frames should be sent to …","Sets a timeout for receiving an acknowledgement of the …","Sets whether HTTP2 keep-alive should apply while the …","Sets the maximum number of HTTP2 concurrent locally reset …","Sets the maximum frame size to use for HTTP2.","Set the maximum write buffer size for each HTTP/2 stream.","Set whether the connection <strong>must</strong> use HTTP/2.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new Client with the default config.","","","","Set an optional timeout for idle sockets being kept-alive.","Sets the maximum idle connection per host allowed in the …","Send a constructed <code>Request</code> using this <code>Client</code>.","Set whether to retry requests that get disrupted before …","Utilities used to interact with the Tower ecosystem.","Set whether to automatically add the <code>Host</code> header to …","","","","","","","","","","","","","A builder to configure an HTTP connection.","A future that processes all HTTP state for the IO object.","Deconstructed parts of a <code>Connection</code>.","A future returned by <code>SendRequest::send_request</code>.","The sender side of an established connection.","","","","","","","","","","","","","","Provide an executor to execute background HTTP2 tasks.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a handshake future over some IO.","Constructs a connection with the configured options and IO.","Set whether HTTP/0.9 responses should be tolerated.","Set whether HTTP/1 connections will accept obsolete line …","Set whether HTTP/1 connections will accept spaces between …","Set whether HTTP/1 connections will silently ignored …","Set the maximum buffer size for the connection.","Set whether to support preserving original header cases.","Sets the exact size of the read buffer to <em>always</em> use.","Set whether HTTP/1 connections will write header names as …","Set whether HTTP/1 connections should try to use vectored …","Sets whether to use an adaptive flow control.","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Returns whether the extended CONNECT protocol is enabled …","Sets an interval for HTTP2 Ping frames should be sent to …","Sets a timeout for receiving an acknowledgement of the …","Sets whether HTTP2 keep-alive should apply while the …","Sets the maximum number of HTTP2 concurrent locally reset …","Sets the maximum frame size to use for HTTP2.","Set the maximum write buffer size for each HTTP/2 stream.","Sets whether HTTP2 is required.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Return the inner IO object, and additional information.","The original IO object used in the handshake.","Creates a new connection builder.","","","Polls to determine whether this sender can be used yet for …","","Poll the connection for completion, but without calling …","A buffer of bytes that have been read but not processed as …","Sends a <code>Request</code> on the associated connection.","","","","","","","","","","","","","","","","","","","Prevent shutdown of the underlying IO object at the end of …","<code>CaptureConnection</code> allows callers to capture <code>Connected</code> …","Connect to a destination, returning an IO transport.","Extra information about the connected transport.","Describes a type returned by a connector.","A connector for the <code>http</code> scheme.","Extra information about the transport when an …","","","","","","","","","","Capture the connection for a given request","","","","","","","Return metadata describing the connection.","Retrieve the connection metadata, if available","DNS Resolution used by the <code>HttpConnector</code>.","Option to enforce all <code>Uri</code>s have the <code>http</code> scheme.","Set extra connection information to be set in the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Copies the extra connection information into an <code>Extensions</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if the connected transport negotiated HTTP/2 as …","Determines if the connected transport is to an HTTP proxy.","Get the local address of the transport used.","Set that the connected transport negotiated HTTP/2 as its …","Construct a new HttpConnector.","Create new <code>Connected</code> type with empty metadata.","Construct a new HttpConnector.","Poison this connection","","Set whether the connected transport is to an HTTP proxy.","Get the remote address of the transport used.","Set the connect timeout.","Set timeout for RFC 6555 (Happy Eyeballs) algorithm.","Set that all sockets have <code>SO_KEEPALIVE</code> set with the …","Set that all sockets are bound to the configured address …","Set that all sockets are bound to the configured IPv4 or …","Set that all sockets have <code>SO_NODELAY</code> set to the supplied …","Sets the value of the SO_RCVBUF option on the socket.","Set that all socket have <code>SO_REUSEADDR</code> set to the supplied …","Sets the value of the SO_SNDBUF option on the socket.","","","","","","","","","","","","","","","","Wait for the connection to be established","An iterator of IP addresses returned from <code>getaddrinfo</code>.","A future to resolve a name returned by <code>GaiResolver</code>.","A resolver using blocking <code>getaddrinfo</code> calls in a …","Error indicating a given string was not a valid domain …","A domain name to resolve into IP addresses.","View the hostname as a string slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Construct a new <code>GaiResolver</code>.","","","","","","","","","","","","","","","","","","","","","","","","Creates a connection via <code>SendRequest</code>.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new <code>Connect</code> with some inner connector <code>C</code> and a …","","","","","Represents the <code>:protocol</code> pseudo-header used by the …","A reason phrase in an HTTP/1 response.","Gets the reason phrase as bytes.","","","Returns a str representation of the header.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a <code>Bytes</code> directly into a <code>ReasonPhrase</code> without …","Converts a static byte slice to a reason phrase.","Converts a static string to a protocol name.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Advertises which content types the client is able to …","Advertises which character set the client is able to …","Advertises which content encoding the client is able to …","Advertises which languages the client is able to …","Marker used by the server to advertise partial request …","Preflight response indicating if the response to the …","Preflight response indicating permitted HTTP headers.","Preflight header response indicating permitted access …","Indicates whether the response can be shared with …","Indicates which headers can be exposed as part of the …","Indicates how long the results of a preflight request can …","Informs the server which HTTP headers will be used when an …","Informs the server know which HTTP method will be used …","Indicates the time in seconds the object has been in a …","Lists the set of methods support by a resource.","Advertises the availability of alternate services to …","Contains the credentials to authenticate a user agent with …","A marker trait used to identify values that can be used as …","Specifies directives for caching mechanisms in both …","Indicates how caches have handled a response and its …","Specifies directives that allow origin servers to control …","Controls whether or not the network connection stays open …","Indicates if the content is expected to be displayed …","Used to compress the media-type.","Used to describe the languages intended for the audience.","Indicates the size of the entity-body.","Indicates an alternate location for the returned data.","Indicates where in a full body message a partial message …","Allows controlling resources the user agent is allowed to …","Allows experimenting with policies by monitoring their …","Used to indicate the media type of the resource.","Contains stored HTTP cookies previously sent by the server …","Contains the date and time at which the message was …","Indicates the client’s tracking preference.","A drain iterator for <code>HeaderMap</code>.","Identifier for a specific version of a resource.","Indicates expectations that need to be fulfilled by the …","Contains the date/time after which the response is …","A view into a single location in a <code>HeaderMap</code>, which may be …","Contains information from the client-facing side of proxy …","Contains an Internet email address for a human user who …","A view to all values stored in a single entry.","Specifies the domain name of the server and (optionally) …","A set of HTTP headers","Represents an HTTP header field name","Represents an HTTP header field value.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on the modification date.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on range.","Makes the request conditional based on the last …","A marker trait used to identify values that can be used as …","An owning iterator over the entries of a <code>HeaderMap</code>.","A possible error when converting a <code>HeaderName</code> from another …","A possible error when converting a <code>HeaderValue</code> from a …","<code>HeaderMap</code> entry iterator.","<code>HeaderMap</code> mutable entry iterator","An iterator over <code>HeaderMap</code> keys.","Content-Types that are acceptable for the response.","Allows the server to point an interested client to another …","Indicates the URL to redirect a page to.","Indicates the max number of intermediaries the request …","Indicates where a fetch originates from.","An occupied entry","A view into a single occupied location in a <code>HeaderMap</code>.","HTTP/1.0 header usually used for backwards compatibility.","Defines the authentication method that should be used to …","Contains the credentials to authenticate a user agent to a …","Associates a specific cryptographic public key with a …","Sends reports of pinning violation to the report-uri …","Indicates the part of a document that the server should …","Contains the address of the previous web page from which a …","Governs which referrer information should be included with …","Informs the web browser that the current page or frame …","The Retry-After response HTTP header indicates how long …","The |Sec-WebSocket-Accept| header field is used in the …","The |Sec-WebSocket-Extensions| header field is used in the …","The |Sec-WebSocket-Key| header field is used in the …","The |Sec-WebSocket-Protocol| header field is used in the …","The |Sec-WebSocket-Version| header field is used in the …","Contains information about the software used by the origin …","Used to send cookies from the server to the user agent.","Tells the client to communicate with HTTPS instead of …","Informs the server of transfer encodings willing to be …","Allows the sender to include additional fields at the end …","Specifies the form of encoding used to safely transfer the …","A possible error when converting a <code>HeaderValue</code> to a string …","Used as part of the exchange to upgrade the protocol.","Sends a signal to the server expressing the client’s …","Contains a string that allows identifying the requesting …","Determines how to match future requests with cached …","Added by proxies to track routing.","A vacant entry","A view into a single empty location in a <code>HeaderMap</code>.","An drain iterator of all values associated with a single …","An iterator of all values associated with a single header …","A mutable iterator of all values associated with a single …","<code>HeaderMap</code> value iterator.","<code>HeaderMap</code> mutable value iterator","General HTTP header contains information about possible …","Defines the authentication method that should be used to …","Marker used by the server to indicate that the MIME types …","Controls DNS prefetching.","Indicates whether or not a browser should be allowed to …","Stop pages from loading when an XSS attack is detected.","Inserts a key-value pair into the map.","Insert the value into the entry.","Converts a <code>HeaderValue</code> to a byte slice.","","","","Returns a <code>str</code> representation of the header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of headers the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","Returns true if the map contains a value for the specified …","","Clears the map, returning all entries as an iterator.","","","","Gets the given key’s corresponding entry in the map for …","","","","Performs a case-insensitive comparison of the string …","Performs a case-insensitive comparison of the string …","","","","","","","","","","","","","","","Extend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Converts a slice of bytes to an HTTP header name.","Attempt to convert a byte slice to a <code>HeaderValue</code>.","","Converts a slice of bytes to an HTTP header name.","Attempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.","Convert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …","Converts a HeaderName into a HeaderValue","Converts a static string to a HTTP header name.","Convert a static string to a <code>HeaderValue</code>.","","","Attempt to convert a string to a <code>HeaderValue</code>.","Returns a reference to the value associated with the key.","Get a reference to the first value in the entry.","Returns a view of all values associated with a key.","Returns a mutable reference to the value associated with …","Get a mutable reference to the first value in the entry.","","","Panics","Inserts a key-value pair into the map.","Insert the value into the entry.","Sets the value of the entry.","Insert the value into the entry.","Sets the value of the entry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves keys …","","","","","","","","","","","","","","","","","Take ownership of the key","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns true if the map contains no elements.","Returns true if the <code>HeaderValue</code> has a length of zero bytes.","Returns <code>true</code> if the value represents sensitive data.","An iterator visiting all key-value pairs.","Returns an iterator visiting all values associated with …","Returns an iterator visiting all values associated with …","An iterator visiting all key-value pairs, with mutable …","Returns an iterator mutably visiting all values associated …","Returns a reference to the entry’s key","Returns a reference to the entry’s key","Returns a reference to the entry’s key.","An iterator visiting all keys.","Returns the number of keys stored in the map.","Returns the number of headers stored in the map.","Returns the length of <code>self</code>.","Create an empty <code>HeaderMap</code>.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","","","","","","","Removes a key from the map, returning the value associated …","Remove the entry from the map.","Remove the entry from the map.","Remove the entry from the map.","Reserves capacity for at least <code>additional</code> more headers to …","Mark that the header value represents sensitive …","","","","","","","","","","","","","Yields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …","","","","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values.","An iterator visiting all values mutably.","Create an empty <code>HeaderMap</code> with the specified capacity.","An executor of futures.","Place the future into the executor to be run.","Errors produced by the service.","The future response value.","Responses given by the service.","An asynchronous function from a <code>Request</code> to a <code>Response</code>.","Process the request and return the response asynchronously.","Create a <code>MakeService</code> from a function.","Returns <code>Poll::Ready(Ok(()))</code> when the service is able to …","Create a <code>Service</code> from a function.","A future for a possible HTTP upgrade.","The deconstructed parts of an <code>Upgraded</code> type.","An upgraded HTTP connection.","","","","","","","Tries to downcast the internal trait object to the type …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The original IO object used before the upgrade.","","Gets a pending HTTP upgrade from this message.","","","","","","","A buffer of bytes that have been read but not processed as …","","","","","","","","","",""],"i":[3,3,3,3,0,3,1,3,3,0,1,3,87,0,3,3,3,3,1,3,1,15,15,15,15,15,3,0,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,1,87,3,1,3,3,3,1,3,3,3,3,1,3,3,3,3,0,0,0,3,3,3,0,3,3,1,3,3,3,3,3,3,3,0,3,0,1,1,3,3,5,0,8,9,8,9,13,8,9,1,3,5,15,13,8,9,1,3,5,15,8,9,5,3,0,13,1,3,5,15,1,3,5,15,3,15,8,8,9,1,3,5,15,8,1,1,1,1,1,3,3,5,5,5,15,1,1,3,3,5,5,15,15,0,8,9,8,9,13,13,8,9,1,1,3,3,5,5,15,13,8,9,1,1,3,3,5,5,5,15,1,3,5,8,9,5,5,1,3,5,3,8,1,3,5,15,8,0,8,9,8,9,5,13,8,9,1,3,5,15,8,9,13,8,9,5,13,13,3,13,13,8,9,1,13,3,13,13,13,3,1,3,3,13,13,8,9,13,8,8,8,9,8,3,15,8,5,5,8,9,8,9,5,5,8,8,5,0,5,5,0,8,9,13,9,9,1,3,5,15,13,1,3,5,8,13,8,9,1,1,1,3,3,3,3,5,5,5,5,5,5,5,5,15,13,8,9,1,3,5,15,13,8,9,1,3,5,15,0,8,8,8,9,8,9,0,0,0,42,42,0,0,0,55,58,57,0,57,65,55,57,57,50,65,55,57,50,42,42,58,65,58,57,58,57,57,50,57,50,57,57,58,57,58,42,65,57,50,57,57,65,57,57,57,57,57,57,57,57,57,50,65,55,57,57,57,50,65,65,65,65,65,65,65,65,55,57,57,57,57,57,57,57,57,57,50,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,57,65,55,57,50,57,57,57,65,42,57,50,42,42,57,50,57,57,57,57,57,57,42,65,55,42,65,58,58,57,55,55,50,50,50,65,42,57,57,57,57,58,0,57,50,42,57,65,55,57,50,65,55,57,50,55,65,55,57,50,50,50,0,0,0,0,93,99,92,93,99,92,92,92,93,93,93,93,92,93,92,0,0,93,92,92,93,99,92,93,99,92,93,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,99,92,99,93,99,93,93,92,92,93,92,0,92,93,92,93,99,92,93,99,92,99,93,99,92,0,0,0,0,0,102,104,107,103,108,102,104,107,103,108,102,103,103,103,102,104,107,103,108,102,104,107,103,108,0,103,103,103,103,103,103,103,103,103,103,103,103,103,104,103,103,103,103,103,103,103,102,104,107,103,108,104,107,104,108,103,104,107,102,102,104,108,102,103,102,104,107,103,108,102,104,107,103,108,104,107,102,104,107,103,108,104,0,0,0,0,0,0,96,110,109,14,96,110,109,14,96,0,96,110,109,96,110,109,156,109,0,96,14,96,110,109,14,96,110,109,14,14,96,110,109,14,14,14,110,14,96,14,96,14,96,14,110,96,96,96,96,96,96,96,96,96,96,110,109,96,110,109,14,96,110,109,14,96,110,109,14,109,0,0,0,0,0,116,119,118,116,117,120,119,118,116,117,120,117,116,117,116,117,118,116,116,116,119,118,116,116,117,120,120,119,118,116,117,120,116,116,119,118,116,117,120,118,119,117,119,118,117,116,117,116,120,119,118,116,117,120,119,118,116,117,120,118,119,118,116,117,120,0,122,122,122,122,122,122,122,122,122,122,122,0,0,123,123,124,124,123,124,123,124,123,124,123,124,123,123,124,123,123,124,124,123,124,123,124,124,123,123,124,123,123,123,124,123,123,124,123,123,123,123,123,124,123,124,123,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,39,126,38,127,127,38,127,134,135,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,127,38,144,134,135,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,38,144,39,39,39,127,38,39,127,38,38,39,39,39,130,129,131,39,39,133,127,127,127,127,127,38,38,38,38,38,38,39,39,127,127,38,38,39,39,134,134,135,135,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,127,38,144,144,134,135,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,127,38,38,38,38,38,38,38,38,38,38,38,144,127,38,39,127,38,38,38,127,38,127,38,38,39,126,39,39,126,127,38,39,39,141,126,141,126,134,135,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,38,144,39,39,39,136,137,130,138,139,140,129,133,133,126,126,126,142,143,131,141,126,39,38,38,39,133,126,39,126,132,141,126,39,39,39,38,39,136,137,130,138,139,140,129,142,143,131,142,143,132,132,38,38,38,38,38,38,39,126,126,126,39,38,136,137,130,138,139,140,129,142,131,39,127,38,38,134,135,127,144,39,134,135,39,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,127,127,127,127,127,38,38,38,38,38,38,144,134,135,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,38,144,134,135,39,136,137,130,138,139,140,129,133,132,141,126,142,143,131,127,38,144,39,39,39,0,98,157,157,157,0,157,0,157,0,0,0,0,151,153,152,151,153,152,151,151,153,152,151,153,152,151,153,152,153,152,151,0,153,151,151,151,151,151,152,151,153,152,151,153,152,153,151,153,152],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[3,2],[3,4],[5,[[7,[6]]]],0,[[[8,[-1]]],-1,[]],[[[9,[-1]]],-1,[]],[[[8,[-1]]],-1,[]],[[[9,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],10],[[],11],[[],12],[3,[[7,[2]]]],0,[13,[[7,[14]]]],[1,1],[3,3],[5,5],[15,15],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[3,3],17],[[15,15],17],[-1,10,[]],[[],[[8,[-1]]],18],[[],[[9,[-1]]],18],[[],1],[[],3],[[],5],[[],15],[-1,10,[]],[[1,2],19],[[1,2],19],[[1,1],19],[[1,1],19],[[1,1],19],[[3,3],19],[[3,4],19],[[5,5],19],[[5,2],19],[[5,2],19],[[15,15],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],0,[[[8,[-1]]],20,[]],[[[9,[-1]]],20,[]],[[[8,[-1]]],20,[]],[[[9,[-1]]],20,[]],[[13,21],22],[[13,21],22],[[[8,[-1]],21],[[24,[16,23]]],25],[[[9,[-1]],21],[[24,[16,23]]],25],[[1,21],[[24,[16,23]]]],[[1,21],[[24,[16,23]]]],[[3,21],[[24,[16,23]]]],[[3,21],[[24,[16,23]]]],[[5,21],[[24,[16,23]]]],[[5,21],[[24,[16,23]]]],[[15,21],[[24,[16,23]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,1],[-1,-1,[]],[3,3],[-1,-1,[]],[6,5],[-1,-1,[]],[26,5],[-1,-1,[]],[[[28,[27]]],[[24,[1,29]]]],[[[28,[27]]],[[24,[3,30]]]],[-1,[[24,[5,31]]],[[32,[[28,[27]]]]]],[[33,-1],[[8,[-1]]],[]],[[34,-1],[[9,[-1]]],[]],[35,[[24,[5,36]]]],[2,5],[2,[[24,[1]]]],[2,[[24,[3,30]]]],[2,[[24,[5,31]]]],[4,[[24,[3,30]]]],[-1,10,[]],[[1,-1],16,37],[[3,-1],16,37],[[5,-1],16,37],[[15,-1],16,37],[-1,10,[]],0,[[[8,[-1]]],[[39,[38]]],[]],[[[9,[-1]]],[[39,[38]]],[]],[[[8,[-1]]],[[39,[38]]],[]],[[[9,[-1]]],[[39,[38]]],[]],[5,[[7,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],-1,[]],[[[9,[-1]]],-1,[]],[13,[[7,[[41,[40]]]]]],[[[8,[-1]]],[[16,[33,-1]]],[]],[[[9,[-1]]],[[16,[34,-1]]],[]],[5,35],[13,19],[13,19],[3,19],[13,19],[13,19],[[[8,[-1]]],19,42],[[[9,[-1]]],19,42],[1,19],[13,19],[3,19],[13,19],[13,19],[13,19],[3,19],[1,19],[3,19],[3,19],[13,19],[13,19],[[[8,[-1]],-2],[[8,[-3]]],[],43,[]],[[[9,[-1]],-2],[[9,[-3]]],[],43,[]],[13,[[0,[44]]]],[[[8,[-1]]],1,[]],[[[8,[-1]]],1,[]],[-1,[[8,[-1]]],[]],[-1,[[9,[-1]]],[]],[-1,10,[]],[[3,3],[[7,[17]]]],[[15,15],[[7,[17]]]],[-1,10,[]],[5,2],[5,[[7,[26]]]],[[[45,[[8,[-1]]]],46],[[47,[[7,[24]]]]],42],[[[45,[[9,[-1]]]],46],[[47,[[7,[24]]]]],42],[[[45,[[8,[-1]]]],46],[[47,[[24,[[7,[[39,[38]]]]]]]]],42],[[[45,[[9,[-1]]]],46],[[47,[[24,[[7,[[39,[38]]]]]]]]],42],[5,[[7,[[48,[2]]]]]],[5,[[7,[4]]]],[-1,10,[]],[-1,10,[]],[5,[[7,[2]]]],0,[5,[[7,[49]]]],[5,[[7,[2]]]],0,[[[8,[-1]]],50,42],[[[9,[-1]]],50,42],[13,[[7,[40]]]],[[[9,[-1]]],3,[]],[[[9,[-1]]],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,10,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[2,[[24,[1]]]],[[[28,[27]]],[[24,[1]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[28,[27]]],[[24,[3]]]],[2,[[24,[3]]]],[4,[[24,[3]]]],[2,[[24,[5]]]],[35,[[24,[5]]]],[51,[[24,[5]]]],[51,[[24,[5]]]],[[[28,[27]]],[[24,[5]]]],[[[53,[27,52]]],[[24,[5]]]],[5,[[24,[5]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],0,[[[8,[-1]]],5,[]],[[[8,[-1]]],5,[]],[[[8,[-1]]],15,[]],[[[9,[-1]]],15,[]],[[[8,[-1]]],15,[]],[[[9,[-1]]],15,[]],0,0,0,0,0,0,0,0,[55,16],[[-1,56],16,[]],[[57,56],16],[-1,[[24,[[0,[58]]]]],42],[57,[[28,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[57,[[28,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,59,[60,61,62]],[-1,63,[60,61]],[[-1,-2],[[64,[-1,-2]]],60,58],[[],[[16,[55,65]]]],[-1,[[28,[27]]],[]],[57,[[28,[27]]]],[[-1,[28,[66]]],56,[]],[57,16],[57,57],[50,50],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[57,57],17],[[[28,[27]]],57],[[-1,56],57,[]],[[57,56],57],[[-1,[28,[27]]],16,[]],[-1,[[67,[-1]]],[68,60]],[[],65],[[],57],[[],50],[57,[[28,[27]]]],[57,16],[[],65],[[57,[28,[27]]],19],[[57,[53,[27,52]]],19],[[57,57],19],[[57,2],19],[[57,69],19],[[57,-1],19,60],[[57,51],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[50,[[7,[70]]]],[[65,21],22],[[55,21],22],[[57,21],[[24,[16,23]]]],[[57,21],[[24,[16,23]]]],[[57,21],[[24,[16,23]]]],[[50,21],[[24,[16,23]]]],[2,65],[[[71,[2]]],65],[[[71,[[28,[27]]]]],65],[-1,-1,[]],[[[28,[27]]],65],[51,65],[57,65],[[[53,[27]]],65],[-1,-1,[]],[[[28,[27]]],57],[[[41,[[28,[27]],52]]],57],[[[53,[27,52]]],57],[72,57],[51,57],[73,57],[2,57],[-1,-1,[]],[69,57],[-1,-1,[]],[-1,57,74],[[[28,[27]]],57],[-1,75,[]],[-1,75,[]],[-1,75,[]],[-1,76,[]],[-1,76,[]],[-1,76,[]],[-1,77,[]],[-1,77,[]],[-1,77,[]],[-1,78,[]],[-1,78,[]],[-1,78,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,80,[]],[-1,80,[]],[-1,80,[]],[-1,81,[]],[[-1,56],80,[]],[[-1,56],80,[]],[[-1,56],80,[]],[-1,82,[]],[-1,82,[]],[-1,82,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,83,[]],[-1,83,[]],[-1,83,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,27,[]],[[-1,56],70,[]],[[-1,56],70,[]],[[-1,56],70,[]],[-1,19,[]],[[57,-1],16,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57],[57],[57,19],[65,19],[-1,19,[]],[57,56],[50,70],[[-1,-2],[[84,[-1,-2]]],60,85],[[-1,-2],[[86,[-1,-2]]],60,85],[[],57],[[],50],[[57,57],[[7,[17]]]],[[57,[28,[27]]],[[7,[17]]]],[[57,2],[[7,[17]]]],[[57,[53,[27,52]]],[[7,[17]]]],[[57,51],[[7,[17]]]],[[57,-1],[[7,[17]]],60],[[[45,[-1]],46],[[47,[[7,[24]]]]],[]],[[[45,[65]],46],[[47,[[7,[24]]]]]],[[55,46],[[47,[[87,[16]]]]]],[[[45,[-1]],46],[[47,[[24,[[7,[[39,[38]]]]]]]]],[]],[[[45,[65]],46],[[47,[[24,[[7,[39]]]]]]]],[-1,[[88,[-1]]],60],[-1,56,[]],[57,56],[[55,57],[[87,[16]]]],[[55,39],[[87,[16]]]],[[50,70],16],[[50,70],16],[[50,70],16],[65,50],[-1,50,[]],[[57,-1],57,[[89,[56]]]],[[57,[28,[27]]],57],[[57,56],57],[[57,56],57],[[-1,56],[[90,[-1]]],60],[-1,[[24,[57]]],42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[91,[-1]]],[68,60]],[[57,56],16],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[55,57],[[24,[16,57]]]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[50,[[7,[70]]]],[70,50],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[92,-1],[[93,[-1,-2]]],[94,95],[42,61]],[92,[[93,[96,-1]]],[42,61]],[[],92],[[[93,[-1,-2]],[8,[-2]]],[],[94,95,61,62],[42,61]],[[[93,[-1,-2]],[8,[-2]]],[],[94,95,61,62],[42,61]],[[[93,[-1,-2]]],[[93,[-1,-2]]],95,[]],[92,92],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],0,0,[[],[[93,[96,65]]]],[[],92],[[92,-1],92,[[98,[[45,[[41,[97]]]]]],61,62]],[[[93,[-1,-2]],21],22,[],[]],[[99,21],22],[[92,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[93,[-1,-2]],5],99,[94,95,61,62],[18,42,61]],[[92,19],92],[[92,19],92],[[92,19],92],[[92,19],92],[[92,56],92],[[92,19],92],[[92,56],92],[[92,19],92],[[92,19],92],[[92,19],92],[[92,-1],92,[[100,[[7,[83]]]]]],[[92,-1],92,[[100,[[7,[83]]]]]],[[92,-1],92,[[100,[[7,[101]]]]]],[[92,101],92],[[92,19],92],[[92,56],92],[[92,-1],92,[[100,[[7,[83]]]]]],[[92,56],92],[[92,19],92],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[],[[93,[96,65]]]],[[[45,[99]],46],47],[[[93,[-1,-2]],46],[[47,[[24,[16]]]]],[94,95,61,62],[42,61]],[[[93,[-1,-2]],46],[[47,[[24,[16]]]]],[94,95,61,62],[42,61]],[[92,-1],92,[[100,[[7,[101]]]]]],[[92,56],92],[[[93,[-1,-2]],[8,[-2]]],99,[94,95,61,62],[42,61]],[[92,19],92],0,[[92,19],92],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[45,[-1]],46],47,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[102,[-1]],[8,[-1]]],[],42],[103,103],[[-1,-2],16,[],[]],[[103,-1],103,[[98,[[45,[[41,[97]]]]]],61,62]],[[[102,[-1]],21],22,[]],[[[104,[-1,-2]],21],22,[105,106,25,61],42],[[107,21],22],[[103,21],22],[[[108,[-1]],21],22,25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[87,[[16,[[102,[65]],[104,[-1,65]]]]]]],[105,106,68,61]],[[103,-1],[[0,[97]]],[105,106,68,61]],[[103,19],103],[[103,19],103],[[103,19],103],[[103,19],103],[[103,56],103],[[103,19],103],[[103,[7,[56]]],103],[[103,19],103],[[103,19],103],[[103,19],103],[[103,-1],103,[[100,[[7,[83]]]]]],[[103,-1],103,[[100,[[7,[83]]]]]],[[[104,[-1,-2]]],19,[105,106,68,61],[42,68,61]],[[103,-1],103,[[100,[[7,[101]]]]]],[[103,101],103],[[103,19],103],[[103,56],103],[[103,-1],103,[[100,[[7,[83]]]]]],[[103,56],103],[[103,19],103],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[104,[-1,-2]]],[[108,[-1]]],[105,106,68,61],[42,68,61]],0,[[],103],[[[45,[[104,[-1,-2]]]],46],47,[105,106,68,61],[42,61]],[[[45,[107]],46],47],[[[102,[-1]],46],[[47,[[87,[16]]]]],[]],[[[102,[-1]],46],[[47,[[24,[16]]]]],42],[[[104,[-1,-2]],46],[[47,[[87,[16]]]]],[105,106,68,61],[42,68,61]],0,[[[102,[-1]],[8,[-1]]],107,42],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[45,[-1]],46],47,[]],[[[45,[-1]],46],47,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[[[104,[-1,-2]]],[[0,[97]]],[105,106,68,61],[42,68,61]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1]],5],[],[0,95,61,62]],[[[8,[-1]]],109,[]],[[[96,[-1]]],[[96,[-1]]],95],[110,110],[109,109],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[-1,14,[]],[109,[[0,[111]]]],0,[[[96,[-1]],19],16,[]],[[14,-1],14,[95,61,62]],[[[96,[-1]],21],22,25],[[110,21],22],[[109,21],22],[[14,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[14,20],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,19],[14,19],[110,112],[14,14],[[],96],[[],14],[-1,[[96,[-1]]],[]],[14,16],[[[96,[-1]],46],[[47,[[24,[16]]]]],[0,95,61,62]],[[14,19],14],[110,112],[[[96,[-1]],[7,[101]]],16,[]],[[[96,[-1]],[7,[101]]],16,[]],[[[96,[-1]],[7,[101]]],16,[]],[[[96,[-1]],[7,[113]]],16,[]],[[[96,[-1]],114,115],16,[]],[[[96,[-1]],19],16,[]],[[[96,[-1]],[7,[56]]],16,[]],[[[96,[-1]],19],[[96,[-1]]],[]],[[[96,[-1]],[7,[56]]],16,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[109,[[0,[111]]]],0,0,0,0,0,[116,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[117,116]],[116,116],[117,117],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[118,16],[[116,116],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[119,21],22],[[118,21],22],[[116,21],22],[[116,21],22],[[117,21],22],[[120,21],22],[[120,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[24,[116]]]],[[116,-1],16,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,-2,[],[]],[[],117],[119,7],[[[45,[118]],46],47],[[117,46],[[47,[[24,[16,121]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[-1,51,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[45,[-1]],46],47,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[122,[-2,-3,-1]],-1],[],[],[[0,[-1]]],[42,68,61]],[[[122,[-1,-2,-3]],21],22,25,25,25],[-1,-1,[]],[-1,-2,[],[]],[[-1,103],[[122,[-1,-2,-3]]],[],[],[]],[[[122,[-2,-3,-1]],46],[[47,[[24,[16]]]]],[],[[0,[-1]]],[42,68,61]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,54,[]],0,0,[123,[[28,[27]]]],[123,[[28,[27]]]],[124,[[28,[27]]]],[124,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[123,123],[124,124],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[123,123],17],[[123,123],19],[[124,124],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[123,21],22],[[124,21],22],[-1,-1,[]],[-1,-1,[]],[2,124],[57,123],[[[28,[27]]],123],[2,124],[[123,-1],16,37],[123,57],[-1,-2,[],[]],[-1,-2,[],[]],[[123,123],[[7,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[51,[[24,[123]]]],[[[53,[27]]],[[24,[123]]]],[57,[[24,[123]]]],[-1,[[24,[-2]]],[],[]],[[[28,[27]]],[[24,[123]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,54,[]],[-1,54,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[39,[-1]],-2,-1],19,[],125],[[[126,[-1]],-1],16,[]],[38,[[28,[27]]]],[127,[[28,[27]]]],[127,2],[38,[[28,[27]]]],[127,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[127,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1]]],56,[]],[[[39,[-1]]],16,[]],[[[39,[-1]]],[[39,[-1]]],95],[127,127],[38,38],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[38,38],17],[[[39,[-1]],-2],19,[],128],[[],[[39,[-1]]],[]],[[[39,[-1]]],[[129,[-1]]],[]],[[[130,[-1]]],16,[]],[[[129,[-1]]],16,[]],[[[131,[-1]]],16,[]],[[[39,[-1]],-2],[[132,[-1]]],[],125],[[[39,[-1]],[39,[-1]]],19,[]],[[[133,[-1]],[133,[-1]]],19,[]],[[127,127],19],[[127,2],19],[[127,2],19],[[127,127],19],[[127,127],19],[[38,38],19],[[38,38],19],[[38,51],19],[[38,-1],19,60],[[38,2],19],[[38,[28,[27]]],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[[39,[-1]],-2],16,[],74],[[[39,[-1]],-2],16,[],74],[[134,21],[[24,[16,23]]]],[[134,21],[[24,[16,23]]]],[[135,21],[[24,[16,23]]]],[[135,21],[[24,[16,23]]]],[[[39,[-1]],21],[[24,[16,23]]],25],[[[136,[-1]],21],[[24,[16,23]]],25],[[[137,[-1]],21],[[24,[16,23]]],25],[[[130,[-1]],21],[[24,[16,23]]],25],[[[138,[-1]],21],[[24,[16,23]]],25],[[[139,[-1]],21],[[24,[16,23]]],25],[[[140,[-1]],21],[[24,[16,23]]],25],[[[129,[-1]],21],[[24,[16,23]]],25],[[[133,[-1]],21],[[24,[16,23]]],25],[[[132,[-1]],21],[[24,[16,23]]],25],[[[141,[-1]],21],[[24,[16,23]]],25],[[[126,[-1]],21],[[24,[16,23]]],25],[[[142,[-1]],21],[[24,[16,23]]],25],[[[143,[-1]],21],[[24,[16,23]]],25],[[[131,[-1]],21],[[24,[16,23]]],25],[[127,21],[[24,[16,23]]]],[[127,21],[[24,[16,23]]]],[[38,21],[[24,[16,23]]]],[[144,21],[[24,[16,23]]]],[[144,21],[[24,[16,23]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[127,127],[-1,-1,[]],[70,38],[4,38],[-1,-1,[]],[145,38],[78,38],[80,38],[127,38],[83,38],[79,38],[56,38],[38,38],[-1,-1,[]],[[[28,[27]]],[[24,[127,134]]]],[[[28,[27]]],[[24,[38,135]]]],[-1,[[39,[-2]]],74,[]],[[[28,[27]]],[[24,[127,134]]]],[-1,[[24,[38,135]]],[[32,[[28,[27]]]]]],[-1,38,[[32,[[28,[27]]]]]],[127,38],[2,127],[2,38],[2,[[24,[127,134]]]],[2,[[24,[38]]]],[2,[[24,[38,135]]]],[[[39,[-1]],-2],[[7,[-1]]],[],128],[[[126,[-1]]],-1,[]],[[[39,[-1]],-2],[[133,[-1]]],[],128],[[[39,[-1]],-2],[[7,[-1]]],[],128],[[[126,[-1]]],-1,[]],[[127,-1],16,37],[[38,-1],16,37],[[[39,[-1]],-2],-1,[],128],[[[39,[-1]],-2,-1],[[7,[-1]]],[],125],[[[141,[-1]],-1],-1,[]],[[[126,[-1]],-1],-1,[]],[[[141,[-1]],-1],[[126,[-1]]],[]],[[[126,[-1]],-1],[[131,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1]]],[[136,[-1]]],[]],[[[39,[-1]]],[[130,[-1]]],[]],[[[39,[-1]]],[[137,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[133,[-1]]],[[142,[-1]]],[]],[[[133,[-1]]],[[142,[-1]]],[]],[[[126,[-1]]],[[142,[-1]]],[]],[[[126,[-1]]],[[143,[-1]]],[]],[[[126,[-1]]],[[143,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[141,[-1]]],127,[]],[[[126,[-1]]],-1,[]],[[[39,[-1]]],19,[]],[38,19],[38,19],[[[39,[-1]]],[[136,[-1]]],[]],[[[133,[-1]]],[[142,[-1]]],[]],[[[126,[-1]]],[[142,[-1]]],[]],[[[39,[-1]]],[[137,[-1]]],[]],[[[126,[-1]]],[[143,[-1]]],[]],[[[132,[-1]]],127,[]],[[[141,[-1]]],127,[]],[[[126,[-1]]],127,[]],[[[39,[-1]]],[[138,[-1]]],[]],[[[39,[-1]]],56,[]],[[[39,[-1]]],56,[]],[38,56],[[],[[39,[38]]]],[[[136,[-1]]],7,[]],[[[137,[-1]]],7,[]],[[[130,[-1]]],7,[]],[[[138,[-1]]],7,[]],[[[139,[-1]]],7,[]],[[[140,[-1]]],7,[]],[[[129,[-1]]],7,[]],[[[142,[-1]]],7,[]],[[[143,[-1]]],7,[]],[[[131,[-1]]],[[7,[-1]]],[]],[[[142,[-1]]],7,[]],[[[143,[-1]]],7,[]],[[[132,[-1]],-1],-1,[]],[[[132,[-1]],-2],-1,[],43],[[38,[28,[27]]],[[7,[17]]]],[[38,2],[[7,[17]]]],[[38,51],[[7,[17]]]],[[38,-1],[[7,[17]]],60],[[38,38],[[7,[17]]]],[[38,38],[[7,[17]]]],[[[39,[-1]],-2],[[7,[-1]]],[],128],[[[126,[-1]]],-1,[]],[[[126,[-1]]],[[16,[127,-1]]],[]],[[[126,[-1]]],[[16,[127,[131,[-1]]]]],[]],[[[39,[-1]],56],16,[]],[[38,19],16],[[[136,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[137,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[130,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[138,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[139,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[140,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[129,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[142,[-1]]],[[16,[56,[7,[56]]]]],[]],[[[131,[-1]]],[[16,[56,[7,[56]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,[[24,[2,144]]]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[[39,[-1]],-2],[[24,[[132,[-1]],134]]],[],128],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[147,[-1,-2,146]]],[[24,[[39,[-3]]]]],[148,149],[],[[150,[-2]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[51,[[24,[127]]]],[2,[[24,[127]]]],[[[28,[27]]],[[24,[127]]]],[-1,[[24,[-2]]],[],[]],[51,[[24,[127]]]],[[[53,[27,52]]],[[24,[127]]]],[51,[[24,[38]]]],[[[53,[27,52]]],[[24,[38]]]],[51,[[24,[38]]]],[-1,[[24,[-2]]],[],[]],[2,[[24,[38]]]],[[[28,[27]]],[[24,[38]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[[[39,[-1]]],[[139,[-1]]],[]],[[[39,[-1]]],[[140,[-1]]],[]],[56,[[39,[-1]]],[]],0,[[-1,-2],16,[],[]],0,0,0,0,[[-1,-2],[],[],[]],[-1,[[0,[-1]]],85],[[-1,46],[[47,[[24,[16]]]]],[]],[-1,[[0,[-1,-2]]],85,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[151,[[24,[[152,[-1]],151]]],[105,106,68]],[[151,21],22],[[153,21],22],[[[152,[-1]],21],22,25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],0,[151,19],[-1,153,0],[[[45,[153]],46],47],[[[45,[151]],46],[[47,[[154,[16]]]]]],[[[45,[151]],46,155],[[47,[[154,[16]]]]]],[[[45,[151]],46],[[47,[[154,[16]]]]]],[[[45,[151]],46,[28,[27]]],[[47,[[154,[56]]]]]],[[[45,[151]],46,[28,[66]]],[[47,[[154,[56]]]]]],0,[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[45,[-1]],46],47,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]]],"c":[],"p":[[3,"Method",0],[15,"str"],[3,"StatusCode",0],[15,"u16"],[3,"Uri",0],[3,"Authority",1361],[4,"Option",1362],[3,"Request",0],[3,"Response",0],[3,"Builder",1363],[3,"Builder",1364],[3,"Builder",1365],[3,"Error",0],[3,"Connected",663],[3,"Version",0],[15,"tuple"],[4,"Ordering",1366],[8,"Default",1367],[15,"bool"],[3,"Extensions",1368],[3,"Formatter",1369],[6,"Result",1369],[3,"Error",1369],[4,"Result",1370],[8,"Debug",1369],[3,"PathAndQuery",1371],[15,"u8"],[15,"slice"],[3,"InvalidMethod",1372],[3,"InvalidStatusCode",1373],[3,"InvalidUri",1374],[8,"AsRef",1375],[3,"Parts",1363],[3,"Parts",1364],[3,"Parts",1374],[3,"InvalidUriParts",1374],[8,"Hasher",1376],[3,"HeaderValue",867],[3,"HeaderMap",867],[8,"Error",1377],[3,"Box",1378],[8,"HttpBody",316],[8,"FnOnce",1379],[8,"Display",1369],[3,"Pin",1380],[3,"Context",1381],[4,"Poll",1382],[3,"Port",1383],[3,"Scheme",1384],[3,"SizeHint",316],[3,"String",1385],[3,"Global",1386],[3,"Vec",1387],[3,"TypeId",1388],[3,"Sender",316],[15,"usize"],[3,"Bytes",316],[8,"Buf",316],[3,"BoxBody",1389],[8,"Sized",1390],[8,"Send",1390],[8,"Sync",1390],[3,"UnsyncBoxBody",1389],[3,"Chain",1391],[3,"Body",316],[3,"IoSlice",1392],[3,"Data",1393],[8,"Unpin",1390],[3,"BytesMut",1394],[15,"u64"],[4,"Cow",1395],[3,"Custom",1396],[3,"ByteStr",1397],[8,"IntoIterator",1398],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u32"],[3,"MapData",1399],[8,"FnMut",1379],[3,"MapErr",1400],[6,"Result",0],[3,"Reader",1401],[8,"RangeBounds",1402],[3,"Take",1403],[3,"Trailers",1393],[3,"Builder",500],[3,"Client",500],[8,"Connect",663],[8,"Clone",1404],[3,"HttpConnector",663],[8,"Future",1405],[8,"Executor",1311],[3,"ResponseFuture",500],[8,"Into",1375],[3,"Duration",1406],[3,"SendRequest",576],[3,"Builder",576],[3,"Connection",576],[8,"AsyncRead",1407],[8,"AsyncWrite",1408],[3,"ResponseFuture",576],[3,"Parts",576],[3,"CaptureConnection",663],[3,"HttpInfo",663],[8,"Deref",1409],[4,"SocketAddr",1410],[4,"IpAddr",1411],[3,"Ipv4Addr",1411],[3,"Ipv6Addr",1411],[3,"Name",739],[3,"GaiResolver",739],[3,"GaiFuture",739],[3,"GaiAddrs",739],[3,"InvalidNameError",739],[3,"Error",1412],[3,"Connect",809],[3,"ReasonPhrase",821],[3,"Protocol",821],[8,"IntoHeaderName",867],[3,"OccupiedEntry",867],[3,"HeaderName",867],[8,"AsHeaderName",867],[3,"Drain",867],[3,"IntoIter",867],[3,"ValueDrain",867],[4,"Entry",867],[3,"GetAll",867],[3,"InvalidHeaderName",867],[3,"InvalidHeaderValue",867],[3,"Iter",867],[3,"IterMut",867],[3,"Keys",867],[3,"Values",867],[3,"ValuesMut",867],[3,"VacantEntry",867],[3,"ValueIter",867],[3,"ValueIterMut",867],[3,"ToStrError",867],[15,"isize"],[3,"RandomState",1413],[3,"HashMap",1413],[8,"Eq",1366],[8,"Hash",1376],[8,"TryFrom",1375],[3,"Upgraded",1321],[3,"Parts",1321],[3,"OnUpgrade",1321],[6,"Result",1412],[3,"ReadBuf",1414],[8,"Connection",663],[8,"Service",1313]]},\
"hyper_rustls":{"doc":"hyper-rustls","t":"INNDDELLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ConfigBuilderExt","Http","Https","HttpsConnector","HttpsConnectorBuilder","MaybeHttpsStream","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builderstates","call","clone","clone_into","connected","default","enforce_https","fmt","fmt","from","from","from","from","from","from","from","https_only","https_or_http","into","into","into","new","poll_flush","poll_read","poll_ready","poll_shutdown","poll_write","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_server_name","with_tls_config","wrap_connector","WantsProtocols1","WantsProtocols2","WantsSchemes","WantsTlsConfig","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"hyper_rustls"],[52,"hyper_rustls::builderstates"],[84,"http::uri"],[85,"tower_service"],[86,"core::clone"],[87,"hyper::client::connect"],[88,"tokio::io::async_read"],[89,"tokio::io::async_write"],[90,"hyper::client::connect"],[91,"core::fmt"],[92,"core::fmt"],[93,"rustls::client::client_conn"],[94,"alloc::sync"],[95,"core::convert"],[96,"core::pin"],[97,"core::task::wake"],[98,"std::io::error"],[99,"core::result"],[100,"core::task::poll"],[101,"tokio::io::read_buf"],[102,"core::any"],[103,"alloc::string"]],"d":["Methods for configuring roots","A stream over plain text.","A stream protected with TLS.","A Connector for the <code>https</code> scheme.","A builder for an <code>HttpsConnector</code>","A stream that might be protected with TLS.","","","","","","","The various states of the <code>HttpsConnectorBuilder</code>","","","","","","Force the use of HTTPS when connecting.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Enforce the use of HTTPS when connecting","Allow both HTTPS and HTTP when connecting","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>ConnectorBuilder</code>","","","","","","","","","","","","","","","","Override server name for the TLS stack","Passes a rustls <code>ClientConfig</code> to configure the TLS …","This wraps an arbitrary low-level connector into an …","State of a builder that needs to have some protocols …","State of a builder with HTTP1 enabled, that may have some …","State of a builder that needs schemes (https:// and …","State of a builder that needs a TLS client config next","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,6,6,0,0,0,13,6,1,13,6,1,0,1,1,1,6,13,1,6,1,13,6,6,6,6,1,1,13,13,13,6,1,13,6,6,1,6,6,1,13,6,1,13,6,1,13,6,1,13,13,13,0,0,0,0,12,22,23,35,12,22,23,35,12,22,23,35,12,22,23,35,12,22,23,35,12,22,23,35,12,22,23,35],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[-1]],2],[],[[3,[2]]]],[[[1,[-1]]],[[1,[-1]]],4],[[-1,-2],5,[],[]],[[[6,[-1]]],7,[8,9,10,11]],[[],[[13,[12]]]],[[[1,[-1]]],5,[]],[[[6,[-1]],14],15,16],[[[1,[-1]],14],15,[]],[-1,-1,[]],[[[17,[-1]]],[[6,[-1]]],[]],[-1,[[6,[-1]]],[]],[-1,-1,[]],[18,-1,[]],[-1,-1,[]],[[[5,[-1,-2]]],[[1,[-1]]],[],[[21,[[20,[19]]]]]],[[[13,[22]]],[[13,[23]]]],[[[13,[22]]],[[13,[23]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[13,[12]]]],[[[24,[[6,[-1]]]],25],[[28,[[27,[5,26]]]]],[9,8,11]],[[[24,[[6,[-1]]]],25,29],[[28,[[27,[5,26]]]]],[8,9,11]],[[[1,[-1]],25],[[28,[[27,[5]]]]],[[3,[2]]]],[[[24,[[6,[-1]]]],25],[[28,[[27,[5,26]]]]],[9,8,11]],[[[24,[[6,[-1]]]],25,[31,[30]]],[[28,[[27,[32,26]]]]],[9,8,11]],[-1,-2,[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[13,[23]],34],[[13,[23]]]],[[[13,[12]],19],[[13,[22]]]],[[[13,[35]],-1],[[1,[-1]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]]],"c":[],"p":[[3,"HttpsConnector",0],[3,"Uri",84],[8,"Service",85],[8,"Clone",86],[15,"tuple"],[4,"MaybeHttpsStream",0],[3,"Connected",87],[8,"AsyncRead",88],[8,"AsyncWrite",89],[8,"Connection",87],[8,"Unpin",90],[3,"WantsTlsConfig",52],[3,"HttpsConnectorBuilder",0],[3,"Formatter",91],[6,"Result",91],[8,"Debug",91],[3,"TlsStream",92],[15,"never"],[3,"ClientConfig",93],[3,"Arc",94],[8,"Into",95],[3,"WantsSchemes",52],[3,"WantsProtocols1",52],[3,"Pin",96],[3,"Context",97],[3,"Error",98],[4,"Result",99],[4,"Poll",100],[3,"ReadBuf",101],[15,"u8"],[15,"slice"],[15,"usize"],[3,"TypeId",102],[3,"String",103],[3,"WantsProtocols2",52]]},\
"idna":{"doc":"This Rust crate implements IDNA per the WHATWG URL Standard…","t":"DDDLLLLLLLLLLLLFFFLLLLLLLLLALLLLLLLLLLLLLLLLLLLLFFFF","n":["Config","Errors","Idna","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_hyphens","clone","clone_into","default","default","default","domain_to_ascii","domain_to_ascii_strict","domain_to_unicode","fmt","fmt","from","from","from","into","into","into","new","punycode","to_ascii","to_ascii","to_ascii_inner","to_owned","to_string","to_unicode","to_unicode","transitional_processing","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","use_idna_2008_rules","use_std3_ascii_rules","verify_dns_length","decode","decode_to_string","encode","encode_str"],"q":[[0,"idna"],[48,"idna::punycode"],[52,"alloc::string"],[53,"core::result"],[54,"core::fmt"],[55,"core::fmt"],[56,"alloc::vec"],[57,"core::option"]],"d":["","Errors recorded during UTS #46 processing.","","","","","","","","","","","","","","The domain to ASCII algorithm.","The domain to ASCII algorithm, with the <code>beStrict</code> flag set.","The domain to Unicode algorithm.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Punycode (RFC 3492) implementation.","http://www.unicode.org/reports/tr46/#ToASCII","http://www.unicode.org/reports/tr46/#ToASCII","","","","http://www.unicode.org/reports/tr46/#ToUnicode","http://www.unicode.org/reports/tr46/#ToUnicode","","","","","","","","","","","","","","Convert Punycode to Unicode.","Convert Punycode to an Unicode <code>String</code>.","Convert Unicode to Punycode.","Convert an Unicode <code>str</code> to Punycode."],"i":[0,0,0,4,1,5,4,1,5,1,1,1,4,1,5,0,0,0,5,5,4,1,5,4,1,5,4,0,4,1,4,1,5,4,1,1,4,1,5,4,1,5,4,1,5,1,1,1,0,0,0,0],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],1],[1,1],[[-1,-2],3,[],[]],[[],4],[[],1],[[],5],[6,[[8,[7,5]]]],[6,[[8,[7,5]]]],[6,[[3,[7,[8,[3,5]]]]]],[[5,9],10],[[5,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,4],0,[[4,6,7],[[8,[3,5]]]],[[1,6],[[8,[7,5]]]],[[4,6,7],5],[-1,-2,[],[]],[-1,7,[]],[[4,6,7],[[8,[3,5]]]],[[1,6],[[3,[7,[8,[3,5]]]]]],[[1,2],1],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[1,2],1],[[1,2],1],[[1,2],1],[6,[[14,[[13,[12]]]]]],[6,[[14,[7]]]],[[[15,[12]]],[[14,[7]]]],[6,[[14,[7]]]]],"c":[],"p":[[3,"Config",0],[15,"bool"],[15,"tuple"],[3,"Idna",0],[3,"Errors",0],[15,"str"],[3,"String",52],[4,"Result",53],[3,"Formatter",54],[6,"Result",54],[3,"TypeId",55],[15,"char"],[3,"Vec",56],[4,"Option",57],[15,"slice"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":"ICCKOOAADEDDDDDDQDINDNDQDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Equivalent","IndexMap","IndexSet","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","count","count","default","drain","entry","eq","equivalent","equivalent","extend","extend","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_index_of","get_key_value","get_mut","get_mut","hasher","index","index","index","index","index","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","or_default","or_insert","or_insert_with","or_insert_with_key","pop","remove","remove","remove_entry","remove_entry","reserve","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sort_unstable_by","sort_unstable_keys","sorted_by","sorted_unstable_by","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","equivalent","equivalent","extend","extend","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index_of","hasher","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","last","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","pop","remove","replace","replace_full","reserve","retain","reverse","rfold","rfold","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sort_unstable","sort_unstable_by","sorted_by","sorted_unstable_by","split_off","sub","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":[[0,"indexmap"],[8,"indexmap::map"],[336,"indexmap::set"],[547,"core::cmp"],[548,"core::hash"],[549,"core::hash"],[550,"core::clone"],[551,"core::iter::traits::collect"],[552,"core::marker"],[553,"core::default"],[554,"core::ops::range"],[555,"core::cmp"],[556,"core::fmt"],[557,"core::fmt"],[558,"core::ops::function"],[559,"core::any"]],"d":["Key equivalence trait.","","","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An owning iterator over the keys of a <code>IndexMap</code>.","An owning iterator over the values of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part of …","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IndexMap</code> from the sequence of key-value pairs in …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, if …","Gets a mutable reference to the entry’s value in the map.","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be inserted.","Returns a reference to the value at the supplied <code>index</code>.","Returns a reference to the value corresponding to the …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value at the supplied …","Sets the value of the entry to <code>value</code>, and returns the entry…","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Return an owning iterator over the keys of the map, in …","Converts into a mutable reference to the entry’s value …","Return an owning iterator over the values of the map, in …","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the key-value pairs of the map, in …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map, in their order","Get the last key-value pair","","","","","","","","","","Get the last key-value pair, with mutable access to the …","Return the number of key-value pairs in the map.","","","","","","","","","","Moves the position of a key-value pair from one index to …","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if it …","Inserts the result of the <code>call</code> function with a reference …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep those …","Scan through each key-value pair in the map and keep those …","","Reverses the order of the map’s key-value pairs in place.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map with a lower limit.","Shrink the capacity of the map as much as possible.","","","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by-value …","Sort the key-value pairs of the map and return a by-value …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>.","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>IndexSet</code>…","Returns the set intersection, cloned into a new set.","Returns the set union, cloned into a new set.","Returns the set symmetric-difference, cloned into a new …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","","","Get the first value","","","","","","","","","","","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return item index, if it exists in the set","Return a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…","Returns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…","Return an iterator over the values of the set, in their …","Get the last value","","","","Return the number of elements in the set.","","","","Moves the position of a value from one index to another by …","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Scan through each value in the set and keep those where the","Reverses the order of the set’s values in place.","","","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set with a lower limit.","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by-value iterator …","Sort the values of the set and return a by-value iterator …","Splits the collection into two at the given index.","Returns the set difference, cloned into a new set.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>."],"i":[0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,6,0,6,0,48,0,0,48,2,6,29,6,33,2,11,15,12,16,17,13,18,19,20,29,6,33,2,11,15,12,16,17,13,18,19,20,2,2,2,11,12,13,2,2,11,12,13,11,15,12,16,17,13,18,19,20,2,11,15,12,16,17,13,18,19,20,2,2,2,2,2,2,2,2,2,2,29,6,33,2,11,15,12,16,17,13,18,19,20,29,6,33,2,2,11,15,12,16,17,13,18,19,20,2,29,2,2,2,48,2,2,2,2,2,29,2,2,29,6,33,2,2,2,2,29,33,2,2,29,6,33,2,11,15,12,16,17,13,18,19,20,2,2,2,11,15,12,16,17,13,18,19,20,33,2,29,2,2,2,2,29,6,33,2,2,11,15,12,16,17,13,18,19,20,2,2,11,15,12,16,17,13,18,19,20,2,2,11,15,12,16,17,13,18,19,20,11,15,12,16,17,13,18,19,20,11,15,12,16,17,13,18,19,20,11,15,12,16,17,13,18,19,20,6,6,6,6,2,29,2,29,2,2,2,48,2,2,29,2,29,2,2,2,2,2,11,15,12,16,17,13,18,19,20,2,2,2,2,2,2,2,2,29,2,29,2,2,2,2,11,12,13,2,29,6,33,2,11,15,12,16,17,13,18,19,20,29,6,33,2,11,15,12,16,17,13,18,19,20,29,6,33,2,11,15,12,16,17,13,18,19,20,2,2,2,2,2,0,0,0,0,0,0,0,0,40,40,40,40,46,41,47,42,43,44,45,40,46,41,47,42,43,44,45,40,40,40,41,42,43,44,45,40,40,41,42,43,44,45,46,41,47,40,46,41,47,40,40,40,40,40,40,40,40,40,40,46,41,47,42,43,44,45,44,45,40,40,46,41,47,42,43,44,45,40,40,40,40,40,40,40,40,40,40,40,46,41,47,42,43,44,45,40,40,46,41,47,42,43,44,45,40,40,40,40,40,40,46,41,47,40,46,41,47,40,40,46,41,47,42,43,44,45,46,41,47,42,43,44,45,46,41,47,46,41,47,40,40,40,40,40,40,40,44,45,40,40,40,40,40,40,46,41,47,42,43,44,45,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,42,43,44,45,40,40,46,41,47,42,43,44,45,40,46,41,47,42,43,44,45,40,46,41,47,42,43,44,45,40,40,40,40],"f":[0,0,0,[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[6,[-1,-2]],-3],[[6,[-1,-2]]],[],[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2,-3]]],8,[],[],[]],[[[2,[-1,-2,-3]]],9,[],[],[]],[[[2,[-1,-2,-3]]],[[2,[-1,-2,-3]]],10,10,10],[[[11,[-1,-2]]],[[11,[-1,-2]]],[],[]],[[[12,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[2,[-1,-2,-3]],[2,[-1,-2,-3]]],9,10,10,10],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[11,[-1,-2]]],-3,[],[],14],[[[15,[-1,-2]]],-3,[],[],14],[[[12,[-1,-2]]],-3,[],[],14],[[[16,[-1,-2]]],-3,[],[],14],[[[17,[-1,-2]]],-3,[],[],14],[[[13,[-1,-2]]],-3,[],[],14],[[[18,[-1,-2]]],-3,[],[],14],[[[19,[-1,-2]]],-3,[],[],14],[[[20,[-1,-2]]],-3,[],[],14],[[[2,[-1,-2,-3]],-4],1,[4,3],[],5,[4,[21,[-1]],22]],[[[11,[-1,-2]]],8,[],[]],[[[15,[-1,-2]]],8,[],[]],[[[12,[-1,-2]]],8,[],[]],[[[16,[-1,-2]]],8,[],[]],[[[17,[-1,-2]]],8,[],[]],[[[13,[-1,-2]]],8,[],[]],[[[18,[-1,-2]]],8,[],[]],[[[19,[-1,-2]]],8,[],[]],[[[20,[-1,-2]]],8,[],[]],[[],[[2,[-1,-2,-3]]],[],[],23],[[[2,[-1,-2,-3]],-4],[[20,[-1,-2]]],[],[],[],[[24,[8]]]],[[[2,[-1,-2,-3]],-1],[[6,[-1,-2]]],[4,3],[],5],[[[2,[-1,-3,-4]],[2,[-1,-2,-5]]],1,[4,3],[],[[25,[-2]]],5,5],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[[2,[-1,-2,-3]],-4],9,[4,3,26],26,5,27],[[[2,[-1,-2,-3]],-4],9,[4,3],[],5,27],[[[2,[-1,-2,-3]]],[[28,[[9,[-1,-2]]]]],[],[],[]],[[[2,[-1,-2,-3]]],[[28,[[9,[-1,-2]]]]],[],[],[]],[[[29,[-1,-2]],30],31,32,32],[[[6,[-1,-2]],30],31,32,32],[[[33,[-1,-2]],30],31,32,[]],[[[2,[-1,-2,-3]],30],31,32,32,[]],[[[11,[-1,-2]],30],31,32,[]],[[[15,[-1,-2]],30],31,32,[]],[[[12,[-1,-2]],30],31,[],32],[[[16,[-1,-2]],30],31,[],32],[[[17,[-1,-2]],30],31,[],32],[[[13,[-1,-2]],30],31,32,32],[[[18,[-1,-2]],30],31,32,32],[[[19,[-1,-2]],30],31,32,32],[[[20,[-1,-2]],30],31,32,32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[34,[[9,[-1,-2]]]]],[[2,[-1,-2,35]]],[4,3],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[2,[-2,-3,-4]]],27,[4,3],[],[5,23]],[[[29,[-1,-2]]],-2,[],[]],[[[2,[-1,-2,-3]],-4],[[28,[-2]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[8,-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[8,-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[-1,-2],[[28,[[9,[8]]]]],[],[4,21,22]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[8,-1,-2]]]]],[3,4],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],8],[[28,[[9,[-1,-2]]]]],[],[],[]],[[[2,[-1,-2,-3]],8],[[28,[[9,[-1,-2]]]]],[],[],[]],[[[2,[-1,-2,-3]],-4],[[28,[8]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[[29,[-1,-2]]],-2,[],[]],[[[2,[-1,-2,-3]],-4],[[28,[-2]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]]],-3,[],[],[]],[[[29,[-1,-2]]],8,[],[]],[[[6,[-1,-2]]],8,[],[]],[[[33,[-1,-2]]],8,[],[]],[[[2,[-1,-2,-3]],8],-2,[],[],[]],[[[2,[-1,-2,-3]],-4],-2,[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],-4],-2,[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],8],-2,[],[],[]],[[[29,[-1,-2]],-2],-2,[],[]],[[[33,[-1,-2]],-2],-2,[],[]],[[[2,[-1,-2,-3]],-1,-2],[[28,[-2]]],[4,3],[],5],[[[2,[-1,-2,-3]],-1,-2],[[9,[8,[28,[-2]]]]],[4,3],[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2,-3]]],[],[],[],[]],[[[2,[-1,-2,-3]]],[],[],[],[]],[[[2,[-1,-2,-3]]],[],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1,-2]]],-1,[],[]],[[[2,[-1,-2,-3]]],[[15,[-1,-2]]],[],[],[]],[[[29,[-1,-2]]],-2,[],[]],[[[2,[-1,-2,-3]]],[[17,[-1,-2]]],[],[],[]],[[[2,[-1,-2,-3]]],1,[],[],[]],[[[2,[-1,-2,-3]]],[[13,[-1,-2]]],[],[],[]],[[[2,[-1,-2,-3]]],[[18,[-1,-2]]],[],[],[]],[[[29,[-1,-2]]],-1,[],[]],[[[6,[-1,-2]]],-1,[],[]],[[[33,[-1,-2]]],-1,[],[]],[[[2,[-1,-2,-3]]],[[11,[-1,-2]]],[],[],[]],[[[2,[-1,-2,-3]]],[[28,[[9,[-1,-2]]]]],[],[],[]],[[[11,[-1,-2]]],28,[],[]],[[[15,[-1,-2]]],28,[],[]],[[[12,[-1,-2]]],28,[],[]],[[[16,[-1,-2]]],28,[],[]],[[[17,[-1,-2]]],28,[],[]],[[[13,[-1,-2]]],28,[],[]],[[[18,[-1,-2]]],28,[],[]],[[[19,[-1,-2]]],28,[],[]],[[[20,[-1,-2]]],28,[],[]],[[[2,[-1,-2,-3]]],[[28,[[9,[-1,-2]]]]],[],[],[]],[[[2,[-1,-2,-3]]],8,[],[],[]],[[[11,[-1,-2]]],8,[],[]],[[[15,[-1,-2]]],8,[],[]],[[[12,[-1,-2]]],8,[],[]],[[[16,[-1,-2]]],8,[],[]],[[[17,[-1,-2]]],8,[],[]],[[[13,[-1,-2]]],8,[],[]],[[[18,[-1,-2]]],8,[],[]],[[[19,[-1,-2]]],8,[],[]],[[[20,[-1,-2]]],8,[],[]],[[[2,[-1,-2,-3]],8,8],9,[],[],[]],[[],[[2,[-1,-2]]],[],[]],[[[11,[-1,-2]]],28,[],[]],[[[15,[-1,-2]]],28,[],[]],[[[12,[-1,-2]]],28,[],[]],[[[16,[-1,-2]]],28,[],[]],[[[17,[-1,-2]]],28,[],[]],[[[13,[-1,-2]]],28,[],[]],[[[18,[-1,-2]]],28,[],[]],[[[19,[-1,-2]]],28,[],[]],[[[20,[-1,-2]]],28,[],[]],[[[11,[-1,-2]]],28,[],[]],[[[15,[-1,-2]]],28,[],[]],[[[12,[-1,-2]]],28,[],[]],[[[16,[-1,-2]]],28,[],[]],[[[17,[-1,-2]]],28,[],[]],[[[13,[-1,-2]]],28,[],[]],[[[18,[-1,-2]]],28,[],[]],[[[19,[-1,-2]]],28,[],[]],[[[20,[-1,-2]]],28,[],[]],[[[11,[-1,-2]],8],28,[],[]],[[[15,[-1,-2]],8],28,[],[]],[[[12,[-1,-2]],8],28,[],[]],[[[16,[-1,-2]],8],28,[],[]],[[[17,[-1,-2]],8],28,[],[]],[[[13,[-1,-2]],8],28,[],[]],[[[18,[-1,-2]],8],28,[],[]],[[[19,[-1,-2]],8],28,[],[]],[[[20,[-1,-2]],8],28,[],[]],[[[11,[-1,-2]],8],28,[],[]],[[[15,[-1,-2]],8],28,[],[]],[[[12,[-1,-2]],8],28,[],[]],[[[16,[-1,-2]],8],28,[],[]],[[[17,[-1,-2]],8],28,[],[]],[[[13,[-1,-2]],8],28,[],[]],[[[18,[-1,-2]],8],28,[],[]],[[[19,[-1,-2]],8],28,[],[]],[[[20,[-1,-2]],8],28,[],[]],[[[6,[-1,-2]]],-2,[],23],[[[6,[-1,-2]],-2],-2,[],[]],[[[6,[-1,-2]],-3],-2,[],[],7],[[[6,[-1,-2]],-3],-2,[],[],7],[[[2,[-1,-2,-3]]],[[28,[[9,[-1,-2]]]]],[4,3],[],5],[[[29,[-1,-2]]],-2,[],[]],[[[2,[-1,-2,-3]],-4],[[28,[-2]]],[4,3],[],5,[4,[21,[-1]],22]],[[[29,[-1,-2]]],[[9,[-1,-2]]],[],[]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],8],9,[4,3],[],5],[[[2,[-1,-2,-3]],-4],9,[4,3],[],5,36],[[-1,-2],9,[],36],[[[2,[-1,-2,-3]],-4],9,[3,4],[],5,36],[[[2,[-1,-2,-3]]],9,[4,3],[],5],[[[29,[-1,-2]]],-2,[],[]],[[[2,[-1,-2,-3]],-4],[[28,[-2]]],[4,3],[],5,[4,[21,[-1]],22]],[[[29,[-1,-2]]],[[9,[-1,-2]]],[],[]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[8,-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],8],[[28,[[9,[-1,-2]]]]],[],[],[]],[[[2,[-1,-2,-3]],8],9,[4,3],[],5],[[[2,[-1,-2,-3]]],9,[4,3],[],5],[[[11,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[15,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[12,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[16,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[17,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[13,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[18,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[19,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[20,[-1,-2]]],[[9,[8,[28,[8]]]]],[],[]],[[[2,[-1,-2,-3]],-4],9,[4,3],[],5,36],[[[2,[-1,-2,-3]]],9,[37,4,3],[],5],[[[2,[-1,-2,-3]],-4],9,[4,3],[],5,36],[[[2,[-1,-2,-3]]],9,[37,4,3],[],5],[[[2,[-1,-2,-3]],-4],[[19,[-1,-2]]],[4,3],[],5,36],[[[2,[-1,-2,-3]],-4],[[19,[-1,-2]]],[4,3],[],5,36],[[[2,[-1,-2,-3]],8],[[2,[-1,-2,-3]]],[],[],10],[[[2,[-1,-2,-3]],8,8],9,[],[],[]],[[[29,[-1,-2]]],-2,[],[]],[[[2,[-1,-2,-3]],-4],[[28,[-2]]],[4,3],[],5,[4,[21,[-1]],22]],[[[29,[-1,-2]]],[[9,[-1,-2]]],[],[]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],-4],[[28,[[9,[8,-1,-2]]]]],[4,3],[],5,[4,[21,[-1]],22]],[[[2,[-1,-2,-3]],8],[[28,[[9,[-1,-2]]]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2,-3]],8],9,[],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[2,[-1,-2,-3]]],[[12,[-1,-2]]],[],[],[]],[[[2,[-1,-2,-3]]],[[16,[-1,-2]]],[],[],[]],[8,[[2,[-1,-2]]],[],[]],[[8,-1],[[2,[-2,-3,-1]]],[],[],[]],[-1,[[2,[-2,-3,-1]]],[],[],[]],0,0,0,0,0,0,0,0,[[[40,[-1,-2]],[40,[-1,-3]]],[],[3,4,10],[5,23],5],[[[40,[-1,-2]],[40,[-1,-3]]],[],[3,4,10],[5,23],5],[[[40,[-1,-2]],[40,[-1,-3]]],[],[3,4,10],[5,23],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2]]],8,[],[]],[[[40,[-1,-2]]],9,[],[]],[[[40,[-1,-2]]],[[40,[-1,-2]]],10,10],[[[41,[-1]]],[[41,[-1]]],[]],[[[42,[-1,-2]]],[[42,[-1,-2]]],[],[]],[[[43,[-1,-2]]],[[43,[-1,-2]]],[],[]],[[[44,[-1,-2,-3]]],[[44,[-1,-2,-3]]],[],[],[]],[[[45,[-1,-2]]],[[45,[-1,-2]]],[],[]],[[[40,[-1,-2]],[40,[-1,-2]]],9,10,10],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[46,[-1]]],-2,[],14],[[[41,[-1]]],-2,[],14],[[[47,[-1]]],-2,[],14],[[[40,[-1,-2]],-3],1,[4,3],5,[4,[21,[-1]],22]],[[[46,[-1]]],8,[]],[[[41,[-1]]],8,[]],[[[47,[-1]]],8,[]],[[],[[40,[-1,-2]]],[],23],[[[40,[-1,-2]],[40,[-1,-3]]],[[42,[-1,-3]]],[4,3],5,5],[[[40,[-1,-2]],-3],[[47,[-1]]],[],[],[[24,[8]]]],[[[40,[-1,-2]],[40,[-1,-3]]],1,[4,3],5,5],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[[40,[-1,-2]],-3],9,[4,3],5,27],[[[40,[-1,-2]],-3],9,[4,3,26],5,27],[[[40,[-1,-2]]],[[28,[-1]]],[],[]],[[[40,[-1,-2]],30],31,32,[]],[[[46,[-1]],30],31,32],[[[41,[-1]],30],31,32],[[[47,[-1]],30],31,32],[[[42,[-1,-2]],30],31,[32,3,4],5],[[[43,[-1,-2]],30],31,[32,3,4],5],[[[44,[-1,-2,-3]],30],31,[32,3,4],5,5],[[[45,[-1,-2]],30],31,[32,3,4],5],[[[44,[-1,-2,-3]],-4,-5],-4,[3,4],5,5,[],36],[[[45,[-1,-2]],-3,-4],-3,[3,4],5,[],36],[[[34,[-1]]],[[40,[-1,35]]],[3,4]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[40,[-2,-3]]],27,[4,3],[5,23]],[[[40,[-1,-2]],-3],[[28,[-1]]],[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],-3],[[28,[[9,[8,-1]]]]],[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],8],[[28,[-1]]],[],[]],[[[40,[-1,-2]],-3],[[28,[8]]],[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]]],-2,[],[]],[[[40,[-1,-2]],8],-1,[],[]],[[[40,[-1,-2]],-1],1,[4,3],5],[[[40,[-1,-2]],-1],[[9,[8,1]]],[4,3],5],[[[40,[-1,-2]],[40,[-1,-3]]],[[43,[-1,-3]]],[4,3],5,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2]]],[],[],[]],[[[40,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2]],[40,[-1,-3]]],1,[3,4],5,5],[[[40,[-1,-2]]],1,[],[]],[[[40,[-1,-2]],[40,[-1,-3]]],1,[3,4],5,5],[[[40,[-1,-2]],[40,[-1,-3]]],1,[3,4],5,5],[[[40,[-1,-2]]],[[41,[-1]]],[],[]],[[[40,[-1,-2]]],[[28,[-1]]],[],[]],[[[46,[-1]]],28,[]],[[[41,[-1]]],28,[]],[[[47,[-1]]],28,[]],[[[40,[-1,-2]]],8,[],[]],[[[46,[-1]]],8,[]],[[[41,[-1]]],8,[]],[[[47,[-1]]],8,[]],[[[40,[-1,-2]],8,8],9,[],[]],[[],[[40,[-1]]],[]],[[[46,[-1]]],28,[]],[[[41,[-1]]],28,[]],[[[47,[-1]]],28,[]],[[[42,[-1,-2]]],28,[3,4],5],[[[43,[-1,-2]]],28,[3,4],5],[[[44,[-1,-2,-3]]],28,[3,4],5,5],[[[45,[-1,-2]]],28,[3,4],5],[[[46,[-1]]],28,[]],[[[41,[-1]]],28,[]],[[[47,[-1]]],28,[]],[[[42,[-1,-2]]],28,[3,4],5],[[[43,[-1,-2]]],28,[3,4],5],[[[44,[-1,-2,-3]]],28,[3,4],5,5],[[[45,[-1,-2]]],28,[3,4],5],[[[46,[-1]],8],28,[]],[[[41,[-1]],8],28,[]],[[[47,[-1]],8],28,[]],[[[46,[-1]],8],28,[]],[[[41,[-1]],8],28,[]],[[[47,[-1]],8],28,[]],[[[40,[-1,-2]]],[[28,[-1]]],[4,3],5],[[[40,[-1,-2]],-3],1,[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],-1],[[28,[-1]]],[4,3],5],[[[40,[-1,-2]],-1],[[9,[8,[28,[-1]]]]],[4,3],5],[[[40,[-1,-2]],8],9,[4,3],5],[[[40,[-1,-2]],-3],9,[4,3],5,36],[[[40,[-1,-2]]],9,[4,3],5],[[[44,[-1,-2,-3]],-4,-5],-4,[3,4],5,5,[],36],[[[45,[-1,-2]],-3,-4],-3,[3,4],5,[],36],[[[40,[-1,-2]],-3],1,[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],-3],[[28,[[9,[8,-1]]]]],[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],8],[[28,[-1]]],[],[]],[[[40,[-1,-2]],-3],[[28,[-1]]],[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],8],9,[4,3],5],[[[40,[-1,-2]]],9,[4,3],5],[[[46,[-1]]],[[9,[8,[28,[8]]]]],[]],[[[41,[-1]]],[[9,[8,[28,[8]]]]],[]],[[[47,[-1]]],[[9,[8,[28,[8]]]]],[]],[[[42,[-1,-2]]],[[9,[8,[28,[8]]]]],[3,4],5],[[[43,[-1,-2]]],[[9,[8,[28,[8]]]]],[3,4],5],[[[44,[-1,-2,-3]]],[[9,[8,[28,[8]]]]],[3,4],5,5],[[[45,[-1,-2]]],[[9,[8,[28,[8]]]]],[3,4],5],[[[40,[-1,-2]]],9,[37,4,3],5],[[[40,[-1,-2]],-3],9,[4,3],5,36],[[[40,[-1,-2]]],9,[37,4,3],5],[[[40,[-1,-2]],-3],9,[4,3],5,36],[[[40,[-1,-2]],-3],[[46,[-1]]],[4,3],5,36],[[[40,[-1,-2]],-3],[[46,[-1]]],[4,3],5,36],[[[40,[-1,-2]],8],[[40,[-1,-2]]],[],10],[[[40,[-1,-2]],[40,[-1,-3]]],[],[3,4,10],[5,23],5],[[[40,[-1,-2]],8,8],9,[],[]],[[[40,[-1,-2]],-3],1,[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],-3],[[28,[[9,[8,-1]]]]],[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],8],[[28,[-1]]],[],[]],[[[40,[-1,-2]],-3],[[28,[-1]]],[4,3],5,[4,[21,[-1]],22]],[[[40,[-1,-2]],[40,[-1,-3]]],[[44,[-1,-2,-3]]],[4,3],5,5],[[[40,[-1,-2]],-3],[[28,[-1]]],[4,3],5,[4,[21,[-1]],22]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2]],8],9,[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[40,[-1,-2]],[40,[-1,-3]]],[[45,[-1,-2]]],[4,3],5,5],[8,[[40,[-1]]],[]],[[8,-1],[[40,[-2,-1]]],[],[]],[-1,[[40,[-2,-1]]],[],[]]],"c":[],"p":[[15,"bool"],[3,"IndexMap",8],[8,"Eq",547],[8,"Hash",548],[8,"BuildHasher",548],[4,"Entry",8],[8,"FnOnce",549],[15,"usize"],[15,"tuple"],[8,"Clone",550],[3,"Keys",8],[3,"Values",8],[3,"Iter",8],[8,"FromIterator",551],[3,"IntoKeys",8],[3,"ValuesMut",8],[3,"IntoValues",8],[3,"IterMut",8],[3,"IntoIter",8],[3,"Drain",8],[8,"Equivalent",0],[8,"Sized",552],[8,"Default",553],[8,"RangeBounds",554],[8,"PartialEq",547],[8,"Copy",552],[8,"IntoIterator",551],[4,"Option",555],[3,"OccupiedEntry",8],[3,"Formatter",556],[6,"Result",556],[8,"Debug",556],[3,"VacantEntry",8],[15,"array"],[3,"RandomState",557],[8,"FnMut",549],[8,"Ord",547],[4,"Result",558],[3,"TypeId",559],[3,"IndexSet",336],[3,"Iter",336],[3,"Difference",336],[3,"Intersection",336],[3,"SymmetricDifference",336],[3,"Union",336],[3,"IntoIter",336],[3,"Drain",336],[8,"MutableKeys",8]]},\
"inout":{"doc":"Collection of custom reference types for code generic over …","t":"DDDDDDDDDCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["InOut","InOutBuf","InOutBufIter","InOutBufReserved","IntoArrayError","NotEqualError","OutIsTooSmallError","PadError","PaddedInOutBuf","block_padding","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_in","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut_slice","from_raw","from_raw","from_raw","from_ref_mut","from_slices","get","get","get_blocks","get_in","get_in","get_in","get_in_len","get_out","get_out","get_out","get_out_len","get_tail_block","into","into","into","into","into","into","into","into","into","into_buf","into_chunks","into_iter","into_iter","into_out","into_out","into_padded_blocks","into_raw","into_raw","into_raw","is_empty","len","new","next","reborrow","reborrow","split_at","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","xor_in2out","xor_in2out","xor_in2out"],"q":[[0,"inout"],[141,"core::clone"],[142,"core::fmt"],[143,"core::fmt"],[144,"generic_array"],[145,"generic_array"],[146,"alloc::string"],[147,"core::any"]],"d":["Custom pointer type which contains one immutable (input) …","Custom slice type which references one immutable (input) …","Iterator over <code>InOutBuf</code>.","Custom slice type which references one immutable (input) …","The error returned when slice can not be converted into …","The error returned when input and output slices have …","Output buffer is smaller than input buffer.","Padding error. Usually emitted when size of output buffer …","Variant of <code>InOutBuf</code> with optional padded tail block.","","","","","","","","","","","","","","","","","","","","","","","","Clone input value and return it.","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create <code>InOutBuf</code> from a single mutable reference.","Crate <code>InOutBufReserved</code> from a single mutable slice.","Create <code>InOut</code> from raw input and output pointers.","Create <code>InOutBuf</code> from raw input and output pointers.","Create <code>InOutBufReserved</code> from raw input and output pointers.","Create <code>InOutBuf</code> from a pair of immutable and mutable …","Crate <code>InOutBufReserved</code> from two separate slices.","Returns <code>InOut</code> for the given position.","Returns <code>InOut</code> for given position.","Get full blocks.","Get immutable reference to the input value.","Get input slice.","Get input slice.","Get input buffer length.","Get mutable reference to the output value.","Get output slice.","Get output slice.","Get output buffer length.","Get padded tail block.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert <code>InOut</code> array to <code>InOutBuf</code>.","Partition buffer into 2 parts: buffer of arrays and tail.","","","Consume self and return output slice with lifetime <code>&#39;a</code>.","Convert buffer into output slice.","Transform buffer into <code>PaddedInOutBuf</code> using padding …","Convert <code>self</code> to a pair of raw input and output pointers.","Get raw input and output pointers.","Get raw input and output pointers.","Returns <code>true</code> if the buffer has a length of 0.","Get length of the inner buffers.","Create <code>InOutBuf</code> from immutable and mutable slices.","","Reborrow <code>self</code>.","Reborrow <code>self</code>.","Divides one buffer into two at <code>mid</code> index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","XOR <code>data</code> with values behind the input slice and write …","XOR <code>data</code> with values behind the input slice and write …","XORs <code>data</code> with values behind the input slice and write …"],"i":[0,0,0,0,0,0,0,0,0,0,5,13,22,15,18,1,2,3,4,5,13,22,15,18,1,2,3,4,1,2,3,4,5,1,2,3,4,1,1,2,2,3,3,4,4,5,5,5,13,13,22,15,18,1,2,3,4,13,15,5,13,15,13,15,5,13,18,5,13,15,15,5,13,15,15,18,5,13,22,15,18,1,2,3,4,5,13,13,22,13,18,15,5,13,15,13,13,13,22,5,13,13,1,2,3,4,1,2,3,4,5,13,22,15,18,1,2,3,4,5,13,13,22,15,18,1,2,3,4,5,13,22,15,18,1,2,3,4,5,5,13],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[[[5,[-1]]],-1,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[1,8],9],[[1,8],[[11,[7,10]]]],[[2,8],9],[[2,8],[[11,[7,10]]]],[[3,8],9],[[3,8],[[11,[7,10]]]],[[4,8],9],[[4,8],[[11,[7,10]]]],[[[7,[-1,-1]]],[[5,[-1]]],[]],[-1,-1,[]],[-1,[[5,[-1]]],[]],[-1,-1,[]],[[[12,[-1]]],[[13,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[-1]]],[]],[[[12,[-1]],14],[[11,[[15,[-1]],4]]],[]],[[],[[5,[-1]]],[]],[14,[[13,[-1]]],[]],[[14,14],[[15,[-1]]],[]],[[-1,-1],[[13,[-1]]],[]],[[[12,[-1]],[12,[-1]]],[[11,[[15,[-1]],4]]],[]],[[[5,[[16,[-1,-2]]]],14],[[5,[-1]]],[],[[17,[-1]]]],[[[13,[-1]],14],[[5,[-1]]],[]],[[[18,[-1]]],[[13,[[16,[19,-1]]]]],[[17,[19]]]],[[[5,[-1]]],-1,[]],[[[13,[-1]]],[[12,[-1]]],[]],[[[15,[-1]]],[[12,[-1]]],[]],[[[15,[-1]]],14,[]],[[[5,[-1]]],-1,[]],[[[13,[-1]]],[[12,[-1]]],[]],[[[15,[-1]]],[[12,[-1]]],[]],[[[15,[-1]]],14,[]],[[[18,[-1]]],[[20,[[5,[[16,[19,-1]]]]]]],[[17,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[[16,[-1,-2]]]]],[[13,[-1]]],[],[[17,[-1]]]],[[[13,[-1]]],[[7,[[13,[[16,[-1,-2]]]],[13,[-1]]]]],[],[[17,[-1]]]],[[[13,[-1]]],[],[]],[-1,-2,[],[]],[[[13,[-1]]],[[12,[-1]]],[]],[[[18,[-1]]],[[12,[19]]],[[17,[19]]]],[[[15,[19]]],[[11,[[18,[-1]],3]]],[[17,[19]]]],[[[5,[-1]]],7,[]],[[[13,[-1]]],7,[]],[[[15,[-1]]],7,[]],[[[13,[-1]]],21,[]],[[[13,[-1]]],14,[]],[[[12,[-1]],[12,[-1]]],[[11,[[13,[-1]],2]]],[]],[[[22,[-1]]],20,[]],[[[5,[-1]]],[[5,[-1]]],[]],[[[13,[-1]]],[[13,[-1]]],[]],[[[13,[-1]],14],[[7,[[13,[-1]],[13,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[13,[-1]]],[[11,[[5,[[16,[-1,-2]]]]]]],[],[[17,[-1]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[[5,[[16,[[16,[19,-1]],-2]]]],[16,[[16,[19,-1]],-2]]],7,[[17,[19]]],[[17,[[16,[19,-1]]]]]],[[[5,[[16,[19,-1]]]],[16,[19,-1]]],7,[[17,[19]]]],[[[13,[19]],[12,[19]]],7]],"c":[],"p":[[3,"IntoArrayError",0],[3,"NotEqualError",0],[3,"PadError",0],[3,"OutIsTooSmallError",0],[3,"InOut",0],[8,"Clone",141],[15,"tuple"],[3,"Formatter",142],[6,"Result",142],[3,"Error",142],[4,"Result",143],[15,"slice"],[3,"InOutBuf",0],[15,"usize"],[3,"InOutBufReserved",0],[3,"GenericArray",144],[8,"ArrayLength",144],[3,"PaddedInOutBuf",0],[15,"u8"],[4,"Option",145],[15,"bool"],[3,"InOutBufIter",0],[3,"String",146],[3,"TypeId",147]]},\
"ipnet":{"doc":"Types for IPv4 and IPv6 network addresses.","t":"DIEIIEIEDDDDDDQQQQDNNNNNNLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AddrParseError","IpAdd","IpAddrRange","IpBitAnd","IpBitOr","IpNet","IpSub","IpSubnets","Ipv4AddrRange","Ipv4Net","Ipv4Subnets","Ipv6AddrRange","Ipv6Net","Ipv6Subnets","Output","Output","Output","Output","PrefixLenError","V4","V4","V4","V6","V6","V6","addr","addr","addr","aggregate","aggregate","aggregate","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","broadcast","broadcast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","contains","contains","count","count","count","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","hash","hash","hash","hash","hash","hash","hash","hash","hash","hostmask","hostmask","hostmask","hosts","hosts","hosts","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","ip_mask_to_prefix","ipv4_mask_to_prefix","ipv6_mask_to_prefix","is_sibling","is_sibling","is_sibling","last","last","last","max","max","max","max_prefix_len","max_prefix_len","max_prefix_len","min","min","min","netmask","netmask","netmask","network","network","network","new","new","new","new","new","new","new","next","next","next","next","next","next","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prefix_len","prefix_len","prefix_len","saturating_add","saturating_sub","size_hint","size_hint","size_hint","subnets","subnets","subnets","supernet","supernet","supernet","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_netmask","with_netmask","with_netmask"],"q":[[0,"ipnet"],[315,"core::net::ip_addr"],[316,"core::net::ip_addr"],[317,"core::cmp"],[318,"core::fmt"],[319,"core::fmt"],[320,"core::hash"],[321,"core::option"],[322,"alloc::string"],[323,"core::any"]],"d":["An error which can be returned when parsing an IP network …","Provides a <code>saturating_add()</code> method for <code>Ipv4Addr</code> and …","An <code>Iterator</code> over a range of IP addresses, either IPv4 or …","Provides a <code>bitand()</code> method for <code>Ipv4Addr</code> and <code>Ipv6Addr</code>.","Provides a <code>bitor()</code> method for <code>Ipv4Addr</code> and <code>Ipv6Addr</code>.","An IP network address, either IPv4 or IPv6.","Provides a <code>saturating_sub()</code> method for <code>Ipv4Addr</code> and …","An <code>Iterator</code> that generates IP network addresses, either …","An <code>Iterator</code> over a range of IPv4 addresses.","An IPv4 network address.","An <code>Iterator</code> that generates IPv4 network addresses.","An <code>Iterator</code> over a range of IPv6 addresses.","An IPv6 network address.","An <code>Iterator</code> that generates IPv6 network addresses.","","","","","An error which can be returned when the prefix length is …","","","","","","","Returns the address.","Returns the address.","Returns the address.","Aggregate a <code>Vec</code> of <code>IpNet</code>s and return the result as a new …","Aggregate a <code>Vec</code> of <code>Ipv4Net</code>s and return the result as a new …","Aggregate a <code>Vec</code> of <code>Ipv6Net</code>s and return the result as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the broadcast address.","Returns the broadcast address.","Returns the last address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Test if a network address contains either another network …","Test if a network address contains either another network …","Test if a network address contains either another network …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the host mask.","Returns the host mask.","Returns the host mask.","Return an <code>Iterator</code> over the host addresses in this network.","Return an <code>Iterator</code> over the host addresses in this network.","Return an <code>Iterator</code> over the host addresses in this network.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts a <code>IpAddr</code> network mask into a prefix.","Converts a <code>Ipv4Addr</code> network mask into a prefix.","Converts a <code>Ipv6Addr</code> network mask into a prefix.","Returns <code>true</code> if this network and the given network are  …","Returns <code>true</code> if this network and the given network are  …","Returns <code>true</code> if this network and the given network are  …","","","","","","","Returns the maximum valid prefix length.","Returns the maximum valid prefix length.","Returns the maximum valid prefix length.","","","","Returns the network mask.","Returns the network mask.","Returns the network mask.","Returns the network address.","Returns the network address.","Returns the network address.","","","Creates a new IP network address from an <code>IpAddr</code> and prefix …","Creates a new IPv4 network address from an <code>Ipv4Addr</code> and …","Creates a new IPv6 network address from an <code>Ipv6Addr</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the prefix length.","Returns the prefix length.","Returns the prefix length.","","","","","","Returns an <code>Iterator</code> over the subnets of this network with …","Returns an <code>Iterator</code> over the subnets of this network with …","Returns an <code>Iterator</code> over the subnets of this network with …","Returns the <code>IpNet</code> that contains this one.","Returns the <code>Ipv4Net</code> that contains this one.","Returns the <code>Ipv6Net</code> that contains this one.","","","","","","","","","","","","","","","","","Returns a copy of the network with the address truncated …","Returns a copy of the network with the address truncated …","Returns a copy of the network with the address truncated …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new IP network address from an <code>IpAddr</code> and …","Creates a new IPv4 network address from an <code>Ipv4Addr</code> and …","Creates a new IPv6 network address from an <code>Ipv6Addr</code> and …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,30,31,32,0,8,1,12,8,1,12,1,3,5,1,3,5,31,32,8,9,10,1,3,5,11,12,13,14,15,8,9,10,1,3,5,11,12,13,14,15,1,3,5,8,9,10,1,3,5,11,12,13,14,15,8,9,10,1,3,5,11,12,13,14,15,8,9,10,1,3,5,12,13,14,1,3,5,8,9,10,1,3,5,8,9,10,1,3,5,11,12,13,14,15,8,9,10,1,3,5,11,12,13,14,15,8,9,10,1,1,3,3,5,5,11,11,12,13,14,15,15,8,8,8,9,10,1,1,1,1,3,3,5,5,11,12,12,12,13,14,15,1,3,5,8,9,10,1,3,5,12,13,14,1,3,5,1,3,5,8,9,10,1,3,5,11,12,13,14,15,8,9,10,12,13,14,0,0,0,1,3,5,8,9,10,8,9,10,1,3,5,8,9,10,1,3,5,1,3,5,9,10,1,3,5,13,14,8,9,10,12,13,14,8,9,10,8,9,10,8,9,10,8,9,10,1,3,5,12,13,14,1,3,5,29,30,8,9,10,1,3,5,1,3,5,8,9,10,1,3,5,11,12,13,14,15,1,3,5,11,15,1,3,5,8,9,10,1,3,5,11,12,13,14,15,8,9,10,1,3,5,11,12,13,14,15,8,9,10,1,3,5,11,12,13,14,15,1,3,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[5,6],[[[7,[1]]],[[7,[1]]]],[[[7,[3]]],[[7,[3]]]],[[[7,[5]]],[[7,[5]]]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,4],[5,6],[8,8],[9,9],[10,10],[1,1],[3,3],[5,5],[11,11],[12,12],[13,13],[14,14],[15,15],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[8,8],17],[[9,9],17],[[10,10],17],[[1,1],17],[[3,3],17],[[5,5],17],[[12,12],17],[[13,13],17],[[14,14],17],[[1,-1],18,[]],[[3,-1],18,[]],[[5,-1],18,[]],[8,19],[9,19],[10,19],[[],1],[[],3],[[],5],[[8,8],18],[[9,9],18],[[10,10],18],[[1,1],18],[[3,3],18],[[5,5],18],[[11,11],18],[[12,12],18],[[13,13],18],[[14,14],18],[[15,15],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[8,20],21],[[9,20],21],[[10,20],21],[[1,20],21],[[1,20],21],[[3,20],21],[[3,20],21],[[5,20],21],[[5,20],21],[[11,20],21],[[11,20],21],[[12,20],21],[[13,20],21],[[14,20],21],[[15,20],21],[[15,20],21],[9,8],[-1,-1,[]],[10,8],[-1,-1,[]],[-1,-1,[]],[3,1],[2,1],[5,1],[-1,-1,[]],[4,3],[-1,-1,[]],[-1,-1,[]],[6,5],[-1,-1,[]],[13,12],[-1,-1,[]],[14,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[22,[[23,[1,15]]]],[22,[[23,[3,15]]]],[22,[[23,[5,15]]]],[[8,-1],16,24],[[9,-1],16,24],[[10,-1],16,24],[[1,-1],16,24],[[3,-1],16,24],[[5,-1],16,24],[[12,-1],16,24],[[13,-1],16,24],[[14,-1],16,24],[1,2],[3,4],[5,6],[1,8],[3,9],[5,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[23,[25,11]]]],[4,[[23,[25,11]]]],[6,[[23,[25,11]]]],[[1,1],18],[[3,3],18],[[5,5],18],[8,26],[9,26],[10,26],[8,26],[9,26],[10,26],[1,25],[3,25],[5,25],[8,26],[9,26],[10,26],[1,2],[3,4],[5,6],[1,2],[3,4],[5,6],[[4,4],9],[[6,6],10],[[2,25],[[23,[1,11]]]],[[4,25],[[23,[3,11]]]],[[6,25],[[23,[5,11]]]],[[4,4,25],13],[[6,6,25],14],[8,26],[9,26],[10,26],[12,26],[13,26],[14,26],[8,26],[9,26],[10,26],[[8,19],26],[[9,19],26],[[10,19],26],[[8,19],26],[[9,19],26],[[10,19],26],[[8,8],[[26,[17]]]],[[9,9],[[26,[17]]]],[[10,10],[[26,[17]]]],[[1,1],[[26,[17]]]],[[3,3],[[26,[17]]]],[[5,5],[[26,[17]]]],[[12,12],[[26,[17]]]],[[13,13],[[26,[17]]]],[[14,14],[[26,[17]]]],[1,25],[3,25],[5,25],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[8,[[16,[19,[26,[19]]]]]],[9,[[16,[19,[26,[19]]]]]],[10,[[16,[19,[26,[19]]]]]],[[1,25],[[23,[12,11]]]],[[3,25],[[23,[13,11]]]],[[5,25],[[23,[14,11]]]],[1,[[26,[1]]]],[3,[[26,[3]]]],[5,[[26,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[1,1],[3,3],[5,5],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[2,2],[[23,[1,11]]]],[[4,4],[[23,[3,11]]]],[[6,6],[[23,[5,11]]]]],"c":[],"p":[[4,"IpNet",0],[4,"IpAddr",315],[3,"Ipv4Net",0],[3,"Ipv4Addr",315],[3,"Ipv6Net",0],[3,"Ipv6Addr",315],[3,"Vec",316],[4,"IpAddrRange",0],[3,"Ipv4AddrRange",0],[3,"Ipv6AddrRange",0],[3,"PrefixLenError",0],[4,"IpSubnets",0],[3,"Ipv4Subnets",0],[3,"Ipv6Subnets",0],[3,"AddrParseError",0],[15,"tuple"],[4,"Ordering",317],[15,"bool"],[15,"usize"],[3,"Formatter",318],[6,"Result",318],[15,"str"],[4,"Result",319],[8,"Hasher",320],[15,"u8"],[4,"Option",321],[3,"String",322],[3,"TypeId",323],[8,"IpAdd",0],[8,"IpSub",0],[8,"IpBitAnd",0],[8,"IpBitOr",0]]},\
"itoa":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLLL","n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":[[0,"itoa"],[13,"core::result"],[14,"core::any"]],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[3,"Buffer",0],[15,"str"],[8,"Integer",0],[4,"Result",13],[3,"TypeId",14]]},\
"k256":{"doc":"RustCrypto: secp256k1 (K-256) elliptic curve","t":"DGGGSSSSGSDGDDGGGSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAACLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLACLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGFLGDSDGGGLLLLLLLLLLALLLLLCLLLLLLLLLQIIIFFLLLFLSIDDGDDLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AffinePoint","CompressedPoint","EncodedPoint","FieldBytes","GENERATOR","GENERATOR","IDENTITY","IDENTITY","NonZeroScalar","ONE","ProjectivePoint","PublicKey","Scalar","Secp256k1","SecretKey","U256","WideBytes","ZERO","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","conditional_negate","conditional_negate","conditional_select","conditional_select","conditional_select","ct_eq","ct_eq","ct_eq","decode_field_bytes","decompact","decompress","default","default","default","default","double","double","double","ecdh","ecdsa","elliptic_curve","encode_field_bytes","endomorphism","eq","eq","eq","eq","eq","eq","eq_affine","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes_unchecked","from_bytes_unchecked","from_encoded_point","from_encoded_point","from_repr","from_uint_unchecked","generate_biased","generate_vartime","generator","generator","generator","identity","identity","identity","into","into","into","into","invert","invert","invert","invert_vartime","is_high","is_identity","is_identity","is_odd","is_zero","lincomb","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_by_generator","neg","neg","neg","neg","neg","negate","oid","partial_cmp","partial_cmp","pkcs8","product","product","random","random","reduce","reduce","reduce_bytes","reduce_bytes","reduce_nonzero","reduce_nonzero","reduce_nonzero_bytes","reduce_nonzero_bytes","schnorr","sha2","shr","shr","shr_assign","shr_vartime","sqrt","sqrt_ratio","square","square","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_affine","to_affine","to_bytes","to_bytes","to_bytes","to_curve","to_encoded_point","to_encoded_point","to_owned","to_owned","to_owned","to_owned","to_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_sign_prehashed","type_id","type_id","type_id","type_id","validate_public_key","x","y_is_odd","zeroize","zeroize","zeroize","EphemeralSecret","SharedSecret","diffie_hellman","from","DerSignature","Error","MAX","RecoveryId","Signature","SigningKey","VerifyingKey","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","from_byte","hazmat","into","is_x_reduced","is_y_odd","new","partial_cmp","signature","to_byte","to_owned","trial_recovery_from_digest","trial_recovery_from_msg","trial_recovery_from_prehash","try_from","try_from","try_into","type_id","Digest","DigestPrimitive","SignPrimitive","VerifyPrimitive","bits2field","sign_prehashed","try_sign_prehashed","try_sign_prehashed_rfc6979","verify_digest","verify_prehashed","verify_prehashed","BYTE_SIZE","CryptoRngCore","Error","Signature","SignatureBytes","SigningKey","VerifyingKey","as_affine","as_nonzero_scalar","as_ref","as_rngcore","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_source","into","into","into","into","new","random","sign_prehash","sign_prehash_with_aux_rand","sign_prehash_with_rng","signature","source","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_sign","try_sign","try_sign_digest","try_sign_digest_with_rng","try_sign_with_rng","type_id","type_id","type_id","type_id","verify","verify_digest","verify_prehash","verifying_key","verifying_key"],"q":[[0,"k256"],[253,"k256::ecdh"],[257,"k256::ecdsa"],[290,"k256::ecdsa::hazmat"],[301,"k256::schnorr"],[393,"core::cmp"],[394,"subtle"],[395,"subtle"],[396,"core::fmt"],[397,"rand_core"],[398,"const_oid"],[399,"core::option"],[400,"core::iter::traits::iterator"],[401,"crypto_bigint::uint"],[402,"elliptic_curve::error"],[403,"core::result"],[404,"core::convert"],[405,"elliptic_curve::ops"],[406,"core::any"],[407,"elliptic_curve::secret_key"],[408,"sec1::point"],[409,"elliptic_curve::error"],[410,"elliptic_curve::arithmetic"],[411,"elliptic_curve::scalar::nonzero"],[412,"core::borrow"],[413,"core::fmt"],[414,"ecdsa"],[415,"elliptic_curve"],[416,"digest::digest"],[417,"generic_array"],[418,"core::convert"],[419,"core::error"],[420,"alloc::alloc"],[421,"alloc::boxed"],[422,"signature::error"],[423,"core::convert"]],"d":["secp256k1 curve point expressed in affine coordinates.","Compressed SEC1-encoded secp256k1 (K-256) curve point.","SEC1-encoded secp256k1 (K-256) curve point.","secp256k1 (K-256) field element serialized as bytes.","Base point of secp256k1.","Base point of secp256k1.","Additive identity of the group: the point at infinity.","Additive identity of the group: the point at infinity.","Non-zero secp256k1 (K-256) scalar field element.","Multiplicative identity.","A point on the secp256k1 curve in projective coordinates.","secp256k1 (K-256) public key.","Scalars are elements in the finite field modulo n.","secp256k1 (K-256) elliptic curve.","secp256k1 (K-256) secret key.","256-bit unsigned big integer.","Bytes used by a wide reduction: twice the width of …","Zero scalar.","","","","","","","Returns self + rhs mod n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Doubles this point.","","Elliptic Curve Diffie-Hellman (Ephemeral) Support.","Elliptic Curve Digital Signature Algorithm (ECDSA).","","","Calculates SECP256k1 endomorphism: <code>self * lambda</code>.","","","","","","","Check whether <code>self</code> is equal to an affine point.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Attempts to parse the given <code>EncodedPoint</code> as an …","","Attempts to parse the given byte array as an SEC1-encoded …","","Returns a (nearly) uniformly-random scalar, generated in …","Returns a uniformly-random scalar, generated using …","Returns the base point of secp256k1.","","Returns the base point of SECP256k1.","Returns the identity of the group: the point at infinity.","Returns the additive identity of SECP256k1, also known as …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Inverts the scalar.","","Fast variable-time inversion using Stein’s algorithm.","","Is this point the identity point?","","","Checks if the scalar is zero.","","","","","","","","Modulo multiplies two scalars.","","","","","","","Calculates <code>k * G</code>, where <code>G</code> is the generator.","","","","","","Negates the scalar.","","","","","","","","","","","","","","","","","Taproot Schnorr signatures as defined in BIP340.","","","","","Right shifts the scalar.","Tonelli-Shank’s algorithm for q mod 16 = 1 …","","","Modulo squares the scalar.","","","","","","","","","Returns self - rhs mod n.","","","","","","","","","","","","","Returns the affine representation of this point, or <code>None</code> …","","","Returns the SEC1 encoding of this scalar.","Convert to curve representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","NIST P-256 Ephemeral Diffie-Hellman Secret.","Shared secret value computed via ECDH key agreement.","Low-level Elliptic Curve Diffie-Hellman (ECDH) function.","","ECDSA/secp256k1 signature (ASN.1 DER encoded)","Signature errors.","Maximum supported value for the recovery ID (inclusive).","Recovery IDs, a.k.a. “recid”.","ECDSA/secp256k1 signature (fixed-size)","ECDSA/secp256k1 signing key","ECDSA/secp256k1 verification key (i.e. public key)","","","","","","","","","Returns the argument unchanged.","Convert a <code>u8</code> into a <code>RecoveryId</code>.","Low-level ECDSA primitives.","Calls <code>U::from(self)</code>.","Did the affine x-coordinate of 𝑘×𝑮 overflow the …","Is the affine y-coordinate of 𝑘×𝑮 odd?","Create a new <code>RecoveryId</code> from the following 1-bit arguments:","","","Convert this <code>RecoveryId</code> into a <code>u8</code>.","","Given a public key, message digest, and signature, use …","Given a public key, message, and signature, use trial …","Given a public key, message digest, and signature, use …","","","","","Preferred digest to use when computing ECDSA signatures …","Bind a preferred <code>Digest</code> algorithm to an elliptic curve …","Try to sign the given prehashed message using ECDSA.","Verify the given prehashed message using ECDSA.","Partial implementation of the <code>bits2int</code> function as defined …","Sign a prehashed message digest using the provided secret …","Try to sign the prehashed message.","Try to sign the given message digest deterministically …","Verify message digest against the provided signature.","Verify the prehashed message against the provided ECDSA …","Verify the prehashed message against the provided ECDSA …","Size of a Taproot Schnorr signature in bytes.","An extension trait that is automatically implemented for …","Signature errors.","Taproot Schnorr signature as defined in BIP340.","Taproot Schnorr signature serialized as bytes.","Taproot Schnorr signing key.","Taproot Schnorr verifying key.","Borrow the inner <code>AffinePoint</code> this type wraps.","Borrow the secret <code>NonZeroScalar</code> value for this key.","","Upcast to an <code>RngCore</code> trait object.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse signing key from big endian-encoded bytes.","Parse verifying key from big endian-encoded x-coordinate.","Create a new error with an associated source.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new error with no associated source","Generate a cryptographically random <code>SigningKey</code>.","","Compute Schnorr signature.","","","","Serialize as bytes.","Serialize as bytes.","Serialize this signature as bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>VerifyingKey</code> that corresponds to this signing key.",""],"i":[0,0,0,0,2,1,2,1,0,3,0,0,0,0,0,0,0,3,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,3,3,3,2,1,3,5,2,1,3,5,2,1,3,5,2,1,3,5,3,5,1,3,2,1,3,2,1,3,9,2,2,2,1,3,5,1,1,3,0,0,0,9,1,2,2,1,1,3,5,1,2,1,3,5,2,1,3,5,14,14,8,8,16,16,2,2,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,5,9,9,2,1,2,1,2,1,3,3,3,3,2,1,1,2,1,1,2,1,3,5,3,3,3,3,3,2,1,3,3,1,2,2,1,1,1,3,3,3,3,1,1,3,3,1,2,1,1,3,3,3,5,3,5,0,3,3,1,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,1,1,1,1,1,1,3,3,3,3,1,1,1,1,3,3,1,1,3,3,1,1,2,1,3,2,2,1,2,1,3,5,3,16,16,16,16,2,2,2,1,3,5,2,1,3,5,3,2,1,3,5,5,2,2,2,1,3,0,0,0,44,0,0,32,0,0,0,0,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,52,0,0,0,0,0,68,68,69,0,69,58,0,0,0,0,0,0,15,56,56,21,33,56,15,58,33,56,15,58,56,15,58,56,15,58,33,56,15,58,15,58,33,33,15,58,33,33,62,62,56,56,56,56,15,58,56,15,33,33,56,15,58,33,56,56,56,56,0,33,56,15,58,58,56,15,58,33,33,56,15,15,15,58,58,33,56,15,58,56,56,56,56,56,33,56,15,58,15,15,15,56,56],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,2],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,2],1],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],4],[[1,1],4],[[1,2],4],[[1,2],4],[[3,3],4],[[3,3],4],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[1,1],[3,3],[5,5],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[3,3],6],[[5,5],6],[[-1,7],4,[]],[[-1,7],4,[]],[[2,2,7],2],[[1,1,7],1],[[3,3,7],3],[[2,2],7],[[1,1],7],[[3,3],7],[8,9],[8,[[10,[2]]]],[[8,7],[[10,[2]]]],[[],2],[[],1],[[],3],[[],5],[1,1],[1,1],[3,3],0,0,0,[9,8],[1,1],[[2,2],11],[[2,1],11],[[1,1],11],[[1,2],11],[[3,3],11],[[5,5],11],[[1,2],7],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[2,12],13],[[1,12],13],[[3,12],13],[[5,12],13],[2,14],[2,14],[3,8],[3,8],[15,16],[15,16],[1,2],[15,2],[1,2],[-1,-1,[]],[16,2],[16,2],[15,2],[16,1],[-1,-1,[]],[2,1],[2,1],[16,1],[17,3],[18,3],[19,3],[[[20,[5]]],3],[[[20,[5]]],3],[-1,-1,[]],[-1,-1,[]],[3,9],[3,9],[[],[[10,[2]]]],[[],[[10,[1]]]],[[],[[10,[2]]]],[[],[[10,[1]]]],[14,[[10,[2]]]],[14,[[10,[1]]]],[8,[[10,[3]]]],[[],3],[-1,3,21],[-1,3,22],[[],2],[[],1],[[],1],[[],2],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[10,[3]]]],[3,[[10,[3]]]],[3,[[10,[3]]]],[3,[[10,[3]]]],[3,7],[2,7],[1,7],[3,7],[3,7],[[1,3,1,3],1],[[2,3],1],[[2,3],1],[[1,3],1],[[1,3],1],[[1,3],1],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,3],4],[[1,3],4],[[3,3],4],[[3,3],4],[3,1],[2],[1,1],[1,1],[3,3],[3,3],[3,3],[-1,23,[]],[[3,3],[[24,[6]]]],[[5,5],[[24,[6]]]],0,[-1,3,25],[-1,3,25],[-1,1,22],[-1,3,22],[26,3],[9,3],[27,3],[8,3],[26,3],[9,3],[8,3],[27,3],0,0,[[3,28]],[[3,28]],[[3,28],4],[[3,28],3],[3,[[10,[3]]]],[[3,3],[[4,[7,3]]]],[3,3],[3,3],[[1,1],1],[[1,2],1],[[1,2],1],[[1,1],1],[[1,2],1],[[1,1],1],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,2],4],[[1,2],4],[[1,1],4],[[1,1],4],[[3,3],4],[[3,3],4],[-1,1,25],[-1,1,25],[-1,3,25],[-1,3,25],[1,2],[1,2],[2],[1],[3,8],[2,1],[[2,11],14],[[1,11],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,8],[2,[[29,[16]]]],[1,[[29,[16]]]],[2,[[29,[16]]]],[1,[[29,[16]]]],[-1,[[30,[-2]]],[],[]],[14,[[29,[2]]]],[14,[[29,[2]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[3,-1,8],[[30,[[4,[31,[24,[32]]]],33]]],[[34,[3]],35]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[[37,[-1]],38],[[30,[4,39]]],[]],[2,8],[2,7],[-1,4,[]],[-1,4,[]],[-1,4,[]],0,0,[[-2,-3],[[40,[-1]]],41,[[43,[[42,[-1]]]]],43],[2,44],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[[-1,-2],4,[],[]],[[32,32],6],[[32,32],11],[[-1,-2],11,[],[]],[[32,12],[[30,[4,45]]]],[-1,-1,[]],[46,[[24,[32]]]],0,[-1,-2,[],[]],[32,11],[32,11],[[11,11],32],[[32,32],[[24,[6]]]],0,[32,46],[-1,-2,[],[]],[[[47,[-1]],-2,[48,[-1]]],[[30,[32,33]]],[49,41],50],[[[47,[-1]],[51,[46]],[48,[-1]]],[[30,[32,33]]],[52,49,41]],[[[47,[-1]],[51,[46]],[48,[-1]]],[[30,[32,33]]],[49,41]],[-1,[[30,[-2]]],[],[]],[46,[[30,[32,33]]]],[-1,[[30,[-2]]],[],[]],[-1,36,[]],0,0,0,0,[[[51,[46]]],[[30,[[53,[46]],33]]]],[[-1,[53,[46]]],[[30,[[4,[[48,[-2]],32]],33]]],[34,35],[49,41]],[[-1,-2,[53,[46]]],[[30,[[4,[[48,[-3]],[24,[32]]]],33]]],[],[[34,[-1]],35],[]],[[-2,[53,[46]],[51,[46]]],[[30,[[4,[[48,[-1]],[24,[32]]]],33]]],[],[[54,[[20,[-1]]]],35]],[[-1,-2,[48,[-3]]],[[30,[4,33]]],[],55,[]],[[[53,[46]],[48,[-1]]],[[30,[4,33]]],[49,41]],[[-1,[53,[46]],[48,[-2]]],[[30,[4,33]]],[],[]],0,0,0,0,0,0,0,[15,2],[56,57],[56,15],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[15,15],[58,58],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],33],[56,4],[[15,15],11],[[58,58],11],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[33,12],[[30,[4,45]]]],[[33,12],[[30,[4,45]]]],[[15,12],13],[[58,12],13],[[[61,[59,60]]],33],[-1,-1,[]],[58,62],[58,62],[63,56],[57,56],[63,56],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[51,[46]]],[[64,[56]]]],[[[51,[46]]],[[64,[15]]]],[-1,33,[[65,[[61,[59,60]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],33],[-1,56,21],[[56,[51,[46]]],[[64,[58]]]],[[56,[66,[46]],[66,[46]]],[[64,[58]]]],[[56,-1,[51,[46]]],[[64,[58]]],21],0,[33,[[24,[59]]]],[56,8],[15,8],[58,62],[58],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,67,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[16,[[64,[15]]]],[-1,[[30,[-2]]],[],[]],[16,[[64,[15]]]],[-1,[[30,[-2]]],[],[]],[[[51,[46]]],[[64,[58]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[56,[51,[46]]],[[64,[58]]]],[[-1,[51,[46]]],[[30,[-2,33]]],[],[]],[[56,-1],[[64,[58]]],[50,55]],[[56,-1,-2],[[64,[58]]],21,[50,55]],[[56,-1,[51,[46]]],[[64,[58]]],21],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[15,[51,[46]],58],[[64,[4]]]],[[15,-1,58],[[64,[4]]],[50,55]],[[15,[51,[46]],58],[[30,[4,33]]]],[56,15],[-1,[],[]]],"c":[131,133],"p":[[3,"ProjectivePoint",0],[3,"AffinePoint",0],[3,"Scalar",0],[15,"tuple"],[3,"Secp256k1",0],[4,"Ordering",393],[3,"Choice",394],[6,"FieldBytes",0],[6,"U256",0],[3,"CtOption",394],[15,"bool"],[3,"Formatter",395],[6,"Result",395],[6,"EncodedPoint",0],[3,"VerifyingKey",301],[6,"PublicKey",0],[15,"u32"],[15,"u128"],[15,"u64"],[3,"ScalarPrimitive",396],[8,"CryptoRngCore",301],[8,"RngCore",397],[3,"ObjectIdentifier",398],[4,"Option",399],[8,"Iterator",400],[6,"U512",401],[6,"WideBytes",0],[15,"usize"],[6,"Result",402],[4,"Result",403],[6,"Signature",257],[3,"RecoveryId",257],[3,"Error",301],[8,"AsRef",404],[8,"Invert",405],[3,"TypeId",406],[3,"SecretKey",407],[3,"EncodedPoint",408],[3,"Error",402],[3,"SharedSecret",409],[8,"CurveArithmetic",410],[3,"NonZeroScalar",411],[8,"Borrow",412],[6,"SharedSecret",253],[3,"Error",395],[15,"u8"],[3,"VerifyingKey",413],[3,"Signature",414],[8,"PrimeCurve",415],[8,"Digest",416],[15,"slice"],[8,"DigestPrimitive",290],[3,"GenericArray",417],[8,"From",404],[8,"FixedOutput",418],[3,"SigningKey",301],[6,"NonZeroScalar",0],[3,"Signature",301],[8,"Error",419],[3,"Global",420],[3,"Box",421],[6,"SignatureBytes",301],[6,"SecretKey",0],[6,"Result",422],[8,"Into",404],[15,"array"],[3,"String",423],[8,"SignPrimitive",290],[8,"VerifyPrimitive",290]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":"IFO","n":["LazyStatic","initialize","lazy_static"],"q":[[0,"lazy_static"]],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[-1,1,2],0],"c":[],"p":[[15,"tuple"],[8,"LazyStatic",0]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGFGRRRRRRRRRRRRRRRRFFFFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRERRRRRRRRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFFRFRRRERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFNNNNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRFFFFFRRRFFRRRRRRRRRRRRRRRRRRRFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRRRRRRTTTMMDDDDDDMFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFFFFMMFFFFFMMMMMMDFMMMMMMMMMMMFFMFMMMFMFMFFDFMMMMMFFFDMFFFFFFFMMGDDDFFFFFFFMMMMMMFMGGMGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDFFMMMMMMGGGMGMMGGMMGGGGGGGEMFMMGFFFFFFMFFFFFMMMFFFFGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFMMMMMMMMMDMMMMMMMMFFFMMMFGGFFFFGMMMMMMGMMMMGMMMMMMMMMMFFFMDMMMMMMMMMMMMMMMMMMMGFMMDFFFMMFFFMMMMFFMMMMMMMMMMDFFFFMMFFFFFMMMMFFFFFFFFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFMMMMFFFFFFFFFFMDFFFFMMFFFFFFMMFMMMMMMMMMMMMMMMMMFDFFFLFFMMFMMMFEFDFFMFFFMMMMMMFFFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFFFFFFGDDMMMMMMMMFFFFDFMMFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMGMMMFDFFFMMMMFDMMMMMMMMMMMMMGGGFFFGDFFFFGGMMGDDFMFDDMDFFMMMMDMMMDMMMMMMMMMDMMDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDMMMMMMMMMMMMMMMMMMDDMMMMMMMMMMMMMMMDMMMMMMMMMMMMMMMMDMMMMMMMMMMDDDGDGMMMMFMMGGGGGMMMMMMMMGMMGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGMFMMDDDDDMMMMMDMMMMFFFFFFFFFFFFFMMDMMFRRRRRRRRRRRRRGDFFDGFFFMMMMMMMMMMFFFDGGDFFFFFMMDGFFFFFDFMMMMFFFFFMMDDFGGDGGFHFDFGGFGGMFMMFFFMFFDFFDFFFFFFFFFFDFDMMMMMGGMFFFFFGGFFFFFMFFFFFFFFFFFFFFFMGMMMMMFFFMMMMMMMDDFFFFFMMMMFMGMMMFGFGFGMMMFMMFFDMMGMMFFFFFFFDFGFGFFFGGGFFFDGFFMMMMMMMMMMMMMMDFFMMMMMMMMMMMMMMMMMMMMFMMFGFMMMMGFDFMFFFFFFFFFGFFFFFFFFFFFFFFFFGFMFFMMMMFMMDFFFFFFFFFFFFFFFFFDDDDDGGMMDGGGGGDGGDGGDFRRRRRMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFFFFFFFFFDFFFFFDFFFFFFDFFFFFFFFFFFFFFGFGFFFFFFFGFFFFFFDFFFFFFFDFFFDFFFFFFFFDFFFFFFFGFMMMMMMMMMMMMMMMMMMMFGFMMMMMMMMFFFFFMMMMMMMMMMMMFFEFFFMMDFFMMMMFFFFFFFMFFFFFFDFFDGMFFFFFFFMMMMMMMMMFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMGDMMFMMMMMMMMMMMMDDDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDGDDDDDMMMMMMMDMGMMMMGGMMMMMFMMMMMFFFDMFMMMMMMMMMFFDDMMFMFMMMMMFMMMMMFGFFFDFFDFTFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDMMMMMMMMFMMFFGFFFDFLMMMLMMLMLMLDFFFFFMMMMDFGDFFFFGDFMMMMMMMMMMMMMMMMMMMMMMMGMMFMMMMMMMFDDDDDDDDDDFFGMMMMGFFFMMMMMMFGMMMMMMMMMMMMMMMMMMMMMMMDDFDFMDFMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMMMGMMMMMMMMMMMMMFFFFFFFFFEEGFFMFMMMMMMMMMFGFFGGFGFDGGFFGFFFFFFFFFDMGGDGGDGGDGGMMDGGDGGGMMMMDGGFGGDGGGMMGFFGDGGDGGGDGGGMMDGGMMFMMGDFFMMDDDDEDMMMMMMMMMMMFFDMMMMMFMMFMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMDMMMGGGGGGGFFFFFFFFGFMMMMMMFMMMMMMMDFFFDFDMGMMMMMMMMMMMDMMMMGFGGGHGDGDDGGGGMMMMDDDDGMMMMMMMMMMMMMMMMMMMMMMMFFFFGFFDMMMMFFFMMMMMMMMMDDMMMMM","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IEEE80211","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NDRV","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AF_UTUN","AF_VSOCK","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","ATTR_BIT_MAP_COUNT","ATTR_CMNEXT_CLONEID","ATTR_CMNEXT_EXT_FLAGS","ATTR_CMNEXT_LINKID","ATTR_CMNEXT_NOFIRMLINKPATH","ATTR_CMNEXT_PRIVATESIZE","ATTR_CMNEXT_REALDEVID","ATTR_CMNEXT_REALFSID","ATTR_CMNEXT_RECURSIVE_GENCOUNT","ATTR_CMNEXT_RELPATH","ATTR_CMN_ACCESSMASK","ATTR_CMN_ACCTIME","ATTR_CMN_ADDEDTIME","ATTR_CMN_BKUPTIME","ATTR_CMN_CHGTIME","ATTR_CMN_CRTIME","ATTR_CMN_DATA_PROTECT_FLAGS","ATTR_CMN_DEVID","ATTR_CMN_DOCUMENT_ID","ATTR_CMN_EXTENDED_SECURITY","ATTR_CMN_FILEID","ATTR_CMN_FLAGS","ATTR_CMN_FNDRINFO","ATTR_CMN_FSID","ATTR_CMN_FULLPATH","ATTR_CMN_GEN_COUNT","ATTR_CMN_GRPID","ATTR_CMN_GRPUUID","ATTR_CMN_MODTIME","ATTR_CMN_NAME","ATTR_CMN_OBJID","ATTR_CMN_OBJPERMANENTID","ATTR_CMN_OBJTAG","ATTR_CMN_OBJTYPE","ATTR_CMN_OWNERID","ATTR_CMN_PARENTID","ATTR_CMN_PAROBJID","ATTR_CMN_RETURNED_ATTRS","ATTR_CMN_SCRIPT","ATTR_CMN_USERACCESS","ATTR_CMN_UUID","ATTR_DIR_ALLOCSIZE","ATTR_DIR_DATALENGTH","ATTR_DIR_ENTRYCOUNT","ATTR_DIR_IOBLOCKSIZE","ATTR_DIR_LINKCOUNT","ATTR_DIR_MOUNTSTATUS","ATTR_FILE_ALLOCSIZE","ATTR_FILE_DATAALLOCSIZE","ATTR_FILE_DATALENGTH","ATTR_FILE_DEVTYPE","ATTR_FILE_FORKCOUNT","ATTR_FILE_FORKLIST","ATTR_FILE_IOBLOCKSIZE","ATTR_FILE_LINKCOUNT","ATTR_FILE_RSRCALLOCSIZE","ATTR_FILE_RSRCLENGTH","ATTR_FILE_TOTALSIZE","ATTR_VOL_ALLOCATIONCLUMP","ATTR_VOL_ATTRIBUTES","ATTR_VOL_CAPABILITIES","ATTR_VOL_DIRCOUNT","ATTR_VOL_ENCODINGSUSED","ATTR_VOL_FILECOUNT","ATTR_VOL_FSTYPE","ATTR_VOL_INFO","ATTR_VOL_IOBLOCKSIZE","ATTR_VOL_MAXOBJCOUNT","ATTR_VOL_MINALLOCATION","ATTR_VOL_MOUNTEDDEVICE","ATTR_VOL_MOUNTFLAGS","ATTR_VOL_MOUNTPOINT","ATTR_VOL_NAME","ATTR_VOL_OBJCOUNT","ATTR_VOL_QUOTA_SIZE","ATTR_VOL_RESERVED_SIZE","ATTR_VOL_SIGNATURE","ATTR_VOL_SIZE","ATTR_VOL_SPACEAVAIL","ATTR_VOL_SPACEFREE","ATTR_VOL_SPACEUSED","ATTR_VOL_UUID","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_OBJERR","CCCryptorStatus","CCRNGStatus","CCRandomGenerateBytes","CCStatus","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_MONOTONIC_RAW","CLOCK_MONOTONIC_RAW_APPROX","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CLOCK_UPTIME_RAW","CLOCK_UPTIME_RAW_APPROX","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","COPYFILE_ACL","COPYFILE_CHECK","COPYFILE_CLONE","COPYFILE_CLONE_FORCE","COPYFILE_CONTINUE","COPYFILE_COPY_DATA","COPYFILE_COPY_XATTR","COPYFILE_DATA","COPYFILE_DATA_SPARSE","COPYFILE_ERR","COPYFILE_EXCL","COPYFILE_FINISH","COPYFILE_METADATA","COPYFILE_MOVE","COPYFILE_NOFOLLOW","COPYFILE_NOFOLLOW_DST","COPYFILE_NOFOLLOW_SRC","COPYFILE_PACK","COPYFILE_PRESERVE_DST_TRACKED","COPYFILE_PROGRESS","COPYFILE_QUIT","COPYFILE_RECURSE_DIR","COPYFILE_RECURSE_DIR_CLEANUP","COPYFILE_RECURSE_ERROR","COPYFILE_RECURSE_FILE","COPYFILE_RECURSIVE","COPYFILE_RUN_IN_PLACE","COPYFILE_SECURITY","COPYFILE_SKIP","COPYFILE_START","COPYFILE_STAT","COPYFILE_STATE_BSIZE","COPYFILE_STATE_COPIED","COPYFILE_STATE_DST_BSIZE","COPYFILE_STATE_DST_FD","COPYFILE_STATE_DST_FILENAME","COPYFILE_STATE_QUARANTINE","COPYFILE_STATE_SRC_BSIZE","COPYFILE_STATE_SRC_FD","COPYFILE_STATE_SRC_FILENAME","COPYFILE_STATE_STATUS_CB","COPYFILE_STATE_STATUS_CTX","COPYFILE_STATE_WAS_CLONED","COPYFILE_STATE_XATTRNAME","COPYFILE_UNLINK","COPYFILE_UNPACK","COPYFILE_VERBOSE","COPYFILE_XATTR","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLIOCGINFO","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DIR_MNTSTATUS_MNTPOINT","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","FSOPT_ATTR_CMN_EXTENDED","FSOPT_NOFOLLOW","FSOPT_NOFOLLOW_ANY","FSOPT_PACK_INVAL_ATTRS","FSOPT_REPORT_FULLSIZE","FSOPT_RETURN_REALDEV","F_ALLOCATEALL","F_ALLOCATECONTIG","F_BARRIERFSYNC","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GETPATH_NOFIRMLINK","F_GLOBAL_NOCACHE","F_LOCK","F_LOG2PHYS","F_LOG2PHYS_EXT","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_PUNCHHOLE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_SPECULATIVE_READ","F_TEST","F_THAW_FS","F_TLOCK","F_TRIM_ACTIVE_FILE","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HOST_CPU_LOAD_INFO","HOST_CPU_LOAD_INFO_COUNT","HOST_EXPIRED_TASK_INFO","HOST_EXTMOD_INFO64","HOST_LOAD_INFO","HOST_VM_INFO","HOST_VM_INFO64","HOST_VM_INFO64_COUNT","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_BOUND_IF","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BLOCK_SOURCE","IP_BOUND_IF","IP_DONTFRAG","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","IP_UNBLOCK_SOURCE","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_ABORTED","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ALREADY_IN_SET","KERN_ALREADY_WAITING","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_CODESIGN_ERROR","KERN_COREDUMP","KERN_COREFILE","KERN_DEFAULT_SET","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXCEPTION_PROTECTED","KERN_EXEC","KERN_FAILURE","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_INSUFFICIENT_BUFFER_SIZE","KERN_INVALID_ADDRESS","KERN_INVALID_ARGUMENT","KERN_INVALID_CAPABILITY","KERN_INVALID_HOST","KERN_INVALID_LEDGER","KERN_INVALID_MEMORY_CONTROL","KERN_INVALID_NAME","KERN_INVALID_OBJECT","KERN_INVALID_POLICY","KERN_INVALID_PROCESSOR_SET","KERN_INVALID_RIGHT","KERN_INVALID_SECURITY","KERN_INVALID_TASK","KERN_INVALID_VALUE","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOCK_OWNED","KERN_LOCK_OWNED_SELF","KERN_LOCK_SET_DESTROYED","KERN_LOCK_UNSTABLE","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_MEMORY_DATA_MOVED","KERN_MEMORY_ERROR","KERN_MEMORY_FAILURE","KERN_MEMORY_PRESENT","KERN_MEMORY_RESTART_COPY","KERN_NAME_EXISTS","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NODE_DOWN","KERN_NOT_DEPRESSED","KERN_NOT_IN_SET","KERN_NOT_RECEIVER","KERN_NOT_SUPPORTED","KERN_NOT_WAITING","KERN_NO_ACCESS","KERN_NO_SPACE","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OPERATION_TIMED_OUT","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POLICY_LIMIT","KERN_POLICY_STATIC","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PROTECTION_FAILURE","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_RESOURCE_SHORTAGE","KERN_RIGHT_EXISTS","KERN_RPC_CONTINUE_ORPHAN","KERN_RPC_SERVER_TERMINATED","KERN_RPC_TERMINATE_ORPHAN","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SEMAPHORE_DESTROYED","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUCCESS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TERMINATED","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_UREFS_OVERFLOW","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MACH_PORT_NULL","MACH_TASK_BASIC_INFO","MACH_TASK_BASIC_INFO_COUNT","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPATHLEN","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MAX_KCTL_NAME","MCL_CURRENT","MCL_FUTURE","MDMBUF","MEMORY_OBJECT_NULL","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_NEEDSA","MSG_NOSIGNAL","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","None","None","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OS_LOG_TYPE_DEBUG","OS_LOG_TYPE_DEFAULT","OS_LOG_TYPE_ERROR","OS_LOG_TYPE_FAULT","OS_LOG_TYPE_INFO","OS_SIGNPOST_EVENT","OS_SIGNPOST_INTERVAL_BEGIN","OS_SIGNPOST_INTERVAL_END","OS_UNFAIR_LOCK_INIT","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EVTONLY","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NOFOLLOW_ANY","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NDRV","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_CSM_ALL","PROC_CSM_NOSMT","PROC_CSM_TECS","PROC_PIDPATHINFO_MAXSIZE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTBSDINFO","PROC_PIDTHREADINFO","PROC_PIDVNODEPATHINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_INTROSPECTION_THREAD_CREATE","PTHREAD_INTROSPECTION_THREAD_DESTROY","PTHREAD_INTROSPECTION_THREAD_START","PTHREAD_INTROSPECTION_THREAD_TERMINATE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","QOS_CLASS_BACKGROUND","QOS_CLASS_DEFAULT","QOS_CLASS_UNSPECIFIED","QOS_CLASS_USER_INITIATED","QOS_CLASS_USER_INTERACTIVE","QOS_CLASS_UTILITY","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DEAD","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_GLOBAL","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_MAIN_ONLY","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_INFO_V0","RUSAGE_INFO_V1","RUSAGE_INFO_V2","RUSAGE_INFO_V3","RUSAGE_INFO_V4","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCHED_FIFO","SCHED_OTHER","SCHED_RR","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIDL","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SRUN","SSLEEP","SSTOP","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSDIR_DIRECTORY_ADMIN_APPLICATION","SYSDIR_DIRECTORY_ALL_APPLICATIONS","SYSDIR_DIRECTORY_ALL_LIBRARIES","SYSDIR_DIRECTORY_APPLICATION","SYSDIR_DIRECTORY_APPLICATION_SUPPORT","SYSDIR_DIRECTORY_AUTOSAVED_INFORMATION","SYSDIR_DIRECTORY_CACHES","SYSDIR_DIRECTORY_CORESERVICE","SYSDIR_DIRECTORY_DEMO_APPLICATION","SYSDIR_DIRECTORY_DESKTOP","SYSDIR_DIRECTORY_DEVELOPER","SYSDIR_DIRECTORY_DEVELOPER_APPLICATION","SYSDIR_DIRECTORY_DOCUMENT","SYSDIR_DIRECTORY_DOCUMENTATION","SYSDIR_DIRECTORY_DOWNLOADS","SYSDIR_DIRECTORY_INPUT_METHODS","SYSDIR_DIRECTORY_LIBRARY","SYSDIR_DIRECTORY_MOVIES","SYSDIR_DIRECTORY_MUSIC","SYSDIR_DIRECTORY_PICTURES","SYSDIR_DIRECTORY_PREFERENCE_PANES","SYSDIR_DIRECTORY_PRINTER_DESCRIPTION","SYSDIR_DIRECTORY_SHARED_PUBLIC","SYSDIR_DIRECTORY_USER","SYSDIR_DOMAIN_MASK_ALL","SYSDIR_DOMAIN_MASK_LOCAL","SYSDIR_DOMAIN_MASK_NETWORK","SYSDIR_DOMAIN_MASK_SYSTEM","SYSDIR_DOMAIN_MASK_USER","SYSPROTO_CONTROL","SYSPROTO_EVENT","SZOMB","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","Some","Some","TAB0","TAB1","TAB2","TAB3","TABDLY","TASK_THREAD_TIMES_INFO","TASK_THREAD_TIMES_INFO_COUNT","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","THREAD_AFFINITY_POLICY","THREAD_AFFINITY_POLICY_COUNT","THREAD_AFFINITY_TAG_NULL","THREAD_BACKGROUND_POLICY","THREAD_BACKGROUND_POLICY_COUNT","THREAD_BACKGROUND_POLICY_DARWIN_BG","THREAD_BASIC_INFO","THREAD_BASIC_INFO_COUNT","THREAD_EXTENDED_INFO","THREAD_EXTENDED_INFO_COUNT","THREAD_EXTENDED_POLICY","THREAD_EXTENDED_POLICY_COUNT","THREAD_IDENTIFIER_INFO","THREAD_IDENTIFIER_INFO_COUNT","THREAD_LATENCY_QOS_POLICY","THREAD_LATENCY_QOS_POLICY_COUNT","THREAD_PRECEDENCE_POLICY","THREAD_PRECEDENCE_POLICY_COUNT","THREAD_STANDARD_POLICY","THREAD_STANDARD_POLICY_COUNT","THREAD_THROUGHPUT_QOS_POLICY","THREAD_THROUGHPUT_QOS_POLICY_COUNT","THREAD_TIME_CONSTRAINT_POLICY","THREAD_TIME_CONSTRAINT_POLICY_COUNT","TH_FLAGS_GLOBAL_FORCED_IDLE","TH_FLAGS_IDLE","TH_FLAGS_SWAPPED","TH_STATE_HALTED","TH_STATE_RUNNING","TH_STATE_STOPPED","TH_STATE_UNINTERRUPTIBLE","TH_STATE_WAITING","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAKE_TAG","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_PAGE_QUERY_PAGE_COPIED","VM_PAGE_QUERY_PAGE_CS_NX","VM_PAGE_QUERY_PAGE_CS_TAINTED","VM_PAGE_QUERY_PAGE_CS_VALIDATED","VM_PAGE_QUERY_PAGE_DIRTY","VM_PAGE_QUERY_PAGE_EXTERNAL","VM_PAGE_QUERY_PAGE_FICTITIOUS","VM_PAGE_QUERY_PAGE_PAGED_OUT","VM_PAGE_QUERY_PAGE_PRESENT","VM_PAGE_QUERY_PAGE_REF","VM_PAGE_QUERY_PAGE_SPECULATIVE","VM_PROT_EXECUTE","VM_PROT_NONE","VM_PROT_READ","VM_PROT_WRITE","VM_SWAPUSAGE","VOL_CAPABILITIES_FORMAT","VOL_CAPABILITIES_INTERFACES","VOL_CAP_FMT_2TB_FILESIZE","VOL_CAP_FMT_64BIT_OBJECT_IDS","VOL_CAP_FMT_CASE_PRESERVING","VOL_CAP_FMT_CASE_SENSITIVE","VOL_CAP_FMT_DECMPFS_COMPRESSION","VOL_CAP_FMT_DIR_HARDLINKS","VOL_CAP_FMT_DOCUMENT_ID","VOL_CAP_FMT_FAST_STATFS","VOL_CAP_FMT_HARDLINKS","VOL_CAP_FMT_HIDDEN_FILES","VOL_CAP_FMT_JOURNAL","VOL_CAP_FMT_JOURNAL_ACTIVE","VOL_CAP_FMT_NO_IMMUTABLE_FILES","VOL_CAP_FMT_NO_PERMISSIONS","VOL_CAP_FMT_NO_ROOT_TIMES","VOL_CAP_FMT_NO_VOLUME_SIZES","VOL_CAP_FMT_OPENDENYMODES","VOL_CAP_FMT_PATH_FROM_ID","VOL_CAP_FMT_PERSISTENTOBJECTIDS","VOL_CAP_FMT_SEALED","VOL_CAP_FMT_SHARED_SPACE","VOL_CAP_FMT_SPARSE_FILES","VOL_CAP_FMT_SYMBOLICLINKS","VOL_CAP_FMT_VOL_GROUPS","VOL_CAP_FMT_WRITE_GENERATION_COUNT","VOL_CAP_FMT_ZERO_RUNS","VOL_CAP_INT_ADVLOCK","VOL_CAP_INT_ALLOCATE","VOL_CAP_INT_ATTRLIST","VOL_CAP_INT_CLONE","VOL_CAP_INT_COPYFILE","VOL_CAP_INT_EXCHANGEDATA","VOL_CAP_INT_EXTENDED_ATTR","VOL_CAP_INT_EXTENDED_SECURITY","VOL_CAP_INT_FLOCK","VOL_CAP_INT_MANLOCK","VOL_CAP_INT_NAMEDSTREAMS","VOL_CAP_INT_NFSEXPORT","VOL_CAP_INT_READDIRATTR","VOL_CAP_INT_RENAME_EXCL","VOL_CAP_INT_RENAME_OPENFAIL","VOL_CAP_INT_RENAME_SWAP","VOL_CAP_INT_SEARCHFS","VOL_CAP_INT_SNAPSHOT","VOL_CAP_INT_USERACCESS","VOL_CAP_INT_VOL_RENAME","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_CS_DARWIN_USER_CACHE_DIR","_CS_DARWIN_USER_DIR","_CS_DARWIN_USER_TEMP_DIR","_CS_PATH","_IOFBF","_IOLBF","_IONBF","_NSGetEnviron","_NSGetExecutablePath","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__c_anonymous_ifc_ifcu","__c_anonymous_ifk_data","__c_anonymous_ifr_ifru","__cpu","__cs","__darwin_mcontext64","__darwin_mmst_reg","__darwin_x86_exception_state64","__darwin_x86_float_state64","__darwin_x86_thread_state64","__darwin_xmm_reg","__err","__error","__es","__faultvaddr","__fpu_cs","__fpu_dp","__fpu_ds","__fpu_fop","__fpu_ftw","__fpu_ip","__fpu_mxcsr","__fpu_mxcsrmask","__fpu_reserved","__fpu_reserved1","__fpu_rsrv1","__fpu_rsrv2","__fpu_rsrv3","__fpu_stmm0","__fpu_stmm1","__fpu_stmm2","__fpu_stmm3","__fpu_stmm4","__fpu_stmm5","__fpu_stmm6","__fpu_stmm7","__fpu_xmm0","__fpu_xmm1","__fpu_xmm10","__fpu_xmm11","__fpu_xmm12","__fpu_xmm13","__fpu_xmm14","__fpu_xmm15","__fpu_xmm2","__fpu_xmm3","__fpu_xmm4","__fpu_xmm5","__fpu_xmm6","__fpu_xmm7","__fpu_xmm8","__fpu_xmm9","__fs","__fs","__gs","__mmst_reg","__mmst_rsrv","__r10","__r11","__r12","__r13","__r14","__r15","__r8","__r9","__rax","__rbp","__rbx","__rcx","__rdi","__rdx","__rflags","__rip","__rsi","__rsp","__ss","__trapno","__xmm_reg","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","active_count","active_count","active_count","active_count","address","addrinfo","adjtime","affinity_tag","affinity_tag","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arc4random","arc4random_buf","arc4random_uniform","arphdr","array","asctime","asctime_r","atexit","atof","atoi","atol","atoll","attr_dataoffset","attr_length","attrgroup_t","attribute_set_t","attrlist","attrreference_t","backtrace","backtrace_async","backtrace_from_fp","backtrace_image_offsets","backtrace_symbols","backtrace_symbols_fd","basename","batch_free","batch_malloc","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","bitmapcount","blkcnt_t","blksize_t","blocks_in_use","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","bytes_free","bytes_total","bytes_used","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","calloc","capabilities","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","chunks_free","chunks_used","claimed_address","clearerr","clock_getres","clock_gettime","clock_settime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clonefile","clonefileat","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","commonattr","commonattr","compressions","compressions","compressor_page_count","compressor_page_count","computation","computation","confstr","connect","connectx","constant","constraint","constraint","copyfile","copyfile_callback_t","copyfile_flags_t","copyfile_state_alloc","copyfile_state_free","copyfile_state_get","copyfile_state_set","copyfile_state_t","cow_faults","cow_faults","cow_faults","cow_faults","cpu_subtype","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_ticks","cpu_type","cpu_type","cpu_type_t","cpu_usage","cpu_usage","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","ctime","ctime_r","ctl_id","ctl_info","ctl_name","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","decompressions","decompressions","default_policy","default_policy","denom","denom","destroy","dev_t","difftime","dirattr","dirattr","dirent","dirfd","dirname","disconnectx","dispatch_qaddr","dispatch_qaddr","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","drand48","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","erand48","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execvP","execve","execvp","exit","ext","external_page_count","external_page_count","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_flags_ext","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","faults","faults","faults","faults","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclonefileat","fclose","fcntl","fcopyfile","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetattrlist","fgetc","fgetpos","fgets","fgetxattr","fileattr","fileattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmount","fmt","fopen","fork","forkattr","forkattr","forkpty","fp_flags","fp_length","fp_offset","fpathconf","fpos_t","fprintf","fpunchhole_t","fputc","fputs","frac_digits","fread","freadlink","free","free","free_count","free_count","free_count","free_count","free_definite_size","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetattrlist","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fspecread_t","fsr_flags","fsr_length","fsr_offset","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","fta_length","fta_offset","ftell","ftello","ftok","ftrimactivefile_t","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getattrlist","getattrlistat","getattrlistbulk","getchar","getchar_unlocked","getcwd","getdate","getdomainname","getdtablesize","getegid","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","gethostuuid","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getopt_long","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","has_arg","hdr_cnt","headers","hits","hits","hits","hits","host_flavor_t","host_info64_t","host_info_t","host_processor_info","host_statistics","host_statistics64","host_t","hostent","hstrerror","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_data64","if_freenameindex","if_index","if_indextoname","if_msghdr","if_msghdr2","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_msghdr","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifam_addrs","ifam_flags","ifam_index","ifam_metric","ifam_msglen","ifam_type","ifam_version","ifc_ifcu","ifc_len","ifconf","ifcu_buf","ifcu_req","ifdevmtu","ifdm_current","ifdm_max","ifdm_min","ifi_addrlen","ifi_addrlen","ifi_baudrate","ifi_baudrate","ifi_collisions","ifi_collisions","ifi_hdrlen","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ibytes","ifi_ierrors","ifi_ierrors","ifi_imcasts","ifi_imcasts","ifi_ipackets","ifi_ipackets","ifi_iqdrops","ifi_iqdrops","ifi_lastchange","ifi_lastchange","ifi_metric","ifi_metric","ifi_mtu","ifi_mtu","ifi_noproto","ifi_noproto","ifi_obytes","ifi_obytes","ifi_oerrors","ifi_oerrors","ifi_omcasts","ifi_omcasts","ifi_opackets","ifi_opackets","ifi_physical","ifi_physical","ifi_recvquota","ifi_recvquota","ifi_recvtiming","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_type","ifi_typelen","ifi_typelen","ifi_unused1","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmitquota","ifi_xmittiming","ifi_xmittiming","ifk_data","ifk_module_id","ifk_ptr","ifk_type","ifk_value","ifkpi","ifm_addrs","ifm_addrs","ifm_data","ifm_data","ifm_flags","ifm_flags","ifm_index","ifm_index","ifm_msglen","ifm_msglen","ifm_snd_drops","ifm_snd_len","ifm_snd_maxlen","ifm_timer","ifm_type","ifm_type","ifm_version","ifm_version","ifma_msghdr","ifma_msghdr2","ifmam_addrs","ifmam_addrs","ifmam_flags","ifmam_flags","ifmam_index","ifmam_index","ifmam_msglen","ifmam_msglen","ifmam_refcount","ifmam_type","ifmam_type","ifmam_version","ifmam_version","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_cap","ifru_data","ifru_devmtu","ifru_dstaddr","ifru_flags","ifru_functional_type","ifru_intval","ifru_kpi","ifru_media","ifru_metrics","ifru_mtu","ifru_phys","ifru_route_refcnt","ifru_wake_flags","image_offset","importance","importance","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","inactive_count","inactive_count","inactive_count","inactive_count","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","internal_page_count","internal_page_count","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","introspect","ioctl","iov_base","iov_len","iovec","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","jrand48","kCCAlignmentError","kCCBufferTooSmall","kCCCallSequenceError","kCCDecodeError","kCCInvalidKey","kCCKeySizeError","kCCMemoryFailure","kCCOverflow","kCCParamError","kCCRNGFailure","kCCSuccess","kCCUnimplemented","kCCUnspecifiedError","kern_return_t","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l2p_contigbytes","l2p_devoffset","l2p_flags","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lcong48","lconv","ledger_array_t","ledger_t","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","log2phys","login_tty","lookups","lookups","lookups","lookups","lrand48","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_factor","mach_header","mach_header_64","mach_host_self","mach_msg_type_number_t","mach_port_t","mach_task_basic_info","mach_task_basic_info_data_t","mach_task_basic_info_t","mach_task_self","mach_task_self_","mach_thread_self","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","mach_vm_address_t","mach_vm_map","mach_vm_offset_t","mach_vm_size_t","machine","madvise","magic","magic","major","makedev","malloc","malloc","malloc_default_zone","malloc_good_size","malloc_introspection_t","malloc_printf","malloc_size","malloc_statistics_t","malloc_zone_calloc","malloc_zone_check","malloc_zone_free","malloc_zone_from_ptr","malloc_zone_log","malloc_zone_malloc","malloc_zone_print","malloc_zone_print_ptr_info","malloc_zone_realloc","malloc_zone_statistics","malloc_zone_t","malloc_zone_valloc","max_align_t","max_size_in_use","maxerror","maxerror","maxprot","maxprot","mcontext_t","mem_entry_name_port_t","memalign","memchr","memcmp","memcpy","memmem","memmove","memory_object_offset_t","memory_object_t","memset","memset_pattern16","memset_pattern4","memset_pattern8","memset_s","microseconds","mincore","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mrand48","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","mstats","mstats","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","name","nanosleep","nativeattr","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","no_data","no_data","nodename","nrand48","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","numer","off_t","offset","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","option","os_log_create","os_log_t","os_log_type_enabled","os_log_type_t","os_signpost_enabled","os_signpost_id_generate","os_signpost_id_make_with_pointer","os_signpost_id_t","os_signpost_type_t","os_unfair_lock","os_unfair_lock_assert_not_owner","os_unfair_lock_assert_owner","os_unfair_lock_lock","os_unfair_lock_s","os_unfair_lock_t","os_unfair_lock_trylock","os_unfair_lock_unlock","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","pageins","pageins","pageins","pageins","pageouts","pageouts","pageouts","pageouts","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","period","period","perror","pid_t","pipe","policy","policy","policy","policy","policy_t","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_get_qos_class_np","posix_spawnattr_getarchpref_np","posix_spawnattr_getbinpref_np","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_set_qos_class_np","posix_spawnattr_setarchpref_np","posix_spawnattr_setbinpref_np","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","preemptible","preemptible","pressure_relief","printf","priority","priority","proc_bsdinfo","proc_kmsgbuf","proc_libversion","proc_listallpids","proc_listchildpids","proc_listpgrppids","proc_listpids","proc_name","proc_pid_rusage","proc_pidfdinfo","proc_pidfileportinfo","proc_pidinfo","proc_pidpath","proc_regionfilename","proc_set_csm","proc_set_no_smt","proc_setthread_csm","proc_setthread_no_smt","proc_taskallinfo","proc_taskinfo","proc_threadinfo","proc_vnodepathinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_cpu_usage","pth_cpu_usage","pth_curpri","pth_curpri","pth_curpri","pth_flags","pth_flags","pth_flags","pth_maxpriority","pth_maxpriority","pth_maxpriority","pth_name","pth_name","pth_name","pth_policy","pth_policy","pth_policy","pth_priority","pth_priority","pth_priority","pth_run_state","pth_run_state","pth_run_state","pth_sleep_time","pth_sleep_time","pth_sleep_time","pth_system_time","pth_system_time","pth_system_time","pth_user_time","pth_user_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_get_qos_class_np","pthread_attr_getschedparam","pthread_attr_getstacksize","pthread_attr_init","pthread_attr_set_qos_class_np","pthread_attr_setdetachstate","pthread_attr_setschedparam","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_cpu_number_np","pthread_create","pthread_create_from_mach_thread","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_qos_class_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_introspection_getspecific_np","pthread_introspection_hook_install","pthread_introspection_hook_t","pthread_introspection_setspecific_np","pthread_jit_write_callback_t","pthread_jit_write_freeze_callbacks_np","pthread_jit_write_protect_np","pthread_jit_write_protect_supported_np","pthread_jit_write_with_callback_np","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mach_thread_np","pthread_main_np","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_set_qos_class_self_np","pthread_setname_np","pthread_setschedparam","pthread_setspecific","pthread_sigmask","pthread_stack_frame_decode_np","pthread_t","pthread_threadid_np","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","purgeable_count","purgeable_count","purgeable_count","purgeable_count","purges","purges","purges","purges","putchar","putchar_unlocked","putenv","puts","pututxline","pvi_cdir","pvi_rdir","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qos_class_t","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","reactivations","reactivations","reactivations","reactivations","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","reserved","reserved","reserved","resident_size","resident_size","resident_size_max","resident_size_max","revents","rewind","rewinddir","rfu_1","ri_billed_energy","ri_billed_system_time","ri_billed_system_time","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_cpu_time_qos_background","ri_cpu_time_qos_background","ri_cpu_time_qos_default","ri_cpu_time_qos_default","ri_cpu_time_qos_legacy","ri_cpu_time_qos_legacy","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_utility","ri_cpu_time_qos_utility","ri_cycles","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_instructions","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interval_max_phys_footprint","ri_lifetime_max_phys_footprint","ri_logical_writes","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_runnable_time","ri_serviced_energy","ri_serviced_system_time","ri_serviced_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","rmx_expire","rmx_filler","rmx_hopcount","rmx_locks","rmx_mtu","rmx_pksent","rmx_recvpipe","rmx_rtt","rmx_rttvar","rmx_sendpipe","rmx_ssthresh","rmx_state","rt_metrics","rt_msghdr","rt_msghdr2","rtm_addrs","rtm_addrs","rtm_errno","rtm_flags","rtm_flags","rtm_index","rtm_index","rtm_inits","rtm_inits","rtm_msglen","rtm_msglen","rtm_parentflags","rtm_pid","rtm_refcnt","rtm_reserved","rtm_rmx","rtm_rmx","rtm_seq","rtm_type","rtm_type","rtm_use","rtm_use","rtm_version","rtm_version","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","run_state","run_state","running","running","rusage","rusage_info_t","rusage_info_v0","rusage_info_v1","rusage_info_v2","rusage_info_v3","rusage_info_v4","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_get_priority_max","sched_get_priority_min","sched_param","sched_priority","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seconds","seed48","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setattrlist","setattrlistat","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostid","sethostname","setitimer","setlocale","setlogin","setlogmask","setpgid","setpriority","setprogname","setpwent","setregid","setreuid","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size","size","size_allocated","size_in_use","size_t","sizeofcmds","sizeofcmds","sleep","sleep_time","sleep_time","slot_num","slot_num","snd_family","snd_len","snd_name","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_ndrv","sockaddr_storage","sockaddr_un","sockaddr_vm","socket","socketpair","socklen_t","speculative_count","speculative_count","speculative_count","speculative_count","speed_t","sprintf","srand","srand48","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtonum","strtoul","strtoull","strxfrm","sun_family","sun_len","sun_path","suseconds_t","suspend_count","suspend_count","suspend_count","suspend_count","svm_cid","svm_family","svm_len","svm_port","svm_reserved1","swapins","swapins","swapouts","swapouts","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","sysdir_get_next_search_path_enumeration","sysdir_search_path_directory_t","sysdir_search_path_domain_mask_t","sysdir_search_path_enumeration_state","sysdir_start_search_path_enumeration","syslog","sysname","system","system_time","system_time","system_time","system_time","system_time","system_time","tai","task_count","task_count","task_create","task_flavor_t","task_for_pid","task_info","task_info_t","task_inspect_t","task_set_info","task_t","task_terminate","task_thread_times_info","task_thread_times_info_data_t","task_thread_times_info_t","task_threads","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_act_array_t","thread_act_t","thread_affinity_policy","thread_affinity_policy_data_t","thread_affinity_policy_t","thread_background_policy","thread_background_policy_data_t","thread_background_policy_t","thread_basic_info","thread_basic_info_data_t","thread_basic_info_t","thread_count","thread_count","thread_extended_info","thread_extended_info_data_t","thread_extended_info_t","thread_extended_policy","thread_extended_policy_data_t","thread_extended_policy_t","thread_flavor_t","thread_handle","thread_handle","thread_id","thread_id","thread_identifier_info","thread_identifier_info_data_t","thread_identifier_info_t","thread_info","thread_info_t","thread_inspect_t","thread_latency_qos_policy","thread_latency_qos_policy_data_t","thread_latency_qos_policy_t","thread_latency_qos_t","thread_latency_qos_tier","thread_latency_qos_tier","thread_policy_flavor_t","thread_policy_get","thread_policy_set","thread_policy_t","thread_precedence_policy","thread_precedence_policy_data_t","thread_precedence_policy_t","thread_standard_policy","thread_standard_policy_data_t","thread_standard_policy_t","thread_t","thread_throughput_qos_policy","thread_throughput_qos_policy_data_t","thread_throughput_qos_policy_t","thread_throughput_qos_t","thread_throughput_qos_tier","thread_throughput_qos_tier","thread_time_constraint_policy","thread_time_constraint_policy_data_t","thread_time_constraint_policy_t","throttled_count","throttled_count","time","time","time_state","time_t","time_value_t","timegm","times","timeshare","timeshare","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","total_uncompressed_pages_in_compressor","total_uncompressed_pages_in_compressor","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","user_time","user_time","user_time","user_time","user_time","user_time","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","uuid","uuid_t","val","val","valid","validattr","valloc","version","version","vi_fsid","vi_pad","vi_stat","vi_type","vinfo_stat","vip_path","vip_vi","virtual_size","virtual_size","vm_address_t","vm_deallocate","vm_inherit_t","vm_map_t","vm_offset_t","vm_page_size","vm_prot_t","vm_range_t","vm_size_t","vm_statistics","vm_statistics64","vm_statistics64_data_t","vm_statistics64_t","vm_statistics_data_t","vm_statistics_t","vmaddr","vmaddr","vmsize","vmsize","vnode_info","vnode_info_path","vol_attributes_attr_t","vol_capabilities_attr_t","vol_capabilities_set_t","volattr","volattr","vst_atime","vst_atimensec","vst_birthtime","vst_birthtimensec","vst_blksize","vst_blocks","vst_ctime","vst_ctimensec","vst_dev","vst_flags","vst_gen","vst_gid","vst_ino","vst_mode","vst_mtime","vst_mtimensec","vst_nlink","vst_qspare","vst_rdev","vst_size","vst_uid","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wire_count","wire_count","wire_count","wire_count","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred","zero_fill_count","zero_fill_count","zero_fill_count","zero_fill_count","zone_name"],"q":[[0,"libc"],[6035,"core::fmt"],[6036,"core::fmt"],[6037,"core::any"]],"ddata includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/writehird Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debugger","XTP","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","No value.","No valuesae_associd_t)(-1ULL))","","((sae_connid_t)(-1ULL))","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process being created by fork.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Currently runnable.","Sleeping on an address.","Process debugging or suspension.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Awaiting collection by parent.","","","","","","","","","","","","","","","","","","","","","","","","","","","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","","","","","","","Enable/Disable TCP Fastopen on this socketquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Notesalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,176,0,0,0,0,0,0,175,0,174,175,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,174,176,176,178,178,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,174,175,179,0,0,0,0,0,97,97,0,0,0,0,0,15,197,198,121,157,115,0,0,199,109,52,52,52,52,52,52,52,52,50,0,0,50,0,50,50,50,0,50,0,50,0,0,0,0,99,99,99,99,99,0,0,0,0,168,0,0,0,0,0,0,0,130,130,0,0,0,0,0,0,0,0,0,0,0,181,181,171,171,171,171,0,129,0,0,113,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,185,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,185,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,0,0,0,168,114,114,114,78,78,0,0,0,78,0,78,78,0,0,78,78,0,0,0,0,0,0,0,0,103,0,181,131,0,0,0,0,0,0,0,97,0,0,0,0,0,114,114,181,0,0,0,0,0,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,0,0,0,0,0,89,90,91,89,90,91,1,1,1,0,129,132,198,157,198,157,200,107,0,0,0,103,200,107,0,0,0,0,0,0,0,0,197,198,121,157,201,148,0,202,147,201,148,0,203,152,87,88,87,88,86,86,86,86,0,0,0,183,0,183,97,81,140,140,140,140,140,140,69,135,81,198,157,204,149,205,53,181,0,0,129,132,0,0,0,0,206,153,0,0,0,67,67,67,67,0,0,70,70,70,70,70,70,70,70,70,70,0,0,0,0,0,83,83,0,0,0,0,0,103,103,104,23,0,0,0,0,0,0,0,0,0,69,198,157,66,139,66,139,66,139,66,139,66,66,139,66,139,66,139,139,66,66,139,139,139,139,139,139,66,139,139,139,0,197,198,121,157,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,69,135,0,0,0,0,0,0,129,132,0,89,90,89,90,87,88,69,135,40,203,69,87,88,89,90,135,152,0,0,0,0,0,185,0,0,129,132,0,62,62,62,0,0,0,0,0,0,81,0,0,0,181,197,198,121,157,181,0,0,0,0,0,103,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,185,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,0,0,0,0,0,0,0,0,0,0,64,64,64,61,61,61,61,61,0,0,0,0,0,0,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,51,51,51,0,0,0,0,0,14,14,14,14,0,0,81,21,21,21,21,21,40,80,80,197,198,121,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,135,0,0,0,0,37,0,0,0,37,0,0,0,34,34,34,34,0,34,34,34,0,72,72,72,72,72,72,72,134,134,0,167,167,0,162,162,162,155,170,155,170,155,170,155,170,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,155,170,170,170,155,170,155,170,155,170,170,155,170,155,170,164,164,163,164,163,0,71,156,71,156,71,156,71,156,71,156,156,156,156,156,71,156,71,156,0,0,73,74,73,74,73,74,73,74,74,73,74,73,74,166,166,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,0,207,108,48,48,47,49,47,48,49,49,0,0,0,0,0,0,197,198,121,157,0,89,90,0,0,0,0,0,81,81,81,81,81,81,81,81,0,198,157,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,185,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,0,181,0,22,22,0,0,0,0,0,96,96,95,95,95,0,20,20,201,148,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,0,103,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,159,159,79,25,25,79,79,79,79,0,0,0,0,0,0,0,0,0,0,0,0,208,150,0,0,0,0,0,0,0,0,0,197,198,121,157,0,0,0,0,0,208,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,87,88,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,103,104,89,90,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,103,15,81,81,81,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0,81,81,81,40,0,133,0,87,88,81,0,0,0,0,0,0,209,105,42,0,89,90,0,0,0,205,53,0,103,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,81,30,30,81,81,197,198,121,157,197,198,121,157,0,0,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,0,200,107,0,0,0,210,203,152,158,0,0,0,0,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0,103,200,107,181,0,211,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,138,154,212,138,154,212,138,154,212,138,154,212,138,154,212,138,154,212,138,154,212,138,154,212,138,154,212,138,154,212,138,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,84,0,0,0,197,198,121,157,197,198,121,157,0,0,0,0,0,120,120,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,0,65,65,0,0,0,197,198,121,157,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,62,64,88,129,210,158,210,158,23,0,0,83,127,126,127,124,125,126,127,124,125,126,127,124,125,126,127,124,125,126,127,124,125,126,127,124,125,126,127,126,127,126,127,126,127,126,127,126,127,126,127,126,127,127,125,126,127,125,126,127,127,123,124,125,126,127,127,127,127,123,124,125,126,127,123,124,125,126,127,123,124,125,126,127,123,124,125,126,127,123,124,125,126,127,123,124,125,126,127,127,127,126,127,123,124,125,126,127,123,124,125,126,127,123,124,125,126,127,123,124,125,126,127,18,18,0,0,39,39,0,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,76,77,76,76,77,76,77,76,77,76,77,77,76,77,77,76,77,76,76,77,76,77,76,77,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,203,152,201,148,0,0,0,0,0,0,0,184,100,29,29,29,29,31,0,31,0,59,31,59,59,0,0,102,102,102,102,102,0,94,94,94,94,94,0,0,0,0,116,0,92,92,92,92,92,92,92,92,151,0,0,0,0,89,90,0,136,0,136,98,136,98,98,0,136,136,136,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,137,137,137,137,137,137,137,0,137,137,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,0,146,146,146,146,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,68,93,68,93,68,93,93,68,93,93,93,68,26,115,181,113,113,0,87,88,0,203,152,201,148,101,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,198,121,157,0,0,0,0,144,60,144,60,60,94,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,103,0,0,0,0,0,103,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,41,41,0,210,203,152,158,161,161,161,161,161,198,157,198,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,210,213,203,122,152,158,104,208,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,0,0,0,0,0,0,0,0,208,150,0,0,0,0,0,0,0,206,153,206,153,0,0,0,0,0,0,0,0,0,0,214,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,112,0,0,0,198,157,0,104,104,0,0,0,0,216,106,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,0,0,0,28,28,28,28,103,0,198,157,0,80,80,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,185,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,185,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,0,0,17,16,17,169,16,169,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,6,35,3,1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,185,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,173,173,173,173,173,173,0,69,135,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,213,203,122,152,158,0,145,145,145,145,145,145,145,0,0,0,0,0,0,0,128,0,40,168,131,133,181,42,181,118,118,118,118,0,119,119,210,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,89,90,0,0,0,0,0,129,132,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,0,0,0,0,0,0,0,197,198,121,157,0,0,0,24,24,24,24,85,85,85,85,85,0,0,197,198,121,157,181],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,1],[4,4],[[3,1],1],[4,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,6],7],[[5,6],8],[[5,6],7],0,[6,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,5],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,8],0,[5,5],[5,8],[5,8],[5,8],[5,8],0,0,0,[5,5],[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[6,6],[35,35],[3,3],[1,1],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[185,186],[[188,[7,187]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],189],0,0,0,0,0,0,0,0,0,0,0,0,0,[190,191],[[191,191],190],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[190,191],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[58,185],0,0,0,[58,192],0,0,[58,5],0,[58,193],0,[58,26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],[-1,[[188,[-2]]],[],[]],0,0,0,0,0,0,0,0,[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],[-1,194,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[59,1536,1788,1789,1790,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2465,2466,2467,2468,3191,3192,3193,3194,3220,3221,3344,3345,3351,3352,3888,3889,3890,3891,4184,4187,4188,4198,4199,4200,4207,4208,4299,4300,4317,4318,4693,5073,5074,5902,5903,5904,5905],"p":[[3,"cmsghdr",0],[6,"c_uchar",0],[3,"msghdr",0],[6,"c_uint",0],[6,"c_int",0],[3,"fd_set",0],[15,"tuple"],[15,"bool"],[15,"u8"],[15,"u32"],[4,"DIR",0],[4,"FILE",0],[4,"fpos_t",0],[3,"group",0],[3,"utimbuf",0],[3,"timeval",0],[3,"timespec",0],[3,"rlimit",0],[3,"rusage",0],[3,"ipv6_mreq",0],[3,"hostent",0],[3,"iovec",0],[3,"pollfd",0],[3,"winsize",0],[3,"linger",0],[3,"sigval",0],[3,"itimerval",0],[3,"tms",0],[3,"servent",0],[3,"protoent",0],[3,"sockaddr",0],[3,"sockaddr_in6",0],[3,"passwd",0],[3,"ifaddrs",0],[3,"tm",0],[3,"fsid_t",0],[3,"if_nameindex",0],[3,"regex_t",0],[3,"regmatch_t",0],[3,"option",0],[3,"sockaddr_un",0],[3,"utsname",0],[4,"timezone",0],[4,"qos_class_t",0],[4,"sysdir_search_path_directory_t",0],[4,"sysdir_search_path_domain_mask_t",0],[3,"ip_mreq",0],[3,"ip_mreqn",0],[3,"ip_mreq_source",0],[3,"aiocb",0],[3,"glob_t",0],[3,"addrinfo",0],[3,"mach_timebase_info",0],[3,"stat",0],[3,"pthread_mutexattr_t",0],[3,"pthread_condattr_t",0],[3,"pthread_rwlockattr_t",0],[3,"siginfo_t",0],[3,"sigaction",0],[3,"stack_t",0],[3,"fstore_t",0],[3,"fpunchhole_t",0],[3,"ftrimactivefile_t",0],[3,"fspecread_t",0],[3,"radvisory",0],[3,"statvfs",0],[3,"Dl_info",0],[3,"sockaddr_in",0],[3,"kevent64_s",0],[3,"dqblk",0],[3,"if_msghdr",0],[3,"ifa_msghdr",0],[3,"ifma_msghdr",0],[3,"ifma_msghdr2",0],[3,"rt_metrics",0],[3,"rt_msghdr",0],[3,"rt_msghdr2",0],[3,"termios",0],[3,"flock",0],[3,"sf_hdtr",0],[3,"lconv",0],[3,"proc_taskinfo",0],[3,"proc_bsdinfo",0],[3,"proc_taskallinfo",0],[3,"xsw_usage",0],[3,"xucred",0],[3,"mach_header",0],[3,"mach_header_64",0],[3,"segment_command",0],[3,"segment_command_64",0],[3,"load_command",0],[3,"sockaddr_dl",0],[3,"sockaddr_inarp",0],[3,"sockaddr_ctl",0],[3,"in_pktinfo",0],[3,"in6_pktinfo",0],[3,"ipc_perm",0],[3,"sembuf",0],[3,"arphdr",0],[3,"in_addr",0],[3,"sockaddr_ndrv",0],[3,"sa_endpoints_t",0],[3,"timex",0],[3,"ntptimeval",0],[3,"thread_standard_policy",0],[3,"thread_extended_policy",0],[3,"thread_time_constraint_policy",0],[3,"thread_precedence_policy",0],[3,"thread_affinity_policy",0],[3,"thread_background_policy",0],[3,"thread_latency_qos_policy",0],[3,"thread_throughput_qos_policy",0],[3,"malloc_statistics_t",0],[3,"mstats",0],[3,"vm_range_t",0],[3,"sched_param",0],[3,"vinfo_stat",0],[3,"vnode_info",0],[3,"vnode_info_path",0],[3,"proc_vnodepathinfo",0],[3,"vm_statistics",0],[3,"task_thread_times_info",0],[3,"rusage_info_v0",0],[3,"rusage_info_v1",0],[3,"rusage_info_v2",0],[3,"rusage_info_v3",0],[3,"rusage_info_v4",0],[3,"image_offset",0],[3,"attrlist",0],[3,"attrreference_t",0],[3,"vol_capabilities_attr_t",0],[3,"attribute_set_t",0],[3,"vol_attributes_attr_t",0],[3,"ifconf",0],[3,"kevent",0],[3,"semid_ds",0],[3,"shmid_ds",0],[3,"proc_threadinfo",0],[3,"statfs",0],[3,"dirent",0],[3,"pthread_rwlock_t",0],[3,"pthread_mutex_t",0],[3,"pthread_cond_t",0],[3,"sockaddr_storage",0],[3,"utmpx",0],[3,"sigevent",0],[3,"processor_cpu_load_info",0],[3,"processor_basic_info",0],[3,"processor_set_basic_info",0],[3,"processor_set_load_info",0],[3,"time_value_t",0],[3,"thread_basic_info",0],[3,"thread_identifier_info",0],[3,"thread_extended_info",0],[3,"if_data64",0],[3,"if_msghdr2",0],[3,"vm_statistics64",0],[3,"mach_task_basic_info",0],[3,"log2phys",0],[3,"os_unfair_lock_s",0],[3,"sockaddr_vm",0],[3,"ifdevmtu",0],[19,"__c_anonymous_ifk_data",0],[3,"ifkpi",0],[19,"__c_anonymous_ifr_ifru",0],[3,"ifreq",0],[19,"__c_anonymous_ifc_ifcu",0],[19,"semun",0],[3,"timeval32",0],[3,"if_data",0],[3,"bpf_hdr",0],[3,"pthread_attr_t",0],[3,"ucontext_t",0],[3,"__darwin_mcontext64",0],[3,"__darwin_x86_exception_state64",0],[3,"__darwin_x86_thread_state64",0],[3,"__darwin_x86_float_state64",0],[3,"__darwin_mmst_reg",0],[3,"__darwin_xmm_reg",0],[3,"malloc_introspection_t",0],[3,"malloc_zone_t",0],[3,"max_align_t",0],[3,"ctl_info",0],[3,"in6_addr",0],[4,"c_void",0],[3,"Formatter",6035],[3,"Error",6035],[4,"Result",6036],[6,"mach_port_t",0],[6,"dev_t",0],[15,"i32"],[6,"pid_t",0],[6,"uid_t",0],[3,"TypeId",6037],[6,"pthread_jit_write_callback_t",0],[6,"copyfile_callback_t",0],[6,"vm_statistics_data_t",0],[6,"vm_statistics64_data_t",0],[6,"thread_affinity_policy_data_t",0],[6,"thread_time_constraint_policy_data_t",0],[6,"processor_basic_info_data_t",0],[6,"processor_cpu_load_info_data_t",0],[6,"thread_basic_info_data_t",0],[6,"processor_set_basic_info_data_t",0],[6,"mach_timebase_info_data_t",0],[6,"thread_identifier_info_data_t",0],[6,"thread_precedence_policy_data_t",0],[6,"processor_set_load_info_data_t",0],[6,"thread_standard_policy_data_t",0],[6,"mach_task_basic_info_data_t",0],[6,"thread_background_policy_data_t",0],[6,"thread_extended_info_data_t",0],[6,"task_thread_times_info_data_t",0],[6,"thread_latency_qos_policy_data_t",0],[6,"thread_throughput_qos_policy_data_t",0],[6,"thread_extended_policy_data_t",0]],"a":{"__errno_location":[2399],"errno":[2399]}},\
"lightning":{"doc":"Rust-Lightning, not Rusty’s Lightning!","t":"AAOOAOOOOAAOOOOOOOOAAOAAODDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENIININIDKLKLMLLLLLLAAALLLLLLLLLLLLKLLLLLKLLLLLALMKKKMLLLAKKLLLLLLLLLKKNIERINRNLLKLLLLLLKLLLLLLDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLRERDDNNNNNNNDNNEGNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMMMMMMMMMINDIIDDDSSNIDNEQIENNDILLLLLLLLLLLLLLLLKLMMMMLLLLLLLLLLMLLMLLKLLKLLLLLLLLLLLLLLLLLLLLLLMLKLLLKLLKLLKLLLLKLLKLLLKLLLLMLLLLLLLLLLLLLMMMMMMKLKLLLLLLLLKLLKLMMLLKLKLKLKLLLKLLKLKLKLLKLKLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLMMDGLLLLLLLLLLMLLLLLLLLLLMLLNNNNNNENNNNNEIINNNENNNNNNNEINNINNENNNNENNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNDDNIDDDDNNNNNDNNDNNDENNNNNNDNNNDDNIDDNNNNNNNNNNGINDNGIEDDNNDDDDDDNDNNNNNINDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLKLLLLLLLLLFLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIILLLLKKKLLLLKLLLLLLLLLKLLLLKLLLLRDDDLLLLLLLAALLLLLLLLLLLLALLLLLLLLLLALLLAALLLLLLALLLLLLLLLLLLALLLLNNDDDDDDDDEDDRRRRNNRNDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLFFFFFLLLLLLLLLLLLLLLLLLLLLLMLLMMMMLMLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFFFLLFLLLFLMMMFFLLLLLLLLLLLLLLLLMLLFLLLLMLLMMMMMLMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLNNNRDDDDDDNNENNDRRNNNNDENDEDNEENGGNNLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMMLLLLLLMMLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLMMMMLLLLMMLLMLMMMMMMMMLLMLLLFLLLLLLLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMLMLLLLLLLLMMMMMMMGGGGDGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLFFLLLLLLNDDNDNIDDDNDDDDDENEDDDDNNNNNNDNNDEDNDINNDEDDNDDDDDINNNDNNDDEDNDDDDDDMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMKKKKKKKKKKKKKKKKKKKKKKKKKKKKMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMKKKKKMMKKKKKKKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMIDDDDDGGILLLLLLLLLLLMLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLQIIKKAAAAADDDDDIDLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNGDDIDDNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMNNNNNNNNNNNNNNNNNNNNNNNEENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNQIIENNNNEDNEGGNNLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLKLLLLLLLLLLLLLLAAAANDDNDENNNDEDDNDDDDDNRNLLLMMMMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLMMMLLLLLMMLMLLLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMNDNRRDEDDDDDDDDIDMMLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMMLMMLMLMMFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLMMMLLLMMMMMLLMLLLMLLLLLLLLLLLLLLLMLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIQGDDIILLMMMMLLLLLLLLKLLLLLLLLLMLLMLLLLLLLLMMMMLLLLMMMKMLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLNNNNDIEELLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLAAAAAAAAAAADDDDMMMMLLLLLLLLMMMLLLLLLLLMMLLLLLLLLLLMMMMLLLLLLLLMMMMMMMMMMMMMMMLLLMMLLLLMLLLLLLLLLLLLLENNNNNNLLLLLLLLLLLLLLLMMMMMMEDNDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFNNNNEIDNNMLLLLLLLLLLLMLLLLLLLLLLLMMKLLMLLLLLLLLLLLFFFIIKKKKDDDDRIDIIDDDIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIDLLLLKLLLLLLLLLLLLLLLLLLLLLLL","n":["blinded_path","chain","decode_tlv_stream","encode_tlv_stream","events","impl_writeable_msg","impl_writeable_tlv_based","impl_writeable_tlv_based_enum","impl_writeable_tlv_based_enum_upgradable","io","ln","log_bytes","log_debug","log_error","log_gossip","log_info","log_pubkey","log_trace","log_warn","offers","onion_message","read_tlv_fields","routing","util","write_tlv_fields","BlindedHop","BlindedPath","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","hash","into","into","new_for_message","read","read","read","read","serialized_length","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write","BestBlock","ChannelMonitorUpdateStatus","Completed","Confirm","Filter","InProgress","Listen","PermanentFailure","Watch","WatchedOutput","best_block_updated","block_connected","block_disconnected","block_hash","block_hash","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chaininterface","chainmonitor","channelmonitor","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","filtered_block_connected","fmt","from","from","from","from_network","get_relevant_txids","hash","height","into","into","into","keysinterface","new","outpoint","register_output","register_tx","release_pending_monitor_events","script_pubkey","to_owned","to_owned","to_owned","transaction","transaction_unconfirmed","transactions_confirmed","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_channel","watch_channel","Background","BroadcasterInterface","ConfirmationTarget","FEERATE_FLOOR_SATS_PER_KW","FeeEstimator","HighPriority","MIN_RELAY_FEE_SAT_PER_1000_WEIGHT","Normal","borrow","borrow_mut","broadcast_transaction","clone","clone_into","eq","equivalent","fmt","from","get_est_sat_per_1000_weight","hash","into","to_owned","try_from","try_into","type_id","ChainMonitor","LockedChannelMonitor","MonitorUpdateId","Persist","best_block_updated","block_disconnected","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel_monitor_updated","clone","clone_into","deref","eq","equivalent","filtered_block_connected","from","from","from","get_claimable_balances","get_monitor","get_relevant_txids","get_update_future","hash","into","into","into","list_monitors","list_pending_monitor_updates","new","persist_new_channel","process_pending_events","process_pending_events_async","rebroadcast_pending_claims","release_pending_monitor_events","to_owned","transaction_unconfirmed","transactions_confirmed","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_channel","update_persisted_channel","watch_channel","ANTI_REORG_DELAY","Balance","CLOSED_CHANNEL_UPDATE_ID","ChannelMonitor","ChannelMonitorUpdate","ClaimableAwaitingConfirmations","ClaimableOnChannelClose","CommitmentTxConfirmed","Completed","ContentiousClaimable","CounterpartyRevokedOutputClaimable","HTLCEvent","HTLCUpdate","MaybePreimageClaimableHTLC","MaybeTimeoutClaimableHTLC","MonitorEvent","TransactionOutputs","UpdateFailed","best_block_updated","block_connected","block_disconnected","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","current_best_block","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from","from","from","from","get_and_clear_pending_events","get_and_clear_pending_monitor_events","get_claimable_balances","get_counterparty_node_id","get_funding_txo","get_latest_holder_commitment_txn","get_latest_update_id","get_outputs_to_watch","get_relevant_txids","into","into","into","into","into","load_outputs_to_watch","read","read","read","read","read","rebroadcast_pending_claims","serialized_length","to_owned","to_owned","to_owned","to_owned","transaction_unconfirmed","transactions_confirmed","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_id","update_monitor","write","write","write","write","claimable_amount_satoshis","claimable_amount_satoshis","claimable_amount_satoshis","claimable_amount_satoshis","claimable_amount_satoshis","claimable_amount_satoshis","claimable_height","confirmation_height","expiry_height","timeout_height","funding_txo","monitor_update_id","ChannelSigner","DelayedPaymentOutput","DelayedPaymentOutputDescriptor","EcdsaChannelSigner","EntropySource","InMemorySigner","KeyMaterial","KeysManager","MAX_WITNESS_LENGTH","MAX_WITNESS_LENGTH","Node","NodeSigner","PhantomKeysManager","PhantomNode","Recipient","Signer","SignerProvider","SpendableOutputDescriptor","StaticOutput","StaticPaymentOutput","StaticPaymentOutputDescriptor","WriteableEcdsaChannelSigner","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_keys_id","channel_keys_id","channel_keys_id","channel_keys_id","channel_value_satoshis","channel_value_satoshis","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","commitment_seed","counterparty_pubkeys","counterparty_selected_contest_delay","delayed_payment_base_key","derive_channel_keys","derive_channel_keys","derive_channel_signer","derive_channel_signer","derive_channel_signer","ecdh","ecdh","ecdh","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","funding_key","funding_outpoint","generate_channel_keys_id","generate_channel_keys_id","generate_channel_keys_id","get_channel_parameters","get_destination_script","get_destination_script","get_destination_script","get_inbound_payment_key_material","get_inbound_payment_key_material","get_inbound_payment_key_material","get_node_id","get_node_id","get_node_id","get_node_secret_key","get_node_secret_key","get_per_commitment_point","get_per_commitment_point","get_phantom_node_secret_key","get_secure_random_bytes","get_secure_random_bytes","get_secure_random_bytes","get_secure_random_bytes","get_shutdown_scriptpubkey","get_shutdown_scriptpubkey","get_shutdown_scriptpubkey","hash","holder_selected_contest_delay","htlc_base_key","into","into","into","into","into","into","into","into","is_outbound","new","new","new","opt_anchors","outpoint","outpoint","output","output","payment_key","per_commitment_point","provide_channel_parameters","provide_channel_parameters","pubkeys","pubkeys","read","read","read","read","read","read","read","read_chan_signer","read_chan_signer","read_chan_signer","release_commitment_secret","release_commitment_secret","revocation_base_key","revocation_pubkey","serialized_length","serialized_length","sign_channel_announcement_with_funding_key","sign_channel_announcement_with_funding_key","sign_closing_transaction","sign_closing_transaction","sign_counterparty_commitment","sign_counterparty_commitment","sign_counterparty_htlc_transaction","sign_counterparty_htlc_transaction","sign_counterparty_payment_input","sign_dynamic_p2wsh_input","sign_gossip_message","sign_gossip_message","sign_gossip_message","sign_holder_anchor_input","sign_holder_anchor_input","sign_holder_commitment_and_htlcs","sign_holder_commitment_and_htlcs","sign_invoice","sign_invoice","sign_invoice","sign_justice_revoked_htlc","sign_justice_revoked_htlc","sign_justice_revoked_output","sign_justice_revoked_output","spend_spendable_outputs","spend_spendable_outputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_self_delay","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_counterparty_revocation","validate_counterparty_revocation","validate_holder_commitment","validate_holder_commitment","write","write","write","write","outpoint","output","OutPoint","TransactionData","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","hash","index","into","into_bitcoin_outpoint","partial_cmp","read","read","serialized_length","to_channel_id","to_owned","try_from","try_into","txid","type_id","write","BroadcastChannelAnnouncement","BroadcastChannelUpdate","BroadcastNodeAnnouncement","ChannelClosed","ChannelPending","ChannelReady","ClosureReason","CommitmentTxConfirmed","CooperativeClosure","CounterpartyForceClosed","DiscardFunding","DisconnectedPeer","Event","EventHandler","EventsProvider","FailedPayment","FundingGenerationReady","FundingTimedOut","HTLCDestination","HTLCHandlingFailed","HTLCIntercepted","HandleError","HolderForceClosed","InitialSend","InvalidForward","InvoicePayment","MessageSendEvent","MessageSendEventsProvider","NextHopChannel","OnPath","OnionMessageProvider","OpenChannelRequest","OutdatedChannelManager","PathFailure","PaymentClaimable","PaymentClaimed","PaymentExpired","PaymentFailed","PaymentFailureReason","PaymentForwarded","PaymentPathFailed","PaymentPathSuccessful","PaymentPurpose","PaymentSent","PendingHTLCsForwardable","ProbeFailed","ProbeSuccessful","ProcessingError","RecipientRejected","RetriesExhausted","RouteNotFound","SendAcceptChannel","SendAnnouncementSignatures","SendChannelAnnouncement","SendChannelRangeQuery","SendChannelReady","SendChannelReestablish","SendChannelUpdate","SendClosingSigned","SendFundingCreated","SendFundingSigned","SendGossipTimestampFilter","SendOpenChannel","SendReplyChannelRange","SendRevokeAndACK","SendShortIdsQuery","SendShutdown","SpendableOutputs","SpontaneousPayment","UnexpectedError","UnknownNextHop","UpdateHTLCs","UserAbandoned","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_and_clear_pending_msg_events","handle_event","into","into","into","into","into","into","into","next_onion_message_for_peer","process_pending_events","read","read","read","read","read","read","read","read","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","err","peer_msg","amount_msat","amount_msat","channel_id","channel_id","channel_id","channel_id","channel_type","channel_type","channel_value_satoshis","claim_deadline","claim_from_onchain_tx","counterparty_node_id","counterparty_node_id","counterparty_node_id","counterparty_node_id","expected_outbound_amount_msat","failed_next_destination","failure","fee_earned_msat","fee_paid_msat","former_temporary_channel_id","funding_satoshis","funding_txo","inbound_amount_msat","intercept_id","next_channel_id","onion_fields","outbound_amount_forwarded_msat","output_script","outputs","path","path","path","path","payment_failed_permanently","payment_hash","payment_hash","payment_hash","payment_hash","payment_hash","payment_hash","payment_hash","payment_hash","payment_hash","payment_id","payment_id","payment_id","payment_id","payment_id","payment_id","payment_preimage","prev_channel_id","prev_channel_id","purpose","purpose","push_msat","reason","reason","receiver_node_id","receiver_node_id","requested_next_hop_scid","short_channel_id","short_channel_id","temporary_channel_id","temporary_channel_id","time_forwardable","transaction","user_channel_id","user_channel_id","user_channel_id","user_channel_id","via_channel_id","via_user_channel_id","channel_id","node_id","payment_hash","requested_forward_scid","requested_forward_scid","action","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","msg","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","node_id","update_msg","update_msg","updates","err","network_update","payment_preimage","payment_secret","AddrInUse","AddrNotAvailable","AlreadyExists","ArgumentListTooLong","BorrowedBuf","BorrowedCursor","BrokenPipe","BufRead","BufReader","BufWriter","Bytes","Chain","ConnectionAborted","ConnectionRefused","ConnectionReset","CrossesDevices","Current","Cursor","Deadlock","DirectoryNotEmpty","Empty","End","Err","Error","ErrorKind","ExecutableFileBusy","FileTooLarge","FilesystemLoop","FilesystemQuotaExceeded","HostUnreachable","Interrupted","IntoInnerError","InvalidData","InvalidFilename","InvalidInput","IoSlice","IoSliceMut","IsADirectory","IsTerminal","LineWriter","Lines","NetworkDown","NetworkUnreachable","NotADirectory","NotConnected","NotFound","NotSeekable","Ok","Other","OutOfMemory","PermissionDenied","RawOsError","Read","ReadOnlyFilesystem","Repeat","ResourceBusy","Result","Seek","SeekFrom","Sink","Split","StaleNetworkFileHandle","Start","Stderr","StderrLock","Stdin","StdinLock","Stdout","StdoutLock","StorageFull","Take","TimedOut","TooManyLinks","UnexpectedEof","Unsupported","WouldBlock","Write","WriteZero","WriterPanicked","advance","advance","advance","advance_slices","advance_slices","append","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_mut","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","by_ref","by_ref","bytes","capacity","capacity","capacity","capacity","cause","chain","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","consume","consume","consume","consume","consume","consume","consume","copy","default","default","default","deref","deref","deref_mut","description","description","description","downcast","drop","emit_bool","emit_bool","emit_bool","emit_bool","emit_bool","emit_bool","emit_bool","emit_bool","emit_bool","emit_bool","emit_i16","emit_i16","emit_i16","emit_i16","emit_i16","emit_i16","emit_i16","emit_i16","emit_i16","emit_i16","emit_i32","emit_i32","emit_i32","emit_i32","emit_i32","emit_i32","emit_i32","emit_i32","emit_i32","emit_i32","emit_i64","emit_i64","emit_i64","emit_i64","emit_i64","emit_i64","emit_i64","emit_i64","emit_i64","emit_i64","emit_i8","emit_i8","emit_i8","emit_i8","emit_i8","emit_i8","emit_i8","emit_i8","emit_i8","emit_i8","emit_slice","emit_slice","emit_slice","emit_slice","emit_slice","emit_slice","emit_slice","emit_slice","emit_slice","emit_slice","emit_u16","emit_u16","emit_u16","emit_u16","emit_u16","emit_u16","emit_u16","emit_u16","emit_u16","emit_u16","emit_u32","emit_u32","emit_u32","emit_u32","emit_u32","emit_u32","emit_u32","emit_u32","emit_u32","emit_u32","emit_u64","emit_u64","emit_u64","emit_u64","emit_u64","emit_u64","emit_u64","emit_u64","emit_u64","emit_u64","emit_u8","emit_u8","emit_u8","emit_u8","emit_u8","emit_u8","emit_u8","emit_u8","emit_u8","emit_u8","empty","ensure_init","eq","eq","eq","equivalent","equivalent","equivalent","error","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","filled","filled_mut","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_os_error","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","has_data_left","hash","init_len","init_mut","init_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_parts","into_parts","is_empty","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_terminal","is_terminal","is_terminal","is_terminal","is_terminal","is_terminal","is_terminal","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","kind","last_os_error","len","limit","lines","lines","lock","lock","lock","new","new","new","new","new","new","new","next","next","next","other","partial_cmp","position","prelude","raw_os_error","read","read","read","read","read","read","read","read","read","read_bool","read_bool","read_bool","read_bool","read_bool","read_bool","read_bool","read_bool","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf_exact","read_exact","read_exact","read_exact","read_exact","read_exact","read_i16","read_i16","read_i16","read_i16","read_i16","read_i16","read_i16","read_i16","read_i32","read_i32","read_i32","read_i32","read_i32","read_i32","read_i32","read_i32","read_i64","read_i64","read_i64","read_i64","read_i64","read_i64","read_i64","read_i64","read_i8","read_i8","read_i8","read_i8","read_i8","read_i8","read_i8","read_i8","read_line","read_line","read_line","read_slice","read_slice","read_slice","read_slice","read_slice","read_slice","read_slice","read_slice","read_to_end","read_to_end","read_to_end","read_to_end","read_to_string","read_to_string","read_to_string","read_to_string","read_to_string","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64","read_u8","read_u8","read_u8","read_u8","read_u8","read_u8","read_u8","read_u8","read_until","read_until","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","reborrow","remaining_slice","repeat","rewind","seek","seek","seek","seek","seek","seek_relative","set_init","set_init","set_limit","set_position","sink","size_hint","source","split","stderr","stdin","stdout","stream_len","stream_len","stream_len","stream_position","stream_position","stream_position","stream_position","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfilled","uninit_mut","with_capacity","with_capacity","with_capacity","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_fmt","write_fmt","write_fmt","write_fmt","write_fmt","write_fmt","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","written","BufRead","Read","Seek","Write","by_ref","by_ref","bytes","chain","consume","fill_buf","flush","has_data_left","is_read_vectored","is_write_vectored","lines","read","read_buf","read_buf_exact","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","rewind","seek","split","stream_len","stream_position","take","write","write_all","write_all_vectored","write_fmt","write_vectored","LN_MAX_MSG_LEN","PaymentHash","PaymentPreimage","PaymentSecret","base32_len","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chan_utils","channelmanager","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","features","fmt","fmt","fmt","from","from","from","from_base32","hash","hash","hash","inbound_payment","into","into","into","msgs","peer_handler","read","read","read","read","read","read","script","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wire","write","write","write","write_base32","AcceptedPreimage","AcceptedTimeout","BuiltCommitmentTransaction","ChannelPublicKeys","ChannelTransactionParameters","ClosingTransaction","CommitmentTransaction","CounterpartyChannelTransactionParameters","CounterpartyCommitmentSecrets","DirectedChannelTransactionParameters","HTLCClaim","HTLCOutputInCommitment","HolderCommitmentTransaction","MAX_ACCEPTED_HTLC_SCRIPT_WEIGHT","MAX_HTLCS","OFFERED_HTLC_SCRIPT_WEIGHT","OFFERED_HTLC_SCRIPT_WEIGHT_ANCHORS","OfferedPreimage","OfferedTimeout","REVOKEABLE_REDEEMSCRIPT_MAX_LENGTH","Revocation","TrustedClosingTransaction","TrustedCommitmentTransaction","TxCreationKeys","amount_msat","as_counterparty_broadcastable","as_holder_broadcastable","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcaster_delayed_payment_key","broadcaster_htlc_key","broadcaster_pubkeys","build_anchor_input_witness","build_closing_transaction","build_commitment_secret","build_htlc_input_witness","build_htlc_transaction","built_transaction","built_transaction","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cltv_expiry","commitment_number","contest_delay","counterparty_htlc_sigs","counterparty_parameters","counterparty_sig","countersignatory_htlc_key","countersignatory_pubkeys","delayed_payment_basepoint","deref","deref","deref","derive_new","derive_private_key","derive_private_revocation_key","derive_public_key","derive_public_revocation_key","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","feerate_per_kw","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_channel_static_keys","from_witness","funding_outpoint","funding_outpoint","funding_pubkey","get_anchor_redeemscript","get_commitment_transaction_number_obscure_factor","get_htlc_redeemscript","get_htlc_sigs","get_min_seen_secret","get_revokeable_redeemscript","get_secret","get_sighash_all","get_sighash_all","get_to_countersignatory_with_anchors_redeemscript","hash","holder_pubkeys","holder_selected_contest_delay","htlc_basepoint","htlc_success_tx_weight","htlc_timeout_tx_weight","htlcs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_outbound","is_outbound_from_holder","is_populated","keys","make_funding_redeemscript","new","new","new","new_with_auxiliary_htlc_data","offered","opt_anchors","opt_anchors","opt_anchors","opt_non_zero_fee_anchors","payment_hash","payment_point","per_commitment_point","provide_secret","pubkeys","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","revocation_basepoint","revocation_key","selected_contest_delay","serialized_length","serialized_length","serialized_length","serialized_length","serialized_length","serialized_length","serialized_length","serialized_length","sign","sign_counterparty_commitment","sign_holder_commitment","to_broadcaster_value_sat","to_counterparty_script","to_counterparty_value_sat","to_countersignatory_value_sat","to_holder_script","to_holder_value_sat","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transaction","transaction_output_index","trust","trust","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txid","txid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","with_non_zero_fee_anchors","write","write","write","write","write","write","write","write","write","Abandoned","AllFailedResendSafe","Attempts","BREAKDOWN_TIMEOUT","ChainParameters","ChannelCounterparty","ChannelDetails","ChannelManager","ChannelManagerReadArgs","CounterpartyForwardingInfo","DuplicatePayment","DuplicatePayment","FailureCode","Fulfilled","IncorrectOrUnknownPaymentDetails","InterceptId","MIN_CLTV_EXPIRY_DELTA","MIN_FINAL_CLTV_EXPIRY_DELTA","ParameterError","PartialFailure","PathParameterError","PaymentExpired","PaymentId","PaymentSendFailure","Pending","PhantomRouteHints","RecentPaymentDetails","RecipientOnionFields","RequiredNodeFeatureMissing","Retry","RetryableSendFailure","RouteNotFound","SimpleArcChannelManager","SimpleRefChannelManager","TemporaryNodeFailure","Timeout","abandon_payment","accept_inbound_channel","accept_inbound_channel_from_trusted_peer_0conf","balance_msat","best_block","best_block_updated","block_disconnected","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_monitor","channel_features","channel_id","channel_monitors","channel_type","channel_type_features","channel_value_satoshis","channels","claim_funds","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close_channel","close_channel_with_target_feerate","cltv_expiry_delta","compute_inflight_htlcs","config","confirmations","confirmations_required","counterparty","create_channel","create_inbound_payment","create_inbound_payment_for_hash","create_inbound_payment_for_hash_legacy","create_inbound_payment_legacy","current_best_block","default_config","entropy_source","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fail_htlc_backwards","fail_htlc_backwards_with_reason","fail_intercepted_htlc","features","fee_base_msat","fee_estimator","fee_proportional_millionths","feerate_sat_per_1000_weight","filtered_block_connected","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_close_all_channels_broadcasting_latest_txn","force_close_all_channels_without_broadcasting_txn","force_close_broadcasting_latest_txn","force_close_spend_delay","force_close_without_broadcasting_txn","forward_intercepted_htlc","forwarding_info","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","funding_transaction_generated","funding_txo","get_and_clear_pending_msg_events","get_current_default_configuration","get_inbound_payment_scid","get_intercept_scid","get_our_node_id","get_outbound_payment_scid","get_payment_preimage","get_persistable_update_future","get_phantom_route_hints","get_phantom_scid","get_relevant_txids","handle_accept_channel","handle_announcement_signatures","handle_channel_ready","handle_channel_reestablish","handle_channel_update","handle_closing_signed","handle_commitment_signed","handle_error","handle_funding_created","handle_funding_signed","handle_open_channel","handle_revoke_and_ack","handle_shutdown","handle_update_add_htlc","handle_update_fail_htlc","handle_update_fail_malformed_htlc","handle_update_fee","handle_update_fulfill_htlc","hash","hash","hash","inbound_capacity_msat","inbound_htlc_maximum_msat","inbound_htlc_minimum_msat","inbound_scid_alias","init_features","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_channel_ready","is_outbound","is_public","is_usable","list_channels","list_channels_with_counterparty","list_recent_payments","list_usable_channels","logger","network","new","new","next_outbound_htlc_limit_msat","node_features","node_id","node_signer","outbound_capacity_msat","outbound_htlc_maximum_msat","outbound_htlc_minimum_msat","outbound_scid_alias","payment_metadata","payment_secret","peer_connected","peer_disconnected","phantom_scid","process_pending_events","process_pending_events_async","process_pending_htlc_forwards","provided_init_features","provided_init_features","provided_node_features","read","read","read","read","read","read","read","read","read","read","read","read","read","read","real_node_pubkey","router","secret_only","send_payment","send_payment_with_route","send_probe","send_spontaneous_payment","send_spontaneous_payment_with_retry","serialized_length","serialized_length","serialized_length","serialized_length","short_channel_id","signer_provider","spontaneous_empty","timer_tick_occurred","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transaction_unconfirmed","transactions_confirmed","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_broadcaster","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unspendable_punishment_reserve","unspendable_punishment_reserve","update_channel_config","user_channel_id","write","write","write","write","write","write","write","write","failed_paths_retry","payment_id","results","payment_hash","payment_hash","payment_hash","total_msat","BlindedHopFeatures","Bolt12InvoiceFeatures","ChannelFeatures","ChannelTypeFeatures","Features","InitFeatures","InvoiceFeatures","InvoiceRequestFeatures","NodeFeatures","OfferFeatures","base32_len","borrow","borrow_mut","clone","clone_into","empty","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from_base32","from_le_bytes","hash","initial_routing_sync","into","read","read","read","read","read","read","read","requires_anchors_zero_fee_htlc_tx","requires_basic_mpp","requires_channel_type","requires_data_loss_protect","requires_gossip_queries","requires_keysend","requires_onion_messages","requires_payment_metadata","requires_payment_secret","requires_scid_privacy","requires_shutdown_anysegwit","requires_static_remote_key","requires_unknown_bits","requires_upfront_shutdown_script","requires_variable_length_onion","requires_wumbo","requires_zero_conf","set_anchors_zero_fee_htlc_tx_optional","set_anchors_zero_fee_htlc_tx_required","set_basic_mpp_optional","set_basic_mpp_required","set_channel_type_optional","set_channel_type_required","set_data_loss_protect_optional","set_data_loss_protect_required","set_gossip_queries_optional","set_gossip_queries_required","set_initial_routing_sync_optional","set_initial_routing_sync_required","set_keysend_optional","set_keysend_required","set_onion_messages_optional","set_onion_messages_required","set_payment_metadata_optional","set_payment_metadata_required","set_payment_secret_optional","set_payment_secret_required","set_scid_privacy_optional","set_scid_privacy_required","set_shutdown_any_segwit_optional","set_shutdown_any_segwit_required","set_static_remote_key_optional","set_static_remote_key_required","set_upfront_shutdown_script_optional","set_upfront_shutdown_script_required","set_variable_length_onion_optional","set_variable_length_onion_required","set_wumbo_optional","set_wumbo_required","set_zero_conf_optional","set_zero_conf_required","supports_anchors_zero_fee_htlc_tx","supports_basic_mpp","supports_channel_type","supports_data_loss_protect","supports_gossip_queries","supports_keysend","supports_onion_messages","supports_payment_metadata","supports_payment_secret","supports_scid_privacy","supports_shutdown_anysegwit","supports_static_remote_key","supports_upfront_shutdown_script","supports_variable_length_onion","supports_wumbo","supports_zero_conf","to_owned","to_string","try_from","try_into","type_id","write","write","write","write","write","write","write_base32","ExpandedKey","borrow","borrow_mut","create","create_from_hash","from","into","new","try_from","try_into","type_id","Absent","AcceptChannel","AnnouncementSignatures","BadLengthDescriptor","ChannelAnnouncement","ChannelAnnouncement","ChannelMessageHandler","ChannelReady","ChannelReestablish","ChannelUpdate","ChannelUpdate","ClosingSigned","ClosingSignedFeeRange","CommitmentSigned","CommitmentUpdate","DataLossProtect","DecodeError","DisconnectPeer","ErrorAction","ErrorMessage","FundingCreated","FundingSigned","GossipTimestampFilter","Hostname","IPv4","IPv6","IgnoreAndLog","IgnoreDuplicateGossip","IgnoreError","Init","InvalidValue","Io","LightningError","NetAddress","NodeAnnouncement","NodeAnnouncement","OnionMessage","OnionMessageHandler","OnionV2","OnionV3","OpenChannel","OptionalField","Ping","Pong","Present","QueryChannelRange","QueryShortChannelIds","ReplyChannelRange","ReplyShortChannelIdsEnd","RevokeAndACK","RoutingMessageHandler","SendErrorMessage","SendWarningMessage","ShortRead","Shutdown","UnknownRequiredFeature","UnknownVersion","UnsignedChannelAnnouncement","UnsignedChannelUpdate","UnsignedGossipMessage","UnsignedNodeAnnouncement","UnsupportedCompression","UpdateAddHTLC","UpdateFailHTLC","UpdateFailMalformedHTLC","UpdateFee","UpdateFulfillHTLC","WarningMessage","action","addresses","alias","amount_msat","bitcoin_key_1","bitcoin_key_2","bitcoin_signature","bitcoin_signature_1","bitcoin_signature_2","blinding_point","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byteslen","byteslen","chain_hash","chain_hash","chain_hash","chain_hash","chain_hash","chain_hash","chain_hash","chain_hash","channel_flags","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_id","channel_reserve_satoshis","channel_reserve_satoshis","channel_type","channel_type","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cltv_expiry","cltv_expiry_delta","commitment_signed","contents","contents","contents","data","data","data_loss_protect","delayed_payment_basepoint","delayed_payment_basepoint","dust_limit_satoshis","dust_limit_satoshis","end_blocknum","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","err","excess_data","failure_code","features","features","features","fee_base_msat","fee_proportional_millionths","fee_range","fee_satoshis","feerate_per_kw","feerate_per_kw","first_blocknum","first_blocknum","first_per_commitment_point","first_per_commitment_point","first_timestamp","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","full_information","funding_output_index","funding_pubkey","funding_pubkey","funding_satoshis","funding_txid","get_next_channel_announcement","get_next_node_announcement","handle_accept_channel","handle_announcement_signatures","handle_channel_announcement","handle_channel_ready","handle_channel_reestablish","handle_channel_update","handle_channel_update","handle_closing_signed","handle_commitment_signed","handle_error","handle_funding_created","handle_funding_signed","handle_node_announcement","handle_onion_message","handle_open_channel","handle_query_channel_range","handle_query_short_channel_ids","handle_reply_channel_range","handle_reply_short_channel_ids_end","handle_revoke_and_ack","handle_shutdown","handle_update_add_htlc","handle_update_fail_htlc","handle_update_fail_malformed_htlc","handle_update_fee","handle_update_fulfill_htlc","htlc_basepoint","htlc_basepoint","htlc_id","htlc_id","htlc_id","htlc_id","htlc_maximum_msat","htlc_minimum_msat","htlc_minimum_msat","htlc_minimum_msat","htlc_signatures","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","max_accepted_htlcs","max_accepted_htlcs","max_fee_satoshis","max_htlc_value_in_flight_msat","max_htlc_value_in_flight_msat","min_fee_satoshis","minimum_depth","my_current_per_commitment_point","next_local_commitment_number","next_per_commitment_point","next_per_commitment_point","next_remote_commitment_number","node_id","node_id_1","node_id_2","node_signature","node_signature_1","node_signature_2","number_of_blocks","number_of_blocks","payment_hash","payment_point","payment_point","payment_preimage","peer_connected","peer_connected","peer_connected","peer_disconnected","peer_disconnected","per_commitment_secret","ponglen","processing_queue_high","provided_init_features","provided_init_features","provided_init_features","provided_node_features","provided_node_features","provided_node_features","push_msat","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","remote_network_address","revocation_basepoint","revocation_basepoint","rgb","scriptpubkey","serialized_length","serialized_length","serialized_length","serialized_length","short_channel_id","short_channel_id","short_channel_id","short_channel_id_alias","short_channel_ids","short_channel_ids","shutdown_scriptpubkey","shutdown_scriptpubkey","signature","signature","signature","signature","signature","signature","sync_complete","temporary_channel_id","temporary_channel_id","temporary_channel_id","timestamp","timestamp","timestamp_range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_self_delay","to_self_delay","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_add_htlcs","update_fail_htlcs","update_fail_malformed_htlcs","update_fee","update_fulfill_htlcs","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","your_last_per_commitment_secret","log_level","msg","msg","msg","addr","addr","checksum","ed25519_pubkey","hostname","port","port","port","port","version","CustomMessageHandler","ErroringMessageHandler","IgnoringMessageHandler","MessageHandler","PeerHandleError","PeerManager","SimpleArcPeerManager","SimpleRefPeerManager","SocketDescriptor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_node_announcement","chan_handler","clone","clone_into","deref","deref","description","disconnect_all_peers","disconnect_by_node_id","disconnect_socket","fmt","fmt","from","from","from","from","from","get_and_clear_pending_msg","get_and_clear_pending_msg","get_and_clear_pending_msg_events","get_and_clear_pending_msg_events","get_next_channel_announcement","get_next_node_announcement","get_peer_node_ids","handle_accept_channel","handle_announcement_signatures","handle_channel_announcement","handle_channel_ready","handle_channel_reestablish","handle_channel_update","handle_channel_update","handle_closing_signed","handle_commitment_signed","handle_custom_message","handle_custom_message","handle_custom_message","handle_error","handle_funding_created","handle_funding_signed","handle_node_announcement","handle_onion_message","handle_open_channel","handle_query_channel_range","handle_query_short_channel_ids","handle_reply_channel_range","handle_reply_short_channel_ids_end","handle_revoke_and_ack","handle_shutdown","handle_update_add_htlc","handle_update_fail_htlc","handle_update_fail_malformed_htlc","handle_update_fee","handle_update_fulfill_htlc","into","into","into","into","into","new","new","new_channel_only","new_inbound_connection","new_outbound_connection","new_routing_only","next_onion_message_for_peer","onion_message_handler","peer_connected","peer_connected","peer_connected","peer_disconnected","peer_disconnected","process_events","processing_queue_high","provided_init_features","provided_init_features","provided_init_features","provided_node_features","provided_node_features","provided_node_features","read","read_custom_message","read_event","route_handler","send_data","socket_disconnected","timer_tick_occurred","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write_buffer_space_avail","InvalidShutdownScript","ShutdownScript","as_legacy_pubkey","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","from","from","into","into","into","into_inner","is_compatible","new_p2wpkh","new_p2wsh","new_witness_program","read","read","script","serialized_length","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","write","CustomMessage","CustomMessageReader","Type","read","type_id","invoice","invoice_request","offer","parse","refund","BlindedPayInfo","DerivedSigningPubkey","ExplicitSigningPubkey","Invoice","InvoiceBuilder","SigningPubkeyStrategy","UnsignedInvoice","allow_mpp","amount_msats","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_and_sign","clone","clone","clone_into","clone_into","cltv_expiry_delta","created_at","description","eq","equivalent","fallback_v0_p2wpkh","fallback_v0_p2wsh","fallback_v1_p2tr_tweaked","fallbacks","features","features","fee_base_msat","fee_proportional_millionths","fmt","fmt","from","from","from","from","from","from","hash","htlc_maximum_msat","htlc_minimum_msat","into","into","into","into","into","into","is_expired","payment_hash","payment_paths","read","read","relative_expiry","relative_expiry","serialized_length","sign","signable_hash","signature","signing_pubkey","signing_pubkey","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","write","write","DerivedPayerId","ExplicitPayerId","InvoiceRequest","InvoiceRequestBuilder","PayerIdStrategy","UnsignedInvoiceRequest","amount_msats","amount_msats","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_and_sign","chain","chain","clone","clone_into","features","fmt","from","from","from","from","from","into","into","into","into","into","metadata","payer_id","payer_note","payer_note","quantity","quantity","respond_with","respond_with_no_std","sign","signature","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","verify_and_respond_using_derived_keys","verify_and_respond_using_derived_keys_no_std","write","Amount","Bitcoin","Bounded","Currency","CurrencyCode","DerivedMetadata","ExplicitMetadata","MetadataStrategy","Offer","OfferBuilder","One","Quantity","Unbounded","absolute_expiry","absolute_expiry","amount","amount_msats","as_ref","base32_len","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","chain","chains","check_base32","clone","clone","clone","clone_into","clone_into","clone_into","deriving_signing_pubkey","description","eq","eq","expects_quantity","features","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","into","into","into","into","into","into","is_expired","is_valid_quantity","issuer","issuer","metadata","metadata","new","path","paths","request_invoice","request_invoice_deriving_metadata","request_invoice_deriving_payer_id","signing_pubkey","supported_quantity","supported_quantity","supports_chain","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","write_base32","amount","amount_msats","iso4217_code","AlreadyExpired","Bech32","Decode","InsufficientAmount","InvalidAmount","InvalidBech32Hrp","InvalidContinuation","InvalidMetadata","InvalidPayInfo","InvalidQuantity","InvalidSemantics","InvalidSignature","InvalidSigningPubkey","MissingAmount","MissingCreationTime","MissingDescription","MissingPaths","MissingPayerId","MissingPayerMetadata","MissingPaymentHash","MissingQuantity","MissingSignature","MissingSigningPubkey","ParseError","SemanticError","UnexpectedAmount","UnexpectedChain","UnexpectedFeatures","UnexpectedMetadata","UnexpectedQuantity","UnexpectedSigningPubkey","UnknownRequiredFeatures","UnsupportedChain","UnsupportedCurrency","borrow","borrow","borrow_mut","borrow_mut","eq","eq","fmt","fmt","from","from","from","from","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Refund","RefundBuilder","absolute_expiry","absolute_expiry","amount_msats","as_ref","base32_len","borrow","borrow","borrow_mut","borrow_mut","build","chain","chain","check_base32","clone","clone_into","deriving_payer_id","description","features","fmt","fmt","from","from","from_str","into","into","is_expired","issuer","issuer","metadata","new","path","paths","payer_id","payer_note","payer_note","quantity","quantity","respond_using_derived_keys","respond_using_derived_keys_no_std","respond_with","respond_with_no_std","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","write","write_base32","BlindedPath","BlindedPathAdvanceFailed","BufferFull","Custom","CustomMessage","CustomOnionMessageContents","CustomOnionMessageHandler","Destination","GetNodeIdFailed","InvalidFirstHop","InvalidMessage","Node","OnionMessageContents","OnionMessenger","Secp256k1","SendError","SimpleArcOnionMessenger","SimpleRefOnionMessenger","TooBigPacket","TooFewBlindedHops","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","equivalent","fmt","fmt","from","from","from","from","handle_custom_message","handle_onion_message","into","into","into","into","new","next_onion_message_for_peer","peer_connected","peer_disconnected","provided_init_features","provided_node_features","read_custom_message","send_onion_message","tlv_type","tlv_type","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","gossip","router","scoring","utxo","ChannelFailure","ChannelInfo","ChannelUpdateInfo","ChannelUpdateMessage","DirectedChannelInfo","EffectiveCapacity","ExactLiquidity","Infinite","MaximumHTLC","NetworkGraph","NetworkUpdate","NodeAlias","NodeAnnouncementInfo","NodeFailure","NodeId","NodeInfo","P2PGossipSync","ReadOnlyNetworkGraph","RoutingFees","Total","UNKNOWN_CHANNEL_CAPACITY_MSAT","Unknown","add_channel_from_partial_announcement","add_utxo_lookup","addresses","alias","announcement_info","announcement_message","announcement_message","as_directed_from","as_directed_to","as_msat","as_pubkey","as_slice","base_msat","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity_sats","channel","channel","channel_failed_permanent","channels","channels","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cltv_expiry_delta","cmp","effective_capacity","enabled","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","features","features","fees","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_pubkey","from_str","get_addresses","get_and_clear_pending_msg_events","get_directional_info","get_last_rapid_gossip_sync_timestamp","get_next_channel_announcement","get_next_node_announcement","handle_channel_announcement","handle_channel_update","handle_network_update","handle_node_announcement","handle_query_channel_range","handle_query_short_channel_ids","handle_reply_channel_range","handle_reply_short_channel_ids_end","hash","hash","htlc_maximum_msat","htlc_maximum_msat","htlc_minimum_msat","into","into","into","into","into","into","into","into","into","into","into","into","into","last_update","last_update","last_update_message","network_graph","new","new","node","node_failed_permanent","node_one","node_two","nodes","one_to_two","partial_cmp","peer_connected","processing_queue_high","proportional_millionths","provided_init_features","provided_node_features","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read_only","remove_stale_channels_and_tracking","remove_stale_channels_and_tracking_with_time","rgb","serialized_length","set_last_rapid_gossip_sync_timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_to_one","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_channel","update_channel_from_announcement","update_channel_from_unsigned_announcement","update_channel_unsigned","update_node_from_announcement","update_node_from_unsigned_announcement","write","write","write","write","write","write","write","write","write","amount_msat","capacity_msat","htlc_maximum_msat","liquidity_msat","is_permanent","is_permanent","msg","node_id","short_channel_id","Blinded","BlindedTail","Clear","DEFAULT_MAX_PATH_COUNT","DEFAULT_MAX_TOTAL_CLTV_EXPIRY_DELTA","DefaultRouter","Hints","InFlightHtlcs","Path","PaymentParameters","Route","RouteHint","RouteHintHop","RouteHop","RouteParameters","Router","ScorerAccountingForInFlightHtlcs","blinded_tail","blinding_point","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_route_from_hops","channel_features","channel_penalty_msat","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cltv_expiry_delta","cltv_expiry_delta","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","excess_final_cltv_expiry_delta","expiry_time","features","fee_msat","fee_msat","fees","final_cltv_expiry_delta","final_cltv_expiry_delta","final_value_msat","final_value_msat","final_value_msat","find_route","find_route","find_route","find_route_with_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_keysend","from","from","from","from","from","from","from","from","from","from","from","from","from_node_id","get_total_amount","get_total_fees","hash","hash","hash","hash","hash","hash","hash","hash","hops","hops","htlc_maximum_msat","htlc_minimum_msat","into","into","into","into","into","into","into","into","into","into","into","into","max_channel_saturation_power_of_half","max_path_count","max_total_cltv_expiry_delta","new","new","new","node_features","paths","payee_pubkey","payment_params","payment_params","payment_path_failed","payment_path_successful","previously_failed_channels","probe_failed","probe_successful","process_path","pubkey","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","route_hints","serialized_length","serialized_length","serialized_length","short_channel_id","short_channel_id","src_node_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","used_liquidity_msat","with_expiry_time","with_features","with_max_channel_saturation_power_of_half","with_max_path_count","with_max_total_cltv_expiry_delta","with_route_hints","write","write","write","write","write","write","write","write","ChannelUsage","FixedPenaltyScorer","LockableScore","Locked","ProbabilisticScorer","ProbabilisticScorerUsingTime","ProbabilisticScoringParameters","Score","WriteableScore","add_banned","add_banned_from_list","amount_msat","anti_probing_penalty_msat","base_penalty_amount_multiplier_msat","base_penalty_msat","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_penalty_msat","channel_penalty_msat","channel_penalty_msat","clear_manual_penalties","clone","clone","clone","clone_into","clone_into","clone_into","considered_impossible_penalty_msat","debug_log_liquidity_stats","default","effective_capacity","eq","estimated_channel_liquidity_range","fmt","from","from","from","from","historical_estimated_channel_liquidity_probabilities","historical_liquidity_penalty_amount_multiplier_msat","historical_liquidity_penalty_multiplier_msat","historical_no_updates_half_life","inflight_htlc_msat","into","into","into","into","liquidity_offset_half_life","liquidity_penalty_amount_multiplier_msat","liquidity_penalty_multiplier_msat","lock","manual_node_penalties","new","payment_path_failed","payment_path_failed","payment_path_failed","payment_path_successful","payment_path_successful","payment_path_successful","probe_failed","probe_failed","probe_failed","probe_successful","probe_successful","probe_successful","read","read","remove_banned","remove_manual_penalty","set_manual_penalty","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_penalty","write","write","Async","Sync","UnknownChain","UnknownTx","UtxoFuture","UtxoLookup","UtxoLookupError","UtxoResult","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","from","from","from","get_utxo","into","into","into","new","resolve","resolve_without_forwarding","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","config","errors","indexed_map","invoice","logger","message_signing","persist","ser","ser_macros","string","wakers","ChannelConfig","ChannelHandshakeConfig","ChannelHandshakeLimits","UserConfig","accept_forwards_to_priv_channels","accept_inbound_channels","accept_intercept_htlcs","announced_channel","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_config","channel_handshake_config","channel_handshake_limits","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cltv_expiry_delta","commit_upfront_shutdown_pubkey","default","default","default","default","eq","equivalent","fmt","fmt","fmt","fmt","force_announced_channel_preference","force_close_avoidance_max_fee_satoshis","forwarding_fee_base_msat","forwarding_fee_proportional_millionths","from","from","from","from","into","into","into","into","manually_accept_inbound_channels","max_channel_reserve_satoshis","max_dust_htlc_exposure_msat","max_funding_satoshis","max_htlc_minimum_msat","max_inbound_htlc_value_in_flight_percent_of_channel","max_minimum_depth","min_funding_satoshis","min_max_accepted_htlcs","min_max_htlc_value_in_flight_msat","minimum_depth","negotiate_scid_privacy","our_htlc_minimum_msat","our_max_accepted_htlcs","our_to_self_delay","read","read","serialized_length","their_channel_reserve_proportional_millionths","their_to_self_delay","to_owned","to_owned","to_owned","to_owned","trust_own_funding_0conf","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","APIError","APIMisuseError","ChannelUnavailable","FeeRateTooHigh","IncompatibleShutdownScript","InvalidRoute","MonitorUpdateInProgress","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","read","to_owned","try_from","try_into","type_id","write","err","err","err","err","feerate","script","Entry","IndexedMap","Occupied","OccupiedEntry","Range","Vacant","VacantEntry","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","contains_key","entry","eq","equivalent","fmt","from","from","from","from","from","get","get","get_mut","get_mut","insert","insert","into","into","into","into","into","into_iter","into_mut","is_empty","len","new","next","range","remove","remove_entry","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unordered_iter","unordered_iter_mut","unordered_keys","construct_invoice_preimage","Debug","Error","Gossip","Info","Level","Logger","Record","Trace","Warn","args","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","equivalent","file","fmt","fmt","fmt","from","from","ge","gt","hash","into","into","le","level","line","log","lt","max","module_path","new","partial_cmp","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","recover_pk","sign","verify","KVStorePersister","Persister","persist","persist_graph","persist_manager","persist_scorer","BigSize","FixedLengthReader","Hostname","LengthCalculatingWriter","MAX_BUF_SIZE","MaybeReadable","ReadTrackingReader","Readable","ReadableArgs","RequiredWrapper","UpgradableRequired","WithoutLength","Writeable","Writer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_remain","clone","clone_into","deref","eat_remaining","encode","eq","equivalent","fmt","from","from","from","from","from","from","from","from","from","from","from","from","have_read","into","into","into","into","into","into","into","into","len","new","new","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read_bool","read_bool","read_i16","read_i16","read_i32","read_i32","read_i64","read_i64","read_i8","read_i8","read_slice","read_slice","read_u16","read_u16","read_u32","read_u32","read_u64","read_u64","read_u8","read_u8","serialized_length","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","write_all","write_all","PrintableString","UntrustedString","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","into","into","read","read","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write","Future","FutureCallback","Sleeper","borrow","borrow","borrow_mut","borrow_mut","call","clone","clone_into","from","from","from_single_future","from_two_futures","into","into","into_future","new","poll","register_callback","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","wait","wait","wait_timeout","wait_timeout"],"q":[[0,"lightning"],[25,"lightning::blinded_path"],[63,"lightning::chain"],[135,"lightning::chain::chaininterface"],[159,"lightning::chain::chainmonitor"],[212,"lightning::chain::channelmonitor"],[316,"lightning::chain::channelmonitor::Balance"],[326,"lightning::chain::channelmonitor::MonitorEvent"],[328,"lightning::chain::keysinterface"],[547,"lightning::chain::keysinterface::SpendableOutputDescriptor"],[549,"lightning::chain::transaction"],[575,"lightning::events"],[757,"lightning::events::ClosureReason"],[759,"lightning::events::Event"],[832,"lightning::events::HTLCDestination"],[837,"lightning::events::MessageSendEvent"],[878,"lightning::events::PathFailure"],[880,"lightning::events::PaymentPurpose"],[882,"lightning::io"],[1717,"lightning::io::prelude"],[1752,"lightning::ln"],[1818,"lightning::ln::chan_utils"],[2122,"lightning::ln::channelmanager"],[2485,"lightning::ln::channelmanager::PaymentSendFailure"],[2488,"lightning::ln::channelmanager::RecentPaymentDetails"],[2492,"lightning::ln::features"],[2612,"lightning::ln::inbound_payment"],[2623,"lightning::ln::msgs"],[3565,"lightning::ln::msgs::ErrorAction"],[3569,"lightning::ln::msgs::NetAddress"],[3579,"lightning::ln::peer_handler"],[3702,"lightning::ln::script"],[3743,"lightning::ln::wire"],[3748,"lightning::offers"],[3753,"lightning::offers::invoice"],[3847,"lightning::offers::invoice_request"],[3914,"lightning::offers::offer"],[4019,"lightning::offers::offer::Amount"],[4022,"lightning::offers::parse"],[4078,"lightning::offers::refund"],[4132,"lightning::onion_message"],[4197,"lightning::routing"],[4201,"lightning::routing::gossip"],[4489,"lightning::routing::gossip::EffectiveCapacity"],[4493,"lightning::routing::gossip::NetworkUpdate"],[4498,"lightning::routing::router"],[4748,"lightning::routing::scoring"],[4842,"lightning::routing::utxo"],[4885,"lightning::util"],[4896,"lightning::util::config"],[4985,"lightning::util::errors"],[5007,"lightning::util::errors::APIError"],[5013,"lightning::util::indexed_map"],[5081,"lightning::util::invoice"],[5082,"lightning::util::logger"],[5132,"lightning::util::message_signing"],[5135,"lightning::util::persist"],[5141,"lightning::util::ser"],[5277,"lightning::util::string"],[5308,"lightning::util::wakers"],[5339,"core::fmt"],[5340,"core::fmt"],[5341,"secp256k1::key"],[5342,"secp256k1"],[5343,"core::result"],[5344,"secp256k1::context"],[5345,"secp256k1::context"],[5346,"core::any"],[5347,"bitcoin::blockdata::block"],[5348,"bitcoin::blockdata::block"],[5349,"bitcoin::network::constants"],[5350,"bitcoin::hash_types::newtypes"],[5351,"bitcoin::blockdata::script"],[5352,"bitcoin::blockdata::transaction"],[5353,"core::ops::deref"],[5354,"std::collections::hash::map"],[5355,"core::ops::function"],[5356,"core::cmp"],[5357,"secp256k1::scalar"],[5358,"secp256k1::ecdh"],[5359,"secp256k1::key"],[5360,"secp256k1::ecdsa"],[5361,"bech32"],[5362,"secp256k1::ecdsa::recovery"],[5363,"bitcoin::blockdata::transaction"],[5364,"std::os::fd::owned"],[5365,"core::mem::maybe_uninit"],[5366,"core::marker"],[5367,"core::error"],[5368,"core::clone"],[5369,"core::convert"],[5370,"core::default"],[5371,"core::marker"],[5372,"alloc::boxed"],[5373,"core::marker"],[5374,"alloc::ffi::c_str"],[5375,"core::convert"],[5376,"core::fmt"],[5377,"secp256k1"],[5378,"core::time"],[5379,"bitcoin::util::schnorr"],[5380,"bitcoin::util::address"],[5381,"bitcoin::blockdata::constants"],[5382,"secp256k1::key"],[5383,"core::iter::traits::iterator"],[5384,"core::pin"],[5385,"core::task::wake"],[5386,"core::task::poll"]],"d":["Creating blinded paths and related utilities live here.","Structs and traits which allow other parts of …","Implements the TLVs deserialization part in a <code>Readable</code> …","Implements the TLVs serialization part in a <code>Writeable</code> …","Events are returned from various bits in the library which …","Implements <code>Readable</code>/<code>Writeable</code> for a message struct that …","Implements <code>Readable</code>/<code>Writeable</code> for a struct storing it as a …","Implement <code>Readable</code> and <code>Writeable</code> for an enum, with struct …","Implement <code>MaybeReadable</code> and <code>Writeable</code> for an enum, with …","Re-export of either <code>core2::io</code> or <code>std::io</code>, depending on the …","Implementations of various parts of the Lightning protocol …","Logs a byte slice in hex format.","Log at the <code>DEBUG</code> level.","Log at the <code>ERROR</code> level.","Log at the <code>GOSSIP</code> level.","Log at the <code>INFO</code> level.","Logs a pubkey in hex format.","Log at the <code>TRACE</code> level.","Log at the <code>WARN</code> level.","Implementation of Lightning Offers (BOLT 12).","Onion Messages: sending, receiving, forwarding, and …","Reads a suffix added by <code>write_tlv_fields</code>.","Structs and impls for receiving messages about the network …","Some utility modules live here. See individual sub-modules …","Writes out a suffix to an object as a length-prefixed TLV …","Used to construct the blinded hops portion of a blinded …","Onion messages and payments can be sent and received to …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a blinded path for an onion message, to be …","","","","","","","","","","","","","","","","The best known block as identified by its hash and height.","An enum representing the status of a channel monitor …","The update has been durably persisted and all copies of …","The <code>Confirm</code> trait is used to notify LDK when relevant …","The <code>Filter</code> trait defines behavior for indicating chain …","Used to indicate a temporary failure (eg connection to a …","The <code>Listen</code> trait is used to notify when blocks have been …","Used to indicate no further channel monitor updates will …","The <code>Watch</code> trait defines behavior for watching on-chain …","A transaction output watched by a <code>ChannelMonitor</code> for …","Notifies LDK of an update to the best header connected at …","Notifies the listener that a block was added at the given …","Notifies the listener that a block was removed at the …","Returns the best block hash.","First block where the transaction output may have been …","","","","","","","Traits and utility impls which allow other parts of …","Logic to connect off-chain channel management with …","The logic to monitor for on-chain transactions and create …","","","","","","","","","","","","","Notifies the listener that a block was added at the given …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>BestBlock</code> that represents the genesis block …","Returns transactions that must be monitored for …","","Returns the best block height.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Provides keys to LDK and defines some useful objects …","Returns a <code>BestBlock</code> as identified by the given block hash …","Outpoint identifying the transaction output.","Registers interest in spends of a transaction output.","Registers interest in a transaction with <code>txid</code> and having …","Returns any monitor events since the last call. Subsequent …","Spending condition of the transaction output.","","","","Types describing on-chain transactions.","Notifies LDK of a transaction that is no longer confirmed …","Notifies LDK of transactions confirmed in a block with a …","","","","","","","","","","Updates a channel identified by <code>funding_txo</code> by applying …","Watches a channel identified by <code>funding_txo</code> using <code>monitor</code>.","We are happy with this transaction confirming slowly when …","An interface to send a transaction to the Bitcoin network.","An enum that represents the speed at which we want a …","Minimum feerate that takes a sane approach to bitcoind …","A trait which should be implemented to provide feerate …","We’d like this transaction to confirm in the next few …","Minimum relay fee as required by bitcoin network mempool …","We’d like this transaction to confirm without major …","","","Sends a transaction out to (hopefully) be mined.","","","","","","Returns the argument unchanged.","Gets estimated satoshis of fee required per 1000 …","","Calls <code>U::from(self)</code>.","","","","","An implementation of <code>chain::Watch</code> for monitoring channels.","A read-only reference to a current ChannelMonitor.","An opaque identifier describing a specific <code>Persist</code> method …","<code>Persist</code> defines behavior for persisting channel monitors: …","","","","","","","","","Indicates the persistence of a <code>ChannelMonitor</code> has …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the balances in the contained <code>ChannelMonitor</code>s which …","Gets the <code>LockedChannelMonitor</code> for a given funding …","","Gets a <code>Future</code> that completes when an event is available …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lists the funding outpoint of each <code>ChannelMonitor</code> being …","Lists the pending updates for each <code>ChannelMonitor</code> (by …","Creates a new <code>ChainMonitor</code> used to watch on-chain activity …","Persist a new channel’s data in response to a …","Processes <code>SpendableOutputs</code> events produced from each …","Processes any events asynchronously in the order they were …","Triggers rebroadcasts/fee-bumps of pending claims from a …","","","","","","","","","","","","","","Note that we persist the given <code>ChannelMonitor</code> update while …","Update one channel’s data. The provided <code>ChannelMonitor</code> …","Adds the monitor that watches the channel referred to by …","Number of blocks we wait on seeing a HTLC output being …","Details about the balance(s) available for spending once …","The update ID used for a <code>ChannelMonitorUpdate</code> that is …","A ChannelMonitor handles chain events (blocks connected …","An update generated by the underlying channel itself which …","The channel has been closed, and the given balance is ours …","The channel is not yet closed (or the commitment or …","A monitor event that the Channel’s commitment …","Indicates a <code>ChannelMonitor</code> update has completed. See …","The channel has been closed, and the given balance should …","The channel has been closed, and our counterparty …","A monitor event containing an HTLCUpdate.","Simple structure sent back by <code>chain::Watch</code> when an HTLC …","HTLCs which we received from our counterparty which are …","HTLCs which we sent to our counterparty which are …","An event to be processed by the ChannelManager.","Transaction outputs to watch for on-chain spends.","Indicates a <code>ChannelMonitor</code> update has failed. See …","Updates the monitor with the current best chain tip, …","Processes transactions in a newly connected block, which …","Determines if the disconnected block contained any …","","","","","","","","","","","","","","","","","","","Gets the latest best block which was connected either via …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the list of pending events which were generated by …","Get the list of HTLCs who’s status has been updated on …","Gets the balances in this channel which are either …","Gets the <code>node_id</code> of the counterparty for this channel.","Gets the funding transaction outpoint of the channel this …","Used by ChannelManager deserialization to broadcast the …","Gets the update_id from the latest ChannelMonitorUpdate …","Gets a list of txids, with their output scripts (in the …","Returns the set of txids that should be monitored for …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads the funding txo and outputs to watch into the given …","","","","","","Triggers rebroadcasts/fee-bumps of pending claims from a …","","","","","","Processes a transaction that was reorganized out of the …","Processes transactions confirmed in a block with the given …","","","","","","","","","","","","","","","","The sequence number of this update. Updates <em>must</em> be …","Updates a ChannelMonitor on the basis of some new …","","","","","The amount available to claim, in satoshis, excluding the …","The amount available to claim, in satoshis, possibly …","The amount available to claim, in satoshis, excluding the …","The amount potentially available to claim, in satoshis, …","The amount potentially available to claim, in satoshis, …","The amount, in satoshis, of the output which we can claim.","The height at which we will be able to claim the balance …","The height at which an <code>Event::SpendableOutputs</code> event will …","The height at which our counterparty will be able to claim …","The height at which the counterparty may be able to claim …","The funding outpoint of the <code>ChannelMonitor</code> that was updated","The Update ID from <code>ChannelMonitorUpdate::update_id</code> which …","A trait to handle Lightning channel key material without …","An output to a P2WSH script which can be spent with a …","Information about a spendable output to a P2WSH script.","A trait to sign Lightning channel transactions as …","A trait that describes a source of entropy.","A simple implementation of <code>WriteableEcdsaChannelSigner</code> …","Used as initial key material, to be expanded into multiple …","Simple implementation of <code>EntropySource</code>, <code>NodeSigner</code>, and …","The maximum length a well-formed witness spending one of …","The maximum length a well-formed witness spending one of …","The invoice should be signed with the local node secret …","A trait that can handle cryptographic operations at the …","Similar to <code>KeysManager</code>, but allows the node using this …","The invoice should be signed with the phantom node secret …","Specifies the recipient of an invoice.","A type which implements <code>WriteableEcdsaChannelSigner</code> which …","A trait that can return signer instances for individual …","Describes the necessary information to spend a spendable …","An output to a script which was provided via <code>SignerProvider</code>…","An output to a P2WPKH, spendable exclusively by our …","Information about a spendable output to our “payment key…","A writeable signer.","","","","","","","","","","","","","","","","","Returns an arbitrary identifier describing the set of keys …","","Arbitrary identification information returned by a call to …","Arbitrary identification information returned by a call to …","The value of the channel which this output originated …","The value of the channel which this transactions spends.","","","","","","","","","","","Commitment seed.","Returns the counterparty’s pubkeys.","Returns the <code>contest_delay</code> value specified by our …","Holder secret key used in an HTLC transaction.","Derive an old <code>WriteableEcdsaChannelSigner</code> containing …","See <code>KeysManager::derive_channel_keys</code> for documentation on …","Derives the private key material backing a <code>Signer</code>.","","","Gets the ECDH shared secret of our node secret and …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Holder secret key in the 2-of-2 multisig script of a …","Funding outpoint","Generates a unique <code>channel_keys_id</code> that can be used to …","","","Returns a <code>ChannelTransactionParameters</code> for this channel, …","Get a script pubkey which we send funds to when claiming …","","","Get secret key material as bytes for use in encrypting and …","","","Get node id based on the provided <code>Recipient</code>.","","","Gets the “node_id” secret key used to sign gossip …","Gets the “node_id” secret key used to sign gossip …","Gets the per-commitment point for a specific commitment …","","Gets the “node_id” secret key of the phantom node used …","Gets a unique, cryptographically-secure, random 32-byte …","","","","Get a script pubkey which we will send funds to when …","","","","Returns the <code>contest_delay</code> value specified by us and …","Holder HTLC secret key used in commitment transaction HTLC …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the holder is the initiator.","Creates a new <code>InMemorySigner</code>.","Constructs a <code>KeysManager</code> from a 32-byte seed. If the seed …","Constructs a <code>PhantomKeysManager</code> given a 32-byte seed and …","Returns whether anchors should be used.","The outpoint which is spendable.","The outpoint which is spendable.","The output which is referenced by the given outpoint.","The output which is referenced by the given outpoint.","Holder secret key used for our balance in …","Per commitment point to derive the delayed payment key by …","Set the counterparty static channel data, including …","","Returns the holder’s channel public keys and basepoints.","","","","","","","","","Reads a <code>Signer</code> for this <code>SignerProvider</code> from the given …","","","Gets the commitment secret for a specific commitment …","","Holder secret key for blinded revocation pubkey.","The revocation point specific to the commitment …","","","Signs a channel announcement message with our funding key …","","Create a signature for a (proposed) closing transaction.","","Create a signature for a counterparty’s commitment …","","Create a signature for a claiming transaction for a HTLC …","","Sign the single input of <code>spend_tx</code> at index <code>input_idx</code>, …","Sign the single input of <code>spend_tx</code> at index <code>input_idx</code> which …","Sign a gossip message.","","","Computes the signature for a commitment transaction’s …","","Creates a signature for a holder’s commitment …","","Sign an invoice.","","","Create a signature for the given input in a transaction …","","Create a signature for the given input in a transaction …","","Creates a <code>Transaction</code> which spends the given descriptors …","See <code>KeysManager::spend_spendable_outputs</code> for documentation …","","","","","","The <code>nSequence</code> value which must be set in the spending …","","","","","","","","","","","","","","","","","","","","","","","","","Validate the counterparty’s revocation.","","Validate the counterparty’s signatures on the holder …","","","","","","The outpoint which is spendable.","The output which is referenced by the given outpoint.","A reference to a transaction output.","Transaction data where each item consists of a transaction …","","","","","","","","","Returns the argument unchanged.","","The index of the referenced output in its transaction’s …","Calls <code>U::from(self)</code>.","Converts this OutPoint into the OutPoint field as used by …","","","","","Convert an <code>OutPoint</code> to a lightning channel id.","","","","The referenced transaction’s txid.","","","Used to indicate that a channel_announcement and …","Used to indicate that a channel_update should be broadcast …","Used to indicate that a node_announcement should be …","Used to indicate that a previously opened channel with the …","Used to indicate that a channel with the given <code>channel_id</code> …","Used to indicate that a channel with the given <code>channel_id</code> …","The reason the channel was closed. See individual variants …","A commitment transaction was confirmed on chain, closing …","The channel was closed after negotiating a cooperative …","Closure generated from receiving a peer error message.","Used to indicate to the user that they can abandon the …","The peer disconnected prior to funding completing. In this …","An Event which you should probably take some action in …","A trait implemented for objects handling events from …","A trait indicating an object may generate events.","Failure scenario where an HTLC may have been forwarded to …","Used to indicate that the client should generate a funding …","The funding transaction failed to confirm in a timely …","Intended destination of a failed HTLC as indicated in …","Indicates that the HTLC was accepted, but could not be …","Used to indicate that we’ve intercepted an HTLC forward. …","Broadcast an error downstream to be handled","Closure generated from <code>ChannelManager::force_close_channel</code>…","We failed to initially send the payment and no HTLC was …","We couldn’t forward to the outgoing scid. An example …","Information for receiving a payment that we generated an …","An event generated by ChannelManager which indicates a …","A trait indicating an object may generate message send …","We tried forwarding to a channel but failed to do so. An …","A hop on the path failed to forward our payment.","A trait indicating an object may generate onion messages …","Indicates a request to open a new channel by a peer.","Closure generated from <code>ChannelManager::read</code> if the …","When the payment path failure took place and extra details …","Indicates that we’ve been offered a payment and it needs …","Indicates a payment has been claimed and we’ve received …","The payment expired while retrying, based on the provided …","Indicates an outbound payment failed. Individual …","The reason the payment failed. Used in <code>Event::PaymentFailed</code>…","This event is generated when a payment has been …","Indicates an outbound HTLC we sent failed, likely due to …","Indicates that a path for an outbound payment was …","Some information provided on receipt of payment depends on …","Indicates an outbound payment we made succeeded (i.e. it …","Used to indicate that …","Indicates that a probe payment we sent failed at an …","Indicates that a probe payment we sent returned …","Closure generated from processing an event, likely a HTLC …","The intended recipient rejected our payment.","We exhausted all of our retry attempts while trying to …","We failed to find a route while retrying the payment.","Used to indicate that we’ve accepted a channel open and …","Used to indicate that an announcement_signatures message …","Used to send a channel_announcement and channel_update to …","Query a peer for channels with funding transaction UTXOs …","Used to indicate that a channel_ready message should be …","Used to indicate that a channel_reestablish message should …","Used to indicate that a channel_update should be sent to a …","Used to indicate that a closing_signed message should be …","Used to indicate that a funding_created message should be …","Used to indicate that a funding_signed message should be …","Sends a timestamp filter for inbound gossip. This should …","Used to indicate that we’ve initiated a channel open and …","Sends a reply to a channel range query. This may be one of …","Used to indicate that a revoke_and_ack message should be …","Request routing gossip messages from a peer for a list of …","Used to indicate that a shutdown message should be sent to …","Used to indicate that an output which you should know how …","Because this is a spontaneous payment, the payer generated …","This error should generally never happen. This likely …","Scenario where we are unsure of the next node to forward …","Used to indicate that a series of HTLC update messages, as …","The user chose to abandon this payment by calling …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the list of pending events which were generated by …","Handles the given <code>Event</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the next pending onion message for the peer with the …","Processes any events generated since the last call using …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A developer-readable error message which we generated.","The error which the peer sent us.","The value, in thousandths of a satoshi, that this payment …","The value, in thousandths of a satoshi, that this payment …","The <code>channel_id</code> of the channel that is pending confirmation.","The <code>channel_id</code> of the channel that is ready.","The <code>channel_id</code> of the channel which has been closed. Note …","The channel_id of the channel which has been closed.","The features that this channel will operate with.","The features that this channel will operate with. If you …","The value, in satoshis, that the output should have.","The block height at which this payment will be failed back …","If this is <code>true</code>, the forwarded HTLC was claimed by our …","The counterparty’s node_id, which you’ll need to pass …","The <code>node_id</code> of the channel counterparty.","The <code>node_id</code> of the channel counterparty.","The node_id of the counterparty requesting to open the …","How many msats the payer intended to route to the next …","Destination of the HTLC that failed to be processed.","Extra error details based on the failure type. May contain …","The fee, in milli-satoshis, which was earned as a result …","The total fee which was spent at intermediate hops in this …","The <code>temporary_channel_id</code> this channel used to be known by …","The channel value of the requested channel.","The outpoint of the channel’s funding transaction.","How many msats were received on the inbound edge of this …","An id to help LDK identify which HTLC is being forwarded …","The outgoing channel between the next node and us. This is …","The fields in the onion which were received with each …","The final amount forwarded, in milli-satoshis, after the …","The script which should be used in the transaction output.","The outputs which you should store as spendable by you.","The payment path that was successful.","The payment path that failed.","The payment path that was successful.","The payment path that failed.","Indicates the payment was rejected for some reason by the …","The hash for which the preimage should be handed to the …","The payment hash of the claimed payment. Note that LDK …","The hash that was given to <code>ChannelManager::send_payment</code>.","The hash that was given to <code>ChannelManager::send_payment</code>.","The hash that was given to <code>ChannelManager::send_payment</code>.","The hash that was given to <code>ChannelManager::send_payment</code>.","The hash generated by <code>ChannelManager::send_probe</code>.","The hash generated by <code>ChannelManager::send_probe</code>.","The payment hash used for this HTLC.","The <code>payment_id</code> passed to <code>ChannelManager::send_payment</code>.","The <code>payment_id</code> passed to <code>ChannelManager::send_payment</code>.","The <code>payment_id</code> passed to <code>ChannelManager::send_payment</code>.","The <code>payment_id</code> passed to <code>ChannelManager::send_payment</code>.","The id returned by <code>ChannelManager::send_probe</code>.","The id returned by <code>ChannelManager::send_probe</code>.","The preimage to the hash given to …","The incoming channel between the previous node and us. …","The channel over which the HTLC was received.","Information for claiming this received payment, based on …","The purpose of the claimed payment, i.e. whether the …","Our starting balance in the channel if the request is …","The reason the payment failed. This is only <code>None</code> for …","The reason the channel was closed.","The node that will receive the payment after it has been …","The node that received the payment. This is useful to …","The fake scid that was programmed as the next hop’s …","The channel responsible for the failed payment path.","The channel responsible for the failed probe.","The random channel_id we picked which you’ll need to …","The temporary channel ID of the channel requested to be …","The minimum amount of time that should be waited prior to …","The full transaction received from the user","The <code>user_channel_id</code> value passed in to …","The <code>user_channel_id</code> value passed in to …","The <code>user_channel_id</code> value passed in to …","The <code>user_channel_id</code> value passed in to …","The <code>channel_id</code> indicating over which channel we received …","The <code>user_channel_id</code> indicating over which channel we …","The outgoing <code>channel_id</code> between us and the next node.","The <code>node_id</code> of the next node. For backwards compatibility, …","The payment hash of the payment we attempted to process.","Short channel id we are requesting to forward an HTLC to.","Short channel id we are requesting to forward an HTLC to.","The action which should be taken.","The message which should be sent.","The message which should be sent.","The message which should be sent.","The message which should be sent.","The channel_ready message which should be sent.","The announcement_signatures message which should be sent.","The message which should be sent.","The message which should be sent.","The message which should be sent.","The message which should be sent.","The channel_announcement which should be sent.","The channel_announcement which should be sent.","The channel_update which should be sent.","The node_announcement which should be sent.","The channel_update which should be sent.","The query_channel_range which should be sent.","The query_short_channel_ids which should be sent.","The reply_channel_range which should be sent.","The gossip_timestamp_filter which should be sent.","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive these …","The node_id of the node which should receive these …","The node_id of the node which should receive these …","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of the node which should receive this message","The node_id of this message recipient","The node_id of this message recipient","The node_id of this message recipient","The node_id of this message recipient","The followup channel_update which should be sent.","The followup channel_update which should be sent.","The update messages which should be sent. ALL messages in …","The error surfaced from initial send.","If present, this <code>NetworkUpdate</code> should be applied to the …","The preimage to the payment_hash, if the payment hash (and …","The “payment secret”. This authenticates the sender to …","A socket address could not be bound because the address is …","A nonexistent interface was requested or the requested …","An entity already exists, often a file.","Program argument list too long.","A borrowed byte buffer which is incrementally filled and …","A writeable view of the unfilled portion of a <code>BorrowedBuf</code>.","The operation failed because a pipe was closed.","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.","Wraps a writer and buffers its output.","An iterator over <code>u8</code> values of a reader.","Adapter to chain together two readers.","The connection was aborted (terminated) by the remote …","The connection was refused by the remote server.","The connection was reset by the remote server.","Cross-device or cross-filesystem (hard) link or rename.","Sets the offset to the current position plus the specified …","A <code>Cursor</code> wraps an in-memory buffer and provides it with a …","Deadlock (avoided).","A non-empty directory was specified where an empty …","<code>Empty</code> ignores any data written via <code>Write</code>, and will always …","Sets the offset to the size of this object plus the …","Contains the error value","The error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…","A list specifying general categories of I/O error.","Executable file is busy.","File larger than allowed or supported.","Loop in the filesystem or IO subsystem; often, too many …","Filesystem quota was exceeded.","The remote host is not reachable.","This operation was interrupted.","An error returned by <code>BufWriter::into_inner</code> which combines …","Data not valid for the operation were encountered.","A filename was invalid.","A parameter was incorrect.","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","The filesystem object is, unexpectedly, a directory.","Trait to determine if a descriptor/handle refers to a …","Wraps a writer and buffers output to it, flushing whenever …","An iterator over the lines of an instance of <code>BufRead</code>.","The system’s networking is down.","The network containing the remote host is not reachable.","A filesystem object is, unexpectedly, not a directory.","The network operation failed because it was not connected …","An entity was not found, often a file.","Seek on unseekable file.","Contains the success value","A custom error that does not fall under any other I/O …","An operation could not be completed, because it failed to …","The operation lacked the necessary privileges to complete.","The type of raw OS error codes returned by …","The <code>Read</code> trait allows for reading bytes from a source.","The filesystem or storage medium is read-only, but a write …","A reader which yields one byte over and over and over and …","Resource is busy.","A specialized <code>Result</code> type for I/O operations.","The <code>Seek</code> trait provides a cursor which can be moved within …","Enumeration of possible methods to seek within an I/O …","A writer which will move data into the void.","An iterator over the contents of an instance of <code>BufRead</code> …","Stale network file handle.","Sets the offset to the provided number of bytes.","A handle to the standard error stream of a process.","A locked reference to the <code>Stderr</code> handle.","A handle to the standard input stream of a process.","A locked reference to the <code>Stdin</code> handle.","A handle to the global standard output stream of the …","A locked reference to the <code>Stdout</code> handle.","The underlying storage (typically, a filesystem) is full.","Reader adapter which limits the bytes read from an …","The I/O operation’s timeout expired, causing it to be …","Too many (hard) links to the same filesystem object.","An error returned when an operation could not be completed …","This operation is unsupported on this platform.","The operation needs to block to complete, but the blocking …","A trait for objects which are byte-oriented sinks.","An error returned when an operation could not be completed …","Error returned for the buffered data from …","Advance the internal cursor of the slice.","Advance the cursor by asserting that <code>n</code> bytes have been …","Advance the internal cursor of the slice.","Advance a slice of slices.","Advance a slice of slices.","Appends data to the cursor, advancing position within its …","","","","","","","Returns a mutable reference to the whole cursor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the internally buffered data.","Returns a reference to the internally buffered data.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Returns the number of bytes the internal buffer can hold …","Returns the number of bytes the internal buffer can hold …","Returns the total capacity of the buffer.","Returns the available space in the cursor.","","Creates an adapter which will chain this stream with …","Clears the buffer, resetting the filled region to empty.","","","","","","","","","","","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","","","","Copies the entire contents of a reader into a writer.","","","","","","","","","","Attempt to downgrade the inner error to <code>E</code> if any.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a value that is always at EOF for reads, and …","Initializes all bytes in the cursor.","","","","","","","Returns the error which caused the call to …","Returns the contents of the internal buffer, filling it …","","","","","","","Returns a shared reference to the filled portion of the …","Returns a mutable reference to the filled portion of the …","Flush this output stream, ensuring that all intermediately …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shows a human-readable description of the <code>ErrorKind</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.","Returns the argument unchanged.","","Converts an <code>ErrorKind</code> into an <code>Error</code>.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of an <code>Error</code> from a particular OS …","Gets a mutable reference to the underlying reader.","Gets a mutable reference to the underlying writer.","Gets a mutable reference to the underlying writer.","Returns a mutable reference to the inner error wrapped by …","Gets a mutable reference to the underlying value in this …","Gets mutable references to the underlying readers in this …","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Gets a reference to the underlying writer.","Gets a reference to the underlying writer.","Returns a reference to the inner error wrapped by this …","Gets a reference to the underlying value in this cursor.","Gets references to the underlying readers in this <code>Chain</code>.","Gets a reference to the underlying reader.","Check if the underlying <code>Read</code> has any data left to be read.","","Returns the length of the initialized part of the buffer.","Returns a mutable reference to the initialized portion of …","Returns a shared reference to the initialized portion of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>IntoInnerError</code> and returns the error which …","Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.","Unwraps this <code>BufWriter&lt;W&gt;</code>, returning the underlying writer.","Returns the perhaps-unwritten data.  Some of this data may …","Unwraps this <code>LineWriter</code>, returning the underlying writer.","Consumes the <code>Error</code>, returning its inner error (if any).","Returns the buffered writer instance which generated the …","Consumes this cursor, returning the underlying value.","Consumes the <code>Chain</code>, returning the wrapped readers.","Consumes the <code>Take</code>, returning the wrapped reader.","","","","Disassembles this <code>BufWriter&lt;W&gt;</code>, returning the underlying …","Consumes the <code>IntoInnerError</code> and returns the error which …","Returns <code>true</code> if the remaining slice is empty.","","","","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","","Returns <code>true</code> if the descriptor/handle refers to a …","","","","","","","","","","","","","","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","","","","","","Returns the corresponding <code>ErrorKind</code> for this error.","Returns an error representing the last OS error which …","Returns the length of the filled part of the buffer.","Returns the number of bytes that can be read before this …","Consumes this handle and returns an iterator over input …","Returns an iterator over the lines of this reader.","Locks this handle to the standard input stream, returning …","Locks this handle to the standard output stream, returning …","Locks this handle to the standard error stream, returning …","Creates a new <code>BufReader&lt;R&gt;</code> with a default buffer capacity. …","Creates a new <code>BufWriter&lt;W&gt;</code> with a default buffer capacity. …","Creates a new <code>LineWriter</code>.","Creates a new I/O error from a known kind of error as well …","Creates a new <code>IoSliceMut</code> wrapping a byte slice.","Creates a new cursor wrapping the provided underlying …","Creates a new <code>IoSlice</code> wrapping a byte slice.","","","","Creates a new I/O error from an arbitrary error payload.","","Returns the current position of this cursor.","The I/O Prelude.","Returns the OS error that this error represents (if any).","Pull some bytes from this source into the specified …","","","","","","","","","","","","","","","","","","","","","Pull some bytes from this source into the specified buffer.","","","","Read the exact number of bytes required to fill <code>cursor</code>.","","","","Read the exact number of bytes required to fill <code>buf</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Locks this handle and reads a line of input, appending it …","","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","","","","","","","","","","","","Read all bytes until EOF in this source, placing them into …","Read all bytes from a reader into a new <code>String</code>.","","","","Read all bytes until EOF in this source, appending them to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","","","","","Like <code>read</code>, except that it reads into a slice of buffers.","","","Reborrow this cursor by cloning it with a smaller lifetime.","Returns the remaining slice.","Creates an instance of a reader that infinitely repeats …","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Seek to an offset, in bytes, in the underlying reader.","Seek to the offset, in bytes, in the underlying writer.","","","Seeks relative to the current position. If the new …","Asserts that the first <code>n</code> bytes of the buffer are …","Asserts that the first <code>n</code> unfilled bytes of the cursor are …","Sets the number of bytes that can be read before this …","Sets the position of this cursor.","Creates an instance of a writer which will successfully …","","","Returns an iterator over the contents of this reader split …","Constructs a new handle to the standard error of the …","Constructs a new handle to the standard input of the …","Constructs a new handle to the standard output of the …","Returns the length of this stream (in bytes).","","","Returns the current seek position from the start of the …","Returns the current seek position from the start of the …","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a cursor over the unfilled part of the buffer.","Returns a mutable reference to the uninitialized part of …","Creates a new <code>BufReader&lt;R&gt;</code> with the specified buffer …","Creates a new <code>BufWriter&lt;W&gt;</code> with at least the specified …","Creates a new <code>LineWriter</code> with at least the specified …","Write a buffer into this writer, returning how many bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to write an entire buffer into this writer.","","","","","","","","","","","","Attempts to write multiple buffers into this writer.","","","","","","Writes a formatted string into this writer, returning any …","","","","","","","","","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","Returns the number of bytes written to this cursor since …","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>Read</code> trait allows for reading bytes from a source.","The <code>Seek</code> trait provides a cursor which can be moved within …","A trait for objects which are byte-oriented sinks.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","Tells this buffer that <code>amt</code> bytes have been consumed from …","Returns the contents of the internal buffer, filling it …","Flush this output stream, ensuring that all intermediately …","Check if the underlying <code>Read</code> has any data left to be read.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Returns an iterator over the lines of this reader.","Pull some bytes from this source into the specified …","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","Like <code>read</code>, except that it reads into a slice of buffers.","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Returns an iterator over the contents of this reader split …","Returns the length of this stream (in bytes).","Returns the current seek position from the start of the …","Creates an adapter which will read at most <code>limit</code> bytes …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","Maximum Lightning message data length according to BOLT-8 …","payment_hash type, use to cross-lock hop","payment_preimage type, use to route payment between hop","payment_secret type, use to authenticate sender to the …","","","","","","","","Various utilities for building scripts and deriving keys …","The top-level channel management and payment tracking …","","","","","","","","","","","","","Feature flag definitions for the Lightning protocol …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Utilities to generate inbound payment information in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Wire messages, traits representing wire message handlers, …","Top level peer message handling and socket handling logic …","","","","","","","Abstractions for scripts used in the Lightning Network.","","","","","","","","","","","","","Wire encoding/decoding for Lightning messages according to …","","","","","Claims an accepted output on a commitment transaction …","Claims an accepted output on a commitment transaction …","A pre-built Bitcoin commitment transaction and its txid.","One counterparty’s public keys which do not change over …","Per-channel data used to build transactions in conjunction …","This class tracks the per-transaction information needed …","This class tracks the per-transaction information needed …","Late-bound per-channel counterparty data used to build …","Implements the per-commitment secret storage scheme from …","Static channel fields used to build transactions given …","Describes the type of HTLC claim as determined by …","Information about an HTLC as it appears in a commitment …","Information needed to build and sign a holder’s …","The weight of a BIP141 witnessScript for a BOLT3’s “…","Maximum number of one-way in-flight HTLC (protocol-level …","The weight of a BIP141 witnessScript for a BOLT3’s “…","The weight of a BIP141 witnessScript for a BOLT3’s “…","Claims an offered output on a commitment transaction …","Claims an offered output on a commitment transaction …","The maximum length of a script returned by …","Claims an offered/accepted output on a commitment …","A wrapper on ClosingTransaction indicating that the built …","A wrapper on CommitmentTransaction indicating that the …","The set of public keys which are used in the creation of …","The value, in msat, of the HTLC. The value as it appears …","Convert the holder/counterparty parameters to …","Convert the holder/counterparty parameters to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Broadcaster’s Payment Key (which isn’t allowed to be …","Broadcaster’s HTLC Key","Get the channel pubkeys for the broadcaster","Returns the witness required to satisfy and spend an …","Build a closing transaction","Build the commitment secret from the seed and the …","Returns the witness required to satisfy and spend a HTLC …","Builds an unsigned HTLC-Success or HTLC-Timeout …","The pre-built Bitcoin commitment transaction","The pre-built Bitcoin commitment transaction","","","","","","","","","","","","","","","","","","","","","The CLTV lock-time at which this HTLC expires.","The backwards-counting commitment number","Get the contest delay applicable to the transactions. Note …","All non-dust counterparty HTLC signatures, in the order …","The late-bound counterparty channel transaction parameters.","Our counterparty’s signature for the transaction","Countersignatory’s HTLC Key","Get the channel pubkeys for the countersignatory","The base point which is used (with derive_public_key) to …","","","","Create per-state keys from channel base points and the …","Derives a per-commitment-transaction private key (eg an …","Derives a per-commitment-transaction revocation key from …","Derives a per-commitment-transaction public key (eg an …","Derives a per-commitment-transaction revocation public key …","","","","","","","","","","","","","","","","","","","","","The feerate paid per 1000-weight-unit in this commitment …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate per-state keys from channel static keys. Key set …","Check if a given input witness attempts to claim a HTLC.","The funding outpoint","The late-bound funding outpoint","The public key which is used to sign all commitment …","Gets the witnessScript for an anchor output from the …","Commitment transaction numbers which appear in the …","Gets the witness redeemscript for an HTLC output in a …","Get a signature for each HTLC which was included in the …","Returns the minimum index of all stored secrets. Note that …","A script either spendable by the revocation key or the …","Returns the secret at <code>idx</code>. Returns <code>None</code> if <code>idx</code> is &lt; …","Get the SIGHASH_ALL sighash value of the transaction.","Get the SIGHASH_ALL sighash value of the transaction.","Gets the witnessScript for the to_remote output when …","","Holder public keys","The contest delay selected by the holder, which applies to …","The base point which is used (with derive_public_key) to …","Gets the weight for an HTLC-Success transaction.","Gets the weight for an HTLC-Timeout transaction.","The non-dust HTLCs (direction, amt, height expiration, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the channel is outbound from the broadcaster.","Whether the holder is the initiator of this channel. This …","Whether the late bound parameters are populated.","The pre-calculated transaction creation public keys.","Gets the redeemscript for a funding output from the two …","Creates a new empty <code>CounterpartyCommitmentSecrets</code> …","Create a new holder transaction with the given …","Construct an object of the class","Construct an object of the class while assigning …","Whether the HTLC was “offered” (ie outbound in …","Whether to use anchors for this channel","Should anchors be used.","Are anchors (zero fee HTLC transaction variant) used for …","Are non-zero-fee anchors are enabled (used in conjuction …","The hash of the preimage which unlocks this HTLC.","The public key on which the non-broadcaster (ie the …","The broadcaster’s per-commitment public key which was …","Inserts the <code>secret</code> at <code>idx</code>. Returns <code>Ok(())</code> if the secret …","Counter-party public keys","","","","","","","","","","","","","","","","","","","The base point which is used (with …","The revocation key which is used to allow the broadcaster …","The contest delay selected by the counterparty, which …","","","","","","","","","Sign a transaction, either because we are counter-signing …","Signs the counterparty’s commitment transaction.","Signs the holder commitment transaction because we are …","The value to be sent to the broadcaster","The destination of the counterparty’s output","The value to be sent to the counterparty, or zero if the …","The value to be sent to the counterparty","The destination of the holder’s output","The value to be sent to the holder, or zero if the output …","","","","","","","","","","","The commitment transaction","The position within the commitment transactions’ …","Trust our pre-built transaction.","Trust our pre-built transaction and derived transaction …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The transaction ID of the built Bitcoin transaction","The txid for the commitment transaction.","","","","","","","","","","","","","","","Verify our pre-built transaction.","Verify our pre-built transaction and derived transaction …","Use non-zero fee anchors","","","","","","","","","","After a payment’s retries are exhausted per the provided …","All paths which were attempted failed to send, with no …","Max number of attempts to retry payment.","The amount of time in blocks we require our counterparty …","Chain-related parameters used to construct a new …","Channel parameters which apply to our counterparty. These …","Details of a channel, as returned by …","Manager which keeps track of a number of channels and …","Arguments for the creation of a ChannelManager that are …","Information needed for constructing an invoice route hint …","Indicates that a payment for the provided <code>PaymentId</code> is …","Indicates that a payment for the provided <code>PaymentId</code> is …","This enum is used to specify which error data to send to …","When a pending payment is fulfilled, we continue tracking …","You may wish to use this when a <code>payment_preimage</code> is …","An identifier used to uniquely identify an intercepted …","The minimum number of blocks between an inbound HTLC’s …","Minimum CLTV difference between the current block height …","A parameter which was passed to send_payment was invalid, …","Some paths that were attempted failed to send, though some …","A parameter in a single path which was passed to …","The provided <code>PaymentParameters::expiry_time</code> indicated that …","A payment identifier used to uniquely identify a payment …","If a payment fails to send with …","When a payment is still being sent and awaiting successful …","Route hints used in constructing invoices for [phantom …","Used by <code>ChannelManager::list_recent_payments</code> to express …","Information which is provided, encrypted, to the payment …","We have a required feature which was not in this onion. …","Strategies available to retry payment path failures.","Indicates an immediate error on …","We were unable to find a route to the destination.","<code>SimpleArcChannelManager</code> is useful when you need a …","<code>SimpleRefChannelManager</code> is a type alias for a …","We had a temporary error processing the payment. Useful if …","Time elapsed before abandoning retries for a payment. At …","Signals that no further retries for the given payment …","Accepts a request to open a channel after a …","Accepts a request to open a channel after a …","Our total balance.  This is the amount we would get if we …","The hash and height of the latest block successfully …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The chain::Watch for use in the ChannelManager in the …","Fetches the set of <code>ChannelFeatures</code> flags which are …","The channel’s ID (prior to funding transaction …","A map from channel funding outpoints to ChannelMonitors …","The features which this channel operates with. See …","Fetches the set of <code>ChannelTypeFeatures</code> flags which are …","The value, in satoshis, of this channel as appears in the …","The list of channels to be included in the invoice route …","Provides a payment preimage in response to …","","","","","","","","","","","","","","","","","","","","","","","","","Begins the process of closing a channel. After this call …","Begins the process of closing a channel. After this call …","The minimum difference in cltv_expiry between an ingoing …","Gets inflight HTLC information by processing pending …","Set of configurable parameters that affect channel …","The current number of confirmations on the funding …","The number of required confirmations on the funding …","Parameters which apply to our counterparty. See individual …","Creates a new outbound channel to the given remote node …","Gets a payment secret and payment hash for use in an …","Gets a <code>PaymentSecret</code> for a given <code>PaymentHash</code>, for which …","Legacy version of <code>create_inbound_payment_for_hash</code>. Use …","Legacy version of <code>create_inbound_payment</code>. Use this method …","Gets the latest best block which was connected either via …","Default settings used for new channels. Any existing …","A cryptographically secure source of entropy.","","","","","","","","","","","","","","Indicates that the preimage for payment_hash is unknown or …","This is a variant of <code>ChannelManager::fail_htlc_backwards</code> …","Fails the intercepted HTLC indicated by intercept_id. …","The Features the channel counterparty provided upon last …","Base routing fee in millisatoshis.","The fee_estimator for use in the ChannelManager in the …","Amount in millionths of a satoshi the channel will charge …","The currently negotiated fee rate denominated in satoshi …","","","","","","","","","","","","Force close all channels, immediately broadcasting the …","Force close all channels rejecting new HTLCs on each but …","Force closes a channel, immediately broadcasting the …","The number of blocks (after our commitment transaction …","Force closes a channel, rejecting new HTLCs on the given …","Attempts to forward an intercepted HTLC over the provided …","Information on the fees and requirements that the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Call this upon creation of a funding transaction for the …","The Channel’s funding transaction output, if we’ve …","Returns <code>MessageSendEvent</code>s strictly ordered per-peer, in …","Gets the current configuration applied to all new channels.","Gets the current SCID which should be used to identify …","Gets a fake short channel id for use in receiving …","Gets the node_id held by this ChannelManager","Gets the current SCID which should be used to identify …","Gets an LDK-generated payment preimage from a payment hash …","Gets a <code>Future</code> that completes when this <code>ChannelManager</code> …","Gets route hints for use in receiving phantom node payments…","Gets a fake short channel id for use in receiving phantom …","","","","","","","","","","","","","","","","","","","","","","","The available inbound capacity for the remote peer to send …","The largest value HTLC (in msat) we currently will accept, …","The smallest value HTLC (in msat) we will accept, for this …","An optional <code>short_channel_id</code> alias for this channel, …","Fetches the set of <code>InitFeatures</code> flags which are provided …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True if the channel is confirmed, channel_ready messages …","True if the channel was initiated (and thus funded) by us.","True if this channel is (or will be) publicly-announced.","True if the channel is (a) confirmed and channel_ready …","Gets the list of open channels, in random order. See …","Gets the list of channels we have with a given …","Returns in an undefined order recent payments that – if …","Gets the list of usable channels, in random order. Useful …","The Logger for use in the ChannelManager and which may be …","The network for determining the <code>chain_hash</code> in Lightning …","Constructs a new <code>ChannelManager</code> to hold several channels …","Simple utility function to create a ChannelManagerReadArgs …","The available outbound capacity for sending a single HTLC …","Fetches the set of <code>NodeFeatures</code> flags which are provided …","The node_id of our counterparty","A signer that is able to perform node-scoped cryptographic …","The available outbound capacity for sending HTLCs to the …","The largest value HTLC (in msat) the remote peer currently …","The smallest value HTLC (in msat) the remote peer will …","An optional <code>short_channel_id</code> alias for this channel, …","The payment metadata serves a similar purpose as …","The <code>PaymentSecret</code> is an arbitrary 32 bytes provided by the …","","","A fake scid used for representing the phantom node’s …","Processes events that must be periodically handled.","Processes any events asynchronously in the order they were …","Processes HTLCs which are pending waiting on random …","Fetches the set of <code>InitFeatures</code> flags which are provided …","","","","","","","","","","","","","","","","","The pubkey of the real backing node that would ultimately …","The router which will be used in the ChannelManager in the …","Creates a <code>RecipientOnionFields</code> from only a <code>PaymentSecret</code>. …","Similar to <code>ChannelManager::send_payment</code>, but will …","Sends a payment along a given route.","Send a payment that is probing the given route for …","Send a spontaneous payment, which is a payment that does …","Similar to <code>ChannelManager::send_spontaneous_payment</code>, but …","","","","","The position of the funding transaction in the chain. None …","The keys provider which will give us relevant keys. Some …","Creates a new <code>RecipientOnionFields</code> with no fields. This …","Performs actions which should happen on startup and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BroadcasterInterface which will be used in the …","","","","","","","","","","","","","","","","The value, in satoshis, that must always be held in the …","The value, in satoshis, that must always be held in the …","Atomically updates the <code>ChannelConfig</code> for the given …","The <code>user_channel_id</code> passed in to create_channel, or a …","","","","","","","","","If some paths failed without irrevocably committing to the …","The payment id for the payment, which is now at least …","The errors themselves, in the same order as the paths from …","Hash of the payment that is currently being sent but has …","Hash of the payment that was claimed. <code>None</code> for …","Hash of the payment that we have given up trying to send.","Total amount (in msat, excluding fees) across all paths …","Features used within BOLT 4 encrypted_data_tlv and BOLT 12 …","Features used within an <code>invoice</code>.","Features used within a <code>channel_announcement</code> message.","Features used within the channel_type field in an …","Tracks the set of features which a node implements, …","Features used within an <code>init</code> message.","Features used within an invoice.","Features used within an <code>invoice_request</code>.","Features used within a <code>node_announcement</code> message.","Features used within an <code>offer</code>.","","","","","","Create a blank Features with no features set","","","","","","","","","","","","","Returns the argument unchanged.","","Create a Features given a set of flags, in little-endian. …","","Checks if this feature is supported.","Calls <code>U::from(self)</code>.","","","","","","","","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Returns true if this <code>Features</code> object contains unknown …","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Checks if this feature is required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Set this feature as optional.","Set this feature as required.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","Checks if this feature is supported.","","","","","","","","","","","","","A set of keys that were HKDF-expanded from an initial call …","","","Equivalent to …","Equivalent to …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a  new <code>ExpandedKey</code> for generating an inbound …","","","","Optional field is absent in message","An <code>accept_channel</code> message to be sent to or received from a …","An <code>announcement_signatures</code> message to be sent to or …","A length descriptor in the packet didn’t describe the …","A <code>channel_announcement</code> message to be sent to or received …","An unsigned channel announcement.","A trait to describe an object which can receive channel …","A <code>channel_ready</code> message to be sent to or received from a …","A <code>channel_reestablish</code> message to be sent to or received …","A <code>channel_update</code> message to be sent to or received from a …","An unsigned channel update.","A <code>closing_signed</code> message to be sent to or received from a …","The minimum and maximum fees which the sender is willing …","A <code>commitment_signed</code> message to be sent to or received from …","Struct used to return values from <code>RevokeAndACK</code> messages, …","Proof that the sender knows the per-commitment secret of …","An error in decoding a message or struct.","The peer took some action which made us think they were …","Used to put an error message in a <code>LightningError</code>.","An <code>error</code> message to be sent to or received from a peer.","A <code>funding_created</code> message to be sent to or received from a …","A <code>funding_signed</code> message to be sent to or received from a …","A <code>gossip_timestamp_filter</code> message is used by a node to …","A hostname/port on which the peer is listening.","An IPv4 address/port on which the peer is listening.","An IPv6 address/port on which the peer is listening.","The peer did something harmless that we weren’t able to …","The peer provided us with a gossip message which we’d …","The peer did something harmless that we weren’t able to …","An <code>init</code> message to be sent to or received from a peer.","Value was invalid.","Error from <code>std::io</code>.","An Err type for failure to process messages.","An address which can be used to connect to a remote peer.","A <code>node_announcement</code> message to be sent to or received from …","An unsigned node announcement.","An onion message to be sent to or received from a peer.","A trait to describe an object that can receive onion …","An old-style Tor onion address/port on which the peer is …","A new-style Tor onion address/port on which the peer is …","An <code>open_channel</code> message to be sent to or received from a …","Messages could have optional fields to use with extended …","A <code>ping</code> message to be sent to or received from a peer.","A <code>pong</code> message to be sent to or received from a peer.","Optional field is included in message","A <code>query_channel_range</code> message is used to query a peer for …","A <code>query_short_channel_ids</code> message is used to query a peer …","A <code>reply_channel_range</code> message is a reply to a …","A <code>reply_short_channel_ids_end</code> message is sent as a reply …","A <code>revoke_and_ack</code> message to be sent to or received from a …","A trait to describe an object which can receive routing …","The peer did something incorrect. Tell them.","The peer did something incorrect. Tell them without …","The buffer to be read was too short.","A <code>shutdown</code> message to be sent to or received from a peer.","Unknown feature mandating we fail to parse message (e.g., …","A version byte specified something we don’t know how to …","The unsigned part of a <code>channel_announcement</code> message.","The unsigned part of a <code>channel_update</code> message.","Represents the set of gossip messages that require a …","The unsigned part of a <code>node_announcement</code> message.","The message included zlib-compressed values, which we don…","An <code>update_add_htlc</code> message to be sent to or received from …","An <code>update_fail_htlc</code> message to be sent to or received from …","An <code>update_fail_malformed_htlc</code> message to be sent to or …","An <code>update_fee</code> message to be sent to or received from a peer","An <code>update_fulfill_htlc</code> message to be sent to or received …","A <code>warning</code> message to be sent to or received from a peer.","The action which should be taken against the offending …","List of addresses on which this node is reachable","An alias, for UI purposes.","The HTLC value in milli-satoshi","The funding key for the first node","The funding key for the second node","A signature by the funding key","Proof of funding UTXO ownership by the first public node","Proof of funding UTXO ownership by the second public node","Used in decrypting the onion packet’s payload.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The ping packet size.","The pong packet size.","The genesis hash of the blockchain where the channel is to …","The genesis hash of the blockchain where the channel is to …","The genesis hash of the blockchain where the channel is to …","The genesis hash of the blockchain being queried","The genesis hash of the blockchain being queried","The genesis hash of the blockchain being queried","The genesis hash of the blockchain that was queried","The genesis hash of the blockchain for channel and node …","The channel flags to be used","The channel ID involved in the error.","The channel ID involved in the warning.","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The channel ID","The minimum value unencumbered by HTLCs for the …","The minimum value unencumbered by HTLCs for the …","The channel type that this channel will represent","The channel type that this channel will represent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The expiry height of the HTLC","The number of blocks such that if: …","A <code>commitment_signed</code> message which should be sent","The actual content of the announcement","The actual announcement","The actual channel update","A possibly human-readable error description.","A possibly human-readable warning description.","Optionally, a field proving that …","Used to derive a payment key to sender for transactions …","Used to derive a payment key to sender for transactions …","The threshold below which outputs on transactions …","The threshold below which outputs on transactions …","Calculates the overflow safe ending block height for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A human-readable message describing the error","Excess data which was signed as a part of the message …","The failure code","The relevant features which the sender supports.","The advertised features","The advertised channel features","The base HTLC fee charged by sender, in milli-satoshi","The amount to fee multiplier, in micro-satoshi","The minimum and maximum fees which the sender is willing …","The proposed total fee for the closing transaction","The feerate per 1000-weight of sender generated …","Fee rate per 1000-weight of the transaction","The height of the first block for the channel UTXOs being …","The height of the first block in the range of the reply","The first to-be-broadcast-by-sender transaction’s per …","The first to-be-broadcast-by-sender transaction’s per …","The starting unix timestamp","Channel flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Indicates if the query recipient maintains up-to-date …","The specific output index funding this channel","The sender’s key controlling the funding transaction","The sender’s key controlling the funding transaction","The channel value","The funding transaction ID","Gets channel announcements and updates required to dump …","Gets a node announcement required to dump our routing …","Handle an incoming <code>accept_channel</code> message from the given …","Handle an incoming <code>announcement_signatures</code> message from …","Handle a <code>channel_announcement</code> message, returning <code>true</code> if …","Handle an incoming <code>channel_ready</code> message from the given …","Handle an incoming <code>channel_reestablish</code> message from the …","Handle an incoming <code>channel_update</code> message from the given …","Handle an incoming <code>channel_update</code> message, returning true …","Handle an incoming <code>closing_signed</code> message from the given …","Handle an incoming <code>commitment_signed</code> message from the …","Handle an incoming <code>error</code> message from the given peer.","Handle an incoming <code>funding_created</code> message from the given …","Handle an incoming <code>funding_signed</code> message from the given …","Handle an incoming <code>node_announcement</code> message, returning …","Handle an incoming <code>onion_message</code> message from the given …","Handle an incoming <code>open_channel</code> message from the given …","Handles when a peer asks us to send a list of …","Handles when a peer asks us to send routing gossip …","Handles the reply of a query we initiated to learn about …","Handles the reply of a query we initiated asking for …","Handle an incoming <code>revoke_and_ack</code> message from the given …","Handle an incoming <code>shutdown</code> message from the given peer.","Handle an incoming <code>update_add_htlc</code> message from the given …","Handle an incoming <code>update_fail_htlc</code> message from the given …","Handle an incoming <code>update_fail_malformed_htlc</code> message from …","Handle an incoming <code>update_fee</code> message from the given peer.","Handle an incoming <code>update_fulfill_htlc</code> message from the …","Used to derive an HTLC payment key to sender","Used to derive an HTLC payment key to sender for …","The HTLC ID","The HTLC ID","The HTLC ID","The HTLC ID","The maximum HTLC value incoming to sender, in …","The minimum HTLC size incoming to sender, in milli-satoshi","The minimum HTLC size incoming to sender, in milli-satoshi","The minimum HTLC size incoming to sender, in milli-satoshi","Signatures on the HTLC transactions","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The maximum number of inbound HTLCs towards sender","The maximum number of inbound HTLCs towards sender","The maximum absolute fee, in satoshis, which the sender is …","The maximum inbound HTLC value in flight towards sender, …","The maximum inbound HTLC value in flight towards sender, …","The minimum absolute fee, in satoshis, which the sender is …","Minimum depth of the funding transaction before the …","The sender’s per-commitment point for their current …","The next commitment number for the sender","The per-commitment point of the second commitment …","The next sender-broadcast commitment transaction’s …","The next commitment number for the recipient","The <code>node_id</code> this announcement originated from (don’t …","One of the two <code>node_id</code>s which are endpoints of this channel","The other of the two <code>node_id</code>s which are endpoints of this …","A signature by the node key","Authentication of the announcement by the first public node","Authentication of the announcement by the second public …","The number of blocks to include in the query results","The number of blocks included in the range of the reply","The payment hash, the pre-image of which controls HTLC …","A payment key to sender for transactions broadcast by …","A payment key to sender for transactions broadcast by …","The pre-image of the payment hash, allowing HTLC redemption","Handle a peer reconnecting, possibly generating …","Called when a connection is established with a peer. This …","Called when a connection is established with a peer. Can …","Indicates a connection to the peer failed/an existing …","Indicates a connection to the peer failed/an existing …","The secret corresponding to the per-commitment point","The desired response length.","Indicates that there are a large number of …","Gets the init feature flags which should be sent to the …","Gets the init feature flags which should be sent to the …","Gets the init feature flags which should be sent to the …","Gets the node feature flags which this handler itself …","Gets the node feature flags which this handler itself …","Gets the node feature flags which this handler itself …","The amount to push to the counterparty as part of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The receipient’s network address.","Used to derive a revocation key for transactions broadcast …","Used to derive a revocation key for transactions broadcast …","An RGB color for UI purposes","The destination of this peer’s funds on closing.","","","","","The short channel ID","The short channel ID","The short channel ID","If set, provides a <code>short_channel_id</code> alias for this channel.","The <code>short_channel_id</code>s in the channel range","The short_channel_ids that are being queried","Optionally, a request to pre-set the to-sender output’s …","Optionally, a request to pre-set the to-sender output’s …","The signature of the channel initiator (funder) on the …","The signature of the channel acceptor (fundee) on the …","A signature on the closing transaction","A signature on the commitment transaction","The signature by the node key","A signature of the channel update","True when this is the final reply for a query","A temporary channel ID, until the funding outpoint is …","A temporary channel ID, until the funding outpoint is …","A temporary channel ID, until the funding is established","A strictly monotonic announcement counter, with gaps …","A strictly monotonic announcement counter, with gaps …","The range of information in seconds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of blocks which the counterparty will have to …","The number of blocks which the counterparty will have to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>update_add_htlc</code> messages which should be sent","<code>update_fail_htlc</code> messages which should be sent","<code>update_fail_malformed_htlc</code> messages which should be sent","An <code>update_fee</code> message which should be sent","<code>update_fulfill_htlc</code> messages which should be sent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Proof that the sender knows the per-commitment secret of a …","The peer may have done something harmless that we weren’…","An error message which we should make an effort to send …","The message to send.","The message to send.","The 4-byte IPv4 address","The 16-byte IPv6 address","The checksum of the pubkey and version, as included in the …","The ed25519 long-term public key of the peer","The hostname on which the node is listening.","The port on which the node is listening","The port on which the node is listening","The port on which the node is listening","The port on which the node is listening.","The version byte, as defined by the Tor Onion v3 spec.","A handler provided to <code>PeerManager</code> for reading and handling …","A dummy struct which implements <code>ChannelMessageHandler</code> …","A dummy struct which implements <code>RoutingMessageHandler</code> …","Provides references to trait impls which handle different …","Error for PeerManager errors. If you get one of these, you …","A PeerManager manages a set of peers, described by their …","SimpleArcPeerManager is useful when you need a PeerManager …","SimpleRefPeerManager is a type alias for a PeerManager …","Provides an object which can be used to send data to and …","","","","","","","","","","","Generates a signed node_announcement from the given …","A message handler which handles messages specific to …","","","","","","Disconnects all currently-connected peers. This is useful …","Disconnect a peer given its node id.","Disconnect the socket pointed to by this SocketDescriptor.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the list of pending messages that were generated …","","","","","","Get a list of tuples mapping from node id to network …","","","","","","","","","","Handles the given message sent from <code>sender_node_id</code>, …","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new ErroringMessageHandler","Constructs a new <code>PeerManager</code> with the given message …","Constructs a new <code>PeerManager</code> with the given …","Indicates a new inbound connection has been established to …","Indicates a new outbound connection has been established …","Constructs a new <code>PeerManager</code> with the given …","","A message handler which handles onion messages. For now, …","","","","","","Checks for any events generated by our handlers and …","","","","","","","","","","Indicates that data was read from the given socket …","A message handler which handles messages updating our …","Attempts to send some data from the given slice to the …","Indicates that the given socket descriptor’s connection …","Send pings to each peer and disconnect those which did not …","","","","","","","","","","","","","","","","","","Indicates that there is room to write data to the given …","An error occurring when converting from <code>Script</code> to …","A script pubkey for shutting down a channel as defined by …","Returns the <code>PublicKey</code> used for a P2WPKH shutdown script if …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Converts the shutdown script into the underlying <code>Script</code>.","Returns whether the shutdown script is compatible with the …","Generates a P2WPKH script pubkey from the given <code>WPubkeyHash</code>…","Generates a P2WSH script pubkey from the given <code>WScriptHash</code>.","Generates a witness script pubkey from the given segwit …","","","The script that did not meet the requirements from BOLT #2.","","","","","","","","","","","","","","The type of the message decoded by the implementation.","Trait to be implemented by custom message (unrelated to …","Defines a type identifier for sending messages over the …","Decodes a custom message to <code>CustomMessageType</code>. If the …","Returns the type identifying the message payload.","Data structures and encoding for <code>invoice</code> messages.","Data structures and encoding for <code>invoice_request</code> messages.","Data structures and encoding for <code>offer</code> messages.","Parsing and formatting for bech32 message encoding.","Data structures and encoding for refunds.","Information needed to route a payment across a <code>BlindedPath</code>.","<code>Invoice::signing_pubkey</code> was derived.","<code>Invoice::signing_pubkey</code> was explicitly set.","An <code>Invoice</code> is a payment request, typically corresponding …","Builds an <code>Invoice</code> from either:","Indicates how <code>Invoice::signing_pubkey</code> was set.","A semantically valid <code>Invoice</code> that hasn’t been signed.","Sets <code>Invoice::features</code> to indicate MPP may be used. …","The minimum amount required for a successful payment of …","","","","","","","","","","","","","Builds an unsigned <code>Invoice</code> after checking for valid …","Builds a signed <code>Invoice</code> after checking for valid semantics.","","","","","Number of blocks subtracted from an incoming HTLC’s …","Duration since the Unix epoch when the invoice was created.","A complete description of the purpose of the originating …","","","Adds a P2WPKH address to <code>Invoice::fallbacks</code>.","Adds a P2WSH address to <code>Invoice::fallbacks</code>.","Adds a P2TR address to <code>Invoice::fallbacks</code>.","Fallback addresses for paying the invoice on-chain, in …","Features pertaining to paying an invoice.","Features set in <code>encrypted_data_tlv</code> for the …","Base fee charged (in millisatoshi) for the entire blinded …","Liquidity fee charged (in millionths of the amount …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The maximum HTLC value (in millisatoshi) that is …","The minimum HTLC value (in millisatoshi) that is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the invoice has expired.","SHA256 hash of the payment preimage that will be given in …","Paths to the recipient originating from publicly reachable …","","","Sets the <code>Invoice::relative_expiry</code> as seconds since …","Duration since <code>Invoice::created_at</code> when the invoice has …","","Signs the invoice using the given function.","Hash that was used for signing the invoice.","Signature of the invoice verified using …","The public key corresponding to the key needed to sign the …","The public key corresponding to the key used to sign the …","","","","","","","","","","","","","","","","","","","","","","Verifies that the invoice was for a request or refund …","","","<code>InvoiceRequest::payer_id</code> will be derived.","<code>InvoiceRequest::payer_id</code> will be explicitly set.","An <code>InvoiceRequest</code> is a request for an <code>Invoice</code> formulated …","Builds an <code>InvoiceRequest</code> from an <code>Offer</code> for the “offer to …","Indicates how <code>InvoiceRequest::payer_id</code> will be set.","A semantically valid <code>InvoiceRequest</code> that hasn’t been …","Sets the <code>InvoiceRequest::amount_msats</code> for paying an …","The amount to pay in msats (i.e., the minimum …","","","","","","","","","","","Builds an unsigned <code>InvoiceRequest</code> after checking for valid …","Builds a signed <code>InvoiceRequest</code> after checking for valid …","Sets the <code>InvoiceRequest::chain</code> of the given <code>Network</code> for …","A chain from <code>Offer::chains</code> that the offer is valid for.","","","Features pertaining to requesting an invoice.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An unpredictable series of bytes, typically containing …","A possibly transient pubkey used to sign the invoice …","Sets the <code>InvoiceRequest::payer_note</code>.","A payer-provided note which will be seen by the recipient …","Sets <code>InvoiceRequest::quantity</code> of items. If not set, <code>1</code> is …","The quantity of the offer’s item conforming to …","Creates an <code>InvoiceBuilder</code> for the request with the given …","Creates an <code>InvoiceBuilder</code> for the request with the given …","Signs the invoice request using the given function.","Signature of the invoice request using <code>payer_id</code>.","","","","","","","","","","","","","","","","","","Verifies that the request was for an offer created using …","Creates an <code>InvoiceBuilder</code> for the request using the given …","Creates an <code>InvoiceBuilder</code> for the request using the given …","","The minimum amount required for an item in an <code>Offer</code>, …","An amount of bitcoin.","Up to a specific number of items (inclusive). Use when …","An amount of currency specified using ISO 4712.","An ISO 4712 three-letter currency code (e.g., USD).","<code>Offer::metadata</code> will be derived.","<code>Offer::metadata</code> may be explicitly set or left empty.","Indicates how <code>Offer::metadata</code> may be set.","An <code>Offer</code> is a potentially long-lived proposal for payment …","Builds an <code>Offer</code> for the “offer to be paid” flow.","Only one item. Use when only a single item can be …","Quantity of items supported by an <code>Offer</code>.","One or more items. Use when more than one item can be …","Sets the <code>Offer::absolute_expiry</code> as seconds since the Unix …","Duration since the Unix epoch when an invoice should no …","The minimum amount required for a successful payment of a …","Sets the <code>Offer::amount</code> as an <code>Amount::Bitcoin</code>.","","","","","","","","","","","","","","","Builds an <code>Offer</code> from the builder’s settings.","Adds the chain hash of the given <code>Network</code> to <code>Offer::chains</code>. …","The chains that may be used when paying a requested …","","","","","","","","Similar to <code>OfferBuilder::new</code> except, if <code>OfferBuilder::path</code> …","A complete description of the purpose of the payment. …","","","Returns whether a quantity is expected in an <code>InvoiceRequest</code>…","Features pertaining to the offer.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the offer has expired.","Returns whether the given quantity is valid for the offer.","Sets the <code>Offer::issuer</code>.","The issuer of the offer, possibly beginning with …","Sets the <code>Offer::metadata</code> to the given bytes.","Opaque bytes set by the originator. Useful for …","Creates a new builder for an offer setting the …","Adds a blinded path to <code>Offer::paths</code>. Must include at least …","Paths to the recipient originating from publicly reachable …","Creates an <code>InvoiceRequestBuilder</code> for the offer with the …","Similar to <code>Offer::request_invoice_deriving_payer_id</code> except …","Similar to <code>Offer::request_invoice</code> except it:","The public key used by the recipient to sign invoices.","Sets the quantity of items for <code>Offer::supported_quantity</code>. …","The quantity of items supported.","Returns whether the given chain is supported by the offer.","","","","","","","","","","","","","","","","","","","","","","","","","","The amount in the currency unit adjusted by the ISO 4712 …","The amount in millisatoshi.","The currency that the amount is denominated in.","The current <code>std::time::SystemTime</code> is past the offer or …","The string could not be bech32 decoded.","The bech32 decoded string could not be decoded as the …","An amount was provided but was not sufficient in value.","The amount exceeded the total bitcoin supply.","The bech32 encoding’s human-readable part does not match …","The bech32 encoding does not conform to the BOLT 12 …","Metadata could not be used to verify the offers message.","The blinded payinfo given does not match the number of …","An unsupported quantity was provided.","The parsed message has invalid semantics.","The parsed message has an invalid signature.","A signing pubkey was provided but a different one was …","An amount was expected but was missing.","An invoice creation time was expected but was missing.","A required description was not provided.","Blinded paths were expected but were missing.","A payer id was expected but was missing.","Payer metadata was expected but was missing.","An invoice payment hash was expected but was missing.","A quantity was expected but was missing.","A signature was expected but was missing.","A signing pubkey was not provided.","Error when parsing a bech32 encoded message using …","Error when interpreting a TLV stream as a specific type.","An amount was provided but was not expected.","A chain was provided but was not expected.","Features were provided but were not expected.","Metadata was provided but was not expected.","A quantity or quantity bounds was provided but was not …","A signing pubkey was provided but was not expected.","A feature was required but is unknown.","The provided chain hash does not correspond to a supported …","A currency was provided that is not supported.","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","A <code>Refund</code> is a request to send an <code>Invoice</code> without a …","Builds a <code>Refund</code> for the “offer for money” flow.","Sets the <code>Refund::absolute_expiry</code> as seconds since the Unix …","Duration since the Unix epoch when an invoice should no …","The amount to refund in msats (i.e., the minimum …","","","","","","","Builds a <code>Refund</code> after checking for valid semantics.","Sets the <code>Refund::chain</code> of the given <code>Network</code> for paying an …","A chain that the refund is valid for.","","","","Similar to <code>RefundBuilder::new</code> except, if …","A complete description of the purpose of the refund. …","Features pertaining to requesting an invoice.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the refund has expired.","Sets the <code>Refund::issuer</code>.","The issuer of the refund, possibly beginning with …","An unpredictable series of bytes, typically containing …","Creates a new builder for a refund using the …","Adds a blinded path to <code>Refund::paths</code>. Must include at …","Paths to the sender originating from publicly reachable …","A public node id to send to in the case where there are no …","Sets the <code>Refund::payer_note</code>.","Payer provided note to include in the invoice.","Sets <code>Refund::quantity</code> of items. This is purely for …","The quantity of an item that refund is for.","Creates an <code>InvoiceBuilder</code> for the refund using the given …","Creates an <code>InvoiceBuilder</code> for the refund using the given …","Creates an <code>InvoiceBuilder</code> for the refund with the given …","Creates an <code>InvoiceBuilder</code> for the refund with the given …","","","","","","","","","","","","We’re sending this onion message to a blinded path.","We attempted to send to a blinded path where we are the …","Our next-hop peer’s buffer was full or our total …","A custom onion message specified by the user.","The message known to the handler. To support multiple …","The contents of a custom onion message.","Handler for custom onion messages. If you are using …","The destination of an onion message.","Failed to retrieve our node id from the provided <code>NodeSigner</code>…","Our next-hop peer was offline or does not support onion …","Onion message contents must have a TLV type &gt;= 64.","We’re sending this onion message to a node.","The contents of an onion message. In the context of …","A sender, receiver and forwarder of onion messages. In …","Errored computing onion message packet keys.","Errors that may occur when sending an onion message.","Useful for simplifying the parameters of …","Useful for simplifying the parameters of …","Because implementations such as Eclair will drop onion …","The provided <code>Destination</code> was an invalid <code>BlindedPath</code>, due …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Called with the custom message that was received.","Handle an incoming onion message. Currently, if a message …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>OnionMessenger</code> to send, forward, and …","","","","","","Read a custom message of type <code>message_type</code> from <code>buffer</code>, …","Send an onion message with contents <code>message</code> to <code>destination</code>…","Returns the TLV type identifying the message contents. …","Returns the type that was used to decode the message …","","","","","","","","","","","","","","The <code>NetworkGraph</code> stores the network gossip and …","The router finds paths within a <code>NetworkGraph</code> for a payment.","Utilities for scoring payment channels.","This module contains traits for LDK to access UTXOs to …","An error indicating that a channel failed to route a …","Details about a channel (both directions). Received within …","Details about one direction of a channel as received …","An error indicating a <code>channel_update</code> messages should be …","A wrapper around <code>ChannelInfo</code> representing information …","The effective capacity of a channel for routing purposes.","The available liquidity in the channel known from being a …","A capacity sufficient to route any payment, typically used …","The maximum HTLC amount in one direction as advertised on …","Represents the network as nodes and channels between them","Update to the <code>NetworkGraph</code> based on payment failure …","A user-defined name for a node, which may be used when …","Information received in the latest node_announcement from …","An error indicating that a node failed to route a payment, …","Represents the compressed public key of a node","Details about a node in the network, known from the …","Receives and validates network updates from peers, stores …","A read-only view of <code>NetworkGraph</code>.","Fees for routing via a given channel or a node","The total capacity of the channel as determined by the …","The presumed channel capacity denominated in millisatoshi …","A capacity that is unknown possibly because either the …","Update channel from partial announcement data received via …","Adds a provider used to check new announcements. Does not …","Internet-level addresses via which one can connect to the …","Moniker assigned to the node. May be invalid or malicious …","More information about a node from node_announcement. …","An initial announcement of the channel Mostly redundant …","An initial announcement of the node Mostly redundant with …","Returns a <code>DirectedChannelInfo</code> for the channel directed …","Returns a <code>DirectedChannelInfo</code> for the channel directed to …","Returns the effective capacity denominated in millisatoshi.","Get the public key from this NodeId","Get the public key slice from this NodeId","Flat routing fee in millisatoshis.","","","","","","","","","","","","","","","","","","","","","","","","","","","The channel capacity as seen on-chain, if chain lookup is …","Returns information on a channel with the given id.","Returns information for the channel.","Marks a channel in the graph as failed permanently.","Returns all known valid channels’ short ids along with …","All valid channels a node has announced","","","","","","","","","","","","","","","","","","","","","The difference in CLTV values that you must have when …","","Returns the <code>EffectiveCapacity</code> of the channel in the …","Whether the channel can be currently used for payments (in …","","","","","","","","","","","","","","","","","","","","Protocol features of a channel communicated during its …","Protocol features the node announced support for","Fees charged when the channel is used for routing","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new NodeId from a public key","","Get network addresses by node id. Returns None if the …","","Returns a <code>ChannelUpdateInfo</code> based on the direction implied …","The unix timestamp provided by the most recent rapid …","","","","","Handles any network updates originating from <code>Event</code>s.","","Processes a query from a peer by finding announced/public …","","","","","","Returns the maximum HTLC amount allowed over the channel …","The maximum value which may be relayed to the next hop via …","The minimum value, which must be relayed to the next hop …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","When the last update to the channel direction was issued. …","When the last known update to the node state was issued. …","Most recent update for the channel received from the …","Gets a reference to the underlying <code>NetworkGraph</code> which was …","Creates a new, empty, network graph.","Creates a new tracker of the actual state of the network …","Returns information on a node with the given id.","Marks a node in the graph as permanently failed, …","Source node of the first direction of a channel","Source node of the second direction of a channel","Returns all known nodes’ public keys along with …","Details about the first direction of a channel","","Initiates a stateless sync of routing gossip information …","","Liquidity-based routing fee in millionths of a routed …","","","","","","","","","","","","","","","","","","","Returns a read-only view of the network graph.","Removes information about channels that we haven’t heard …","Removes information about channels that we haven’t heard …","Color assigned to the node","","Update the unix timestamp provided by the most recent …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Details about the second direction of a channel","","","","","","","","","","","","","","For an already known (from announcement) channel, update …","Store or update channel info from a channel announcement.","Store or update channel info from a channel announcement …","For an already known (from announcement) channel, update …","For an already known node (from channel announcements), …","For an already known node (from channel announcements), …","","","","","","","","","","The maximum HTLC amount denominated in millisatoshi.","The funding amount denominated in millisatoshi.","The maximum HTLC amount denominated in millisatoshi.","Either the inbound or outbound liquidity depending on the …","Whether the channel should be permanently removed or …","Whether the node should be permanently removed from …","The update to apply via <code>NetworkGraph::update_channel</code>.","The node id of the failed node.","The short channel id of the closed channel.","The recipient provided blinded paths and payinfo to reach …","The blinded portion of a <code>Path</code>, if we’re routing to a …","The recipient included these route hints in their BOLT11 …","Maximum number of paths we allow an (MPP) payment to have.","Maximum total CTLV difference we allow for a full payment …","A <code>Router</code> implemented using <code>find_route</code>.","Routing hints for the tail of the route.","A data structure for tracking in-flight HTLCs. May be used …","A path in a <code>Route</code> to the payment recipient. Must always be …","The recipient of a payment.","A route directs a payment from the sender (us) to the …","A list of hops along a payment path terminating with a …","A channel descriptor for a hop along a payment path.","A hop in a route, and additional metadata about it. “Hop…","Parameters needed to find a <code>Route</code>.","A trait defining behavior for routing a payment.","<code>Score</code> implementation that factors in in-flight HTLC …","The blinded path at which this path terminates, if we’re …","The blinding point of the <code>BlindedPath</code> provided by the …","","","","","","","","","","","","","","","","","","","","","","","","","Construct a route from us (payer) to the target node …","The channel_announcement features of the channel that …","","","","","","","","","","","","","","","","","","","","","","The CLTV delta added for this hop. If this is the last hop …","The difference in CLTV values between this node and the …","","","","","","","","","","","","","","","","","","","Excess CLTV delta added to the recipient’s CLTV expiry …","Expiration of a payment to the payee, in seconds relative …","Features supported by the payee.","Gets the fees for a given path, excluding any excess paid …","The fee taken on this hop (for paying for the use of the …","The fees which must be paid to use this channel","Gets the final hop’s CLTV expiry delta.","The minimum CLTV delta at the end of the route. This value …","Gets the total amount paid on this <code>Path</code>, excluding the …","The total amount paid on this <code>Path</code>, excluding the fees.","The amount in msats sent on the failed payment path.","Finds a route from us (payer) to the given target node …","Finds a <code>Route</code> between <code>payer</code> and <code>payee</code> for a payment with …","","Finds a <code>Route</code> between <code>payer</code> and <code>payee</code> for a payment with …","","","","","","","","","Creates a payee with the node id of the given <code>pubkey</code> to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a payee with the node id of the given <code>pubkey</code>.","Returns the total amount paid on this <code>Route</code>, excluding the …","Returns the total amount of fees paid on this <code>Route</code>.","","","","","","","","","The hops of the <code>BlindedPath</code> provided by the recipient.","The list of unblinded hops in this <code>Path</code>. Must be at least …","The maximum value in msat available for routing with a …","The minimum value, in msat, which must be relayed to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Selects the maximum share of a channel’s total capacity …","The maximum number of paths that may be used by (MPP) …","The maximum total CLTV delta we accept for the route. …","Creates a new router.","Initialize a new <code>ScorerAccountingForInFlightHtlcs</code>.","Constructs an empty <code>InFlightHtlcs</code>.","The node_announcement features of the node at this hop. …","The list of <code>Path</code>s taken for a single …","The node id of the payee.","The <code>payment_params</code> parameter passed to <code>find_route</code>. This is …","The parameters of the failed payment path.","","","A list of SCIDs which this payment was previously …","","","Takes in a path with payer’s node id and adds the path’…","The node_id of the node at this hop.","","","","","","","","","","","","","","","","Hints for routing to the payee, containing channels …","","","","The channel that should be used from the previous hop to …","The short_channel_id of this channel","The node_id of the non-target end of the route","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns liquidity in msat given the public key of the HTLC …","Includes a payment expiration in seconds relative to the …","Includes the payee’s features.","Includes a limit for the maximum number of payment paths …","Includes a limit for the maximum number of payment paths …","Includes a limit for the total CLTV expiry delta which is …","Includes hints for routing to the payee.","","","","","","","","","Proposed use of a channel passed as a parameter to …","<code>Score</code> implementation that uses a fixed penalty.","A scorer that is accessed under a lock.","The locked <code>Score</code> type.","<code>Score</code> implementation using channel success probability …","Probabilistic <code>Score</code> implementation.","Parameters for configuring <code>ProbabilisticScorer</code>.","An interface used to score payment channels for path …","Refers to a scorer that is accessible under lock and also …","Marks the node with the given <code>node_id</code> as banned, i.e., it …","Marks all nodes in the given list as banned, i.e., they …","The amount to send through the channel, denominated in …","This penalty is applied when <code>htlc_maximum_msat</code> is equal to …","A multiplier used with the payment amount to calculate a …","A fixed penalty in msats to apply to each channel.","","","","","","","","","Returns the fee in msats willing to be paid to avoid …","","","Clears the list of manual penalties that are applied …","","","","","","","This penalty is applied when the amount we’re attempting …","Dump the contents of this scorer into the configured …","","The effective capacity of the channel.","","Query the estimated minimum and maximum liquidity …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Query the historical estimated minimum and maximum …","A multiplier used in conjunction with the payment amount …","A multiplier used in conjunction with the negative <code>log10</code> …","If we aren’t learning any new datapoints for a channel, …","Total amount, denominated in millisatoshis, already …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whenever this amount of time elapses since the last update …","A multiplier used in conjunction with a payment amount and …","A multiplier used in conjunction with the negative <code>log10</code> …","Returns the locked scorer.","Manual penalties used for the given nodes. Allows to set a …","Creates a new scorer using the given scoring parameters …","Handles updating channel penalties after failing to route …","","","Handles updating channel penalties after successfully …","","","Handles updating channel penalties after a probe over the …","","","Handles updating channel penalties after a probe over the …","","","","","Removes the node with the given <code>node_id</code> from the list of …","Removes the node with the given <code>node_id</code> from the list of …","Sets a manual penalty for the given node.","","","","","","","","","","","","","","","","Creates a new scorer using <code>penalty_msat</code>.","","","A result which will be resolved asynchronously. It …","A result which was resolved synchronously. It either …","The requested chain is unknown.","The requested transaction doesn’t exist or hasn’t …","Represents a future resolution of a <code>UtxoLookup::get_utxo</code> …","The <code>UtxoLookup</code> trait defines behavior for accessing …","An error when accessing the chain via <code>UtxoLookup</code>.","The result of a <code>UtxoLookup::get_utxo</code> call. A call may …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the transaction output of a funding transaction …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Builds a new future for later resolution.","Resolves this future against the given <code>graph</code> and with the …","Resolves this future against the given <code>graph</code> and with the …","","","","","","","","","","","","","Various user-configurable channel limits and settings …","Error types live here.","This module has a map which can be iterated in a …","Low level invoice utilities.","Log traits live here, which are called throughout the …","Lightning message signing and verification lives here. …","This module contains a simple key-value store trait …","A very simple serialization framework which is used to …","Some macros that implement <code>Readable</code>/<code>Writeable</code> traits for …","Utilities for strings.","Utilities which allow users to block on some future …","Options which apply on a per-channel basis and may change …","Configuration we set when applicable.","Optional channel limits which are applied during channel …","Top-level config which holds ChannelHandshakeLimits and …","If this is set to false, we will reject any HTLCs which …","If this is set to false, we do not accept inbound requests …","If this is set to true, LDK will intercept HTLCs that are …","Set to announce the channel publicly and notify all nodes …","","","","","","","","","Channel config which affects behavior during channel …","Channel handshake config that we propose to our …","Limits applied to our counterparty’s proposed channel …","","","","","","","","","The difference in the CLTV value between incoming HTLCs …","When set, we commit to an upfront shutdown_pubkey at …","","","Provides sane defaults for most configurations (but with …","","","","","","","","Set to force an incoming channel to match our announced …","The additional fee we’re willing to pay to avoid waiting …","Amount (in milli-satoshi) charged for payments forwarded …","Amount (in millionths of a satoshi) charged per satoshi …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If this is set to true, the user needs to manually accept …","The remote node will require we keep a certain amount in …","Limit our total exposure to in-flight HTLCs which are …","Maximum allowed satoshis when a channel is funded. This is …","The remote node sets a limit on the minimum size of HTLCs …","Sets the percentage of the channel value we will cap the …","Before a channel is usable the funding transaction will …","Minimum allowed satoshis when a channel is funded. This is …","The remote node sets a limit on the maximum number of …","The remote node sets a limit on the maximum value of …","Confirmations we will wait for before considering the …","If set, we attempt to negotiate the <code>scid_privacy</code> (referred …","Set to the smallest value HTLC we will accept to process.","The maximum number of HTLCs in-flight from our …","Set to the number of blocks we require our counterparty to …","","","","The Proportion of the channel value to configure as …","Set to the amount of time we’re willing to wait to claim …","","","","","Whether we implicitly trust funding transactions generated …","","","","","","","","","","","","","","Indicates an error on the client’s part (usually some …","Indicates the API was wholly misused (see err for more). …","We were unable to complete the request as the Channel …","Due to a high feerate, we were unable to complete the …","<code>SignerProvider::get_shutdown_scriptpubkey</code> returned a …","A malformed Route was provided (eg overflowed value, node …","An attempt to call <code>chain::Watch::watch_channel</code>/…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","A human-readable error message","A human-readable error message","A human-readable error message","A human-readable error message","The feerate which was too high.","The incompatible shutdown script.","A mutable reference to a position in the map. This can be …","A map which can be iterated in a deterministic order.","A mutable reference to a position within the map where …","An <code>Entry</code> for an existing key-value pair","An iterator over a range of values in an <code>IndexedMap</code>","A mutable reference to a position within the map where …","An <code>Entry</code> for a key which currently has no value","","","","","","","","","","","","","Returns true if an element with the given <code>key</code> exists in …","Returns an <code>Entry</code> for the given <code>key</code> in the map, allowing …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a reference to the value at the position described by …","Fetches the element with the given <code>key</code>, if one exists.","Get a mutable reference to the value at the position …","Fetches a mutable reference to the element with the given …","Insert a value into the position described by this entry.","Inserts the given <code>key</code>/<code>value</code> pair into the map, returning …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Consume this entry, returning a mutable reference to the …","Returns true if there are no elements in the map","Returns the number of <code>key</code>/<code>value</code> pairs in the map","Constructs a new, empty map","","Returns an iterator which iterates over the <code>key</code>/<code>value</code> …","Removes the element with the given <code>key</code>, returning it, if …","Remove the value at the position described by this entry.","","","","","","","","","","","","","","","","","Returns an iterator which iterates over the <code>key</code>/<code>value</code> …","Returns an iterator which iterates over the <code>key</code>s and …","Returns an iterator which iterates over the keys in the …","Construct the invoice’s HRP and signatureless data into …","Designates lower priority information","Designates very serious errors","Designates extremely verbose information, including …","Designates useful information","An enum representing the available verbosity levels of the …","A trait encapsulating the operations required of a logger","A Record, unit of logging output with Metadata to enable …","Designates very low priority, often extremely verbose, …","Designates hazardous situations","The message body.","","","","","","","","","","","","The source file containing the message.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The verbosity level of the message.","The line containing the message.","Logs the <code>Record</code>","","Returns the most verbose logging level.","The module path of the message.","Returns a new Record.","","","","","","","","","","","Recovers the PublicKey of the signer of the message given …","Creates a digital signature of a message given a …","Verifies a message was signed by a PrivateKey that derives …","Trait for a key-value store for persisting some writeable …","Trait that handles persisting a <code>ChannelManager</code>, …","Persist the given writeable using the provided key","Persist the given <code>NetworkGraph</code> to disk, returning an error …","Persist the given [‘ChannelManager’] to disk, …","Persist the given <code>WriteableScore</code> to disk, returning an …","Lightning TLV uses a custom variable-length integer called …","Essentially <code>std::io::Take</code> but a bit simpler and with a …","Represents a hostname for serialization purposes. Only the …","Writer that only tracks the amount of data written - …","serialization buffer size","A trait that various LDK types implement allowing them to …","A <code>Read</code> implementation which tracks whether any bytes have …","A trait that various LDK types implement allowing them to …","A trait that various higher-level LDK types implement …","Wrapper to read a required (non-optional) TLV record.","Wrapper to read a required (non-optional) TLV record that …","A type for variable-length values within TLV record where …","A trait that various LDK types implement allowing them to …","A simplified version of <code>std::io::Write</code> that exists largely …","","","","","","","","","","","","","","","","","Returns whether some bytes are remaining or not.","","","","Consumes the remaining bytes.","Writes <code>self</code> out to a <code>Vec&lt;u8&gt;</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns whether we have read from this reader or not yet.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of the hostname.","Returns a new <code>FixedLengthReader</code>.","Returns a new <code>ReadTrackingReader</code>.","Reads a <code>Self</code> in from the given <code>Read</code>.","Reads a <code>Self</code> in from the given <code>Read</code>.","Reads a <code>Self</code> in from the given <code>Read</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the length of this object after it has been …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes <code>self</code> out to the given <code>Writer</code>.","","","","","","Writes the given buf out. See std::io::Write::write_all …","","A string that displays only printable characters, …","Struct to <code>Display</code> fields in a safe way using …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A simple future which can complete once, and calls some …","A callback which is called when a <code>Future</code> completes.","A struct which can be used to select across many <code>Future</code>s …","","","","","The method which is called.","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new sleeper from one future, allowing …","Constructs a new sleeper from two futures, allowing …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a new sleeper on many futures, allowing …","","Registers a callback to be called upon completion of this …","","","","","","","","Wait until one of the <code>Future</code>s registered with this <code>Sleeper</code> …","Waits until this <code>Future</code> completes.","Wait until one of the <code>Future</code>s registered with this <code>Sleeper</code> …","Waits until this <code>Future</code> completes or the given amount of …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,2,2,2,1,2,1,2,1,2,1,2,1,2,0,0,27,0,0,27,0,27,0,0,343,344,344,25,28,25,27,28,25,27,28,0,0,0,25,27,28,25,27,28,25,27,28,25,27,28,344,27,25,27,28,25,343,28,25,25,27,28,0,25,28,345,345,346,28,25,27,28,0,343,343,25,27,28,25,27,28,25,27,28,346,346,39,0,0,0,0,39,0,39,39,39,347,39,39,39,39,39,39,348,39,39,39,39,39,39,0,0,0,0,40,40,45,40,43,45,40,43,40,43,43,45,43,43,40,45,40,43,40,40,40,40,43,45,40,43,40,40,40,349,40,40,40,40,43,40,40,45,40,43,45,40,43,45,40,43,40,349,40,0,0,0,0,0,47,47,35,35,47,47,35,0,47,47,0,0,35,37,37,37,37,36,35,52,47,37,36,35,52,47,36,35,52,47,36,35,52,47,37,37,36,35,52,47,36,35,52,47,47,37,36,35,52,47,37,37,37,37,37,37,37,37,37,37,36,35,52,47,37,36,36,35,52,52,37,52,36,35,52,47,37,37,37,36,35,52,47,37,36,35,52,47,37,36,35,52,47,36,37,37,36,35,52,350,351,352,353,354,355,353,351,354,352,356,356,0,62,0,0,0,0,0,0,60,61,67,0,0,67,0,357,0,0,62,62,0,0,67,58,65,66,59,60,61,62,67,58,65,66,59,60,61,62,358,58,60,61,60,61,58,59,60,61,62,58,59,60,61,62,58,58,58,58,65,66,357,65,66,359,65,66,59,60,61,62,59,60,61,62,59,60,61,62,67,58,65,66,59,60,61,62,58,58,357,65,66,58,357,65,66,359,65,66,359,65,66,65,66,358,58,66,12,58,65,66,357,65,66,59,58,58,67,58,65,66,59,60,61,62,58,58,65,66,58,60,61,60,61,58,60,358,58,358,58,58,60,60,61,61,62,62,357,65,66,358,58,58,60,60,61,360,58,360,58,360,58,360,58,58,58,359,65,66,360,58,360,58,359,65,66,360,58,360,58,65,66,58,59,60,61,62,60,67,58,65,66,59,60,61,62,67,58,65,66,59,60,61,62,67,58,65,66,59,60,61,62,360,58,358,58,58,60,61,62,361,361,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,93,93,93,54,54,54,0,90,90,90,54,90,0,0,0,91,54,90,0,54,54,93,90,89,91,88,0,0,91,89,0,54,90,0,54,54,92,54,0,54,54,54,0,54,54,54,54,90,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,54,88,92,91,93,92,88,89,90,91,92,54,93,88,89,90,91,92,54,93,88,89,90,91,92,54,93,88,89,90,91,92,54,93,88,89,90,91,92,54,88,89,90,91,92,54,88,89,90,90,91,92,54,93,88,89,90,91,92,54,93,362,363,88,89,90,91,92,54,93,364,365,88,88,89,90,91,92,92,54,88,89,90,91,92,54,93,90,88,89,90,91,92,54,93,88,89,90,91,92,54,93,88,89,90,91,92,54,93,88,89,90,91,92,54,366,367,368,369,370,371,372,373,371,374,375,368,376,375,370,371,374,377,378,379,376,380,370,374,370,377,377,376,368,376,375,381,382,379,383,384,379,368,369,380,385,382,379,383,384,377,380,385,382,379,383,384,380,376,378,368,369,374,385,372,368,369,377,379,384,375,374,386,373,375,370,371,372,368,368,387,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,392,393,394,395,396,397,411,398,399,400,401,402,406,391,407,408,409,410,402,403,411,412,413,414,414,119,119,119,119,0,0,119,0,0,0,0,0,119,119,119,119,122,0,119,119,0,122,323,0,0,119,119,119,119,119,119,0,119,119,119,0,0,119,0,0,0,119,119,119,119,119,119,323,119,119,119,0,0,119,0,119,0,0,0,0,0,119,122,0,0,0,0,0,0,119,0,119,119,119,119,119,0,119,0,97,98,99,97,99,98,100,102,103,104,105,106,98,100,102,103,104,105,106,109,111,127,138,20,114,100,102,103,104,105,106,140,97,129,117,119,98,120,121,99,122,116,125,113,141,142,109,111,127,138,20,114,100,102,103,104,105,106,140,97,129,117,119,98,120,121,99,122,116,125,113,141,142,109,111,16,112,16,109,111,114,98,20,16,114,117,119,120,121,99,122,117,117,119,120,121,99,122,119,124,109,102,117,120,116,125,0,117,120,121,97,99,97,127,20,129,20,111,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,111,138,103,104,105,106,117,98,120,121,0,98,117,119,122,117,119,122,129,124,109,102,117,120,116,125,114,114,112,111,138,103,103,104,105,105,106,117,117,117,117,117,98,120,120,121,121,109,111,127,127,138,20,20,114,100,102,103,104,105,106,140,97,129,129,117,119,119,98,120,121,99,122,116,125,113,141,142,109,111,127,138,20,20,20,20,114,114,114,100,102,103,104,105,106,140,97,129,117,119,98,120,121,99,122,116,125,113,141,142,20,109,111,138,20,117,116,125,109,111,138,20,117,116,125,124,119,114,98,98,109,111,127,138,20,114,100,102,103,104,105,106,140,97,129,117,119,98,120,121,99,122,116,125,113,141,142,129,109,111,127,138,20,129,117,116,125,113,141,142,111,129,117,109,100,102,140,16,117,415,100,102,103,104,105,106,111,138,103,103,104,105,105,106,112,117,117,117,117,117,120,120,121,121,20,20,114,125,100,124,100,103,105,109,111,138,20,97,117,99,113,141,142,20,119,117,0,20,16,109,100,102,140,117,120,116,125,109,100,102,140,117,120,116,125,109,100,102,140,16,117,120,125,16,109,100,102,16,117,109,100,102,140,117,120,116,125,109,100,102,140,117,120,116,125,109,100,102,140,117,120,116,125,109,100,102,140,117,120,116,125,100,102,124,109,100,102,140,117,120,116,125,109,100,102,16,0,109,100,102,16,109,100,102,140,117,120,116,125,109,100,102,140,117,120,116,125,109,100,102,140,117,120,116,125,109,100,102,140,117,120,116,125,102,124,109,100,102,140,16,117,116,98,117,0,146,146,109,111,117,120,109,114,98,125,117,0,113,20,124,0,0,0,146,117,120,109,146,117,120,16,117,119,120,121,99,122,127,20,129,119,109,111,127,138,20,114,100,102,103,104,105,106,140,97,129,117,119,98,120,121,99,122,116,125,113,141,142,109,111,127,138,20,114,100,102,103,104,105,106,140,97,129,117,119,98,120,121,99,122,116,125,113,141,142,109,111,127,138,20,114,100,102,103,104,105,106,140,97,129,117,119,98,120,121,99,122,116,125,113,141,142,114,98,109,111,138,112,111,138,103,103,104,105,105,106,117,117,117,117,117,98,120,120,121,121,111,111,138,138,103,103,103,104,104,105,105,105,106,106,112,117,98,120,121,138,103,103,104,105,105,106,112,138,103,103,105,105,112,111,138,103,103,104,105,105,106,112,117,117,117,117,117,120,120,121,121,98,0,0,0,0,16,112,16,16,124,124,112,124,16,112,124,16,16,16,16,124,16,16,124,16,146,146,124,146,146,16,112,112,112,112,112,0,0,0,0,148,149,79,148,149,79,148,0,0,149,79,148,149,79,148,149,79,148,149,79,148,0,149,79,148,149,79,148,148,149,79,148,0,149,79,148,0,0,149,149,79,79,148,148,0,149,79,148,149,79,148,149,79,148,149,79,148,0,149,79,148,148,160,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,160,0,160,0,0,0,80,71,71,152,154,155,160,157,158,63,80,71,159,82,156,77,78,152,154,155,160,157,158,63,80,71,159,82,156,77,78,158,158,152,0,0,0,0,0,154,155,157,158,63,80,71,159,82,156,77,78,157,158,63,80,71,159,82,156,77,78,80,78,152,82,71,82,158,152,63,154,155,82,158,0,0,0,0,160,157,158,63,80,71,159,82,77,78,160,157,158,63,80,71,159,82,77,78,78,63,80,71,159,152,154,155,160,157,158,63,80,71,159,82,156,77,78,158,160,152,71,63,0,0,0,155,157,0,157,154,156,0,77,71,71,63,0,0,78,152,154,155,160,157,158,63,80,71,159,82,156,77,78,152,71,71,155,0,157,82,77,78,80,152,155,71,71,80,63,158,157,159,157,157,158,158,63,63,80,80,71,71,159,159,82,82,156,156,78,78,63,158,159,158,63,80,71,159,82,156,78,154,156,156,78,77,77,78,77,77,157,158,63,80,71,159,82,156,77,78,156,80,77,78,152,154,155,160,157,158,63,80,71,159,82,156,77,78,152,154,155,160,157,158,63,80,71,159,82,156,77,78,155,156,152,154,155,160,157,158,63,80,71,159,82,156,77,78,77,78,78,157,158,63,80,71,159,82,156,78,178,174,172,0,0,0,0,0,0,0,173,174,0,178,167,0,0,0,174,174,174,173,0,0,178,0,0,0,167,0,0,173,0,0,167,172,162,162,162,46,168,162,162,162,198,163,166,167,168,169,170,46,178,171,172,173,174,175,162,198,163,166,167,168,169,170,46,178,171,172,173,174,175,198,162,46,198,46,162,46,171,162,163,166,167,168,169,170,46,171,172,173,174,175,163,166,167,168,169,170,46,171,172,173,174,175,162,162,169,162,46,46,46,46,162,162,162,162,162,162,198,198,163,166,168,169,170,46,178,172,175,163,166,172,175,162,162,162,170,169,198,169,46,162,163,166,169,170,46,178,172,173,174,175,162,162,162,46,162,162,170,162,198,163,166,167,168,169,170,46,178,171,172,173,174,175,162,46,162,162,46,162,162,46,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,163,166,172,46,46,46,46,162,162,198,163,166,167,168,169,170,46,178,171,172,173,174,175,46,46,46,46,162,162,162,162,198,168,162,198,46,162,170,198,46,170,170,46,175,175,162,162,171,162,162,162,0,162,162,163,163,166,166,169,169,170,170,46,46,171,171,175,175,171,198,175,162,162,162,162,162,169,170,171,175,46,198,175,162,163,166,167,168,169,170,46,171,172,173,174,175,162,162,162,198,163,166,167,168,169,170,46,178,171,172,173,174,175,162,198,163,166,167,168,169,170,46,178,171,172,173,174,175,198,162,198,163,166,167,168,169,170,46,178,171,172,173,174,175,170,46,162,46,162,163,166,169,170,46,171,175,416,416,416,417,418,419,417,0,0,0,0,0,0,0,0,0,0,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,206,206,206,206,197,199,164,205,207,165,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,197,199,164,205,207,165,205,0,208,208,0,0,208,208,208,208,208,208,227,0,0,15,0,81,0,0,0,0,81,0,0,0,0,0,0,224,0,0,0,0,0,214,214,214,224,224,224,0,15,15,0,0,0,81,0,0,214,214,0,0,0,0,227,0,0,0,0,0,0,224,224,15,0,15,15,0,0,0,0,15,0,0,0,0,0,0,225,215,215,192,75,75,180,217,217,95,81,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,81,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,210,211,189,75,218,219,220,221,222,223,189,186,209,188,181,191,184,192,196,193,194,185,190,195,182,180,189,179,189,179,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,192,218,226,216,217,183,186,209,182,189,179,189,179,219,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,226,227,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,226,227,225,218,194,200,215,75,218,218,184,184,189,195,219,220,189,179,223,218,15,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,81,15,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,222,187,189,179,189,187,420,420,421,421,420,421,421,421,420,421,421,421,421,421,420,422,421,420,420,420,420,421,421,421,421,421,421,421,189,179,192,196,193,194,218,189,179,218,185,81,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,189,179,212,189,179,212,179,213,182,181,190,182,215,75,75,180,217,217,219,220,192,189,179,196,421,420,422,421,422,190,210,420,421,420,422,421,420,422,189,200,200,186,186,209,209,210,210,211,211,189,189,179,179,187,187,188,188,181,181,191,191,212,212,184,184,192,192,95,95,196,196,193,193,194,194,185,185,190,190,195,195,182,182,180,180,214,214,215,215,216,216,75,75,217,217,218,218,183,183,219,219,220,220,221,221,222,222,223,223,227,227,227,200,189,179,215,191,212,216,217,183,180,75,218,181,220,221,189,179,187,188,184,185,216,183,220,189,179,187,215,218,223,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,189,179,15,81,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,81,15,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,213,182,180,214,215,216,75,217,218,183,219,220,221,222,223,224,225,226,227,81,15,200,200,186,186,209,209,210,210,211,211,189,189,179,179,187,187,188,188,181,181,191,191,212,184,184,192,192,95,95,196,196,193,193,194,194,185,185,190,190,195,195,213,182,182,180,180,214,215,216,216,75,217,217,218,183,183,219,219,220,220,221,221,222,222,223,223,224,225,226,227,226,226,226,226,226,81,200,186,209,210,211,189,179,187,188,181,191,212,184,192,95,196,193,194,185,190,195,182,180,214,215,216,75,217,218,183,219,220,221,222,223,227,227,213,423,424,425,423,426,427,428,428,429,426,427,428,429,428,0,0,0,0,0,0,0,0,0,232,233,235,229,231,232,233,235,229,231,229,235,231,231,232,233,231,229,229,230,231,231,232,233,235,229,231,430,232,232,233,232,232,229,233,233,232,233,233,232,233,233,233,430,232,232,233,233,233,232,232,233,232,232,232,232,233,233,233,233,233,233,233,232,233,235,229,231,233,229,229,229,229,229,232,235,232,232,233,232,233,229,232,232,232,233,232,232,233,232,232,229,235,230,229,229,231,231,232,233,235,229,231,232,233,235,229,231,232,233,235,229,231,229,0,0,74,74,236,74,236,74,236,74,236,74,74,74,236,74,236,74,74,236,74,74,74,74,74,74,74,236,74,74,236,74,74,74,74,236,74,236,74,236,74,431,0,0,431,432,0,0,0,0,0,0,0,0,0,0,0,0,240,242,240,243,246,244,242,247,240,243,246,244,242,247,240,240,242,247,242,247,247,242,242,247,247,240,240,240,242,242,247,247,247,242,247,240,243,246,244,242,247,247,247,247,240,243,246,244,242,247,242,242,242,247,247,240,242,247,244,242,242,244,242,242,247,240,243,246,244,242,242,247,240,243,246,244,242,247,240,243,246,244,242,247,242,242,247,0,0,0,0,0,0,255,257,255,258,260,259,257,255,258,260,259,257,255,255,255,257,257,257,257,257,255,258,260,259,257,255,258,260,259,257,257,257,255,257,255,257,257,257,259,257,257,255,258,260,259,257,257,255,258,260,259,257,255,258,260,259,257,257,257,257,257,0,267,268,267,0,0,0,0,0,0,268,0,268,264,266,266,264,266,266,264,271,269,266,267,268,264,271,269,266,267,268,264,264,266,266,266,267,268,266,267,268,264,266,267,268,266,266,266,266,267,268,264,271,269,266,267,268,266,264,271,269,266,267,268,266,266,264,266,264,266,264,264,266,266,266,266,266,264,266,266,266,267,268,266,264,271,269,266,266,267,268,264,271,269,266,267,268,264,271,269,266,267,268,266,266,433,434,433,245,273,273,245,245,273,273,245,245,245,273,273,245,245,245,245,245,245,245,245,245,245,245,0,0,245,245,245,245,245,245,245,245,245,273,245,273,245,273,245,273,245,273,273,273,273,273,245,273,245,273,245,273,245,273,245,0,0,275,276,276,276,276,275,276,275,276,275,275,276,276,276,276,275,276,276,276,276,275,276,276,275,276,276,275,276,276,275,275,276,276,275,276,275,276,276,276,276,276,276,276,275,276,276,275,276,275,276,276,276,281,277,277,278,435,0,0,0,277,277,277,281,0,0,277,0,0,0,277,277,280,281,277,278,280,281,277,278,277,277,277,278,280,281,277,278,435,280,280,281,277,278,280,280,280,280,280,280,435,280,279,278,280,281,277,278,280,281,277,278,280,281,277,278,278,0,0,0,0,290,0,0,290,0,0,287,287,287,0,0,0,0,290,0,0,0,0,0,287,0,287,282,283,284,284,294,285,284,285,285,287,228,228,292,282,288,283,228,290,291,285,286,287,292,284,293,294,282,288,283,228,290,291,285,286,287,292,284,293,294,285,288,286,282,288,294,228,290,291,285,286,287,292,284,293,294,228,290,291,285,286,287,292,284,293,294,291,228,286,291,282,228,290,291,285,287,292,284,293,294,282,228,290,291,285,292,284,293,294,285,284,291,282,228,228,290,291,291,285,285,286,287,292,284,293,293,294,294,282,288,283,228,228,290,291,285,286,287,292,284,293,294,228,228,288,283,285,282,283,283,283,283,282,283,283,283,283,283,228,292,286,291,291,282,288,283,228,290,291,285,286,287,292,284,293,294,291,284,291,283,282,283,288,282,285,285,288,285,228,283,283,292,283,283,282,228,228,290,291,291,285,285,292,292,284,284,293,293,294,294,282,282,282,284,292,282,228,290,291,285,286,287,292,284,293,294,282,228,291,285,293,294,282,288,283,228,290,291,285,286,287,292,284,293,294,282,288,283,228,290,291,285,286,287,292,284,293,294,285,282,288,283,228,290,291,285,286,287,292,284,293,294,282,282,282,282,282,282,282,228,290,291,285,292,284,293,294,436,437,437,438,439,440,441,440,439,301,0,301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,299,304,295,176,298,299,203,202,201,300,301,302,303,304,295,176,298,299,203,202,201,300,301,302,303,0,298,295,176,298,299,203,202,201,300,301,302,303,176,298,299,203,202,201,300,301,302,303,298,303,298,299,203,202,201,300,301,302,303,298,299,203,202,201,300,301,302,303,299,300,300,203,298,303,203,300,203,299,201,0,442,304,442,298,299,203,201,300,301,302,303,300,304,295,176,298,299,203,202,201,300,301,302,303,300,202,202,298,299,203,202,300,301,302,303,299,203,303,303,304,295,176,298,299,203,202,201,300,301,302,303,300,300,300,304,295,176,298,202,300,202,201,295,295,300,295,295,176,298,176,176,298,298,299,299,202,202,201,201,300,302,302,303,303,300,298,299,303,298,303,303,176,298,299,203,202,201,300,301,302,303,304,295,176,298,299,203,202,201,300,301,302,303,304,295,176,298,299,203,202,201,300,301,302,303,304,295,176,298,299,203,202,201,300,301,302,303,176,300,300,300,300,300,300,176,298,299,202,201,300,302,303,0,0,0,443,0,0,0,0,0,305,306,296,306,306,306,305,296,307,306,305,296,307,306,297,305,307,305,296,307,306,296,307,306,306,305,306,296,296,305,296,305,296,307,306,305,306,306,306,296,305,296,307,306,306,306,306,443,306,305,297,305,307,297,305,307,297,305,307,297,305,307,305,307,305,305,305,296,307,306,305,296,307,306,305,296,307,306,305,296,307,306,307,305,307,309,309,308,308,0,0,0,0,308,309,310,308,309,310,308,309,310,308,309,310,308,308,309,310,444,308,309,310,310,310,310,308,309,310,308,309,310,308,309,310,308,309,310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,311,311,312,204,177,311,312,204,177,177,177,177,311,312,204,177,311,312,204,177,204,311,311,312,204,177,204,204,311,312,204,177,312,204,204,204,311,312,204,177,311,312,204,177,177,312,204,312,312,311,312,312,312,312,311,311,311,311,311,204,204,204,311,312,311,312,204,177,312,311,312,204,177,311,312,204,177,311,312,204,177,204,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,445,446,447,448,446,449,0,0,315,0,0,315,0,318,317,316,315,289,318,317,316,315,289,289,289,289,289,289,289,289,318,317,316,315,289,316,289,316,289,317,289,318,317,316,315,289,318,316,289,289,289,318,289,289,316,289,318,317,316,315,289,318,317,316,315,289,318,317,316,315,289,289,289,289,0,321,321,321,321,0,0,0,321,321,322,321,322,321,322,321,322,321,322,321,321,321,322,321,321,322,321,322,321,321,321,321,322,321,322,322,450,321,321,322,322,321,321,322,321,321,322,321,322,321,322,0,0,0,0,0,451,452,452,452,0,0,0,0,0,0,0,0,0,0,0,0,0,0,336,325,330,327,333,335,329,326,336,325,330,327,333,335,329,326,325,326,326,326,325,324,326,326,326,336,325,330,327,327,327,333,335,329,329,329,326,330,336,325,330,327,333,335,329,326,326,325,330,332,331,334,325,330,327,327,327,333,335,335,329,329,329,329,326,326,325,330,325,330,325,330,325,330,325,330,325,330,325,330,325,330,325,330,325,330,324,326,336,325,330,327,333,335,329,326,326,326,336,325,330,327,333,335,329,326,336,325,330,327,333,335,329,326,324,335,329,329,329,326,21,336,0,0,337,249,337,249,337,337,337,249,337,337,337,249,249,337,249,337,249,337,337,337,337,249,337,249,337,249,337,249,337,0,0,0,338,48,338,48,342,48,48,338,48,338,338,338,48,48,338,48,48,48,338,48,338,48,338,48,338,48,338,48],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],4],[[2,2],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[[1,-1],3,7],[[2,-1],3,7],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]],-1,[10,[-2]]],[[11,[1,3]]],12,[13,14]],[-1,[[11,[1,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[2,15]]],16],[2,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[[1,-1],[[11,[3,20]]],21],[[2,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,[[-1,22,23],3,[]],[[-1,24,23],3,[]],[[-1,22,23],3,[]],[25,26],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[25,25],[27,27],[28,28],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[25,25],4],[[27,27],4],[[28,28],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,22,29,23],3,[]],[[27,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[30,25],[-1,[[32,[[3,[31,[17,[26]]]]]]],[]],[[28,-1],3,7],[25,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[26,23],25],0,[[-1,28],3,[]],[[-1,31,33],3,[]],[-1,[[32,[[3,[34,[32,[35]],[17,[8]]]]]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,31],3,[]],[[-1,22,29,23],3,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[-1,34,36],27,[]],[[-1,34,[37,[-2]]],27,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,38],3,[]],[39,39],[[-1,-2],3,[],[]],[[39,39],4],[[-1,-2],4,[],[]],[[39,5],6],[-1,-1,[]],[[-1,39],23,[]],[[39,-1],3,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],0,0,0,0,[[[40,[-1,-2,-3,-4,-5,-6]],22,23],3,41,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]],22,23],3,41,42,42,42,42,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2,-3,-4,-5,-6]],34,43],[[11,[3,44]]],41,42,42,42,42,42],[43,43],[[-1,-2],3,[],[]],[[[45,[-1]]],[[37,[-1]]],41],[[43,43],4],[[-1,-2],4,[],[]],[[[40,[-1,-2,-3,-4,-5,-6]],22,29,23],3,41,42,42,42,42,42],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[40,[-1,-2,-3,-4,-5,-6]],[9,[46]]],[[32,[47]]],41,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]],34],[[11,[[45,[-1]],3]]],41,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]]],[[32,[[3,[31,[17,[26]]]]]]],41,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]]],48,41,42,42,42,42,42],[[43,-1],3,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2,-3,-4,-5,-6]]],[[32,[34]]],41,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]]],[[49,[34,[32,[43]]]]],41,42,42,42,42,42],[[[17,[-1]],-2,-3,-4,-5],[[40,[-6,-1,-2,-4,-3,-5]]],42,42,42,42,42,41],[[-1,34,[37,[-2]],43],27,[],[]],[[[40,[-1,-2,-3,-4,-5,-6]],-7],3,41,42,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]],-7],3,41,42,42,42,42,42,50],[[[40,[-1,-2,-3,-4,-5,-6]]],3,41,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]]],[[32,[[3,[34,[32,[35]],[17,[8]]]]]]],41,42,42,42,42,42],[-1,-2,[],[]],[[[40,[-1,-2,-3,-4,-5,-6]],31],3,41,42,42,42,42,42],[[[40,[-1,-2,-3,-4,-5,-6]],22,29,23],3,41,42,42,42,42,42],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[[40,[-1,-2,-3,-4,-5,-6]],34,36],27,41,42,42,42,42,42],[[-1,34,[17,[36]],[37,[-2]],43],27,[],[]],[[[40,[-1,-2,-3,-4,-5,-6]],34,[37,[-1]]],27,41,42,42,42,42,42],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[37,[-1]],22,23,-2,-3,-4],[[32,[51]]],41,42,42,42],[[[37,[-1]],22,29,23,-2,-3,-4],[[32,[51]]],41,42,42,42],[[[37,[-1]],22,23,-2,-3,-4],3,41,42,42,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[35,35],[52,52],[47,47],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[37,[-1]]],25,41],[[[37,[-1]],[37,[-1]]],4,[53,41]],[[36,36],4],[[35,35],4],[[52,52],4],[[47,47],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[47,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[37,[-1]]],[[32,[54]]],41],[[[37,[-1]]],[[32,[35]]],41],[[[37,[-1]]],[[32,[47]]],41],[[[37,[-1]]],[[17,[8]]],41],[[[37,[-1]]],[[3,[34,33]]],41],[[[37,[-1]],-2],[[32,[38]]],41,42],[[[37,[-1]]],55,41],[[[37,[-1]]],[[32,[[3,[31,[32,[[3,[23,33]]]]]]]]],41],[[[37,[-1]]],[[32,[[3,[31,[17,[26]]]]]]],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]],-2],3,41,42],[-1,[[11,[36,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[35]],15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[52,15]]],16],[[[37,[-1]],-2,-3,-4],3,41,42,42,42],[52,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]],31,-2,-3,-4],3,41,42,42,42],[[[37,[-1]],22,29,23,-2,-3,-4],[[32,[51]]],41,42,42,42],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,[[[37,[-1]],36,-2,-3,-4],[[11,[3,3]]],41,42,42,42],[[[37,[-1]],-2],[[11,[3,20]]],41,21],[[36,-1],[[11,[3,20]]],21],[[35,-1],[[11,[3,20]]],21],[[52,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[57,[56]]],[]],[58,[[57,[56]]]],0,0,0,0,[58,58],[59,59],[60,60],[61,61],[62,62],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[58,63],[58,64],0,[[65,55,[57,[56]]],58],[[66,55,[57,[56]]],58],[[-1,55,[57,[56]]],[],[]],[[65,55,[57,[56]]]],[[66,55,[57,[56]]]],[[-1,67,8,[17,[68]]],[[11,[69,3]]],[]],[[65,67,8,[17,[68]]],[[11,[69,3]]]],[[66,67,8,[17,[68]]],[[11,[69,3]]]],[[59,59],4],[[60,60],4],[[61,61],4],[[62,62],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[59,5],6],[[60,5],6],[[61,5],6],[[62,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[58,34],[[-1,4,55,70],[[57,[56]]],[]],[[65,4,55,70],[[57,[56]]]],[[66,4,55,70],[[57,[56]]]],[58,71],[-1,33,[]],[65,33],[66,33],[-1,59,[]],[65,59],[66,59],[[-1,67],[[11,[8,3]]],[]],[[65,67],[[11,[8,3]]]],[[66,67],[[11,[8,3]]]],[65,72],[66,72],[[-1,55,[10,[73]]],8,[]],[[58,55,[10,[73]]],8],[66,72],[-1,[[57,[56]]],[]],[58,[[57,[56]]]],[65,[[57,[56]]]],[66,[[57,[56]]]],[-1,74,[]],[65,74],[66,74],[[59,-1],3,7],[58,64],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,4],[[[10,[-1]],72,72,72,72,72,[57,[56]],55,[57,[56]],[57,[56]]],58,13],[[[57,[56]],55,23],65],[[[57,[56]],55,23,[57,[56]]],66],[58,4],0,0,0,0,0,0,[[-1,71],3,[]],[[58,71],3],[-1,63,[]],[58,63],[[-1,-2],[[11,[58,15]]],16,42],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[60,15]]],16],[-1,[[11,[61,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[62,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[[-1,[9,[56]]],[[11,[15]]],[]],[[65,[9,[56]]],[[11,[15]]]],[[66,[9,[56]]],[[11,[15]]]],[[-1,55],[[57,[56]]],[]],[[58,55],[[57,[56]]]],0,0,[60,18],[61,18],[[-1,75,[10,[73]]],[[11,[76,3]]],[]],[[58,75,[10,[73]]],[[11,[76,3]]]],[[-1,77,[10,[73]]],[[11,[76,3]]],[]],[[58,77,[10,[73]]],[[11,[76,3]]]],[[-1,78,[32,[79]],[10,[73]]],[[11,[[3,[76,[32,[76]]]],3]]],[]],[[58,78,[32,[79]],[10,[73]]],[[11,[[3,[76,[32,[76]]]],3]]]],[[-1,38,18,55,8,80,[10,[73]]],[[11,[76,3]]],[]],[[58,38,18,55,8,80,[10,[73]]],[[11,[76,3]]]],[[58,38,18,61,[10,[-1]]],[[11,[[32,[[32,[56]]]],3]]],13],[[58,38,18,60,[10,[-1]]],[[11,[[32,[[32,[56]]]],3]]],13],[[-1,81],[[11,[76,3]]],[]],[[65,81],[[11,[76,3]]]],[[66,81],[[11,[76,3]]]],[[-1,38,18,[10,[73]]],[[11,[76,3]]],[]],[[58,38,18,[10,[73]]],[[11,[76,3]]]],[[-1,82,[10,[73]]],[[11,[[3,[76,[32,[76]]]],3]]],[]],[[58,82,[10,[73]]],[[11,[[3,[76,[32,[76]]]],3]]]],[[-1,[9,[56]],[9,[83]],67],[[11,[84,3]]],[]],[[65,[9,[56]],[9,[83]],67],[[11,[84,3]]]],[[66,[9,[56]],[9,[83]],67],[[11,[84,3]]]],[[-1,38,18,55,72,80,[10,[73]]],[[11,[76,3]]],[]],[[58,38,18,55,72,80,[10,[73]]],[[11,[76,3]]]],[[-1,38,18,55,72,[10,[73]]],[[11,[76,3]]],[]],[[58,38,18,55,72,[10,[73]]],[[11,[76,3]]]],[[65,[9,[62]],[32,[85]],33,23,[10,[-1]]],[[11,[38,3]]],13],[[66,[9,[62]],[32,[85]],33,23,[10,[-1]]],[[11,[38,3]]],13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[-1,55,72],[[11,[3,3]]],[]],[[58,55,72],[[11,[3,3]]]],[[-1,82,[32,[79]]],[[11,[3,3]]],[]],[[58,82,[32,[79]]],[[11,[3,3]]]],[[58,-1],[[11,[3,20]]],21],[[60,-1],[[11,[3,20]]],21],[[61,-1],[[11,[3,20]]],21],[[62,-1],[[11,[3,20]]],21],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[[-1,-2],3,[],[]],[[34,34],86],[[34,34],4],[[-1,-2],4,[],[]],[[34,5],6],[-1,-1,[]],[[34,-1],3,7],0,[-1,-2,[],[]],[34,87],[[34,34],[[17,[86]]]],[-1,[[11,[34,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[34,18],[34,[[57,[56]]]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,19,[]],[[34,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[89,89],[90,90],[91,91],[92,92],[54,54],[93,93],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[88,88],4],[[89,89],4],[[90,90],4],[[91,91],4],[[92,92],4],[[54,54],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[88,5],6],[[89,5],6],[[90,5],6],[[90,5],[[11,[3,94]]]],[[91,5],6],[[92,5],6],[[54,5],6],[[93,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[32,[93]]],[]],[[-1,54],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,8],[[17,[95]]],[]],[[-1,-2],3,[],42],[-1,[[11,[88,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[89]],15]]],16],[-1,[[11,[[17,[90]],15]]],16],[-1,[[11,[[17,[91]],15]]],16],[-1,[[11,[92,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[54]],15]]],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[88,-1],[[11,[3,20]]],21],[[89,-1],[[11,[3,20]]],21],[[90,-1],[[11,[3,20]]],21],[[91,-1],[[11,[3,20]]],21],[[92,-1],[[11,[3,20]]],21],[[54,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[97,18],3],[[98,18],98],[[99,18],3],[[[9,[97]],18],3],[[[9,[99]],18],3],[[98,[9,[56]]],3],[100,101],[102,101],[103,101],[104,101],[105,101],[106,101],[98,[[9,[[107,[56]]]]]],[100,108],[102,108],[103,108],[104,108],[105,108],[106,108],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[109,[-1]]],[[9,[56]]],110],[[[111,[-1]]],[[9,[56]]],[112,110]],[-1,-1,110],[-1,-1,110],[-1,[[113,[-1]]],110],[[[109,[-1]]],18,110],[[[111,[-1]]],18,[112,110]],[114,18],[98,18],[20,[[17,[115]]]],[[-1,-2],[[116,[-1,-2]]],110,16],[114,114],[[[117,[-1]]],[[117,[-1]]],118],[119,119],[120,120],[121,121],[99,99],[122,122],[[[117,[-1]],[117,[-1]]],3,118],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[119,119],86],[[-1,18],3,[]],[[[109,[-1]],18],3,[16,110]],[[102,18],3],[[[117,[-1]],18],3,[[123,[[9,[56]]]]]],[[120,18],3],[[[116,[-1,-2]],18],3,124,124],[[[125,[-1]],18],3,124],[[-1,-2],[[11,[55,20]]],[16,110],[112,110]],[[],[[117,[-1]]],126],[[],120],[[],121],[97,[[9,[56]]]],[99,[[9,[56]]]],[97,[[9,[56]]]],[127,128],[20,128],[[[129,[-1]]],128,[130,131]],[20,[[11,[[133,[-1,132]],20]]],[115,130,134]],[[[111,[-1]]],3,[112,110]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,4],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,135],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,108],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,136],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,137],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,64],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,23],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,55],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[-1,56],[[11,[3,20]]],[]],[[],120],[98,98],[[[117,[-1]],[117,[-1]]],4,[]],[[119,119],4],[[122,122],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[129,[-1]]],20,[]],[-1,[[11,[[9,[56]],20]]],[]],[[[109,[-1]]],[[11,[[9,[56]],20]]],[16,110]],[102,[[11,[[9,[56]],20]]]],[[[117,[-1]]],[[11,[[9,[56]],20]]],[[123,[[9,[56]]]]]],[120,[[11,[[9,[56]],20]]]],[[[116,[-1,-2]]],[[11,[[9,[56]],20]]],124,124],[[[125,[-1]]],[[11,[[9,[56]],20]]],124],[114,[[9,[56]]]],[114,[[9,[56]]]],[-1,[[11,[3,20]]],[]],[[[111,[-1]]],[[11,[3,20]]],[112,110]],[[[138,[-1]]],[[11,[3,20]]],[112,110]],[103,[[11,[3,20]]]],[103,[[11,[3,20]]]],[104,[[11,[3,20]]]],[105,[[11,[3,20]]]],[105,[[11,[3,20]]]],[106,[[11,[3,20]]]],[[[117,[[32,[56,-1]]]]],[[11,[3,20]]],139],[[[117,[[32,[56,-1]]]]],[[11,[3,20]]],139],[[[117,[[9,[56]]]]],[[11,[3,20]]]],[[[117,[[133,[[9,[56]],-1]]]]],[[11,[3,20]]],139],[[[117,[[57,[56]]]]],[[11,[3,20]]]],[98,[[11,[3,20]]]],[120,[[11,[3,20]]]],[120,[[11,[3,20]]]],[121,[[11,[3,20]]]],[121,[[11,[3,20]]]],[[[109,[-1]],5],[[11,[3,94]]],[131,110]],[[[111,[-1]],5],[[11,[3,94]]],[112,131,110]],[[127,5],[[11,[3,94]]]],[[127,5],[[11,[3,94]]]],[[[138,[-1]],5],[[11,[3,94]]],[112,131,110]],[[20,5],[[11,[3,94]]]],[[20,5],[[11,[3,94]]]],[[114,5],[[11,[3,94]]]],[[100,5],[[11,[3,94]]]],[[102,5],[[11,[3,94]]]],[[103,5],[[11,[3,94]]]],[[104,5],[[11,[3,94]]]],[[105,5],[[11,[3,94]]]],[[106,5],[[11,[3,94]]]],[[140,5],[[11,[3,94]]]],[[97,5],[[11,[3,94]]]],[[[129,[-1]],5],[[11,[3,94]]],131],[[[129,[-1]],5],[[11,[3,94]]],[]],[[[117,[-1]],5],[[11,[3,94]]],131],[[119,5],[[11,[3,94]]]],[[119,5],[[11,[3,94]]]],[[98,5],[[11,[3,94]]]],[[120,5],[[11,[3,94]]]],[[121,5],[[11,[3,94]]]],[[99,5],[[11,[3,94]]]],[[122,5],[[11,[3,94]]]],[[[116,[-1,-2]],5],[[11,[3,94]]],131,131],[[[125,[-1]],5],[[11,[3,94]]],131],[[[113,[-1]],5],[[11,[3,94]]],131],[[[141,[-1]],5],[[11,[3,94]]],131],[[[142,[-1]],5],[[11,[3,94]]],131],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[143,20],[-1,-1,[]],[[[129,[-1]]],20,[]],[119,20],[-1,-1,[]],[[[9,[56]]],114],[[[9,[[107,[56]]]]],114],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[108,20],[[[109,[-1]]],-1,110],[[[111,[-1]]],-1,[112,110]],[[[138,[-1]]],-1,112],[20,[[17,[115]]]],[[[117,[-1]]],-1,[]],[[[116,[-1,-2]]],[[3,[-1,-2]]],[],[]],[[[125,[-1]]],-1,[]],[[[109,[-1]]],-1,110],[[[111,[-1]]],-1,[112,110]],[[[138,[-1]]],-1,[112,110]],[20,[[17,[115]]]],[[[117,[-1]]],-1,[]],[[[116,[-1,-2]]],[[3,[-1,-2]]],[],[]],[[[125,[-1]]],-1,[]],[-1,[[11,[4,20]]],[]],[[119,-1],3,7],[114,18],[98,[[9,[56]]]],[98,[[9,[56]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1]]],20,[]],[[[109,[-1]]],-1,110],[[[111,[-1]]],[[11,[-1,[129,[[111,[-1]]]]]]],112],[127,[[32,[56,132]]]],[[[138,[-1]]],[[11,[-1,[129,[[138,[-1]]]]]]],112],[20,[[17,[[133,[115,132]]]]]],[[[129,[-1]]],-1,[]],[[[117,[-1]]],-1,[]],[[[116,[-1,-2]]],[[3,[-1,-2]]],[],[]],[[[125,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[111,[-1]]],[[3,[-1,[11,[[32,[56,132]],127]]]]],112],[[[129,[-1]]],[[3,[20,-1]]],[]],[[[117,[-1]]],4,[[123,[[9,[56]]]]]],[[[109,[-1]]],4,[16,110]],[100,4],[102,4],[140,4],[-1,4,[]],[[[117,[-1]]],4,[[123,[[9,[56]]]]]],[-1,4,[]],[100,4],[102,4],[103,4],[104,4],[105,4],[106,4],[[[111,[-1]]],4,[112,110]],[[[138,[-1]]],4,[112,110]],[103,4],[103,4],[104,4],[105,4],[105,4],[106,4],[-1,4,[]],[[[117,[[32,[56,-1]]]]],4,139],[[[117,[[57,[56]]]]],4],[[[117,[[32,[56,-1]]]]],4,139],[[[117,[[133,[[9,[56]],-1]]]]],4,139],[[[117,[[9,[56]]]]],4],[120,4],[120,4],[121,4],[121,4],[20,119],[[],20],[114,18],[[[125,[-1]]],55,[]],[100,[[142,[102]]]],[-1,[[142,[-1]]],110],[100,102],[103,104],[105,106],[-1,[[109,[-1]]],16],[-1,[[111,[-1]]],112],[-1,[[138,[-1]]],112],[[119,-1],20,[[144,[[133,[115,132]]]]]],[[[9,[56]]],97],[-1,[[117,[-1]]],[]],[[[9,[56]]],99],[[[113,[-1]]],[[17,[[11,[56,20]]]]],16],[[[141,[-1]]],[[17,[[11,[[32,[56,132]],20]]]]],124],[[[142,[-1]]],[[17,[[11,[96,20]]]]],124],[-1,20,[[144,[[133,[115,132]]]]]],[[119,119],[[17,[86]]]],[[[117,[-1]]],55,[]],0,[20,[[17,[108]]]],[[-1,[9,[56]]],[[11,[18,20]]],[]],[[[109,[-1]],[9,[56]]],[[11,[18,20]]],[16,110]],[[100,[9,[56]]],[[11,[18,20]]]],[[102,[9,[56]]],[[11,[18,20]]]],[[140,[9,[56]]],[[11,[18,20]]]],[[[117,[-1]],[9,[56]]],[[11,[18,20]]],[[123,[[9,[56]]]]]],[[120,[9,[56]]],[[11,[18,20]]]],[[[116,[-1,-2]],[9,[56]]],[[11,[18,20]]],16,16],[[[125,[-1]],[9,[56]]],[[11,[18,20]]],16],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[[[109,[-1]],98],[[11,[3,20]]],[16,110]],[[100,98],[[11,[3,20]]]],[[102,98],[[11,[3,20]]]],[[140,98],[[11,[3,20]]]],[[-1,98],[[11,[3,20]]],[]],[[[117,[-1]],98],[[11,[3,20]]],[[123,[[9,[56]]]]]],[[120,98],[[11,[3,20]]]],[[[125,[-1]],98],[[11,[3,20]]],16],[[-1,98],[[11,[3,20]]],[]],[[[109,[-1]],[9,[56]]],[[11,[3,20]]],[16,110]],[[100,[9,[56]]],[[11,[3,20]]]],[[102,[9,[56]]],[[11,[3,20]]]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[[117,[-1]],[9,[56]]],[[11,[3,20]]],[[123,[[9,[56]]]]]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[[100,96],[[11,[18,20]]]],[[102,96],[[11,[18,20]]]],[[-1,96],[[11,[18,20]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[[109,[-1]],[32,[56,132]]],[[11,[18,20]]],[16,110]],[[100,[32,[56,132]]],[[11,[18,20]]]],[[102,[32,[56,132]]],[[11,[18,20]]]],[[-1,[32,[56,132]]],[[11,[18,20]]],[]],[-1,[[11,[96,20]]],16],[[[109,[-1]],96],[[11,[18,20]]],[16,110]],[[100,96],[[11,[18,20]]]],[[102,96],[[11,[18,20]]]],[[-1,96],[[11,[18,20]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[[102,56,[32,[56,132]]],[[11,[18,20]]]],[[-1,56,[32,[56,132]]],[[11,[18,20]]],[]],[[[109,[-1]],[9,[97]]],[[11,[18,20]]],[16,110]],[[100,[9,[97]]],[[11,[18,20]]]],[[102,[9,[97]]],[[11,[18,20]]]],[[140,[9,[97]]],[[11,[18,20]]]],[[-1,[9,[97]]],[[11,[18,20]]],[]],[[[117,[-1]],[9,[97]]],[[11,[18,20]]],[[123,[[9,[56]]]]]],[[[116,[-1,-2]],[9,[97]]],[[11,[18,20]]],16,16],[98,98],[[[117,[-1]]],[[9,[56]]],[[123,[[9,[56]]]]]],[56,140],[-1,[[11,[3,20]]],[]],[[-1,122],[[11,[55,20]]],[]],[[[109,[-1]],122],[[11,[55,20]]],[146,110]],[[[111,[-1]],122],[[11,[55,20]]],[112,146,110]],[[[117,[-1]],122],[[11,[55,20]]],[[123,[[9,[56]]]]]],[[120,122],[[11,[55,20]]]],[[[109,[-1]],136],[[11,[3,20]]],[146,110]],[[114,18],114],[[98,18],98],[[[125,[-1]],55],3,[]],[[[117,[-1]],55],3,[]],[[],121],[[[113,[-1]]],[[3,[18,[17,[18]]]]],16],[20,[[17,[115]]]],[[-1,56],[[141,[-1]]],110],[[],105],[[],100],[[],103],[-1,[[11,[55,20]]],[]],[[[117,[-1]]],[[11,[55,20]]],[[123,[[9,[56]]]]]],[120,[[11,[55,20]]]],[[[109,[-1]]],[[11,[55,20]]],[146,110]],[-1,[[11,[55,20]]],[]],[[[117,[-1]]],[[11,[55,20]]],[[123,[[9,[56]]]]]],[120,[[11,[55,20]]]],[[-1,55],[[125,[-1]]],110],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,96,[]],[-1,96,[]],[-1,96,[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[114,98],[98,[[9,[[107,[56]]]]]],[[18,-1],[[109,[-1]]],16],[[18,-1],[[111,[-1]]],112],[[18,-1],[[138,[-1]]],112],[[-1,[9,[56]]],[[11,[18,20]]],[]],[[[111,[-1]],[9,[56]]],[[11,[18,20]]],[112,110]],[[[138,[-1]],[9,[56]]],[[11,[18,20]]],[112,110]],[[103,[9,[56]]],[[11,[18,20]]]],[[103,[9,[56]]],[[11,[18,20]]]],[[104,[9,[56]]],[[11,[18,20]]]],[[105,[9,[56]]],[[11,[18,20]]]],[[105,[9,[56]]],[[11,[18,20]]]],[[106,[9,[56]]],[[11,[18,20]]]],[[[117,[[133,[[9,[56]],-1]]]],[9,[56]]],[[11,[18,20]]],139],[[[117,[[32,[56,-1]]]],[9,[56]]],[[11,[18,20]]],139],[[[117,[[32,[56,-1]]]],[9,[56]]],[[11,[18,20]]],139],[[[117,[[57,[56]]]],[9,[56]]],[[11,[18,20]]]],[[[117,[[9,[56]]]],[9,[56]]],[[11,[18,20]]]],[[98,[9,[56]]],[[11,[18,20]]]],[[120,[9,[56]]],[[11,[18,20]]]],[[120,[9,[56]]],[[11,[18,20]]]],[[121,[9,[56]]],[[11,[18,20]]]],[[121,[9,[56]]],[[11,[18,20]]]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[[111,[-1]],[9,[56]]],[[11,[3,20]]],[112,110]],[[[138,[-1]],[9,[56]]],[[11,[3,20]]],[112,110]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[103,[9,[56]]],[[11,[3,20]]]],[[103,[9,[56]]],[[11,[3,20]]]],[[104,[9,[56]]],[[11,[3,20]]]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[105,[9,[56]]],[[11,[3,20]]]],[[105,[9,[56]]],[[11,[3,20]]]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[106,[9,[56]]],[[11,[3,20]]]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[[138,[-1]],[9,[99]]],[[11,[3,20]]],[112,110]],[[103,[9,[99]]],[[11,[3,20]]]],[[103,[9,[99]]],[[11,[3,20]]]],[[104,[9,[99]]],[[11,[3,20]]]],[[105,[9,[99]]],[[11,[3,20]]]],[[105,[9,[99]]],[[11,[3,20]]]],[[106,[9,[99]]],[[11,[3,20]]]],[[-1,[9,[99]]],[[11,[3,20]]],[]],[[[138,[-1]],147],[[11,[3,20]]],[112,110]],[[103,147],[[11,[3,20]]]],[[103,147],[[11,[3,20]]]],[[105,147],[[11,[3,20]]]],[[105,147],[[11,[3,20]]]],[[-1,147],[[11,[3,20]]],[]],[[[111,[-1]],[9,[99]]],[[11,[18,20]]],[112,110]],[[[138,[-1]],[9,[99]]],[[11,[18,20]]],[112,110]],[[103,[9,[99]]],[[11,[18,20]]]],[[103,[9,[99]]],[[11,[18,20]]]],[[104,[9,[99]]],[[11,[18,20]]]],[[105,[9,[99]]],[[11,[18,20]]]],[[105,[9,[99]]],[[11,[18,20]]]],[[106,[9,[99]]],[[11,[18,20]]]],[[-1,[9,[99]]],[[11,[18,20]]],[]],[[[117,[[32,[56,-1]]]],[9,[99]]],[[11,[18,20]]],139],[[[117,[[57,[56]]]],[9,[99]]],[[11,[18,20]]]],[[[117,[[32,[56,-1]]]],[9,[99]]],[[11,[18,20]]],139],[[[117,[[9,[56]]]],[9,[99]]],[[11,[18,20]]]],[[[117,[[133,[[9,[56]],-1]]]],[9,[99]]],[[11,[18,20]]],139],[[120,[9,[99]]],[[11,[18,20]]]],[[120,[9,[99]]],[[11,[18,20]]]],[[121,[9,[99]]],[[11,[18,20]]]],[[121,[9,[99]]],[[11,[18,20]]]],[98,18],0,0,0,0,[-1,-1,110],[-1,-1,110],[-1,[[113,[-1]]],110],[[-1,-2],[[116,[-1,-2]]],110,16],[[-1,18],3,[]],[-1,[[11,[[9,[56]],20]]],[]],[-1,[[11,[3,20]]],[]],[-1,[[11,[4,20]]],[]],[-1,4,[]],[-1,4,[]],[-1,[[142,[-1]]],110],[[-1,[9,[56]]],[[11,[18,20]]],[]],[[-1,98],[[11,[3,20]]],[]],[[-1,98],[[11,[3,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,96],[[11,[18,20]]],[]],[[-1,[32,[56,132]]],[[11,[18,20]]],[]],[[-1,96],[[11,[18,20]]],[]],[[-1,56,[32,[56,132]]],[[11,[18,20]]],[]],[[-1,[9,[97]]],[[11,[18,20]]],[]],[-1,[[11,[3,20]]],[]],[[-1,122],[[11,[55,20]]],[]],[[-1,56],[[141,[-1]]],110],[-1,[[11,[55,20]]],[]],[-1,[[11,[55,20]]],[]],[[-1,55],[[125,[-1]]],110],[[-1,[9,[56]]],[[11,[18,20]]],[]],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[-1,[9,[99]]],[[11,[3,20]]],[]],[[-1,147],[[11,[3,20]]],[]],[[-1,[9,[99]]],[[11,[18,20]]],[]],0,0,0,0,[148,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[149,149],[79,79],[148,148],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[149,149],4],[[79,79],4],[[148,148],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,[[149,5],6],[[79,5],6],[[148,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[9,[83]]],[[11,[148,150]]]],[[149,-1],3,7],[[79,-1],3,7],[[148,-1],3,7],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[11,[149,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[79,15]]],16],[-1,[[11,[148,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,[[149,-1],[[11,[3,20]]],21],[[79,-1],[[11,[3,20]]],21],[[148,-1],[[11,[3,20]]],21],[[148,-1],[[11,[3]]],151],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[71,152],[71,152],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[152,63],[[8,76],153],[[55,55,33,33,87],38],[[[57,[56]],55],[[57,[56]]]],[[76,76,[17,[79]],33,4],153],[[31,23,64,80,4,4,8,8],38],[154,38],[155,156],[157,157],[158,158],[63,63],[80,80],[71,71],[159,159],[82,82],[156,156],[77,77],[78,78],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[78,55],[152,64],0,0,0,0,[152,63],0,[154],[155],[82],[[[10,[-1]],8,8,8,8,8],158,[13,14]],[[[10,[-1]],8,72],72,13],[[[10,[-1]],72,72],72,13],[[[10,[-1]],8,8],8,13],[[[10,[-1]],8,8],8,14],[[160,160],4],[[157,157],4],[[158,158],4],[[63,63],4],[[80,80],4],[[71,71],4],[[159,159],4],[[82,82],4],[[77,77],4],[[78,78],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[78,23],[[63,5],6],[[80,5],6],[[71,5],6],[[159,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[8,63,63,[10,[-1]]],158,[13,14]],[153,[[17,[160]]]],[152,87],0,0,[8,33],[[8,8,4],55],[[80,4,158],33],[[155,72,152,-1,[10,[-2]]],[[11,[[32,[76]],3]]],42,13],[157,55],[[8,64,8],33],[[157,55],[[17,[[57,[56]]]]]],[[154,33,55],161],[[156,33,55],161],[8,33],[[77,-1],3,7],0,0,0,[4,55],[4,55],[78,[[32,[80]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[152,4],0,[71,4],[155,158],[[8,8],33],[[],157],[[78,76,[32,[76]],8,8],82],[[55,55,33,33,87],77],[[55,55,55,4,8,8,158,23,[32,[[3,[80,-1]]]],152],78,[]],0,[152,4],[155,4],0,0,0,0,0,[[157,55,[57,[56]]],[[11,[3,3]]]],0,[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[157,15]]],16],[-1,[[11,[158,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[63,15]]],16],[-1,[[11,[80,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[71,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[159,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[82,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[156,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[78,15]]],16],0,0,0,[158,18],[63,18],[80,18],[71,18],[159,18],[82,18],[156,18],[78,18],[[154,72,33,55,[10,[-1]]],76,13],[[156,72,33,55,[10,[-1]]],76,13],[[156,72,33,55,-1,[10,[-2]]],76,42,13],[78,55],[77,33],[77,55],[78,55],[77,33],[77,55],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[77,154],[78,155],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[155,31],0,[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[77,87],[[11,[154,3]]]],[[78,152,63,63,[10,[-1]]],[[11,[155,3]]],[13,14]],[78,78],[[157,-1],[[11,[3,20]]],21],[[158,-1],[[11,[3,20]]],21],[[63,-1],[[11,[3,20]]],21],[[80,-1],[[11,[3,20]]],21],[[71,-1],[[11,[3,20]]],21],[[159,-1],[[11,[3,20]]],21],[[82,-1],[[11,[3,20]]],21],[[156,-1],[[11,[3,20]]],21],[[78,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],163],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[57,[56]],8,70],[[11,[3,44]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[57,[56]],8,70],[[11,[3,44]]],42,42,42,42,42,42,42,42],0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],22,23],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],22,23],3,42,42,42,42,42,42,42,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],164,42,42,42,42,42,42,42,42],0,0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],165,42,42,42,42,42,42,42,42],0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],79],3,42,42,42,42,42,42,42,42],[163,163],[166,166],[167,167],[168,168],[169,169],[170,170],[46,46],[171,171],[172,172],[173,173],[174,174],[175,175],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[57,[56]],8],[[11,[3,44]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[57,[56]],8,23],[[11,[3,44]]],42,42,42,42,42,42,42,42],0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],176,42,42,42,42,42,42,42,42],0,0,0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,55,55,70,[17,[177]]],[[11,[[57,[56]],44]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[17,[55]],23,[17,[64]]],[[11,[[3,[149,148]],3]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],149,[17,[55]],23,[17,[64]]],[[11,[148,3]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],149,[17,[55]],23],[[11,[148,44]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[17,[55]],23],[[11,[[3,[149,148]],44]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],25,42,42,42,42,42,42,42,42],0,0,[[163,163],4],[[166,166],4],[[168,168],4],[[169,169],4],[[170,170],4],[[46,46],4],[[178,178],4],[[172,172],4],[[175,175],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],149],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],149,167],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],166],[[11,[3,44]]],42,42,42,42,42,42,42,42],0,0,0,0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],22,29,23],3,42,42,42,42,42,42,42,42],[[163,5],6],[[166,5],6],[[169,5],6],[[170,5],6],[[46,5],6],[[178,5],6],[[172,5],6],[[173,5],6],[[174,5],6],[[175,5],6],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[57,[56]],8],[[11,[3,44]]],42,42,42,42,42,42,42,42],0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[57,[56]],8],[[11,[3,44]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],166,[57,[56]],8,55],[[11,[3,44]]],42,42,42,42,42,42,42,42],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[57,[56]],8,38],[[11,[3,44]]],42,42,42,42,42,42,42,42],0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[32,[93]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],177,42,42,42,42,42,42,42,42],[46,[[17,[55]]]],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],55,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],8,42,42,42,42,42,42,42,42],[46,[[17,[55]]]],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],149,148],[[11,[79,44]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],48,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],171,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],55,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[32,[[3,[31,[17,[26]]]]]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,179],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,180],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,181],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,182],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,183],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,184],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,185],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,186],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,187],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,188],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,189],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,190],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,191],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,192],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,193],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,194],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,195],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,196],3,42,42,42,42,42,42,42,42],[[163,-1],3,7],[[166,-1],3,7],[[172,-1],3,7],0,0,0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],197,42,42,42,42,42,42,42,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[32,[46]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8],[[32,[46]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[32,[178]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[32,[46]]],42,42,42,42,42,42,42,42],0,0,[[-1,-2,-3,-4,-5,-6,-7,-8,177,168],[[162,[-2,-3,-6,-7,-8,-1,-4,-5]]],42,42,42,42,42,42,42,42],[[-1,-2,-3,-4,-5,-6,-7,-8,177,[32,[37]]],[[198,[-5,-6,-1,-2,-3,-4,-7,-8]]],42,42,42,42,42,42,42,42],0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],199,42,42,42,42,42,42,42,42],0,0,0,0,0,0,0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,200,4],[[11,[3,3]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8],3,42,42,42,42,42,42,42,42],0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],-9],3,42,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],-9],3,42,42,42,42,42,42,42,42,50],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],3,42,42,42,42,42,42,42,42],[177,197],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8],197,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],199,42,42,42,42,42,42,42,42],[-1,[[11,[163,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[166,15]]],16],[-1,[[11,[169,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[170,15]]],16],[-1,[[11,[46,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[171,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[175,15]]],16],0,0,[148,175],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],149,175,163,201,172],[[11,[3,173]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],202,149,175,163],[[11,[3,174]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],203],[[11,[[3,[149,163]],174]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],202,[17,[79]],175,163],[[11,[149,174]]],42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],[17,[79]],175,163,201,172],[[11,[149,173]]],42,42,42,42,42,42,42,42],[169,18],[170,18],[171,18],[175,18],0,0,[[],175],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]]],3,42,42,42,42,42,42,42,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],31],3,42,42,42,42,42,42,42,42],[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],22,29,23],3,42,42,42,42,42,42,42,42],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],8,[9,[[57,[56]]]],204],[[11,[3,44]]],42,42,42,42,42,42,42,42],0,[[[162,[-1,-2,-3,-4,-5,-6,-7,-8]],-9],[[11,[3,20]]],42,42,42,42,42,42,42,42,21],[[163,-1],[[11,[3,20]]],21],[[166,-1],[[11,[3,20]]],21],[[169,-1],[[11,[3,20]]],21],[[170,-1],[[11,[3,20]]],21],[[46,-1],[[11,[3,20]]],21],[[171,-1],[[11,[3,20]]],21],[[175,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[205,18],[-1,-2,[],[]],[-1,-2,[],[]],[[[206,[-1]]],[[206,[-1]]],0],[[-1,-2],3,[],[]],[[],[[206,[-1]]],0],[[[206,[-1]],[206,[-1]]],4,0],[[-1,-2],4,[],[]],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[-1]],5],[[11,[3,94]]],0],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[0]],5],[[11,[3,94]]]],[[[206,[0]],5],[[11,[3,94]]]],[-1,-1,[]],[[[9,[83]]],[[11,[205,150]]]],[[[32,[56]]],[[206,[-1]]],0],[[[206,[-1]],-2],3,0,7],[[[206,[-1]]],4,0],[-1,-2,[],[]],[-1,[[11,[197,15]]],16],[-1,[[11,[199,15]]],16],[-1,[[11,[164,15]]],16],[-1,[[11,[205,15]]],16],[-1,[[11,[207,15]]],16],[-1,[[11,[165,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],3,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[[[206,[-1]]],4,0],[-1,-2,[],[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[[197,-1],[[11,[3,20]]],21],[[199,-1],[[11,[3,20]]],21],[[164,-1],[[11,[3,20]]],21],[[205,-1],[[11,[3,20]]],21],[[207,-1],[[11,[3,20]]],21],[[165,-1],[[11,[3,20]]],21],[[205,-1],[[11,[3]]],151],0,[-1,-2,[],[]],[-1,-2,[],[]],[[208,[17,[55]],23,-1,55,[17,[64]]],[[11,[[3,[149,148]],3]]],42],[[208,[17,[55]],149,23,55,[17,[64]]],[[11,[148,3]]]],[-1,-1,[]],[-1,-2,[],[]],[59,208],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],[200,200],[186,186],[209,209],[210,210],[211,211],[189,189],[179,179],[187,187],[188,188],[181,181],[191,191],[212,212],[184,184],[192,192],[95,95],[196,196],[193,193],[194,194],[185,185],[190,190],[195,195],[213,213],[182,182],[180,180],[214,214],[215,215],[216,216],[75,75],[217,217],[218,218],[183,183],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[[[227,[-1]]],[[227,[-1]]],118],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[219,23],[[15,15],4],[[200,200],4],[[186,186],4],[[209,209],4],[[210,210],4],[[211,211],4],[[189,189],4],[[179,179],4],[[187,187],4],[[188,188],4],[[181,181],4],[[191,191],4],[[212,212],4],[[184,184],4],[[192,192],4],[[95,95],4],[[196,196],4],[[193,193],4],[[194,194],4],[[185,185],4],[[190,190],4],[[195,195],4],[[213,213],4],[[182,182],4],[[180,180],4],[[214,214],4],[[215,215],4],[[216,216],4],[[75,75],4],[[217,217],4],[[218,218],4],[[183,183],4],[[219,219],4],[[220,220],4],[[221,221],4],[[222,222],4],[[223,223],4],[[226,226],4],[[[227,[-1]],[227,[-1]]],4,53],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[15,5],6],[[15,5],6],[[200,5],6],[[186,5],6],[[209,5],6],[[210,5],6],[[211,5],6],[[189,5],6],[[179,5],6],[[187,5],6],[[188,5],6],[[181,5],6],[[191,5],6],[[212,5],6],[[184,5],6],[[192,5],6],[[95,5],6],[[196,5],6],[[193,5],6],[[194,5],6],[[185,5],6],[[190,5],6],[[195,5],6],[[213,5],6],[[182,5],6],[[180,5],6],[[214,5],6],[[215,5],6],[[216,5],6],[[75,5],6],[[217,5],6],[[218,5],6],[[183,5],6],[[219,5],6],[[220,5],6],[[221,5],6],[[222,5],6],[[223,5],6],[[224,5],6],[[225,5],6],[[226,5],6],[[[227,[-1]],5],6,131],[-1,-1,[]],[-1,-1,[]],[20,15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,[[-1,55],[[17,[[3,[217,[17,[183]],[17,[183]]]]]]],[]],[[-1,[17,[228]]],[[17,[216]]],[]],[[-1,8,179],3,[]],[[-1,8,180],3,[]],[[-1,217],[[11,[4,225]]],[]],[[-1,8,181],3,[]],[[-1,8,182],3,[]],[[-1,8,183],3,[]],[[-1,183],[[11,[4,225]]],[]],[[-1,8,184],3,[]],[[-1,8,185],3,[]],[[-1,8,186],3,[]],[[-1,8,187],3,[]],[[-1,8,188],3,[]],[[-1,216],[[11,[4,225]]],[]],[[-1,8,95],3,[]],[[-1,8,189],3,[]],[[-1,8,219],[[11,[3,225]]],[]],[[-1,8,221],[[11,[3,225]]],[]],[[-1,8,220],[[11,[3,225]]],[]],[[-1,8,222],[[11,[3,225]]],[]],[[-1,8,190],3,[]],[[-1,8,191],3,[]],[[-1,8,192],3,[]],[[-1,8,193],3,[]],[[-1,8,194],3,[]],[[-1,8,195],3,[]],[[-1,8,196],3,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,8,200,4],[[11,[3,3]]],[]],[[-1,8,200,4],[[11,[3,3]]],[]],[[-1,8,200,4],[[11,[3,3]]],[]],[[-1,8],3,[]],[[-1,8],3,[]],0,0,[-1,4,[]],[[-1,8],197,[]],[[-1,8],197,[]],[[-1,8],197,[]],[-1,199,[]],[-1,199,[]],[-1,199,[]],0,[-1,[[11,[200,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[186,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[209,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[210,15]]],16],[-1,[[11,[211,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[189,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[179,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[187,15]]],16],[-1,[[11,[188,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[181,15]]],16],[-1,[[11,[191,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[212,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[184,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[192,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[95,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[196,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[193,15]]],16],[-1,[[11,[194,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[185,15]]],16],[-1,[[11,[190,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[195,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[182,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[180,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[214,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[215,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[216,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[75,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[217,15]]],16],[-1,[[11,[218,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[183,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[219,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[220,15]]],16],[-1,[[11,[221,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[222,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[223,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[227,[55]],15]]],16],[-1,[[11,[[227,[33]],15]]],16],0,0,0,0,0,[212,18],[216,18],[217,18],[183,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,19,[]],[-1,64,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,64,[]],[-1,64,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0,0,0,0,[[81,-1],[[11,[3,20]]],21],[[200,-1],[[11,[3,20]]],21],[[186,-1],[[11,[3,20]]],21],[[209,-1],[[11,[3,20]]],21],[[210,-1],[[11,[3,20]]],21],[[211,-1],[[11,[3,20]]],21],[[189,-1],[[11,[3,20]]],21],[[179,-1],[[11,[3,20]]],21],[[187,-1],[[11,[3,20]]],21],[[188,-1],[[11,[3,20]]],21],[[181,-1],[[11,[3,20]]],21],[[191,-1],[[11,[3,20]]],21],[[212,-1],[[11,[3,20]]],21],[[184,-1],[[11,[3,20]]],21],[[192,-1],[[11,[3,20]]],21],[[95,-1],[[11,[3,20]]],21],[[196,-1],[[11,[3,20]]],21],[[193,-1],[[11,[3,20]]],21],[[194,-1],[[11,[3,20]]],21],[[185,-1],[[11,[3,20]]],21],[[190,-1],[[11,[3,20]]],21],[[195,-1],[[11,[3,20]]],21],[[182,-1],[[11,[3,20]]],21],[[180,-1],[[11,[3,20]]],21],[[214,-1],[[11,[3,20]]],21],[[215,-1],[[11,[3,20]]],21],[[216,-1],[[11,[3,20]]],21],[[75,-1],[[11,[3,20]]],21],[[217,-1],[[11,[3,20]]],21],[[218,-1],[[11,[3,20]]],21],[[183,-1],[[11,[3,20]]],21],[[219,-1],[[11,[3,20]]],21],[[220,-1],[[11,[3,20]]],21],[[221,-1],[[11,[3,20]]],21],[[222,-1],[[11,[3,20]]],21],[[223,-1],[[11,[3,20]]],21],[[[227,[55]],-1],[[11,[3,20]]],21],[[[227,[33]],-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[229,[-1,-2,-3,-4,-5,-6,-7]],[57,[56]],[57,[56]],[32,[214]]],3,230,42,42,42,42,42,42],0,[231,231],[[-1,-2],3,[],[]],[232,232],[233,233],[231,128],[[[229,[-1,-2,-3,-4,-5,-6,-7]]],3,230,42,42,42,42,42,42],[[[229,[-1,-2,-3,-4,-5,-6,-7]],8],3,230,42,42,42,42,42,42],[-1,3,[]],[[231,5],[[11,[3,94]]]],[[231,5],[[11,[3,94]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[32,[[3,[8]]]]],[]],[232,[[32,[[3,[8]]]]]],[232,[[32,[93]]]],[233,[[32,[93]]]],[[232,55],[[17,[[3,[217,[17,[183]],[17,[183]]]]]]]],[[232,[17,[228]]],[[17,[216]]]],[[[229,[-1,-2,-3,-4,-5,-6,-7]]],[[32,[[3,[8,[17,[214]]]]]]],230,42,42,42,42,42,42],[[233,8,179],3],[[233,8,180],3],[[232,217],[[11,[4,225]]]],[[233,8,181],3],[[233,8,182],3],[[232,183],[[11,[4,225]]]],[[233,8,183],3],[[233,8,184],3],[[233,8,185],3],[[-1,8],[[11,[3,225]]],[]],[[232,234],3],[[232,234,8],[[11,[3,225]]]],[[233,8,186],3],[[233,8,187],3],[[233,8,188],3],[[232,216],[[11,[4,225]]]],[[232,8,95],3],[[233,8,189],3],[[232,8,219],[[11,[3,225]]]],[[232,8,221],[[11,[3,225]]]],[[232,8,220],[[11,[3,225]]]],[[232,8,222],[[11,[3,225]]]],[[233,8,190],3],[[233,8,191],3],[[233,8,192],3],[[233,8,193],3],[[233,8,194],3],[[233,8,195],3],[[233,8,196],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],233],[[[235,[-1,-2,-3]],23,[57,[56]],-4,-5,-6],[[229,[-7,-1,-2,-3,-4,-5,-6]]],42,42,42,42,42,42,230],[[-1,-2,23,[57,[56]],-3,-4],[[229,[-5,-1,232,-2,-3,232,-4]]],42,42,42,42,230],[[[229,[-1,-2,-3,-4,-5,-6,-7]],-1,[17,[214]]],[[11,[3,231]]],230,42,42,42,42,42,42],[[[229,[-1,-2,-3,-4,-5,-6,-7]],8,-1,[17,[214]]],[[11,[[32,[56]],231]]],230,42,42,42,42,42,42],[[-1,23,[57,[56]],-2,-3],[[229,[-4,233,-1,232,-2,232,-3]]],42,42,42,230],[[232,8],[[17,[95]]]],0,[[232,8,200,4],[[11,[3,3]]]],[[232,8,200,4],[[11,[3,3]]]],[[233,8,200,4],[[11,[3,3]]]],[[232,8],3],[[233,8],3],[[[229,[-1,-2,-3,-4,-5,-6,-7]]],3,230,42,42,42,42,42,42],[232,4],[[232,8],197],[[232,8],197],[[233,8],197],[232,199],[232,199],[233,199],[[232,64,-1],[[11,[17,15]]],16],[[232,55,-1],[[11,[[17,[234]],15]]],16],[[[229,[-1,-2,-3,-4,-5,-6,-7]],-1,[9,[56]]],[[11,[4,231]]],230,42,42,42,42,42,42],0,[[-1,[9,[56]],4],18,[]],[[[229,[-1,-2,-3,-4,-5,-6,-7]],-1],3,230,42,42,42,42,42,42],[[[229,[-1,-2,-3,-4,-5,-6,-7]]],3,230,42,42,42,42,42,42],[-1,-2,[],[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[[229,[-1,-2,-3,-4,-5,-6,-7]],-1],[[11,[3,231]]],230,42,42,42,42,42,42],0,0,[74,[[17,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[74,74],[236,236],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[74,74],4],[[-1,-2],4,[],[]],[[74,5],6],[[236,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[74,33],[-1,-2,[],[]],[74,33],[[74,197],4],[237,74],[238,74],[[239,[9,[56]]],[[11,[74,236]]]],[-1,[[11,[74,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],0,[74,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,96,[]],[[[3,[33,197]]],[[11,[74]]]],[33,[[11,[74]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[[74,-1],[[11,[3,20]]],21],0,0,0,[[-1,64,-2],[[11,[17,15]]],[],16],[-1,64,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[[240,[-1]]],[[240,[-1]]],241],[242,55],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[240,[243]]],[[11,[244,245]]]],[[[240,[246]],[10,[-1]]],[[11,[242,245]]],13],[242,242],[247,247],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[242,248],[242,249],[[247,247],4],[[-1,-2],4,[],[]],[[[240,[-1]],237],[[240,[-1]]],241],[[[240,[-1]],238],[[240,[-1]]],241],[[[240,[-1]],250],[[240,[-1]]],241],[242,[[32,[251]]]],[242,252],0,0,0,[[242,5],6],[[247,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[247,-1],3,7],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[242,4],[242,149],[242,[[9,[[3,[1,247]]]]]],[-1,[[11,[247,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[[[240,[-1]],23],[[240,[-1]]],241],[242,248],[247,18],[[244,-1],[[11,[242,[0,[-2]]]]],253,[]],[242,[[57,[56]]]],[242,254],[244,8],[242,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[32,[56]]],[[11,[242]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[242,208,[10,[-1]]],4,13],[[242,-1],[[11,[3,20]]],21],[[247,-1],[[11,[3,20]]],21],0,0,0,0,0,0,[[[255,[-1,-2]],55],[[11,[[255,[-1,-2]],245]]],256,13],[257,[[17,[55]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[255,[258,-1]]],[[11,[259,245]]],13],[[[255,[260,-1]]],[[11,[257,245]]],13],[[[255,[-1,-2]],30],[[11,[[255,[-1,-2]],245]]],256,13],[257,261],[257,257],[[-1,-2],3,[],[]],[257,262],[[257,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[257,[[9,[56]]]],[257,8],[[[255,[-1,-2]],96],[[255,[-1,-2]]],256,13],[257,[[17,[249]]]],[[[255,[-1,-2]],55],[[11,[[255,[-1,-2]],245]]],256,13],[257,[[17,[55]]]],[[257,[32,[[3,[1,247]]]],149],[[11,[[240,[243]],245]]]],[[257,[32,[[3,[1,247]]]],149,248],[[11,[[240,[243]],245]]]],[[259,-1],[[11,[257,[0,[-2]]]]],253,[]],[257,254],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[32,[56]]],[[11,[257]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[257,208,[10,[-1]]],[[11,[[17,[263]],3]]],13],[[257,[32,[[3,[1,247]]]],149,208,[10,[-1]]],[[11,[[240,[246]],245]]],13],[[257,[32,[[3,[1,247]]]],149,248,208,[10,[-1]]],[[11,[[240,[246]],245]]],13],[[257,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[264,[-1,-2]],248],[[264,[-1,-2]]],265,13],[266,[[17,[248]]]],[266,[[17,[267]]]],[[[264,[-1,-2]],55],[[264,[-1,-2]]],265,13],[266,[[9,[56]]]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[264,[-1,-2]]],[[11,[266,245]]],265,13],[[[264,[-1,-2]],30],[[264,[-1,-2]]],265,13],[266,[[32,[261]]]],[-1,[[11,[[32,[83,132]]]]],[]],[266,266],[267,267],[268,268],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[96,8,208,-1,[10,[-2]]],[[264,[269,-2]]],42,13],[266,249],[[267,267],4],[[268,268],4],[266,4],[266,270],[[266,5],6],[[266,5],[[11,[3,94]]]],[[267,5],6],[[268,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[128,[[11,[266]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[266,4],[[266,55],4],[[[264,[-1,-2]],96],[[264,[-1,-2]]],265,13],[266,[[17,[249]]]],[[[264,[271,272]],[32,[56]]],[[11,[[264,[271,272]],245]]]],[266,[[17,[[32,[56]]]]]],[[96,8],[[264,[271,272]]]],[[[264,[-1,-2]],1],[[264,[-1,-2]]],265,13],[266,[[9,[1]]]],[[266,[32,[56]],8],[[11,[[255,[258,272]],245]]]],[[266,8,208,-1],[[11,[[255,[258,272]],245]]],42],[[266,208,-1,[10,[-2]]],[[11,[[255,[260,-2]],245]]],42,13],[266,8],[[[264,[-1,-2]],268],[[264,[-1,-2]]],265,13],[266,268],[[266,261],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[32,[56]]],[[11,[266]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[266,-1],[[11,[3,20]]],21],[[-1,-2],[[11,[3]]],[],151],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[273,273],4],[[245,245],4],[[273,5],6],[[245,5],6],[245,273],[-1,-1,[]],[150,273],[274,273],[15,273],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],0,0,[[[275,[-1]],248],[[275,[-1]]],13],[276,[[17,[248]]]],[276,55],[276,[[9,[56]]]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[275,[-1]]],[[11,[276,245]]],13],[[[275,[-1]],30],[[275,[-1]]],13],[276,261],[-1,[[11,[[32,[83,132]]]]],[]],[276,276],[[-1,-2],3,[],[]],[[96,8,208,-1,[10,[-2]],55],[[11,[[275,[-2]],245]]],42,13],[276,249],[276,262],[[276,5],[[11,[3,94]]]],[[276,5],6],[-1,-1,[]],[-1,-1,[]],[128,[[11,[276]]]],[-1,-2,[],[]],[-1,-2,[],[]],[276,4],[[[275,[-1]],96],[[275,[-1]]],13],[276,[[17,[249]]]],[276,[[9,[56]]]],[[96,[32,[56]],8,55],[[11,[[275,[272]],245]]]],[[[275,[-1]],1],[[275,[-1]]],13],[276,[[9,[1]]]],[276,8],[[[275,[-1]],96],[[275,[-1]]],13],[276,[[17,[249]]]],[[[275,[-1]],55],[[275,[-1]]],13],[276,[[17,[55]]]],[[276,[32,[[3,[1,247]]]],149,208,-1],[[11,[[240,[246]],245]]],42],[[276,[32,[[3,[1,247]]]],149,248,208,-1],[[11,[[240,[246]],245]]],42],[[276,[32,[[3,[1,247]]]],149,8],[[11,[[240,[243]],245]]]],[[276,[32,[[3,[1,247]]]],149,8,248],[[11,[[240,[243]],245]]]],[-1,-2,[],[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[32,[56]]],[[11,[276]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[[276,-1],[[11,[3,20]]],21],[[-1,-2],[[11,[3]]],[],151],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[277,277],4],[[-1,-2],4,[],[]],[[277,5],6],[[[278,[-1]],5],6,[131,279]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,3,[]],[[[280,[-1,-2,-3,-4]],8,95],3,42,42,42,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2,-3,-4],[[280,[-1,-2,-3,-4]]],42,42,42,42],[[[280,[-1,-2,-3,-4]],8],[[17,[95]]],42,42,42,42],[[[280,[-1,-2,-3,-4]],8,200,4],[[11,[3,3]]],42,42,42,42],[[[280,[-1,-2,-3,-4]],8],3,42,42,42,42],[[[280,[-1,-2,-3,-4]],8],197,42,42,42,42],[[[280,[-1,-2,-3,-4]]],199,42,42,42,42],[[-1,55,-2],[[11,[17,15]]],[],16],[[[280,[-1,-2,-3,-4]],[9,[8]],281,[278,[-5]],[17,[1]]],[[11,[3,277]]],42,42,42,42,279],[-1,55,[]],[[[278,[-1]]],55,279],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[[278,[-1]],-2],[[11,[3,20]]],279,21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[282,[-1]],55,55,164,8,8],[[11,[3,225]]],42],[[[283,[-1,-2,-3]],[17,[-2]]],3,42,42,42],[284,[[9,[214]]]],0,0,0,0,[[285,228],[[17,[[3,[286,228]]]]]],[[285,228],[[17,[[3,[286,228]]]]]],[287,55],[228,[[11,[8,274]]]],[228,[[9,[56]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[288,55],[[17,[285]]]],[286,285],[[[282,[-1]],55],3,42],[288,[[289,[55,285]]]],0,[228,228],[290,290],[291,291],[285,285],[286,286],[287,287],[292,292],[284,284],[293,293],[294,294],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[228,228],86],[286,287],0,[[[282,[-1]],[282,[-1]]],4,42],[[228,228],4],[[290,290],4],[[291,291],4],[[285,285],4],[[287,287],4],[[292,292],4],[[284,284],4],[[293,293],4],[[294,294],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,0,[[[282,[-1]],5],[[11,[3,94]]],42],[[228,5],6],[[228,5],6],[[290,5],6],[[291,5],[[11,[3,94]]]],[[291,5],6],[[285,5],[[11,[3,94]]]],[[285,5],6],[[286,5],[[11,[3,94]]]],[[287,5],6],[[292,5],6],[[284,5],6],[[293,5],6],[[293,5],[[11,[3,94]]]],[[294,5],6],[[294,5],[[11,[3,94]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,228],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,228],[128,[[11,[228]]]],[[288,8],[[17,[[32,[214]]]]]],[[[283,[-1,-2,-3]]],[[32,[93]]],42,42,42],[[285,56],[[17,[291]]]],[[[282,[-1]]],[[17,[23]]],42],[[[283,[-1,-2,-3]],55],[[17,[[3,[217,[17,[183]],[17,[183]]]]]]],42,42,42],[[[283,[-1,-2,-3]],[17,[228]]],[[17,[216]]],42,42,42],[[[283,[-1,-2,-3]],217],[[11,[4,225]]],42,42,42],[[[283,[-1,-2,-3]],183],[[11,[4,225]]],42,42,42],[[[282,[-1]],290],3,42],[[[283,[-1,-2,-3]],216],[[11,[4,225]]],42,42,42],[[[283,[-1,-2,-3]],8,219],[[11,[3,225]]],42,42,42],[[[283,[-1,-2,-3]],8,221],[[11,[3,225]]],42,42,42],[[[283,[-1,-2,-3]],8,220],[[11,[3,225]]],42,42,42],[[[283,[-1,-2,-3]],8,222],[[11,[3,225]]],42,42,42],[[228,-1],3,7],[[292,-1],3,7],[286,55],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[283,[-1,-2,-3]]],-1,42,42,42],[[30,-1],[[282,[-1]]],42],[[-1,[17,[-2]],-3],[[283,[-1,-2,-3]]],42,42,42],[[288,228],[[17,[294]]]],[[[282,[-1]],8],3,42],0,0,[288,[[289,[228,294]]]],0,[[228,228],[[17,[86]]]],[[[283,[-1,-2,-3]],8,200,4],[[11,[3,3]]],42,42,42],[[[283,[-1,-2,-3]]],4,42,42,42],0,[[[283,[-1,-2,-3]],8],197,42,42,42],[[[283,[-1,-2,-3]]],199,42,42,42],[[-1,-2],[[11,[[282,[-2]],15]]],16,42],[-1,[[11,[228,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[290]],15]]],16],[-1,[[11,[291,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[285,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[292,15]]],16],[-1,[[11,[284,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[293,15]]],16],[-1,[[11,[294,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[[[282,[-1]]],288,42],[[[282,[-1]]],3,42],[[[282,[-1]],55],3,42],0,[292,18],[[[282,[-1]],23],3,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,96,[]],[-1,96,[]],[-1,96,[]],[-1,96,[]],[-1,96,[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[[282,[-1]],183],[[11,[3,225]]],42],[[[282,[-1]],217,[17,[-2]]],[[11,[3,225]]],42,42],[[[282,[-1]],75,[17,[-2]]],[[11,[3,225]]],42,42],[[[282,[-1]],218],[[11,[3,225]]],42],[[[282,[-1]],216],[[11,[3,225]]],42],[[[282,[-1]],215],[[11,[3,225]]],42],[[[282,[-1]],-2],[[11,[3,20]]],42,21],[[228,-1],[[11,[3,20]]],21],[[290,-1],[[11,[3,20]]],21],[[291,-1],[[11,[3,20]]],21],[[285,-1],[[11,[3,20]]],21],[[292,-1],[[11,[3,20]]],21],[[284,-1],[[11,[3,20]]],21],[[293,-1],[[11,[3,20]]],21],[[294,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[9,[8]],201,[282,[-1]],-2,[57,[56]]],[[11,[202,225]]],42,42],0,[[[295,[-1]],55,228,228,296],55,297],[176,176],[298,298],[299,299],[203,203],[202,202],[201,201],[300,300],[301,301],[302,302],[303,303],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[298,298],4],[[299,299],4],[[203,203],4],[[202,202],4],[[201,201],4],[[300,300],4],[[301,301],4],[[302,302],4],[[303,303],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,0,[203,55],0,0,[203,[[17,[23]]]],0,[203,55],0,0,[[8,201,[282,[-1]],[17,[[9,[46]]]],-2,-3,[57,[56]]],[[11,[202,225]]],42,42,297],[[-1,8,201,[17,[[9,[46]]]],176],[[11,[202,225]]],[]],[[[304,[-1,-2,-3]],8,201,[17,[[9,[46]]]],176],[[11,[202,225]]],42,42,42],[[-1,8,201,[17,[[9,[46]]]],176,149,163],[[11,[202,225]]],[]],[[298,5],6],[[299,5],6],[[203,5],6],[[201,5],6],[[300,5],6],[[301,5],6],[[302,5],6],[[303,5],6],[[8,23],300],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[8,23],300],[202,55],[202,55],[[298,-1],3,7],[[299,-1],3,7],[[203,-1],3,7],[[202,-1],3,7],[[300,-1],3,7],[[301,-1],3,7],[[302,-1],3,7],[[303,-1],3,7],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,-2,[57,[56]],-3],[[304,[-1,-2,-3]]],42,42,42],[[-1,176],[[295,[-1]]],297],[[],176],0,0,0,0,0,[[[295,[-1]],203,55],3,297],[[[295,[-1]],203],3,297],0,[[[295,[-1]],203,55],3,297],[[[295,[-1]],203],3,297],[[176,203,8],3],0,[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[176,15]]],16],[-1,[[11,[298,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[299,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[202,15]]],16],[-1,[[11,[201,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[[-1,23],[[11,[300,15]]],16],[-1,[[11,[302,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[303,15]]],16],0,[298,18],[299,18],[303,18],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[176,228,228,55],[[17,[55]]]],[[300,55],300],[[300,205],300],[[300,56],300],[[300,56],300],[[300,23],300],[[300,[32,[302]]],300],[[176,-1],[[11,[3,20]]],21],[[298,-1],[[11,[3,20]]],21],[[299,-1],[[11,[3,20]]],21],[[202,-1],[[11,[3,20]]],21],[[201,-1],[[11,[3,20]]],21],[[300,-1],[[11,[3,20]]],21],[[302,-1],[[11,[3,20]]],21],[[303,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,[[[305,[-1,-2,-3]],228],3,42,42,0],[[306,[32,[228]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,55,228,228,296],55,[]],[[[305,[-1,-2,-3]],55,228,228,296],55,42,42,0],[[307,55,228,228,296],55],[[[305,[-1,-2,-3]]],3,42,42,0],[296,296],[307,307],[306,306],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[[305,[-1,-2,-3]]],3,42,42,0],[[],306],0,[[296,296],4],[[[305,[-1,-2,-3]],55,228],[[17,[[3,[55,55]]]]],42,42,0],[[296,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[305,[-1,-2,-3]],55,228],[[17,[[3,[[57,[64]],[57,[64]]]]]]],42,42,0],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[],[]],0,[[306,-1,-2],[[305,[-1,-2,-3]]],42,42,0],[[-1,203,55],3,[]],[[[305,[-1,-2,-3]],203,55],3,42,42,0],[[307,203,55],3],[[-1,203],3,[]],[[[305,[-1,-2,-3]],203],3,42,42,0],[[307,203],3],[[-1,203,55],3,[]],[[[305,[-1,-2,-3]],203,55],3,42,42,0],[[307,203,55],3],[[-1,203],3,[]],[[[305,[-1,-2,-3]],203],3,42,42,0],[[307,203],3],[[-1,[3,[306,-2,-3]]],[[11,[[305,[-2,-3,-4]],15]]],16,42,42,0],[[-1,55],[[11,[307,15]]],16],[[[305,[-1,-2,-3]],228],3,42,42,0],[[[305,[-1,-2,-3]],228],3,42,42,0],[[[305,[-1,-2,-3]],228,55],3,42,42,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[55,307],[[[305,[-1,-2,-3]],-4],[[11,[3,20]]],42,42,0,21],[[307,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[308,308],[309,309],[310,310],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[308,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,26,55],309,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],310],[[310,[282,[-1]],-2,[11,[85,308]]],3,42,42],[[310,[282,[-1]],[11,[85,308]]],3,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[311,311],[312,312],[204,204],[177,177],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[],311],[[],312],[[],204],[[],177],[[204,204],4],[[-1,-2],4,[],[]],[[311,5],6],[[312,5],6],[[204,5],6],[[177,5],6],0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[11,[204,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[204,18],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[204,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[44,44],[[-1,-2],3,[],[]],[[44,44],4],[[-1,-2],4,[],[]],[[44,5],6],[-1,-1,[]],[-1,-2,[],[]],[-1,[[11,[[17,[44]],15]]],16],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[[44,-1],[[11,[3,20]]],21],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[289,[-1,-2]]],[[289,[-1,-2]]],[118,313,314],118],[[-1,-2],3,[],[]],[[[289,[-1,-2]],-1],4,[118,313,314],[]],[[[289,[-1,-2]],-1],[[315,[-1,-2]]],[118,313,314],[]],[[[289,[-1,-2]],[289,[-1,-2]]],4,[313,314,53],53],[[-1,-2],4,[],[]],[[[289,[-1,-2]],5],6,[131,313,314],131],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[316,[-1,-2]]],-2,[313,314],[]],[[[289,[-1,-2]],-1],[[17,[-2]]],[118,313,314],[]],[[[316,[-1,-2]]],-2,[313,314],[]],[[[289,[-1,-2]],-1],[[17,[-2]]],[118,313,314],[]],[[[317,[-1,-2]],-2],-2,[313,314],[]],[[[289,[-1,-2]],-1,-2],[[17,[-2]]],[118,313,314],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[316,[-1,-2]]],-2,[313,314],[]],[[[289,[-1,-2]]],4,[118,313,314],[]],[[[289,[-1,-2]]],18,[118,313,314],[]],[[],[[289,[-1,-2]]],[118,313,314],[]],[[[318,[-1,-2]]],[[17,[[3,[-1,-2]]]]],[313,314],[]],[[[289,[-1,-2]],-3],[[318,[-1,-2]]],[118,313,314],[],[[319,[-1]]]],[[[289,[-1,-2]],-1],[[17,[-2]]],[118,313,314],[]],[[[316,[-1,-2]]],[[3,[-1,-2]]],[313,314],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[[289,[-1,-2]]],[[0,[320]]],[118,313,314],[]],[[[289,[-1,-2]]],[[0,[320]]],[118,313,314],[]],[[[289,[-1,-2]]],[[0,[320]]],[118,313,314],[]],[[[9,[56]],[9,[83]]],[[32,[56]]]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[321,321],[322,322],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[321,321],86],[[321,321],4],[[-1,-2],4,[],[]],0,[[321,5],6],[[321,5],6],[[322,5],6],[-1,-1,[]],[-1,-1,[]],[[321,321],4],[[321,321],4],[[321,-1],3,7],[-1,-2,[],[]],[-1,-2,[],[]],[[321,321],4],0,0,[[-1,322],3,[]],[[321,321],4],[[],321],0,[[321,147,128,128,23],322],[[321,321],[[17,[86]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[[[9,[56]],128],[[11,[8,274]]]],[[[9,[56]],72],[[11,[96,274]]]],[[[9,[56]],128,8],4],0,0,[[-1,128,-2],[[323,[3]]],[],324],[[-1,[282,[-2]]],[[11,[3,20]]],[],[]],[[-1,[162,[-2,-3,-4,-5,-6,-7,-8,-9]]],[[11,[3,20]]],[],[],[],[],[],[],[],[],[]],[[-1,-2],[[11,[3,20]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[325,[-1]]],4,16],[326,326],[[-1,-2],3,[],[]],[326],[[[325,[-1]]],[[11,[3,15]]],16],[-1,[[32,[56]]],[]],[[326,326],4],[[-1,-2],4,[],[]],[[326,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[327,[-1]]],[]],[-1,-1,[]],[328,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[96,[[329,[96]]]],[[[32,[-1]]],[[329,[[32,[-1]]]]],[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[326,56],[[-1,55],[[325,[-1]]],16],[-1,[[330,[-1]]],16],[-1,[[11,[-2,15]]],16,[]],[[-1,-2],[[11,[-3,15]]],16,[],[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[[[325,[-1]],[9,[56]]],[[11,[18,20]]],16],[[[330,[-1]],[9,[56]]],[[11,[18,20]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[[-1,-2],[[11,[[327,[-3]],15]]],16,[],[[331,[-2]]]],[-1,[[11,[[327,[-2]],15]]],16,332],[-1,[[11,[[17,[[333,[-2]]]],15]]],16,334],[-1,[[11,[335,15]]],16],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[329,[96]],15]]],16],[-1,[[11,[[329,[[206,[-2]]]],15]]],16,0],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[[329,[[32,[-2]]]],15]]],16,334],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[326,15]]],16],[-1,[[11,[4,145]]],[]],[-1,[[11,[4,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[135,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[108,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[136,145]]],[]],[-1,[[11,[137,145]]],[]],[-1,[[11,[137,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[[-1,[9,[56]]],[[11,[3,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[64,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[23,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[55,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,[[11,[56,145]]],[]],[-1,18,[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[32,[56]]],[[11,[326]]]],[96,[[11,[326]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[-1,-2],[[11,[3,20]]],[],21],[[335,-1],[[11,[3,20]]],21],[[[329,[[206,[-1]]]],-2],[[11,[3,20]]],0,21],[[[329,[[32,[-1]]]],-2],[[11,[3,20]]],324,21],[[[329,[96]],-1],[[11,[3,20]]],21],[[326,-1],[[11,[3,20]]],21],[[-1,[9,[56]]],[[11,[3,20]]],[]],[[336,[9,[56]]],[[11,[3,20]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[337,337],[[-1,-2],3,[],[]],[[337,337],4],[[249,249],4],[[-1,-2],4,[],[]],[[337,5],6],[[337,5],6],[[249,5],6],[[249,5],[[11,[3,94]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[[17,[-2]],15]]],16,[]],[-1,[[11,[337,15]]],16],[-1,-2,[],[]],[-1,96,[]],[-1,96,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[[337,-1],[[11,[3,20]]],21],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,[]],[48,48],[[-1,-2],3,[],[]],[-1,-1,[]],[-1,-1,[]],[48,338],[[48,48],338],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[32,[48]]],338],[[[339,[48]],340],341],[[48,[133,[342]]],3],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[338,3],[48,3],[[338,248],4],[[48,248],4]],"c":[2239,2240],"p":[[3,"BlindedPath",25],[3,"BlindedHop",25],[15,"tuple"],[15,"bool"],[3,"Formatter",5339],[6,"Result",5339],[8,"Hasher",5340],[3,"PublicKey",5341],[15,"slice"],[3,"Secp256k1",5342],[4,"Result",5343],[8,"EntropySource",328],[8,"Signing",5344],[8,"Verification",5344],[4,"DecodeError",2623],[8,"Read",882],[4,"Option",5345],[15,"usize"],[3,"TypeId",5346],[3,"Error",882],[8,"Writer",5141],[3,"BlockHeader",5347],[15,"u32"],[3,"Block",5347],[3,"BestBlock",63],[3,"BlockHash",5348],[4,"ChannelMonitorUpdateStatus",63],[3,"WatchedOutput",63],[6,"TransactionData",549],[4,"Network",5349],[3,"Txid",5348],[3,"Vec",5350],[3,"Script",5351],[3,"OutPoint",549],[4,"MonitorEvent",212],[3,"ChannelMonitorUpdate",212],[3,"ChannelMonitor",212],[3,"Transaction",5352],[4,"ConfirmationTarget",135],[3,"ChainMonitor",159],[8,"WriteableEcdsaChannelSigner",328],[8,"Deref",5353],[3,"MonitorUpdateId",159],[4,"APIError",4985],[3,"LockedChannelMonitor",159],[3,"ChannelDetails",2122],[4,"Balance",212],[3,"Future",5308],[3,"HashMap",5354],[8,"Fn",5355],[6,"TransactionOutputs",212],[3,"HTLCUpdate",212],[8,"PartialEq",5356],[4,"Event",575],[15,"u64"],[15,"u8"],[15,"array"],[3,"InMemorySigner",328],[3,"KeyMaterial",328],[3,"DelayedPaymentOutputDescriptor",328],[3,"StaticPaymentOutputDescriptor",328],[4,"SpendableOutputDescriptor",328],[3,"ChannelPublicKeys",1818],[15,"u16"],[3,"KeysManager",328],[3,"PhantomKeysManager",328],[4,"Recipient",328],[3,"Scalar",5357],[3,"SharedSecret",5358],[15,"u128"],[3,"ChannelTransactionParameters",1818],[3,"SecretKey",5341],[4,"All",5359],[3,"ShutdownScript",3702],[3,"UnsignedChannelAnnouncement",2623],[3,"Signature",5360],[3,"ClosingTransaction",1818],[3,"CommitmentTransaction",1818],[3,"PaymentPreimage",1752],[3,"HTLCOutputInCommitment",1818],[4,"UnsignedGossipMessage",2623],[3,"HolderCommitmentTransaction",1818],[3,"u5",5361],[3,"RecoverableSignature",5362],[3,"TxOut",5352],[4,"Ordering",5356],[3,"OutPoint",5352],[4,"PaymentPurpose",575],[4,"PathFailure",575],[4,"ClosureReason",575],[4,"HTLCDestination",575],[4,"PaymentFailureReason",575],[4,"MessageSendEvent",575],[3,"Error",5339],[3,"OnionMessage",2623],[3,"String",5363],[3,"IoSliceMut",882],[3,"BorrowedCursor",882],[3,"IoSlice",882],[3,"Stdin",882],[3,"BorrowedFd",5364],[3,"StdinLock",882],[3,"Stdout",882],[3,"StdoutLock",882],[3,"Stderr",882],[3,"StderrLock",882],[19,"MaybeUninit",5365],[15,"i32"],[3,"BufReader",882],[8,"Sized",5366],[3,"BufWriter",882],[8,"Write",882],[3,"Bytes",882],[3,"BorrowedBuf",882],[8,"Error",5367],[3,"Chain",882],[3,"Cursor",882],[8,"Clone",5368],[4,"ErrorKind",882],[3,"Empty",882],[3,"Sink",882],[4,"SeekFrom",882],[8,"AsRef",5369],[8,"BufRead",882],[3,"Take",882],[8,"Default",5370],[3,"WriterPanicked",882],[15,"str"],[3,"IntoInnerError",882],[8,"Send",5366],[8,"Debug",5339],[3,"Global",5371],[3,"Box",5372],[8,"Sync",5366],[15,"i16"],[15,"i64"],[15,"i8"],[3,"LineWriter",882],[8,"Allocator",5373],[3,"Repeat",882],[3,"Split",882],[3,"Lines",882],[3,"NulError",5374],[8,"Into",5369],[4,"Error",5375],[8,"Seek",882],[3,"Arguments",5339],[3,"PaymentSecret",1752],[3,"PaymentHash",1752],[4,"Error",5361],[8,"WriteBase32",5361],[3,"DirectedChannelTransactionParameters",1818],[3,"Witness",5376],[3,"TrustedClosingTransaction",1818],[3,"TrustedCommitmentTransaction",1818],[3,"BuiltCommitmentTransaction",1818],[3,"CounterpartyCommitmentSecrets",1818],[3,"TxCreationKeys",1818],[3,"CounterpartyChannelTransactionParameters",1818],[4,"HTLCClaim",1818],[3,"Message",5342],[3,"ChannelManager",2122],[3,"PaymentId",2122],[6,"ChannelFeatures",2492],[6,"ChannelTypeFeatures",2492],[3,"InterceptId",2122],[4,"FailureCode",2122],[3,"ChainParameters",2122],[3,"CounterpartyForwardingInfo",2122],[3,"ChannelCounterparty",2122],[3,"PhantomRouteHints",2122],[4,"Retry",2122],[4,"RetryableSendFailure",2122],[4,"PaymentSendFailure",2122],[3,"RecipientOnionFields",2122],[3,"InFlightHtlcs",4498],[3,"UserConfig",4896],[4,"RecentPaymentDetails",2122],[3,"AcceptChannel",2623],[3,"AnnouncementSignatures",2623],[3,"ChannelReady",2623],[3,"ChannelReestablish",2623],[3,"ChannelUpdate",2623],[3,"ClosingSigned",2623],[3,"CommitmentSigned",2623],[3,"ErrorMessage",2623],[3,"FundingCreated",2623],[3,"FundingSigned",2623],[3,"OpenChannel",2623],[3,"RevokeAndACK",2623],[3,"Shutdown",2623],[3,"UpdateAddHTLC",2623],[3,"UpdateFailHTLC",2623],[3,"UpdateFailMalformedHTLC",2623],[3,"UpdateFee",2623],[3,"UpdateFulfillHTLC",2623],[6,"InitFeatures",2492],[3,"ChannelManagerReadArgs",2122],[6,"NodeFeatures",2492],[3,"Init",2623],[3,"RouteParameters",4498],[3,"Route",4498],[3,"Path",4498],[3,"ChannelConfig",4896],[6,"InvoiceFeatures",2492],[3,"Features",2492],[6,"BlindedHopFeatures",2492],[3,"ExpandedKey",2612],[3,"WarningMessage",2623],[3,"Ping",2623],[3,"Pong",2623],[3,"ClosingSignedFeeRange",2623],[3,"DataLossProtect",2623],[4,"NetAddress",2623],[3,"UnsignedNodeAnnouncement",2623],[3,"NodeAnnouncement",2623],[3,"ChannelAnnouncement",2623],[3,"UnsignedChannelUpdate",2623],[3,"QueryChannelRange",2623],[3,"ReplyChannelRange",2623],[3,"QueryShortChannelIds",2623],[3,"ReplyShortChannelIdsEnd",2623],[3,"GossipTimestampFilter",2623],[4,"ErrorAction",2623],[3,"LightningError",2623],[3,"CommitmentUpdate",2623],[4,"OptionalField",2623],[3,"NodeId",4201],[3,"PeerManager",3579],[8,"SocketDescriptor",3579],[3,"PeerHandleError",3579],[3,"IgnoringMessageHandler",3579],[3,"ErroringMessageHandler",3579],[4,"Infallible",5369],[3,"MessageHandler",3579],[3,"InvalidShutdownScript",3702],[3,"WPubkeyHash",5348],[3,"WScriptHash",5348],[4,"WitnessVersion",5377],[3,"InvoiceBuilder",3753],[8,"SigningPubkeyStrategy",3753],[3,"Invoice",3753],[3,"ExplicitSigningPubkey",3753],[3,"UnsignedInvoice",3753],[4,"SemanticError",4022],[3,"DerivedSigningPubkey",3753],[3,"BlindedPayInfo",3753],[3,"Duration",5378],[3,"PrintableString",5277],[3,"TweakedPublicKey",5379],[3,"Address",5377],[6,"Bolt12InvoiceFeatures",2492],[8,"FnOnce",5355],[3,"Signature",5380],[3,"InvoiceRequestBuilder",3847],[8,"PayerIdStrategy",3847],[3,"InvoiceRequest",3847],[3,"ExplicitPayerId",3847],[3,"UnsignedInvoiceRequest",3847],[3,"DerivedPayerId",3847],[3,"ChainHash",5381],[6,"InvoiceRequestFeatures",2492],[3,"KeyPair",5341],[3,"OfferBuilder",3914],[8,"MetadataStrategy",3914],[3,"Offer",3914],[4,"Amount",3914],[4,"Quantity",3914],[3,"DerivedMetadata",3914],[6,"OfferFeatures",2492],[3,"ExplicitMetadata",3914],[4,"SignOnly",5359],[4,"ParseError",4022],[4,"Error",5342],[3,"RefundBuilder",4078],[3,"Refund",4078],[4,"SendError",4132],[4,"OnionMessageContents",4132],[8,"CustomOnionMessageContents",4132],[3,"OnionMessenger",4132],[4,"Destination",4132],[3,"NetworkGraph",4201],[3,"P2PGossipSync",4201],[3,"NodeAnnouncementInfo",4201],[3,"ChannelInfo",4201],[3,"DirectedChannelInfo",4201],[4,"EffectiveCapacity",4201],[3,"ReadOnlyNetworkGraph",4201],[3,"IndexedMap",5013],[4,"NetworkUpdate",4201],[3,"ChannelUpdateInfo",4201],[3,"RoutingFees",4201],[3,"NodeAlias",4201],[3,"NodeInfo",4201],[3,"ScorerAccountingForInFlightHtlcs",4498],[3,"ChannelUsage",4748],[8,"Score",4748],[3,"RouteHop",4498],[3,"BlindedTail",4498],[3,"PaymentParameters",4498],[4,"Hints",4498],[3,"RouteHint",4498],[3,"RouteHintHop",4498],[3,"DefaultRouter",4498],[3,"ProbabilisticScorerUsingTime",4748],[3,"ProbabilisticScoringParameters",4748],[3,"FixedPenaltyScorer",4748],[4,"UtxoLookupError",4842],[4,"UtxoResult",4842],[3,"UtxoFuture",4842],[3,"ChannelHandshakeConfig",4896],[3,"ChannelHandshakeLimits",4896],[8,"Hash",5340],[8,"Ord",5356],[4,"Entry",5013],[3,"OccupiedEntry",5013],[3,"VacantEntry",5013],[3,"Range",5013],[8,"RangeBounds",5382],[8,"Iterator",5383],[4,"Level",5082],[3,"Record",5082],[6,"Result",882],[8,"Writeable",5141],[3,"FixedLengthReader",5141],[3,"Hostname",5141],[3,"RequiredWrapper",5141],[15,"never"],[3,"WithoutLength",5141],[3,"ReadTrackingReader",5141],[8,"ReadableArgs",5141],[8,"Readable",5141],[3,"UpgradableRequired",5141],[8,"MaybeReadable",5141],[3,"BigSize",5141],[3,"LengthCalculatingWriter",5141],[3,"UntrustedString",5277],[3,"Sleeper",5308],[3,"Pin",5384],[3,"Context",5385],[4,"Poll",5386],[8,"FutureCallback",5308],[8,"Confirm",63],[8,"Listen",63],[8,"Filter",63],[8,"Watch",63],[8,"BroadcasterInterface",135],[8,"FeeEstimator",135],[8,"Persist",159],[13,"ClaimableOnChannelClose",316],[13,"ClaimableAwaitingConfirmations",316],[13,"ContentiousClaimable",316],[13,"MaybeTimeoutClaimableHTLC",316],[13,"MaybePreimageClaimableHTLC",316],[13,"CounterpartyRevokedOutputClaimable",316],[13,"Completed",326],[8,"SignerProvider",328],[8,"ChannelSigner",328],[8,"NodeSigner",328],[8,"EcdsaChannelSigner",328],[13,"StaticOutput",547],[8,"MessageSendEventsProvider",575],[8,"EventHandler",575],[8,"OnionMessageProvider",575],[8,"EventsProvider",575],[13,"ProcessingError",757],[13,"CounterpartyForceClosed",757],[13,"PaymentClaimable",759],[13,"PaymentClaimed",759],[13,"ChannelPending",759],[13,"ChannelReady",759],[13,"ChannelClosed",759],[13,"DiscardFunding",759],[13,"OpenChannelRequest",759],[13,"FundingGenerationReady",759],[13,"PaymentForwarded",759],[13,"HTLCIntercepted",759],[13,"HTLCHandlingFailed",759],[13,"PaymentPathFailed",759],[13,"PaymentSent",759],[13,"SpendableOutputs",759],[13,"PaymentPathSuccessful",759],[13,"ProbeSuccessful",759],[13,"ProbeFailed",759],[13,"PaymentFailed",759],[13,"PendingHTLCsForwardable",759],[13,"NextHopChannel",832],[13,"FailedPayment",832],[13,"UnknownNextHop",832],[13,"InvalidForward",832],[13,"HandleError",837],[13,"SendAcceptChannel",837],[13,"SendOpenChannel",837],[13,"SendFundingCreated",837],[13,"SendFundingSigned",837],[13,"SendChannelReady",837],[13,"SendAnnouncementSignatures",837],[13,"SendRevokeAndACK",837],[13,"SendClosingSigned",837],[13,"SendShutdown",837],[13,"SendChannelReestablish",837],[13,"SendChannelAnnouncement",837],[13,"BroadcastChannelAnnouncement",837],[13,"BroadcastChannelUpdate",837],[13,"BroadcastNodeAnnouncement",837],[13,"SendChannelUpdate",837],[13,"SendChannelRangeQuery",837],[13,"SendShortIdsQuery",837],[13,"SendReplyChannelRange",837],[13,"SendGossipTimestampFilter",837],[13,"UpdateHTLCs",837],[13,"InitialSend",878],[13,"OnPath",878],[13,"InvoicePayment",880],[8,"IsTerminal",882],[13,"PartialFailure",2485],[13,"Pending",2488],[13,"Fulfilled",2488],[13,"Abandoned",2488],[8,"RoutingMessageHandler",2623],[8,"ChannelMessageHandler",2623],[8,"OnionMessageHandler",2623],[13,"SendWarningMessage",3565],[13,"DisconnectPeer",3565],[13,"SendErrorMessage",3565],[13,"IPv4",3569],[13,"IPv6",3569],[13,"OnionV3",3569],[13,"Hostname",3569],[8,"CustomMessageHandler",3579],[8,"CustomMessageReader",3743],[8,"Type",3743],[13,"Currency",4019],[13,"Bitcoin",4019],[8,"CustomOnionMessageHandler",4132],[13,"MaximumHTLC",4489],[13,"Total",4489],[13,"ExactLiquidity",4489],[13,"ChannelFailure",4493],[13,"NodeFailure",4493],[13,"ChannelUpdateMessage",4493],[8,"Router",4498],[8,"LockableScore",4748],[8,"UtxoLookup",4842],[13,"APIMisuseError",5007],[13,"FeeRateTooHigh",5007],[13,"InvalidRoute",5007],[13,"ChannelUnavailable",5007],[13,"IncompatibleShutdownScript",5007],[8,"Logger",5082],[8,"KVStorePersister",5135],[8,"Persister",5135]],"a":{"errno":[1374],"getlasterror":[1374]}},\
"lightning_invoice":{"doc":"This crate provides data structures to represent lightning …","t":"NNNNENERRDNNNNNDNENNNNNNNNNNNNNNDDEDNRNNNNDNNNNNNNNNNNNENEDNNNNNDDNNDDDENNNNENDENEDNNNENNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLMLLLLLMLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLMMRRRRRRRRRRRNENLLLLLLLFFFFLLLLFFFFFFF","n":["BadPrefix","Bech32Error","Bitcoin","BitcoinTestnet","CreationError","CreationError","Currency","DEFAULT_EXPIRY_TIME","DEFAULT_MIN_FINAL_CLTV_EXPIRY_DELTA","Description","Description","DescriptionDecodeError","DescriptionHash","DescriptionTooLong","Direct","ExpiryTime","ExpiryTime","Fallback","Fallback","Features","Hash","ImpreciseAmount","IntegerOverflowError","InvalidAmount","InvalidFeatures","InvalidPubKeyHashLength","InvalidRecoveryId","InvalidRecoveryId","InvalidScriptHashLength","InvalidSegWitProgramLength","InvalidSignature","InvalidSliceLength","Invoice","InvoiceBuilder","InvoiceDescription","InvoiceSignature","KnownSemantics","MAX_TIMESTAMP","MalformedHRP","MalformedSignature","Micro","Milli","MinFinalCltvExpiryDelta","MinFinalCltvExpiryDelta","MinFinalCltvExpiryDeltaTooShort","MissingRouteHints","MultipleDescriptions","MultiplePaymentHashes","MultiplePaymentSecrets","Nano","NoDescription","NoPaymentHash","NoPaymentSecret","PaddingError","ParseAmountError","ParseError","ParseError","ParseOrSemanticError","PayeePubKey","PayeePubKey","PaymentHash","PaymentMetadata","PaymentSecret","Pico","PositiveTimestamp","PrivateRoute","PrivateRoute","PubKeyHash","RawDataPart","RawHrp","RawInvoice","RawTaggedField","Regtest","RouteTooLong","ScriptHash","SegWitProgram","SemanticError","SemanticError","Sha256","SiPrefix","SignError","SignOrCreationError","SignedRawInvoice","Signet","Simnet","Skip","TaggedField","TimestampOutOfBounds","TooShortDataPart","UnexpectedEndOfTaggedFields","UnknownCurrency","UnknownSemantics","UnknownSiPrefix","amount_milli_satoshis","amount_milli_satoshis","amount_pico_btc","as_duration","as_duration_since_epoch","as_seconds","as_time","as_unix_timestamp","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","base32_len","basic_mpp","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_raw","build_signed","check_signature","check_signature","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constants","currency","currency","currency","current_timestamp","data","deref","deref","deref","deref","deref","description","description","description","description_hash","description_hash","duration_since_epoch","duration_since_epoch","duration_until_expiry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expiration_remaining_from_epoch","expires_at","expiry_time","expiry_time","expiry_time","fallback","fallback_addresses","fallbacks","fallbacks","features","features","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_base32","from_base32","from_base32","from_base32","from_base32","from_base32","from_base32","from_base32","from_base32","from_base32","from_base32","from_duration","from_duration_since_epoch","from_seconds","from_signed","from_str","from_str","from_str","from_str","from_str","from_system_time","from_unix_timestamp","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hrp","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_parts","into_signed_raw","invoice_description","is_expired","known_tagged_fields","min_final_cltv_expiry_delta","min_final_cltv_expiry_delta","min_final_cltv_expiry_delta","multiplier","network","new","new","new","payee_pub_key","payee_pub_key","payee_pub_key","payment","payment_hash","payment_hash","payment_hash","payment_metadata","payment_metadata","payment_metadata","payment_secret","payment_secret","payment_secret","private_route","private_routes","private_routes","raw_amount","raw_invoice","recover_payee_pub_key","recover_payee_pub_key","require_payment_metadata","route_hints","si_prefix","sign","signable_hash","signable_hash","signable_hash","signature","tag","tagged_fields","tagged_fields","timestamp","timestamp","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_build_signed","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utils","values_desc","would_expire","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","write_base32","program","version","TAG_DESCRIPTION","TAG_DESCRIPTION_HASH","TAG_EXPIRY_TIME","TAG_FALLBACK","TAG_FEATURES","TAG_MIN_FINAL_CLTV_EXPIRY_DELTA","TAG_PAYEE_PUB_KEY","TAG_PAYMENT_HASH","TAG_PAYMENT_METADATA","TAG_PAYMENT_SECRET","TAG_PRIVATE_ROUTE","Invoice","PaymentError","Sending","borrow","borrow_mut","clone","clone_into","fmt","from","into","pay_invoice","pay_invoice_with_id","pay_zero_value_invoice","pay_zero_value_invoice_with_id","to_owned","try_from","try_into","type_id","create_invoice_from_channelmanager","create_invoice_from_channelmanager_and_duration_since_epoch","create_invoice_from_channelmanager_and_duration_since_epoch_with_payment_hash","create_invoice_from_channelmanager_with_description_hash","create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch","create_phantom_invoice","create_phantom_invoice_with_description_hash"],"q":[[0,"lightning_invoice"],[603,"lightning_invoice::Fallback"],[605,"lightning_invoice::constants"],[616,"lightning_invoice::payment"],[634,"lightning_invoice::utils"],[641,"core::option"],[642,"core::time"],[643,"std::time"],[644,"core::result"],[645,"core::ops::function"],[646,"core::clone"],[647,"secp256k1::key"],[648,"secp256k1::ecdsa::recovery"],[649,"lightning::routing::router"],[650,"alloc::string"],[651,"bitcoin_hashes::sha256"],[652,"core::cmp"],[653,"bitcoin::util::address"],[654,"alloc::vec"],[655,"lightning::ln::features"],[656,"core::fmt"],[657,"core::fmt"],[658,"secp256k1"],[659,"core::num::error"],[660,"core::str::error"],[661,"bitcoin::network::constants"],[662,"bech32"],[663,"core::slice::iter"],[664,"core::iter::adapters::filter_map"],[665,"lightning::ln"],[666,"core::any"],[667,"bech32"],[668,"lightning::ln::channelmanager"],[669,"lightning::ln::channelmanager"],[670,"lightning::ln"]],"d":["","","Bitcoin mainnet","Bitcoin testnet","Errors that may occur when constructing a new <code>RawInvoice</code> …","An error occurred while building the transaction","Enum representing the crypto currencies (or networks) …","Default expiry time as defined by BOLT 11.","Default minimum final CLTV expiry as defined by BOLT 11.","Description string","","","","The supplied description string was longer than 639 <strong>bytes</strong> …","Reference to the directly supplied description in the …","Positive duration that defines when (relatively to the …","","Fallback address in case no LN payment is possible","","","Reference to the description’s hash included in the …","The invoice’s amount was not a whole number of …","","The supplied millisatoshi amount was greater than the …","The invoice’s features are invalid","","","The recovery id doesn’t fit the signature/pub key","","","The invoice’s signature is invalid","","Represents a syntactically and semantically correct …","Builder for <code>Invoice</code>s. It’s the most convenient and …","Represents the description of an invoice which has to be …","Recoverable signature","Parsed tagged field with known tag","The maximum timestamp as <code>Duration::as_secs</code> since the Unix …","","","10^-6","10^-3","<code>min_final_cltv_expiry_delta</code> to use for the last HTLC in …","","The provided <code>min_final_cltv_expiry_delta</code> was less than …","Route hints were required for this invoice and were …","The invoice contains multiple descriptions and/or …","The invoice has multiple payment hashes which isn’t …","The invoice contains multiple payment secrets","10^-9","No description or description hash are part of the invoice","The invoice is missing the mandatory payment hash","The invoice is missing the mandatory payment secret, which …","","","Errors that indicate what is wrong with the invoice. They …","The invoice couldn’t be decoded","Indicates that something went wrong while parsing or …","Payee public key","","","","","10^-12","A timestamp that refers to a date after 1 January 1970.","Private routing information","","","Data of the <code>RawInvoice</code> that is encoded in the data part","Data of the <code>RawInvoice</code> that is encoded in the human …","Represents an syntactically correct <code>Invoice</code> for a payment …","Tagged field which may have an unknown tag","Bitcoin regtest","The specified route has too many hops and can’t be …","","","Errors that may occur when converting a <code>RawInvoice</code> to an …","The invoice could be decoded but violates the BOLT11 …","SHA-256 hash","SI prefixes for the human readable part","An error occurred during signing","When signing using a fallible method either an …","Represents a signed <code>RawInvoice</code> with cached hash. The …","Bitcoin signet","Bitcoin simnet","Not an error, but used internally to signal that a part of …","Tagged field with known tag","The Unix timestamp of the supplied date is less than zero …","","","","tagged field which was not parsed due to an unknown tag or …","","Sets the amount in millisatoshis. The optimal SI prefix is …","Returns the amount if specified in the invoice as …","","Returns a reference to the underlying <code>Duration</code> (=expiry …","Returns the duration of the stored time since the Unix …","Returns the expiry time in seconds","Returns the <code>SystemTime</code> representing the stored time","Returns the Unix timestamp representing the stored time","","","","","","","","Sets the <code>basic_mpp</code> feature as optional.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a <code>RawInvoice</code> if no <code>CreationError</code> occurred while …","Builds and signs an invoice using the supplied …","Check that the invoice is signed correctly and that key …","Checks if the signature is valid for the included payee …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tag constants as specified in BOLT11","Returns the currency for which the invoice was issued","","The currency deferred from the 3rd and 4th character of …","Sets the timestamp to the current system time.","data part","","","","","","Set the description. This function is only available if no …","Return the description or a hash of it for longer ones","","Set the description hash. This function is only available …","","Sets the timestamp to a duration since the Unix epoch, …","Returns the <code>Invoice</code>’s timestamp as a duration since the …","Returns the Duration remaining until the invoice expires.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the Duration remaining until the invoice expires …","Returns the Duration since the Unix epoch at which the …","Sets the expiry time, dropping the subsecond part (which …","Returns the invoice’s expiry time, if present, otherwise …","","Adds a fallback address.","Returns a list of all fallback addresses as <code>Address</code>es","Returns a list of all fallback addresses","This is not exported to bindings users as we don’t …","Get the invoice features if they were included in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Construct an <code>ExpiryTime</code> from a <code>Duration</code>, dropping the …","Creates a <code>PositiveTimestamp</code> from a <code>Duration</code> since the Unix …","Construct an <code>ExpiryTime</code> from seconds.","Constructs an <code>Invoice</code> from a <code>SignedRawInvoice</code> by checking …","","","","","","Creates a <code>PositiveTimestamp</code> from a <code>SystemTime</code> with a …","Creates a <code>PositiveTimestamp</code> from a Unix timestamp in the …","","","","","","","","","","","","","","","","","","","human readable part","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying description <code>String</code>","Returns the underlying list of hops","Disassembles the <code>SignedRawInvoice</code> into its three parts:","Transform the <code>Invoice</code> into it’s unchecked version","Set the description or description hash. This function is …","Returns whether the invoice has expired.","Returns an iterator over all tagged fields with known …","Sets <code>min_final_cltv_expiry_delta</code>.","Returns the invoice’s <code>min_final_cltv_expiry_delta</code> time, …","","Returns the multiplier to go from a BTC value to picoBTC …","Returns the network for which the invoice was issued","Construct new, empty <code>InvoiceBuilder</code>. All necessary fields …","Creates a new <code>Description</code> if <code>description</code> is at most 1023 …","Creates a new (partial) route from a list of hops","Sets the payee’s public key.","Get the payee’s public key if one was included in the …","","Convenient utilities for paying Lightning invoices and …","Set the payment hash. This function is only available if …","Returns the hash to which we will receive the preimage on …","","Sets the payment metadata.","Get the payment metadata blob if one was included in the …","","Sets the payment secret and relevant features.","Get the payment secret if one was included in the invoice","","Adds a private route.","Returns a list of all routes included in the invoice","","The amount that, multiplied by the SI prefix, has to be …","The <code>RawInvoice</code> which was signed.","Recover the payee’s public key (only to be used if none …","Recovers the public key used for signing the invoice from …","Sets forwarding of payment metadata as required. A reader …","Returns a list of all routes included in the invoice as …","SI prefix that gets multiplied with the <code>raw_amount</code>","Signs the invoice using the supplied <code>sign_method</code>. This …","The hash of the <code>RawInvoice</code> that was signed.","The hash of the <code>RawInvoice</code> that was signed.","Calculate the hash of the encoded <code>RawInvoice</code> which should …","Signature for the invoice.","Numeric representation of the field’s tag","Returns an iterator over all tagged fields of this Invoice.","tagged fields of the payment request","Sets the timestamp to a specific <code>SystemTime</code>.","Returns the <code>Invoice</code>’s timestamp (should equal its …","generation time of the invoice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds and signs an invoice using the supplied …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenient utilities to create an invoice.","Returns all enum variants of <code>SiPrefix</code> sorted in descending …","Returns whether the expiry time would pass at the given …","","","","","","","","","","","","","","","","","","","","","","","","","","An error resulting from the provided <code>Invoice</code> or payment …","An error that may occur when making a payment.","An error occurring when sending a payment.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Pays the given <code>Invoice</code>, retrying if needed based on <code>Retry</code>.","Pays the given <code>Invoice</code> with a custom idempotency key, …","Pays the given zero-value <code>Invoice</code> using the given amount, …","Pays the given zero-value <code>Invoice</code> using the given amount …","","","","","Utility to construct an invoice. Generally, unless you …","See <code>create_invoice_from_channelmanager</code> This version can be …","See …","Utility to construct an invoice. Generally, unless you …","See …","Utility to create an invoice that can be paid to one of …","Utility to create an invoice that can be paid to one of …"],"i":[24,24,31,31,0,35,0,0,0,0,33,24,33,17,27,0,33,0,33,33,27,21,24,17,21,24,24,21,24,24,21,24,0,0,0,0,32,0,24,24,30,30,0,33,17,17,21,21,21,30,21,21,21,24,24,0,25,0,0,33,33,33,33,30,0,0,33,15,0,0,0,0,31,17,15,15,0,25,0,0,35,0,0,31,31,24,0,17,24,24,24,32,24,1,3,5,6,8,6,8,8,10,12,13,6,14,15,16,1,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,1,1,3,22,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,0,3,5,28,1,5,22,12,13,34,16,1,3,5,1,5,1,3,3,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,3,3,1,3,5,1,3,3,5,3,5,24,24,25,25,1,3,3,27,22,22,5,28,28,29,8,30,30,31,31,32,33,10,12,13,6,14,15,34,16,17,17,21,21,35,35,24,24,24,24,24,25,25,25,1,3,27,22,5,28,29,8,30,31,31,32,32,33,10,12,13,13,6,14,15,34,16,17,21,35,29,8,33,10,12,13,6,14,15,34,16,6,8,6,3,3,22,28,30,31,8,8,3,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,5,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,12,16,22,3,1,3,5,1,3,5,30,3,1,12,16,1,3,5,0,1,3,5,1,3,5,1,3,5,1,3,5,28,22,3,22,1,3,28,5,3,22,5,22,33,3,29,1,3,29,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,24,25,3,22,28,30,31,17,21,35,1,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,24,25,1,3,27,22,5,28,29,8,30,31,32,33,10,12,13,6,14,15,34,16,17,21,35,0,30,3,29,8,32,33,10,12,13,6,14,15,34,16,74,74,0,0,0,0,0,0,0,0,0,0,0,65,0,65,65,65,65,65,65,65,65,0,0,0,0,65,65,65,65,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1,-2,-3,-4,-5,-6]],2],[[1,[-1,-2,-3,-4,-5,-6]]],0,0,0,0,0,0],[3,[[4,[2]]]],[5,[[4,[2]]]],[6,7],[8,7],[6,2],[8,9],[8,2],[10,11],[12,11],[13,11],[6,11],[14,11],[15,11],[16,11],[[[1,[-1,-2,-3,-4,0,-5]]],[[1,[-1,-2,-3,-4,0,-5]]],0,0,0,0,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2,0,-3,-4,-5]]],[[18,[5,17]]],0,0,0,0,0],[[[1,[0,0,0,0,0,-1]],-2],[[18,[3,17]]],0,19],[3,[[18,[20,21]]]],[22,23],[24,24],[25,25],[[[1,[-1,-2,-3,-4,-5,-6]]],[[1,[-1,-2,-3,-4,-5,-6]]],[26,0],[26,0],[26,0],[26,0],[26,0],[26,0]],[3,3],[27,27],[22,22],[5,5],[28,28],[29,29],[8,8],[30,30],[31,31],[32,32],[33,33],[10,10],[12,12],[13,13],[6,6],[14,14],[15,15],[34,34],[16,16],[17,17],[21,21],[[[35,[-1]]],[[35,[-1]]],26],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],0,[3,31],[5,31],0,[[[1,[-1,-2,0,-3,-4,-5]]],[[1,[-1,-2,0,-3,-4,-5]]],0,0,0,0,0],0,[22,5],[12,36],[13,37],[34,38],[16,39],[[[1,[0,-1,-2,-3,-4,-5]],40],[[1,[0,-1,-2,-3,-4,-5]]],0,0,0,0,0],[3,27],[5,[[4,[12]]]],[[[1,[0,-1,-2,-3,-4,-5]],41],[[1,[0,-1,-2,-3,-4,-5]]],0,0,0,0,0],[5,[[4,[10]]]],[[[1,[-1,-2,0,-3,-4,-5]],7],[[1,[-1,-2,0,-3,-4,-5]]],0,0,0,0,0],[3,7],[3,7],[[24,24],23],[[25,25],23],[[[1,[-1,-2,-3,-4,-5,-6]],[1,[-1,-2,-3,-4,-5,-6]]],23,[42,0],[42,0],[42,0],[42,0],[42,0],[42,0]],[[3,3],23],[[27,27],23],[[22,22],23],[[5,5],23],[[28,28],23],[[29,29],23],[[8,8],23],[[30,30],23],[[31,31],23],[[32,32],23],[[33,33],23],[[10,10],23],[[12,12],23],[[13,13],23],[[6,6],23],[[14,14],23],[[15,15],23],[[34,34],23],[[16,16],23],[[17,17],23],[[21,21],23],[[[35,[-1]],[35,[-1]]],23,42],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[3,7],7],[3,[[4,[7]]]],[[[1,[-1,-2,-3,-4,-5,-6]],7],[[1,[-1,-2,-3,-4,-5,-6]]],0,0,0,0,0,0],[3,7],[5,[[4,[6]]]],[[[1,[-1,-2,-3,-4,-5,-6]],15],[[1,[-1,-2,-3,-4,-5,-6]]],0,0,0,0,0,0],[3,[[44,[43]]]],[3,[[44,[15]]]],[5,[[44,[15]]]],[3,[[4,[45]]]],[5,[[4,[45]]]],[[24,46],47],[[24,46],47],[[25,46],47],[[25,46],47],[[[1,[-1,-2,-3,-4,-5,-6]],46],47,[48,0],[48,0],[48,0],[48,0],[48,0],[48,0]],[[3,46],[[18,[20,49]]]],[[3,46],47],[[27,46],47],[[22,46],47],[[22,46],[[18,[20,49]]]],[[5,46],47],[[28,46],[[18,[20,49]]]],[[28,46],47],[[29,46],47],[[8,46],47],[[30,46],47],[[30,46],[[18,[20,49]]]],[[31,46],47],[[31,46],[[18,[20,49]]]],[[32,46],47],[[33,46],47],[[10,46],47],[[12,46],47],[[13,46],47],[[6,46],47],[[14,46],47],[[15,46],47],[[34,46],47],[[16,46],47],[[17,46],47],[[17,46],47],[[21,46],47],[[21,46],47],[[[35,[-1]],46],47,[]],[[[35,[-1]],46],47,48],[50,24],[51,24],[-1,-1,[]],[52,24],[53,24],[24,25],[21,25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[54,31],[33,32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[37,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[56,[55]]],[[18,[29]]]],[[[56,[55]]],[[18,[8]]]],[[[56,[55]]],[[18,[33,24]]]],[[[56,[55]]],[[18,[10,24]]]],[[[56,[55]]],[[18,[12,24]]]],[[[56,[55]]],[[18,[13,24]]]],[[[56,[55]]],[[18,[6,24]]]],[[[56,[55]]],[[18,[14,24]]]],[[[56,[55]]],[[18,[15,24]]]],[[[56,[55]]],[[18,[34]]]],[[[56,[55]]],[[18,[16,24]]]],[7,6],[7,[[18,[8,17]]]],[2,6],[22,[[18,[3,21]]]],[36,[[18,[3]]]],[36,[[18,[22]]]],[36,[[18,[28]]]],[36,[[18,[30,24]]]],[36,[[18,[31,24]]]],[9,[[18,[8,17]]]],[2,[[18,[8,17]]]],[[3,-1],20,57],[[22,-1],20,57],[[5,-1],20,57],[[28,-1],20,57],[[29,-1],20,57],[[8,-1],20,57],[[30,-1],20,57],[[31,-1],20,57],[[32,-1],20,57],[[33,-1],20,57],[[10,-1],20,57],[[12,-1],20,57],[[13,-1],20,57],[[6,-1],20,57],[[14,-1],20,57],[[15,-1],20,57],[[34,-1],20,57],[[16,-1],20,57],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,40],[16,39],[22,[[20,[5,[59,[58]],34]]]],[3,22],[[[1,[0,-1,-2,-3,-4,-5]],27],[[1,[0,-1,-2,-3,-4,-5]]],0,0,0,0,0],[3,23],[5,[[61,[[60,[32]]]]]],[[[1,[-1,-2,-3,0,-4,-5]],2],[[1,[-1,-2,-3,0,-4,-5]]],0,0,0,0,0],[3,2],[5,[[4,[14]]]],[30,2],[3,54],[31,[[1,[0,0,0,0,0,0]]]],[40,[[18,[12,17]]]],[39,[[18,[16,17]]]],[[[1,[-1,-2,-3,-4,-5,-6]],37],[[1,[-1,-2,-3,-4,-5,-6]]],0,0,0,0,0,0],[3,[[4,[37]]]],[5,[[4,[13]]]],0,[[[1,[-1,0,-2,-3,-4,-5]],41],[[1,[-1,0,-2,-3,-4,-5]]],0,0,0,0,0],[3,41],[5,[[4,[10]]]],[[[1,[-1,-2,-3,-4,-5,0]],[44,[58]]],[[1,[-1,-2,-3,-4,-5,0]]],0,0,0,0,0],[3,[[4,[[44,[58]]]]]],[5,[[4,[[44,[58]]]]]],[[[1,[-1,-2,-3,-4,0,-5]],62],[[1,[-1,-2,-3,-4,0,-5]]],0,0,0,0,0],[3,62],[5,[[4,[62]]]],[[[1,[-1,-2,-3,-4,-5,-6]],39],[[1,[-1,-2,-3,-4,-5,-6]]],0,0,0,0,0,0],[3,[[44,[16]]]],[5,[[44,[16]]]],0,[22,5],[3,37],[22,[[18,[13,51]]]],[[[1,[-1,-2,-3,-4,-5,0]]],[[1,[-1,-2,-3,-4,-5,0]]],0,0,0,0,0],[3,[[44,[39]]]],0,[[5,-1],[[18,[22,-2]]],19,[]],[3,[[59,[58]]]],[22,[[59,[58]]]],[5,[[59,[58]]]],[22,34],[33,55],[3,[[61,[[60,[32]]]]]],0,[[[1,[-1,-2,0,-3,-4,-5]],9],[[1,[-1,-2,0,-3,-4,-5]]],0,0,0,0,0],[3,9],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[[[1,[0,0,0,0,0,-1]],-2],[[18,[3,[35,[-3]]]]],0,19,[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],0,[[],[[56,[30]]]],[[3,7],23],[[29,-1],[[18,[20]]],64],[[8,-1],[[18,[20]]],64],[[32,-1],[[18,[20]]],64],[[33,-1],[[18,[20]]],64],[[10,-1],[[18,[20]]],64],[[12,-1],[[18,[20]]],64],[[13,-1],[[18,[20]]],64],[[6,-1],[[18,[20]]],64],[[14,-1],[[18,[20]]],64],[[15,-1],[[18,[20]]],64],[[34,-1],[[18,[20]]],64],[[16,-1],[[18,[20]]],64],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[[-1,-2],20,[],[]],[[65,46],47],[-1,-1,[]],[-1,-2,[],[]],[[3,66,[67,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[18,[68,65]]],69,69,69,69,69,69,69,69],[[3,68,66,[67,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[18,[20,65]]],69,69,69,69,69,69,69,69],[[3,2,66,[67,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[18,[68,65]]],69,69,69,69,69,69,69,69],[[3,2,68,66,[67,[-1,-2,-3,-4,-5,-6,-7,-8]]],[[18,[20,65]]],69,69,69,69,69,69,69,69],[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,63,[]],[[[67,[-1,-2,-3,-4,-5,-6,-7,-8]],-4,-8,31,[4,[2]],40,70,[4,[71]]],[[18,[3,[35,[20]]]]],69,69,69,69,69,69,69,69],[[[67,[-1,-2,-3,-4,-5,-6,-7,-8]],-4,-8,31,[4,[2]],40,7,70,[4,[71]]],[[18,[3,[35,[20]]]]],69,69,69,69,69,69,69,69],[[[67,[-1,-2,-3,-4,-5,-6,-7,-8]],-4,-8,31,[4,[2]],40,7,70,72,[4,[71]]],[[18,[3,[35,[20]]]]],69,69,69,69,69,69,69,69],[[[67,[-1,-2,-3,-4,-5,-6,-7,-8]],-4,-8,31,[4,[2]],10,70,[4,[71]]],[[18,[3,[35,[20]]]]],69,69,69,69,69,69,69,69],[[[67,[-1,-2,-3,-4,-5,-6,-7,-8]],-4,-8,31,[4,[2]],10,7,70,[4,[71]]],[[18,[3,[35,[20]]]]],69,69,69,69,69,69,69,69],[[[4,[2]],[4,[72]],40,70,[44,[73]],-1,-2,-3,31,[4,[71]],7],[[18,[3,[35,[20]]]]],69,69,69],[[[4,[2]],[4,[72]],70,10,[44,[73]],-1,-2,-3,31,[4,[71]],7],[[18,[3,[35,[20]]]]],69,69,69]],"c":[],"p":[[3,"InvoiceBuilder",0],[15,"u64"],[3,"Invoice",0],[4,"Option",641],[3,"RawInvoice",0],[3,"ExpiryTime",0],[3,"Duration",642],[3,"PositiveTimestamp",0],[3,"SystemTime",643],[3,"Sha256",0],[15,"usize"],[3,"Description",0],[3,"PayeePubKey",0],[3,"MinFinalCltvExpiryDelta",0],[4,"Fallback",0],[3,"PrivateRoute",0],[4,"CreationError",0],[4,"Result",644],[8,"FnOnce",645],[15,"tuple"],[4,"SemanticError",0],[3,"SignedRawInvoice",0],[15,"bool"],[4,"ParseError",0],[4,"ParseOrSemanticError",0],[8,"Clone",646],[4,"InvoiceDescription",0],[3,"RawHrp",0],[3,"RawDataPart",0],[4,"SiPrefix",0],[4,"Currency",0],[4,"RawTaggedField",0],[4,"TaggedField",0],[3,"InvoiceSignature",0],[4,"SignOrCreationError",0],[15,"str"],[3,"PublicKey",647],[3,"RecoverableSignature",648],[3,"RouteHint",649],[3,"String",650],[3,"Hash",651],[8,"PartialEq",652],[3,"Address",653],[3,"Vec",654],[6,"InvoiceFeatures",655],[3,"Formatter",656],[6,"Result",656],[8,"Debug",656],[3,"Error",656],[4,"Error",657],[4,"Error",658],[3,"ParseIntError",659],[3,"Utf8Error",660],[4,"Network",661],[3,"u5",657],[15,"slice"],[8,"Hasher",662],[15,"u8"],[15,"array"],[3,"Iter",663],[3,"FilterMap",664],[3,"PaymentSecret",665],[3,"TypeId",666],[8,"WriteBase32",657],[4,"PaymentError",616],[4,"Retry",667],[3,"ChannelManager",668],[3,"PaymentId",668],[8,"Deref",669],[15,"u32"],[15,"u16"],[3,"PaymentHash",665],[3,"PhantomRouteHints",668],[13,"SegWitProgram",603]]},\
"linkify":{"doc":"Linkify finds links such as URLs and email addresses in …","t":"NDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Email","Link","LinkFinder","LinkKind","Links","Span","Spans","Url","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","email_domain_must_have_dot","end","end","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","kind","kind","kinds","links","new","next","next","spans","start","start","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","url_must_have_scheme"],"q":[[0,"linkify"],[77,"core::fmt"],[78,"core::fmt"],[79,"core::result"],[80,"core::any"]],"d":["E-mail links like “foo@example.org”","A link found in the input text.","A configured link finder.","The type of link that was found.","Iterator for finding links.","Span within the input text.","Iterator over spans.","URL links like “http://example.org”.","Get the link text as a <code>str</code>.","Get the span text as a <code>str</code>.","","","","","","","","","","","","","","Require the domain parts of email addresses to have at …","The end index of the link.","The end index of the span.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The type of the link.","The type of link included in the span, if any.","Restrict the kinds of links that should be found to the …","Find links in the specified input text.","Create a new link finder with the default options for …","","","Iterate over spans in the specified input text.","The start index of the link within the input text.","The start index of the span within the input text.","","","","","","","","","","","","","","","","","","","Set whether URLs must have a scheme, defaults to <code>true</code>."],"i":[7,0,0,0,0,0,0,7,1,3,8,11,1,7,3,4,8,11,1,7,3,4,4,4,1,3,7,7,8,11,1,7,3,4,8,11,1,7,3,4,8,11,1,7,3,4,8,11,1,3,4,4,4,8,11,4,1,3,8,11,1,7,3,4,8,11,1,7,3,4,8,11,1,7,3,4,4],"f":[0,0,0,0,0,0,0,0,[1,2],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],4],[[4,5],4],[1,6],[3,6],[[7,7],5],[[-1,-2],5,[],[]],[[8,9],10],[[11,9],10],[[1,9],10],[[7,9],10],[[3,9],10],[[4,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,7],[3,[[12,[7]]]],[[4,[13,[7]]],4],[[4,2],8],[[],4],[8,[[12,[1]]]],[11,[[12,[3]]]],[[4,2],11],[1,6],[3,6],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[4,5],4]],"c":[],"p":[[3,"Link",0],[15,"str"],[3,"Span",0],[3,"LinkFinder",0],[15,"bool"],[15,"usize"],[4,"LinkKind",0],[3,"Links",0],[3,"Formatter",77],[6,"Result",77],[3,"Spans",0],[4,"Option",78],[15,"slice"],[4,"Result",79],[3,"TypeId",80]]},\
"log":{"doc":"A lightweight logging facade.","t":"NNNNNNEEIDDNDDDRDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLKLLLLLLLOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLKOOFLLFLLLLLLLLLLLLLLFFFFLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[170,"core::fmt"],[171,"core::cmp"],[172,"core::option"],[173,"core::fmt"],[174,"core::hash"],[175,"core::iter::traits::iterator"],[176,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,16,11,4,6,1,3,8,7,16,11,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,21,4,4,6,6,8,7,11,0,1,3,1,3,21,4,4,6,6,1,3,8,7,16,16,11,11,4,6,1,3,8,7,16,11,4,6,4,6,8,7,0,4,6,1,3,8,7,16,11,4,6,1,3,8,7,1,3,21,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,16,11,4,6,1,3,8,7,16,11,4,6,1,3,8,7,16,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[[-1,8],10,[]],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[-1,13,[]],[[4,14],15],[[4,14],15],[[6,14],15],[[6,14],15],[[1,14],15],[[3,14],15],[[8,14],15],[[7,14],15],[[16,14],15],[[16,14],15],[[11,14],15],[[11,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[17,[4]]]],[5,[[17,[6]]]],[[4,-1],13,18],[[6,-1],13,18],[[8,-1],13,18],[[7,-1],13,18],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[19]]]],[[],[[0,[19]]]],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[20]]]],[[3,[12,[20]]],3],[[-1,1],13,[]],0,0,[[],21],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[21,[[17,[13,16]]]],[21,[[17,[13,16]]]],[6,13],[6,13],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],0],"c":[],"p":[[3,"Record",0],[3,"Arguments",170],[3,"RecordBuilder",0],[4,"Level",0],[15,"str"],[4,"LevelFilter",0],[3,"MetadataBuilder",0],[3,"Metadata",0],[4,"Ordering",171],[15,"bool"],[3,"ParseLevelError",0],[4,"Option",172],[15,"tuple"],[3,"Formatter",170],[6,"Result",170],[3,"SetLoggerError",0],[4,"Result",173],[8,"Hasher",174],[8,"Iterator",175],[15,"u32"],[8,"Log",0],[3,"TypeId",176]]},\
"memchr":{"doc":"This library provides heavily optimized routines for …","t":"DDDALLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFAFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLAAFFFFAAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIDLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLNDDDDDNELLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLL","n":["Memchr","Memchr2","Memchr3","arch","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","all","x86_64","is_equal","is_equal_raw","is_prefix","is_suffix","memchr","packedpair","rabinkarp","shiftor","twoway","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","iter","iter","iter","new","new","new","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","HeuristicFrequencyRank","Pair","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find_prefilter","fmt","fmt","from","from","index1","index2","into","into","new","new","pair","rank","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_indices","with_pair","with_ranker","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","find_raw","fmt","fmt","from","from","into","into","new","new","rfind","rfind_raw","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Finder","borrow","borrow_mut","find","fmt","from","into","new","try_from","try_into","type_id","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","fmt","fmt","from","from","into","into","new","new","rfind","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","avx2","sse2","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_forward_with_ranker","build_reverse","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","find","find","find_iter","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","needle","needle","new","new","new","next","next","prefilter","rfind","rfind","rfind_iter","rfind_iter","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"memchr"],[66,"memchr::arch"],[68,"memchr::arch::all"],[77,"memchr::arch::all::memchr"],[182,"memchr::arch::all::packedpair"],[217,"memchr::arch::all::rabinkarp"],[247,"memchr::arch::all::shiftor"],[258,"memchr::arch::all::twoway"],[286,"memchr::arch::x86_64"],[288,"memchr::arch::x86_64::avx2"],[290,"memchr::arch::x86_64::avx2::memchr"],[401,"memchr::arch::x86_64::avx2::packedpair"],[420,"memchr::arch::x86_64::sse2"],[422,"memchr::arch::x86_64::sse2::memchr"],[533,"memchr::arch::x86_64::sse2::packedpair"],[552,"memchr::memmem"],[650,"core::fmt"],[651,"core::fmt"],[652,"core::iter::adapters::rev"],[653,"core::result"],[654,"core::any"],[655,"core::marker"],[656,"core::convert"]],"d":["An iterator over all occurrences of a single byte in a …","An iterator over all occurrences of two possible bytes in …","An iterator over all occurrences of three possible bytes …","A module with low-level architecture dependent routines.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Search for the first occurrence of a byte in a slice.","Search for the first occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the first occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Search for the last occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the last occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","","","","","","","","","","","","","","","","","","","","","","Contains architecture independent routines.","Vector algorithms for the <code>x86_64</code> target.","Compare corresponding bytes in <code>x</code> and <code>y</code> for equality.","Compare <code>n</code> bytes at the given pointers for equality.","Returns true if and only if <code>needle</code> is a prefix of <code>haystack</code>.","Returns true if and only if <code>needle</code> is a suffix of <code>haystack</code>.","Provides architecture independent implementations of <code>memchr</code>…","Provides an architecture independent implementation of the …","An implementation of the Rabin-Karp substring search …","An implementation of the Shift-Or substring search …","An implementation of the Two-Way substring search algorithm…","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of the needle in the given …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of one of the …","Returns an iterator over all occurrences of one of the …","Create a new searcher that finds occurrences of the byte …","Create a new searcher that finds occurrences of the two …","Create a new searcher that finds occurrences of the three …","","","","","","","Return the last occurrence of the needle in the given …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","An architecture independent “packed pair” finder.","This trait allows the user to customize the heuristic used …","A pair of byte offsets into a needle to use as a predicate.","","","","","","","","","Run this finder on the given haystack as a prefilter.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first offset of the pair.","Returns the second offset of the pair.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new prefilter that reports possible locations …","Create a new pair of offsets from the given needle.","Returns the pair of offsets (into the needle) used to …","Return the heuristic frequency rank of the given byte. A …","","","","","","","","","Create a new pair using the offsets given for the needle …","Create a new prefilter using the pair given.","Create a new pair of offsets from the given needle and …","A forward substring searcher using the Rabin-Karp …","A reverse substring searcher using the Rabin-Karp …","","","","","","","","","Return the first occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>find</code>, but accepts and returns raw pointers.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new Rabin-Karp forward searcher for the given …","Create a new Rabin-Karp reverse searcher for the given …","Return the last occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","A forward substring searcher using the Shift-Or algorithm.","","","Return the first occurrence of the needle given to …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new Shift-Or forward searcher for the given <code>needle</code>…","","","","A forward substring searcher that uses the Two-Way …","A reverse substring searcher that uses the Two-Way …","","","","","","","","","Returns the first occurrence of <code>needle</code> in the given …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a searcher that finds occurrences of the given …","Create a searcher that finds occurrences of the given …","Returns the last occurrence of <code>needle</code> in the given <code>haystack</code>…","","","","","","","","","Algorithms for the <code>x86_64</code> target using 256-bit vectors via …","Algorithms for the <code>x86_64</code> target using 128-bit vectors via …","This module defines 256-bit vector implementations of …","A 256-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 256-bit vector …","","","","","Execute a search using AVX2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","This module defines 128-bit vector implementations of …","A 128-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 128-bit vector …","","","","","Execute a search using SSE2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a forward finder using the given needle and a custom …","Build a reverse finder using the given needle from the …","","","","","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all non-overlapping occurrences …","Returns an iterator over all occurrences of a substring in …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert this iterator into its owned variant, such that it …","Convert this iterator into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","Configure the prefilter setting for the finder.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all non-overlapping …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,15,15,17,19,15,17,19,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,16,18,20,15,17,19,15,17,19,16,18,20,16,18,20,15,17,19,15,17,19,16,18,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,0,0,0,21,22,21,22,21,22,21,22,21,21,22,21,22,22,22,21,22,21,22,21,23,21,22,21,22,21,22,21,22,22,21,22,0,0,24,25,24,25,24,25,24,25,24,24,24,25,24,25,24,25,24,25,25,25,24,25,24,25,24,25,24,25,0,26,26,26,26,26,26,26,26,26,26,0,0,27,28,27,28,27,28,27,28,27,27,28,27,28,27,28,27,28,28,27,28,27,28,27,28,27,28,0,0,0,0,0,0,0,0,0,0,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,29,29,31,33,29,31,33,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,30,32,34,29,31,33,29,31,33,29,31,33,29,31,33,30,32,34,30,32,34,29,31,33,29,31,33,30,32,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,36,36,38,40,36,38,40,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,37,39,41,36,38,40,36,38,40,36,38,40,36,38,40,37,39,41,37,39,41,36,38,40,36,38,40,37,39,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,48,0,0,0,0,0,48,0,43,44,48,49,50,43,44,45,48,49,50,43,44,45,45,45,45,48,43,44,45,48,43,44,45,48,45,0,43,0,43,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,49,50,49,50,43,44,43,44,43,44,45,49,50,45,0,44,0,44,49,48,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[1,5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],3],[[8,[9,[8]]],1],0,[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[11,[2]]]],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],[[11,[3]]]],[[8,[9,[8]]],[[11,[1]]]],[[8,[9,[8]]],1],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],3],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[4,[5,[10,[5]]]]]],[2,[[4,[5,[10,[5]]]]]],[3,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,[[[9,[8]],[9,[8]]],14],[[8,8,5],14],[[[9,[8]],[9,[8]]],14],[[[9,[8]],[9,[8]]],14],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[15,[9,[8]]],5],[16,5],[[15,8,8],5],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[[15,6],7],[[16,6],7],[[17,6],7],[[18,6],7],[[19,6],7],[[20,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,[9,[8]]],16],[[17,[9,[8]]],18],[[19,[9,[8]]],20],[8,15],[[8,8],17],[[8,8,8],19],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[16,[[4,[5,[10,[5]]]]]],[18,[[4,[5,[10,[5]]]]]],[20,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[22,22],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[21,[9,[8]]],[[10,[5]]]],[[21,6],7],[[22,6],7],[-1,-1,[]],[-1,-1,[]],[22,8],[22,8],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[21]]]],[[[9,[8]]],[[10,[22]]]],[21,22],[[-1,8],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[9,[8]],8,8],[[10,[22]]]],[[[9,[8]],22],[[10,[21]]]],[[[9,[8]],-1],[[10,[22]]],23],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[25,25],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[24,[9,[8]],[9,[8]]],[[10,[5]]]],[[24,8,8,8,8],[[10,[8]]]],[[24,6],7],[[25,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],24],[[[9,[8]]],25],[[25,[9,[8]],[9,[8]]],[[10,[5]]]],[[25,8,8,8,8],[[10,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[26,[9,[8]]],[[10,[5]]]],[[26,6],7],[-1,-1,[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[26]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[27,[9,[8]],[9,[8]]],[[10,[5]]]],[[27,6],7],[[28,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],27],[[[9,[8]]],28],[[28,[9,[8]],[9,[8]]],[[10,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[29,[9,[8]]],5],[30,5],[[29,8,8],5],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[[29,6],7],[[30,6],7],[[31,6],7],[[32,6],7],[[33,6],7],[[34,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[29,[9,[8]]],30],[[31,[9,[8]]],32],[[33,[9,[8]]],34],[8,[[10,[29]]]],[[8,8],[[10,[31]]]],[[8,8,8],[[10,[33]]]],[8,29],[[8,8],31],[[8,8,8],33],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[30,[[4,[5,[10,[5]]]]]],[32,[[4,[5,[10,[5]]]]]],[34,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],4,[],[]],[[35,[9,[8]],[9,[8]]],[[10,[5]]]],[[35,[9,[8]]],[[10,[5]]]],[[35,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[35,5],[[[9,[8]]],[[10,[35]]]],[35,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[35]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[36,[9,[8]]],5],[37,5],[[36,8,8],5],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[[36,6],7],[[37,6],7],[[38,6],7],[[39,6],7],[[40,6],7],[[41,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[36,[9,[8]]],37],[[38,[9,[8]]],39],[[40,[9,[8]]],41],[8,[[10,[36]]]],[[8,8],[[10,[38]]]],[[8,8,8],[[10,[40]]]],[8,36],[[8,8],38],[[8,8,8],40],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[37,[[4,[5,[10,[5]]]]]],[39,[[4,[5,[10,[5]]]]]],[41,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[42,42],[[-1,-2],4,[],[]],[[42,[9,[8]],[9,[8]]],[[10,[5]]]],[[42,[9,[8]]],[[10,[5]]]],[[42,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[42,5],[[[9,[8]]],[[10,[42]]]],[42,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[42]]]],0,0,0,0,0,0,0,0,[43,43],[44,44],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[45,-1],43,[46,[47,[[9,[8]]]]]],[[45,-1,-2],43,23,[46,[47,[[9,[8]]]]]],[[45,-1],44,[46,[47,[[9,[8]]]]]],[48,48],[43,43],[44,44],[45,45],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],48],[[],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[43,[9,[8]]],[[10,[5]]]],[[[9,[8]],-1],49,[46,[47,[[9,[8]]]]]],[[43,[9,[8]]],49],[[48,6],7],[[49,6],7],[[50,6],7],[[43,6],7],[[44,6],7],[[45,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[43,43],[44,44],[43,[[9,[8]]]],[44,[[9,[8]]]],[-1,43,[46,[47,[[9,[8]]]]]],[-1,44,[46,[47,[[9,[8]]]]]],[[],45],[49,[[10,[5]]]],[50,[[10,[5]]]],[[45,48],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[44,-1],[[10,[5]]],[[47,[[9,[8]]]]]],[[[9,[8]],-1],50,[46,[47,[[9,[8]]]]]],[[44,[9,[8]]],50],[49,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[3,"Memchr",0],[3,"Memchr2",0],[3,"Memchr3",0],[15,"tuple"],[15,"usize"],[3,"Formatter",650],[6,"Result",650],[15,"u8"],[15,"slice"],[4,"Option",651],[3,"Rev",652],[4,"Result",653],[3,"TypeId",654],[15,"bool"],[3,"One",77],[3,"OneIter",77],[3,"Two",77],[3,"TwoIter",77],[3,"Three",77],[3,"ThreeIter",77],[3,"Finder",182],[3,"Pair",182],[8,"HeuristicFrequencyRank",182],[3,"Finder",217],[3,"FinderRev",217],[3,"Finder",247],[3,"Finder",258],[3,"FinderRev",258],[3,"One",290],[3,"OneIter",290],[3,"Two",290],[3,"TwoIter",290],[3,"Three",290],[3,"ThreeIter",290],[3,"Finder",401],[3,"One",422],[3,"OneIter",422],[3,"Two",422],[3,"TwoIter",422],[3,"Three",422],[3,"ThreeIter",422],[3,"Finder",533],[3,"Finder",552],[3,"FinderRev",552],[3,"FinderBuilder",552],[8,"Sized",655],[8,"AsRef",656],[4,"Prefilter",552],[3,"FindIter",552],[3,"FindRevIter",552]]},\
"mime":{"doc":"Mime","t":"RRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRRRRRRDDDRRRRRDRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["APPLICATION","APPLICATION_JAVASCRIPT","APPLICATION_JAVASCRIPT_UTF_8","APPLICATION_JSON","APPLICATION_MSGPACK","APPLICATION_OCTET_STREAM","APPLICATION_PDF","APPLICATION_WWW_FORM_URLENCODED","AUDIO","BASIC","BMP","BOUNDARY","CHARSET","CSS","CSV","EVENT_STREAM","FONT","FONT_WOFF","FONT_WOFF2","FORM_DATA","FromStrError","GIF","HTML","IMAGE","IMAGE_BMP","IMAGE_GIF","IMAGE_JPEG","IMAGE_PNG","IMAGE_STAR","IMAGE_SVG","JAVASCRIPT","JPEG","JSON","MESSAGE","MODEL","MP4","MPEG","MSGPACK","MULTIPART","MULTIPART_FORM_DATA","Mime","MimeIter","Name","OCTET_STREAM","OGG","PDF","PLAIN","PNG","Params","STAR","STAR_STAR","SVG","TEXT","TEXT_CSS","TEXT_CSS_UTF_8","TEXT_CSV","TEXT_CSV_UTF_8","TEXT_EVENT_STREAM","TEXT_HTML","TEXT_HTML_UTF_8","TEXT_JAVASCRIPT","TEXT_PLAIN","TEXT_PLAIN_UTF_8","TEXT_STAR","TEXT_TAB_SEPARATED_VALUES","TEXT_TAB_SEPARATED_VALUES_UTF_8","TEXT_VCARD","TEXT_XML","UTF_8","VCARD","VIDEO","WOFF","WOFF2","WWW_FORM_URLENCODED","XML","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","description","eq","eq","eq","eq","equivalent","equivalent","essence_str","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","get_param","hash","hash","into","into","into","into","into","into_iter","into_iter","new","next","next","params","partial_cmp","partial_cmp","size_hint","subtype","suffix","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"mime"],[159,"core::cmp"],[160,"core::fmt"],[161,"core::fmt"],[162,"core::option"],[163,"core::cmp"],[164,"alloc::string"],[165,"core::any"]],"d":["application","<code>application/javascript</code>","<code>application/javascript; charset=utf-8</code>","<code>application/json</code>","<code>application/msgpack</code>","<code>application/octet-stream</code>","<code>application/pdf</code>","<code>application/x-www-form-urlencoded</code>","audio","basic","bmp","boundary","charset","css","csv","event-stream","font","<code>font/woff</code>","<code>font/woff2</code>","form-data","An error when parsing a <code>Mime</code> from a string.","gif","html","image","<code>image/bmp</code>","<code>image/gif</code>","<code>image/jpeg</code>","<code>image/png</code>","<code>image/*</code>","<code>image/svg+xml</code>","javascript","jpeg","json","message","model","mp4","mpeg","msgpack","multipart","<code>multipart/form-data</code>","A parsed mime or media type.","An iterator of parsed mime","A section of a <code>Mime</code>.","octet-stream","ogg","pdf","plain","png","An iterator over the parameters of a MIME.","","<code>*/*</code>","svg","text","<code>text/css</code>","<code>text/css; charset=utf-8</code>","<code>text/csv</code>","<code>text/csv; charset=utf-8</code>","<code>text/event-stream</code>","<code>text/html</code>","<code>text/html; charset=utf-8</code>","<code>text/javascript</code>","<code>text/plain</code>","<code>text/plain; charset=utf-8</code>","<code>text/*</code>","<code>text/tab-separated-values</code>","<code>text/tab-separated-values; charset=utf-8</code>","<code>text/vcard</code>","<code>text/xml</code>","utf-8","vcard","video","woff","woff2","x-www-form-urlencoded","xml","","","Get the value of this <code>Name</code> as a string.","","","","","","","","","","","","","","","","","","","","","","","","","","Return a <code>&amp;str</code> of the Mime’s “essence”.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Look up a parameter by name.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","A new iterator over mimes or media types","","","Returns an iterator over the parameters.","","","","Get the subtype of this <code>Mime</code>.","Get an optional +suffix for this <code>Mime</code>.","","","","","","","","","","","","","","","","","Get the top level media type for this <code>Mime</code>.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,9,1,4,3,7,9,1,4,3,7,1,4,3,1,4,3,1,3,7,1,1,3,3,1,3,1,9,1,1,4,3,3,7,7,9,1,4,3,7,1,1,1,3,9,1,4,3,7,9,4,4,9,4,1,1,3,9,1,1,1,4,3,1,3,7,9,1,4,3,7,9,1,4,3,7,1,9,1,4,3,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[4,4],[3,3],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,1],6],[[3,3],6],[7,2],[[1,1],8],[[1,2],8],[[3,2],8],[[3,3],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[1,2],[[9,10],11],[[1,10],11],[[1,10],11],[[4,10],11],[[3,10],11],[[3,10],11],[[7,10],11],[[7,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[12,[1]]]],[[1,-1],[[13,[3]]],[[14,[3]]]],[[1,-1],5,15],[[3,-1],5,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,4],[9,[[13,[[5,[3,3]]]]]],[4,13],[1,9],[[1,1],[[13,[6]]]],[[3,3],[[13,[6]]]],[9,[[5,[16,[13,[16]]]]]],[1,3],[1,[[13,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[1,3],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[3,"Mime",0],[15,"str"],[3,"Name",0],[3,"MimeIter",0],[15,"tuple"],[4,"Ordering",159],[3,"FromStrError",0],[15,"bool"],[3,"Params",0],[3,"Formatter",160],[6,"Result",160],[4,"Result",161],[4,"Option",162],[8,"PartialEq",159],[8,"Hasher",163],[15,"usize"],[3,"String",164],[3,"TypeId",165]]},\
"mio":{"doc":"Mio is a fast, low-level I/O library for Rust focusing on …","t":"SCDDSDDSDLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLALLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLALDDDILLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLALLLLLDDLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLL","n":["AIO","Events","Interest","Poll","READABLE","Registry","Token","WRITABLE","Waker","add","as_raw_fd","as_raw_fd","bitor","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deregister","eq","eq","equivalent","equivalent","event","features","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","guide","hash","into","into","into","into","into","is_aio","is_lio","is_priority","is_readable","is_writable","net","new","new","partial_cmp","partial_cmp","poll","register","registry","remove","reregister","to_owned","to_owned","try_clone","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unix","wake","Event","Events","Iter","Source","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","count","deregister","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","is_aio","is_empty","is_error","is_lio","is_priority","is_read_closed","is_readable","is_writable","is_write_closed","iter","next","register","reregister","size_hint","to_owned","to_owned","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","SocketAddr","TcpListener","TcpStream","UdpSocket","UnixDatagram","UnixListener","UnixStream","accept","accept","as_abstract_namespace","as_pathname","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","bind","bind","bind","bind","bind_addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","connect","connect","connect","connect","connect_addr","deregister","deregister","deregister","deregister","deregister","deregister","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_std","from_std","from_std","from_std","from_std","from_std","into","into","into","into","into","into","into","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","is_unnamed","join_multicast_v4","join_multicast_v6","leave_multicast_v4","leave_multicast_v6","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","nodelay","only_v6","pair","pair","peek","peek","peek_from","peer_addr","peer_addr","peer_addr","peer_addr","read","read","read","read","read_vectored","read_vectored","read_vectored","read_vectored","recv","recv","recv_from","recv_from","register","register","register","register","register","register","reregister","reregister","reregister","reregister","reregister","reregister","send","send","send_to","send_to","set_broadcast","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_ttl","set_ttl","set_ttl","shutdown","shutdown","shutdown","take_error","take_error","take_error","take_error","take_error","take_error","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_io","try_io","try_io","try_io","ttl","ttl","ttl","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbound","write","write","write","write","write_vectored","write_vectored","write_vectored","write_vectored","SourceFd","borrow","borrow_mut","deregister","fmt","from","into","pipe","register","reregister","try_from","try_into","type_id","Receiver","Sender","as_raw_fd","as_raw_fd","borrow","borrow","borrow_mut","borrow_mut","deregister","deregister","flush","flush","fmt","fmt","from","from","from","from","from","from_raw_fd","from_raw_fd","into","into","into_raw_fd","into_raw_fd","new","read","read","read_vectored","read_vectored","register","register","reregister","reregister","set_nonblocking","set_nonblocking","try_from","try_from","try_into","try_into","try_io","try_io","type_id","type_id","write","write","write_vectored","write_vectored"],"q":[[0,"mio"],[89,"mio::event"],[145,"mio::net"],[343,"mio::unix"],[356,"mio::unix::pipe"],[404,"std::os::fd::raw"],[405,"core::cmp"],[406,"std::io::error"],[407,"core::marker"],[408,"core::fmt"],[409,"core::fmt"],[410,"core::option"],[411,"core::time"],[412,"core::result"],[413,"core::any"],[414,"core::net::socket_addr"],[415,"std::path"],[416,"core::convert"],[417,"std::net::tcp"],[418,"std::net::tcp"],[419,"std::os::unix::net::datagram"],[420,"std::os::unix::net::listener"],[421,"std::os::unix::net::stream"],[422,"core::net::ip_addr"],[423,"core::net::ip_addr"],[424,"std::net"],[425,"std::io::error"],[426,"std::io"],[427,"std::process"]],"d":["Returns a <code>Interest</code> set representing AIO completion …","","Interest used in registering.","Polls for readiness events on all registered values.","Returns a <code>Interest</code> set representing readable interests.","Registers I/O resources.","Associates readiness events with <code>event::Source</code>s.","Returns a <code>Interest</code> set representing writable interests.","Waker allows cross-thread waking of <code>Poll</code>.","Add together two <code>Interest</code>.","","","","","","","","","","","","","","","","","","","","","Deregister an <code>event::Source</code> with the <code>Poll</code> instance.","","","","","Readiness event types and utilities.","Mio’s optional features.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getting started guide.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if <code>Interest</code> contains AIO readiness.","Returns true if <code>Interest</code> contains LIO readiness.","Returns true if <code>Interest</code> contains priority readiness.","Returns true if the value includes readable readiness.","Returns true if the value includes writable readiness.","Networking primitives.","Return a new <code>Poll</code> handle.","Create a new <code>Waker</code>.","","","Wait for readiness events","Register an <code>event::Source</code> with the <code>Poll</code> instance.","Create a separate <code>Registry</code> which can be used to register …","Removes <code>other</code> <code>Interest</code> from <code>self</code>.","Re-register an <code>event::Source</code> with the <code>Poll</code> instance.","","","Creates a new independently owned <code>Registry</code>.","","","","","","","","","","","","","","","","Unix only extensions.","Wake up the <code>Poll</code> associated with this <code>Waker</code>.","A readiness event.","A collection of readiness events.","<code>Events</code> iterator.","An event source that may be registered with <code>Registry</code>.","","","","","","","Returns the number of <code>Event</code> values that <code>self</code> can hold.","Clearing all <code>Event</code> values from container explicitly.","","","","","","Deregister <code>self</code> from the given <code>Registry</code> instance.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the event contains AIO readiness.","Returns <code>true</code> if <code>self</code> contains no <code>Event</code> values.","Returns true if the event contains error readiness.","Returns true if the event contains LIO readiness.","Returns true if the event contains priority readiness.","Returns true if the event contains read closed readiness.","Returns true if the event contains readable readiness.","Returns true if the event contains writable readiness.","Returns true if the event contains write closed readiness.","Returns an iterator over the <code>Event</code> values.","","Register <code>self</code> with the given <code>Registry</code> instance.","Re-register <code>self</code> with the given <code>Registry</code> instance.","","","","Returns the event’s token.","","","","","","","","","","Return a new <code>Events</code> capable of holding up to <code>capacity</code> …","An address associated with a <code>mio</code> specific Unix socket.","A structure representing a socket server","A non-blocking TCP stream between a local socket and a …","A User Datagram Protocol socket.","A Unix datagram socket.","A non-blocking Unix domain socket server.","A non-blocking Unix stream socket.","Accepts a new <code>TcpStream</code>.","Accepts a new incoming connection to this listener.","Returns the contents of this address if it is an abstract …","Returns the contents of this address if it is a <code>pathname</code> …","","","","","","","Convenience method to bind a new TCP listener to the …","Creates a UDP socket from the given address.","Creates a Unix datagram socket bound to the given path.","Creates a new <code>UnixListener</code> bound to the specified socket …","Creates a new <code>UnixListener</code> bound to the specified socket …","","","","","","","","","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","Create a new TCP stream and issue a non-blocking connect …","Connects the UDP socket setting the default destination …","Connects the socket to the specified address.","Connects to the socket named by <code>path</code>.","Connects to the socket named by <code>address</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>RawFd</code> to a <code>TcpListener</code>.","Converts a <code>RawFd</code> to a <code>TcpStream</code>.","Converts a <code>RawFd</code> to a <code>UdpSocket</code>.","Converts a <code>RawFd</code> to a <code>UnixDatagram</code>.","Converts a <code>RawFd</code> to a <code>UnixListener</code>.","Converts a <code>RawFd</code> to a <code>UnixStream</code>.","Creates a new <code>TcpListener</code> from a standard <code>net::TcpListener</code>.","Creates a new <code>TcpStream</code> from a standard <code>net::TcpStream</code>.","Creates a new <code>UdpSocket</code> from a standard <code>net::UdpSocket</code>.","Creates a new <code>UnixDatagram</code> from a standard …","Creates a new <code>UnixListener</code> from a standard …","Creates a new <code>UnixStream</code> from a standard <code>net::UnixStream</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns <code>true</code> if the address is unnamed.","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Returns the local socket address of this listener.","Returns the socket address of the local half of this TCP …","Returns the socket address that this socket was created …","Returns the address of this socket.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Get the value of the <code>IPV6_V6ONLY</code> option on this socket.","Create an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","Receives data on the socket from the remote address to …","Receives data from the socket, without removing it from …","Receives data from the socket, without removing it from …","Returns the socket address of the remote peer of this TCP …","Returns the socket address of the remote peer this socket …","Returns the address of this socket’s peer.","Returns the socket address of the remote half of this …","","","","","","","","","Receives data from the socket previously bound with …","Receives data from the socket.","Receives data from the socket. On success, returns the …","Receives data from the socket.","","","","","","","","","","","","","Sends data on the socket to the address previously bound …","Sends data on the socket to the socket’s peer.","Sends data on the socket to the given address. On success, …","Sends data on the socket to the specified address.","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Shuts down the read, write, or both halves of this …","Shut down the read, write, or both halves of this …","Shuts down the read, write, or both halves of this …","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","","","","","","","","","","","","","","","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","","","Creates a Unix Datagram socket which is not bound to any …","","","","","","","","","Adapter for <code>RawFd</code> providing an <code>event::Source</code> …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Unix pipe.","","","","","","Receiving end of an Unix pipe.","Sending end of an Unix pipe.","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new non-blocking Unix pipe.","","","","","","","","","Set the <code>Sender</code> into or out of non-blocking mode.","Set the <code>Receiver</code> into or out of non-blocking mode.","","","","","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","","","","","",""],"i":[1,0,0,0,1,0,0,1,0,1,2,4,1,1,2,4,1,6,14,2,4,1,6,14,1,6,1,6,1,6,4,1,6,1,6,0,0,2,4,1,6,14,2,4,1,6,14,0,6,2,4,1,6,14,1,1,1,1,1,0,2,14,1,6,2,4,2,1,4,1,6,4,2,4,1,6,14,2,4,1,6,14,2,4,1,6,14,0,14,0,0,0,0,17,22,23,17,22,23,17,17,22,23,22,23,23,9,17,22,23,17,22,23,17,22,23,17,23,22,17,22,22,22,22,22,22,22,17,23,9,9,23,22,23,22,17,22,23,17,22,23,17,22,23,17,0,0,0,0,0,0,0,24,27,29,29,24,25,33,34,27,28,24,33,34,27,27,29,24,25,33,34,27,28,29,24,25,33,34,27,28,33,25,33,34,28,28,24,25,33,34,27,28,25,25,28,28,29,24,25,33,34,27,28,29,24,25,33,34,27,28,24,25,33,34,27,28,24,25,33,34,27,28,29,24,25,33,34,27,28,24,25,33,34,27,28,29,33,33,33,33,24,25,33,34,27,28,33,33,33,25,33,34,28,25,33,33,25,33,34,28,25,25,28,28,25,25,28,28,33,34,33,34,24,25,33,34,27,28,24,25,33,34,27,28,33,34,33,34,33,33,33,33,25,24,25,33,25,34,28,24,25,33,34,27,28,29,24,25,33,34,27,28,29,24,25,33,34,27,28,25,33,34,28,24,25,33,29,24,25,33,34,27,28,34,25,25,28,28,25,25,28,28,0,50,50,50,50,50,50,0,50,50,50,50,50,0,0,51,52,51,52,51,52,51,52,51,51,51,52,51,51,52,52,52,51,52,51,52,51,52,0,52,52,52,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,51,51,51],"f":[0,0,0,0,0,0,0,0,0,[[1,1],1],[2,3],[4,3],[[1,1],1],[[1,1],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[6,6],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,1],7],[[6,6],7],[[4,-1],[[8,[5]]],[9,10]],[[1,1],11],[[6,6],11],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,0,[[2,12],13],[[4,12],13],[[1,12],13],[[6,12],13],[[14,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[6,-1],5,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,11],[1,11],[1,11],[1,11],[1,11],0,[[],[[8,[2]]]],[[4,6],[[8,[14]]]],[[1,1],[[16,[7]]]],[[6,6],[[16,[7]]]],[[2,17,[16,[18]]],[[8,[5]]]],[[4,-1,6,1],[[8,[5]]],[9,10]],[2,4],[[1,1],[[16,[1]]]],[[4,-1,6,1],[[8,[5]]],[9,10]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[8,[4]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,[14,[[8,[5]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,21],[17,5],[22,22],[23,23],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[23,21],[[-1,4],[[8,[5]]],[]],[[17,12],13],[[22,12],13],[[23,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17],[-1,-2,[],[]],[22,11],[17,11],[22,11],[22,11],[22,11],[22,11],[22,11],[22,11],[22,11],[17,23],[23,16],[[-1,4,6,1],[[8,[5]]],[]],[[-1,4,6,1],[[8,[5]]],[]],[23,[[5,[21,[16,[21]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[22,6],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[21,17],0,0,0,0,0,0,0,[24,[[8,[[5,[25,26]]]]]],[27,[[8,[[5,[28,29]]]]]],[29,[[16,[[31,[30]]]]]],[29,[[16,[32]]]],[24,3],[25,3],[33,3],[34,3],[27,3],[28,3],[26,[[8,[24]]]],[26,[[8,[33]]]],[-1,[[8,[34]]],[[35,[32]]]],[-1,[[8,[27]]],[[35,[32]]]],[29,[[8,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,[[8,[11]]]],[26,[[8,[25]]]],[[33,26],[[8,[5]]]],[[34,-1],[[8,[5]]],[[35,[32]]]],[-1,[[8,[28]]],[[35,[32]]]],[29,[[8,[28]]]],[[24,4],[[8,[5]]]],[[25,4],[[8,[5]]]],[[33,4],[[8,[5]]]],[[34,4],[[8,[5]]]],[[27,4],[[8,[5]]]],[[28,4],[[8,[5]]]],[25,[[8,[5]]]],[25,[[8,[5]]]],[28,[[8,[5]]]],[28,[[8,[5]]]],[[29,12],13],[[24,12],13],[[25,12],13],[[33,12],13],[[34,12],13],[[27,12],13],[[28,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,24],[3,25],[3,33],[3,34],[3,27],[3,28],[36,24],[37,25],[38,33],[39,34],[40,27],[41,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,3],[25,3],[33,3],[34,3],[27,3],[28,3],[29,11],[[33,42,42],[[8,[5]]]],[[33,43,44],[[8,[5]]]],[[33,42,42],[[8,[5]]]],[[33,43,44],[[8,[5]]]],[24,[[8,[26]]]],[25,[[8,[26]]]],[33,[[8,[26]]]],[34,[[8,[29]]]],[27,[[8,[29]]]],[28,[[8,[29]]]],[33,[[8,[11]]]],[33,[[8,[11]]]],[33,[[8,[44]]]],[25,[[8,[11]]]],[33,[[8,[11]]]],[[],[[8,[[5,[34,34]]]]]],[[],[[8,[[5,[28,28]]]]]],[[25,[31,[30]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[[5,[21,26]]]]]],[25,[[8,[26]]]],[33,[[8,[26]]]],[34,[[8,[29]]]],[28,[[8,[29]]]],[[25,[31,[30]]],[[8,[21]]]],[[25,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[25,[31,[45]]],[[8,[21]]]],[[25,[31,[45]]],[[8,[21]]]],[[28,[31,[45]]],[[8,[21]]]],[[28,[31,[45]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[21]]]],[[34,[31,[30]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[[5,[21,26]]]]]],[[34,[31,[30]]],[[8,[[5,[21,29]]]]]],[[24,4,6,1],[[8,[5]]]],[[25,4,6,1],[[8,[5]]]],[[33,4,6,1],[[8,[5]]]],[[34,4,6,1],[[8,[5]]]],[[27,4,6,1],[[8,[5]]]],[[28,4,6,1],[[8,[5]]]],[[24,4,6,1],[[8,[5]]]],[[25,4,6,1],[[8,[5]]]],[[33,4,6,1],[[8,[5]]]],[[34,4,6,1],[[8,[5]]]],[[27,4,6,1],[[8,[5]]]],[[28,4,6,1],[[8,[5]]]],[[33,[31,[30]]],[[8,[21]]]],[[34,[31,[30]]],[[8,[21]]]],[[33,[31,[30]],26],[[8,[21]]]],[[34,[31,[30]],-1],[[8,[21]]],[[35,[32]]]],[[33,11],[[8,[5]]]],[[33,11],[[8,[5]]]],[[33,11],[[8,[5]]]],[[33,44],[[8,[5]]]],[[25,11],[[8,[5]]]],[[24,44],[[8,[5]]]],[[25,44],[[8,[5]]]],[[33,44],[[8,[5]]]],[[25,46],[[8,[5]]]],[[34,46],[[8,[5]]]],[[28,46],[[8,[5]]]],[24,[[8,[[16,[47]]]]]],[25,[[8,[[16,[47]]]]]],[33,[[8,[[16,[47]]]]]],[34,[[8,[[16,[47]]]]]],[27,[[8,[[16,[47]]]]]],[28,[[8,[[16,[47]]]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[25,-1],[[8,[-2]]],48,[]],[[33,-1],[[8,[-2]]],48,[]],[[34,-1],[[8,[-2]]],48,[]],[[28,-1],[[8,[-2]]],48,[]],[24,[[8,[44]]]],[25,[[8,[44]]]],[33,[[8,[44]]]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[],[[8,[34]]]],[[25,[31,[30]]],[[8,[21]]]],[[25,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[25,[31,[49]]],[[8,[21]]]],[[25,[31,[49]]],[[8,[21]]]],[[28,[31,[49]]],[[8,[21]]]],[[28,[31,[49]]],[[8,[21]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[50,4],[[8,[5]]]],[[50,12],13],[-1,-1,[]],[-1,-2,[],[]],0,[[50,4,6,1],[[8,[5]]]],[[50,4,6,1],[[8,[5]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,[51,3],[52,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[51,4],[[8,[5]]]],[[52,4],[[8,[5]]]],[51,[[8,[5]]]],[51,[[8,[5]]]],[[51,12],13],[[52,12],13],[-1,-1,[]],[53,51],[-1,-1,[]],[54,52],[55,52],[3,51],[3,52],[-1,-2,[],[]],[-1,-2,[],[]],[51,3],[52,3],[[],[[8,[[5,[51,52]]]]]],[[52,[31,[30]]],[[8,[21]]]],[[52,[31,[30]]],[[8,[21]]]],[[52,[31,[45]]],[[8,[21]]]],[[52,[31,[45]]],[[8,[21]]]],[[51,4,6,1],[[8,[5]]]],[[52,4,6,1],[[8,[5]]]],[[51,4,6,1],[[8,[5]]]],[[52,4,6,1],[[8,[5]]]],[[51,11],[[8,[5]]]],[[52,11],[[8,[5]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[51,-1],[[8,[-2]]],48,[]],[[52,-1],[[8,[-2]]],48,[]],[-1,20,[]],[-1,20,[]],[[51,[31,[30]]],[[8,[21]]]],[[51,[31,[30]]],[[8,[21]]]],[[51,[31,[49]]],[[8,[21]]]],[[51,[31,[49]]],[[8,[21]]]]],"c":[],"p":[[3,"Interest",0],[3,"Poll",0],[6,"RawFd",404],[3,"Registry",0],[15,"tuple"],[3,"Token",0],[4,"Ordering",405],[6,"Result",406],[8,"Source",89],[8,"Sized",407],[15,"bool"],[3,"Formatter",408],[6,"Result",408],[3,"Waker",0],[8,"Hasher",409],[4,"Option",410],[3,"Events",89],[3,"Duration",411],[4,"Result",412],[3,"TypeId",413],[15,"usize"],[3,"Event",89],[3,"Iter",89],[3,"TcpListener",145],[3,"TcpStream",145],[4,"SocketAddr",414],[3,"UnixListener",145],[3,"UnixStream",145],[3,"SocketAddr",145],[15,"u8"],[15,"slice"],[3,"Path",415],[3,"UdpSocket",145],[3,"UnixDatagram",145],[8,"AsRef",416],[3,"TcpListener",417],[3,"TcpStream",417],[3,"UdpSocket",418],[3,"UnixDatagram",419],[3,"UnixListener",420],[3,"UnixStream",421],[3,"Ipv4Addr",422],[3,"Ipv6Addr",422],[15,"u32"],[3,"IoSliceMut",423],[4,"Shutdown",424],[3,"Error",406],[8,"FnOnce",425],[3,"IoSlice",423],[3,"SourceFd",343],[3,"Sender",356],[3,"Receiver",356],[3,"ChildStdin",426],[3,"ChildStderr",426],[3,"ChildStdout",426]]},\
"nip44":{"doc":"","t":"NENNNNNNNNNLLLLFFLLLLLLLFLLLLLLLL","n":["Base64Decode","Error","HkdfLength","HmacLength","InvalidMac","InvalidPadding","MessageIsEmpty","MessageIsTooLong","UnknownVersion","UnsupportedFutureVersion","Utf8Decode","borrow","borrow_mut","clone","clone_into","decrypt","encrypt","eq","fmt","fmt","from","from","from","from","get_conversation_key","into","source","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"nip44"],[33,"alloc::string"],[34,"core::result"],[35,"core::fmt"],[36,"core::fmt"],[37,"alloc::string"],[38,"secp256k1::key"],[39,"secp256k1::key"],[40,"core::option"],[41,"core::any"]],"d":["Base64 Decode","","HKDF Length","HMAC Length","Invalid MAC","Invalid padding","Message is empty","Message is too long (max len 65536 - 128)","Unknown version","Unsupported future version","","","","","","Decrypt the base64 encrypted contents with a conversation …","Encrypt a plaintext message with a conversation key. The …","","","","Returns the argument unchanged.","","","","A conversation key is the long-term secret that two nostr …","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[[4,[3]],5],[[7,[6,1]]]],[[[4,[3]],5],[[7,[6,1]]]],[[1,1],8],[[1,9],10],[[1,9],10],[-1,-1,[]],[11,1],[12,1],[13,1],[[14,15],[[4,[3]]]],[-1,-2,[],[]],[1,[[17,[16]]]],[-1,-2,[],[]],[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Error",0],[15,"tuple"],[15,"u8"],[15,"array"],[15,"str"],[3,"String",33],[4,"Result",34],[15,"bool"],[3,"Formatter",35],[6,"Result",35],[4,"DecodeError",36],[3,"FromUtf8Error",33],[3,"InvalidLength",37],[3,"SecretKey",38],[3,"XOnlyPublicKey",38],[8,"Error",39],[4,"Option",40],[3,"TypeId",41]]},\
"nostr_types":{"doc":"This crate provides types for nostr protocol handling.","t":"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGEENNNNNNNNNNEENNNNNNNNNNNNDNNNNNNNNNDNNNNNENGNNNNNNNNNNDNENNENDENNNDNEDDNNNGDNDNNNNNNNNNNNNNNNNNNNDNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNGNDDNNGDNNNNNNENDNNNNNNNNNNNNNNNNNNNNDNNNGDDDNNDNNNNNNNNNNNNDDNNNNNNNNGDGDGDNGEEEGDNDNNNNNNNGDDNNNNDDDGDGDNDNNNDGNEENNNNNNNDDNNNNDNNNNNNNNENNNNNDNDNNNMMMLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLLMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLMMMLLMMMMMMMLLLLLLLLLLLLMMMMLLLLMMMMMMLLMLLMMMMMMMMMMMMMLLMMMLLMMLLMMMMMMMLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLMLLMMLLLLLMMLLMMLMLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM","n":["Addr","Address","Address","Address","AppSpecificData","AssertionFailed","Auth","Auth","Auth","Auth","Auth","Auth","Auth","Auth","AuthRequired","BadEncryptedMessage","BadgeAward","BadgeDefinition","Base64","Bech32","Blocked","BlockedRelaysList","BookmarkList","BookmarkSets","Calendar","CalendarEventRsvp","ChannelCreation","ChannelHideMessage","ChannelMessage","ChannelMetadata","ChannelMuteUser","ClassifiedListing","ClientMessage","ClientMessageV1","ClientMessageV2","Close","Close","Close","Closed","Closed","CommunityDefinition","CommunityList","CommunityPost","CommunityPostApproval","ContactList","ContentEncryptionAlgorithm","ContentSegment","ContentWarning","ContentWarning","ContentWarning","CreateUpdateProduct","CreateUpdateStall","Crypto","CurationSets","DateBasedCalendarEvent","DelegatedBy","Delegation","Delegation","Delegation","DelegationConditions","DmChat","DraftClassifiedListing","DraftLongFormContent","Duplicate","EmojiSets","Empty","Empty","Empty","EncryptedDirectMessage","EncryptedPrivateKey","Eose","Eose","Eose","Eose","Ephemeral","Error","Error","Event","Event","Event","Event","Event","Event","Event","Event","Event","Event","Event","EventAddr","EventAddr","EventDelegation","EventDeletion","EventInFuture","EventKind","EventKind","EventKindIterator","EventKindOrRange","EventParent","EventParent","EventParent","EventPointer","EventPointer","EventReference","EventV1","EventV2","Expiration","Expiration","Expiration","Fee","FeeV1","FileMetadata","Filter","Fmt","FollowSets","FromUtf8","GenericRepost","GenericSets","Geohash","Geohash","Geohash","GiftWrap","HandlerInformation","HandlerRecommendation","HashMismatch","Hashtag","Hashtag","Hashtag","HexDecode","Highlights","HttpAuth","Hyperlink","Id","Id","Id","IdHex","Identifier","Identifier","Identifier","InterestSets","InterestsList","Invalid","InvalidDelegation","InvalidEncryptedEvent","InvalidEncryptedPrivateKey","InvalidEventAddr","InvalidEventPointer","InvalidId","InvalidIdPrefix","InvalidLength","InvalidPrivateKey","InvalidProfile","InvalidPublicKey","InvalidPublicKeyPrefix","InvalidRecipient","InvalidUrl","InvalidUrlHost","InvalidUrlMissingAuthority","InvalidUrlScheme","InvalidUrlTlv","JobFeedback","JobRequest","JobResult","KeyOrSignature","KeySecurity","Kind","Kind","Kind","Label","LiveChatMessage","LiveEvent","LongFormContent","Medium","Metadata","Metadata","MetadataV1","MilliSatoshi","MuteList","Nip04","Nip05","Nip05V1","Nip44v1Padded","Nip44v1Unpadded","Nip44v2","Nonce","Nonce","Nonce","NostrBech32","NostrConnect","NostrUrl","NostrUrl","NotDelegated","Notice","Notice","Notice","Notice","Ok","Ok","Ok","Ok","Other","Other","Other","Other","OutOfRange","Pad","Parameter","Parameter","Parameter","ParseInt","PayRequestData","PinList","Plain","Pow","PreEvent","PreEventV1","PreEventV2","PrivateKey","PrivateKeyEncryption","ProblemTracker","Profile","Profile","ProfileBadges","Pubkey","Pubkey","Pubkey","Pubkey","PublicChatReserved45","PublicChatReserved46","PublicChatReserved47","PublicChatReserved48","PublicChatReserved49","PublicChatsList","PublicKey","PublicKeyHex","Range","RateLimited","Reaction","RecommendRelay","Reference","Reference","Reference","Relay","RelayFees","RelayFeesV1","RelayInformationDocument","RelayInformationDocumentV1","RelayLimitation","RelayLimitationV1","RelayList","RelayMessage","RelayMessageV1","RelayMessageV2","RelayMessageV3","RelayRetention","RelayRetentionV1","RelaySets","RelayUrl","Replaceable","Reporting","Repost","Req","Req","Req","Restricted","Rumor","RumorV1","RumorV2","Scrypt","Seal","SearchRelaysList","SerdeJson","ShatteredContent","Signature","SignatureHex","SimpleRelayList","SimpleRelayListV1","SimpleRelayUsage","SimpleRelayUsageV1","Slice","Span","Subject","Subject","Subject","SubscriptionId","Tag","TagReference","TagV1","TagV2","TextNote","Time","TimeBasedCalendarEvent","Timestamp","Title","Title","Title","UncheckedUrl","Unixtime","UnknownCipherVersion","UnknownEventKind","UnknownKeySecurity","Unpad","Url","Url","UserEmojiList","UserStatus","Utf8Error","WalletInfo","WalletRequest","WalletResponse","Weak","Why","WrongBech32","WrongDecryptionPassword","WrongEventKind","WrongLengthHexString","WrongLengthKindBytes","XOnlyPublicKey","Zap","ZapData","ZapGoal","ZapReceipt","ZapRequest","a","about","about","add","add","add_author","add_e_tag_ids","add_event_kind","add_id","add_p_tag_public_key","add_tweak","admission","admission","allocated","allows_nostr","amount","amount","amount","as_bech32_string","as_bech32_string","as_bech32_string","as_bech32_string","as_bech32_string","as_bech32_string","as_bech32_string","as_bech32_string","as_bech32_string","as_bytes","as_c_ptr","as_hex_string","as_hex_string","as_hex_string","as_hex_string","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_c_ptr","as_mut_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","as_str","as_str","as_str","as_str","as_string","as_url_crate_url","as_url_crate_url","as_xonly_public_key","augments_feed_related","auth_required","auth_required","author","author","authors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callback","client","client","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_fast_unstable","contact","contact","content","content","content","content","content","content","content","content","content","content_warning","content_warning","count","count","created_after","created_at","created_at","created_at","created_at","created_at","created_at","created_at","created_at","created_at","created_before","d","d","decrypt","decrypt_nip04","decrypt_nip44","decrypted_contents","decrypted_contents","default","default","default","default","default","default","default","del_author","del_e_tag_ids","del_event_kind","del_id","del_p_tag_public_key","delegation","delegation","deletes","deletes","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","e","encrypt","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_fast_unstable","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","export_encrypted","fees","fees","find_all_in_string","find_all_in_string","find_nostr_bech32_pos","find_nostr_url_pos","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_keypair","from_slice","from_str","from_str","from_str","from_str","from_str","from_str","from_string","full_string","g","generate","generate_signature","giftwrap_unwrap","giftwrap_unwrap","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hashtags","hashtags","host","id","id","id","id","id","id","id","id","ids","import_encrypted","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_event_with_bad_signature","into_event_with_bad_signature","into_gift_wrap","into_gift_wrap","into_iter","into_string","into_string","into_string","into_string","is_direct_message_related","is_ephemeral","is_feed_displayable","is_feed_related","is_job_request","is_job_result","is_parameterized_replaceable","is_replaceable","is_tagged","is_tagged","iter","k_tag_kind","k_tag_kind","key_security","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kinds","kinds","kinds","kinds","kinds","language_tags","language_tags","limit","limitation","limitation","lnurl","max_content_length","max_content_length","max_event_tags","max_event_tags","max_filters","max_filters","max_limit","max_limit","max_message_length","max_message_length","max_subid_length","max_subid_length","max_subscriptions","max_subscriptions","mentions","mentions","metadata","min_pow_difficulty","min_pow_difficulty","name","name","name","name","names","names","new","new","new","new","new","new","new","new","new_event_pointer","new_id","new_profile","new_pubkey","new_relay","new_set_metadata","new_set_metadata","new_with_pow","new_with_pow","new_zap_request","new_zap_request","next","nip05","nip05","nostr_pubkey","now","offset","other","other","other","other","other","ots","p","parameter","parameter","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","payment_required","payment_required","payments_url","payments_url","people","people","people_referenced_in_content","people_referenced_in_content","period","period","picture","picture","posting_policy","posting_policy","pow","pow","provider_pubkey","proxy","proxy","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","pubkey","public_key","public_key","publication","publication","r","reacts_to","reacts_to","read","read","referred_events","referred_events","relay_countries","relay_countries","relays","relays","relays","relays","relays","replies_to","replies_to","replies_to_root","replies_to_root","retention","retention","segments","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shared_secret","sig","sig","sig","sign","sign_id","since","size_hint","slice","software","software","source","sub","sub","subject","subject","subscription","subscription","summary","summary","supported_nips","supported_nips","supports_nip","t","tagname","tagname","tags","tags","tags","tags","tags","tags","tags","tags","tags","tags","tags","time","time","title","title","to_bytes","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_unchecked_url","to_unchecked_url","to_url","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_bech32_string","try_from_bech32_string","try_from_bech32_string","try_from_bech32_string","try_from_bech32_string","try_from_bech32_string","try_from_bech32_string","try_from_hex_string","try_from_hex_string","try_from_hex_string","try_from_hex_string","try_from_str","try_from_str","try_from_str","try_from_str","try_from_str","try_from_string","try_from_string","try_from_string","try_from_string","try_from_unchecked_url","try_from_unchecked_url","try_from_url","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tweak_add_check","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","until","urlize","urls","urls","value","value","verify","verify","verify","verify_signature","version","version","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","why","write","write","zaps","zaps","zeroes","conditions","d","d","data","geohash","hashtag","id","id","kind","kind","marker","marker","marker","nonce","param","petname","pubkey","pubkey","pubkey","recommended_relay_url","recommended_relay_url","recommended_relay_url","relay_url","sig","subject","tag","target","time","title","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","url","warning","conditions","d","d","data","geohash","hashtag","id","id","kind","kind","marker","marker","nonce","param","petname","pubkey","pubkey","pubkey","recommended_relay_url","recommended_relay_url","recommended_relay_url","relay_url","sig","subject","tag","target","time","title","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","url","warning","conditions","d","d","data","geohash","hashtag","id","id","kind","kind","marker","marker","marker","nonce","param","petname","pubkey","pubkey","pubkey","recommended_relay_url","recommended_relay_url","recommended_relay_url","relay_url","sig","subject","tag","target","time","title","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","trailing","url","warning"],"q":[[0,"nostr_types"],[1747,"nostr_types::Tag"],[1794,"nostr_types::TagV1"],[1840,"nostr_types::TagV2"],[1887,"core::time"],[1888,"secp256k1"],[1889,"secp256k1::scalar"],[1890,"secp256k1::key"],[1891,"secp256k1"],[1892,"secp256k1::context"],[1893,"alloc::string"],[1894,"secp256k1::schnorr"],[1895,"secp256k1_sys"],[1896,"url"],[1897,"core::option"],[1898,"core::cmp"],[1899,"alloc::vec"],[1900,"serde::de"],[1901,"core::fmt"],[1902,"core::fmt"],[1903,"crypto_common"],[1904,"serde_json::error"],[1905,"inout::errors"],[1906,"url::parser"],[1907,"block_padding"],[1908,"std::time"],[1909,"bech32"],[1910,"core::array"],[1911,"core::num::error"],[1912,"core::str::error"],[1913,"nip44::error"],[1914,"base64::decode"],[1915,"secp256k1::key"],[1916,"std::sync::mpsc"],[1917,"serde::ser"],[1918,"core::error"],[1919,"core::any"]],"d":["Refer to a replaceable event by EventAddr","Address ‘a’ tag to a parameterized replaceable event","Address ‘a’ tag to a parameterized replaceable event","Address ‘a’ tag to a parameterized replaceable event","Application Specific Data, (NIP-78)","Assertion failed","Used to send authentication events","Used to send authentication challenges","Client Authentication (NIP-42)","Used to send authentication events","Used to send authentication events","Used to send authentication challenges","Used to send authentication challenges","Used to send authentication challenges","Authentication is required","Bad Encrypted Message","Badge Award (NIP-58)","Badge Definition (NIP-58)","Base64 error","Bech32 error","You have been blocked from this relay","Blocked Relays List (NIP-51)","Bookmarks List (NIP-51)","Bookmark Sets (NIP-51)","Calendar (NIP-52)","Calendar Event RSVP (NIP-52)","Event creates a public channel (NIP-28)","Event hides a message on a public channel (NIP-28)","Event creates a message on a public channel (NIP-28)","Event sets metadata on a public channel (NIP-28)","Event mutes a user on a public channel (NIP-28)","Classified Listing (NIP-99)","A message from a client to a relay","A message from a client to a relay","A message from a client to a relay","A request to close a subscription","A request to close a subscription","A request to close a subscription","Used to indicate that a subscription was ended on the …","Used to indicate that a subscription was ended on the …","Community Definition (NIP-72)","Communities List (NIP-51)","Community (exclusive) Post (NIP-72 pr 753)","Community Post Approval (NIP-72)","Event contains tags which represent the authors contacts …","Content Encryption Algorithm","A segment of content","Content Warning to alert client to hide content until user …","Content Warning to alert client to hide content until user …","Content Warning to alert client to hide content until user …","Create or update a product (NIP-15)","Create or update a stall (NIP-15)","Crypto error","Curation Sets (NIP-51)","Date-Based Calendar Event (NIP-52)","The event was delegated and is valid (with pubkey of …","Delegation (Delegated Event Signing)","Delegation (Delegated Event Signing)","Delegation (Delegated Event Signing)","Conditions of delegation","Chat Message / DM (NIP-24 PR 686)","Draft Classified Listing (NIP-99)","Draft Long-form Content (NIP-23)","Your request is a duplicate","Emoji Sets (NIP-51)","An empty array (kept so signature remains valid across …","An empty array (kept so signature remains valid across …","An empty array (kept so signature remains valid across …","Event is an encrypted direct message (NIP-04)","This is an encrypted private key.","End of subscribed events notification","End of subscribed events notification","End of subscribed events notification","End of subscribed events notification","Ephemeral event, sent to all clients with matching filters …","Errors that can occur in the nostr-proto crate","Other error","The main event type","An event","An event matching a subscription","This is a reference to an event, where the first string is …","An event","An event","An event matching a subscription","An event matching a subscription","An event matching a subscription","This is a reference to an event, where the first string is …","This is a reference to an event, where the first string is …","An ‘naddr’: data to address a possibly parameterized …","naddr - a NostrBech32 parameterized replaceable event …","Delegation information for an Event","Event is an authors request to delete previous events …","Event is in the future","A kind of Event","A single EventKind","Iterator over well known <code>EventKind</code>s","Either an EventKind or a range (a vector of length 2 with …","Direct parent of an event, ‘E’ tag This is from …","Direct parent of an event, ‘E’ tag This is from …","Direct parent of an event, ‘E’ tag This is from …","An ‘nevent’: event id along with some relays in which …","nevent - a NostrBech32 representing an event and a set of …","A reference to another event, either by <code>Id</code> (often coming …","The main event type","The main event type","A time when the event should be considered expired","A time when the event should be considered expired","A time when the event should be considered expired","Fee","Fee","File Metadata (NIP-94)","Filter which specify what events a client is looking for","Formatting error","Categorized People List (NIP-51)","From utf8 Error","Generic Repost (NIP-18)","Categorized Bookmark List (NIP-51)","‘g’ A geohash","‘g’ A geohash","‘g’ A geohash","Gift Wrap (NIP-59 PR 716)","Handler Information (NIP-89)","Handler Recommendation (NIP-89)","A hash mismatch verification error","‘t’ A hashtag","‘t’ A hashtag","‘t’ A hashtag","Hex string decoding error","Highlights (NIP-84)","HTTP Auth (NIP-98)","A hyperlink","An event identifier, constructed as a SHA256 hash of the …","Refer to a specific event by Id, optionally with a marker","note - a NostrBech32 representing an event","An event identifier, constructed as a SHA256 hash of the …","‘d’ Identifier tag","‘d’ Identifier tag","‘d’ Identifier tag","Interest Sets (NIP-51)","Interests List (NIP-51)","Your request is invalid","The delegation was invalid (with reason)","Invalid encrypted event","Invalid encrypted private key","Invalid Event Addr","Invalid Event Pointer","Invalid event Id","Invalid event Id Prefix","Invalid digest length","Invalid Private Key","Invalid Profile","Invalid public key","Invalid public key prefix","Invalid recipient","Invalid URL","Invalid URL Host","Missing URL Authority","Invalid URL Scheme","Invalid URL TLV encoding","Job Feedback (NIP-90)","Job Request (NIP-90) 5000-5999","Job Result (NIP-90) 6000-6999","Key or Signature error","This indicates the security of the key by keeping track of …","Kind number ‘k’","Kind number ‘k’","Kind number ‘k’","Label (NIP-32)","Live Chat Message (NIP-53)","Live Event (NIP-53)","Long-form Content (NIP-23)","This means that the key might not have been directly …","Metadata about a user","Event sets the metadata associated with a public key …","Metadata about a user","Bitcoin amount measured in millisatoshi","Mute List (NIP-51)","NIP-04 (insecure)","The content of a webserver’s /.well-known/nostr.json …","The content of a webserver’s /.well-known/nostr.json …","NIP-44 padded (possibly never in use, or a few tests were …","NIP-44 unpadded (produced by Amethyst for a few months …","NIP-44 v2 (latest, not yet audited)","A nonce tag for Proof of Work","A nonce tag for Proof of Work","A nonce tag for Proof of Work","A bech32 sequence representing a nostr object (or set of …","Nostr Connect (NIP-46)","A Nostr URL (starting with ‘nostr:’)","A Nostr URL","The event was not delegated","A human readable notice for errors and other information","A human readable notice for errors and other information","A human readable notice for errors and other information","A human readable notice for errors and other information","Used to notify clients if an event was successuful Every …","Used to notify clients if an event was successuful","Used to notify clients if an event was successuful","Used to notify clients if an event was successuful Every …","Any other tag","Something else?","Any other tag","Any other tag","Out of Range","Pad error","There is no known nostr tag like this. This was a mistake, …","There is no known nostr tag like this. This was a mistake, …","There is no known nostr tag like this. This was a mistake, …","Parse integer error","This is a response from a zapper lnurl","PinList (NIP-51)","Plain text","Proof-of-work is required","Data used to construct an event","Data used to construct an event","Data used to construct an event","This is a private key which is to be kept secret and is …","Encryption/Decryption Error","Problem Tracker (nostrocket-1971)","A person’s profile on nostr which consists of the data …","nprofile - a NostrBech32 representing a public key and a …","Profile Badges (NIP-58)","‘p’ This is a reference to a user by public key, where …","npub - a NostrBech32 representing a public key","‘p’ This is a reference to a user by public key, where …","‘p’ This is a reference to a user by public key, where …","Reserved for future public channel usage","Reserved for future public channel usage","Reserved for future public channel usage","Reserved for future public channel usage","Reserved for future public channel usage","Public Chats List (NIP-51)","This is a public key, which identifies an actor (usually a …","This is a public key, which identifies an actor (usually a …","A range of EventKinds","Rejected due to rate limiting","Event is a reaction to a <code>TextNote</code> event (NIP-25)","Event contains a relay URL which the author recommends","‘r’ A reference to a URL","‘r’ A reference to a URL","‘r’ A reference to a URL","nrelay - a NostrBech32 representing a set of relay URLs","Relay fees","Relay fees","Relay information document as described in NIP-11, …","Relay information document as described in NIP-11, …","Relay limitations","Relay limitations","Relays List (NIP-65)","A message from a relay to a client","A message from a relay to a client","A message from a relay to a client","A message from a relay to a client","Relay retention","Relay retention","Relay Sets (NIP-51)","A Url validated as a nostr relay url in canonical form We …","Relay-specific replaceable event","Reporting (NIP-56)","Repost (NIP-18)","A subscription request","A subscription request","A subscription request","The action you requested is restricted to your identity","A Rumor is an Event without a signature","A Rumor is an Event without a signature","A Rumor is an Event without a signature","Scrypt error","Seal (NIP-59 PR 716)","Search Relays List (NIP-51)","Serialization error","A sequence of content segments","A Schnorr signature that signs an Event, taken on the …","A Schnorr signature that signs an Event, taken on the …","A list of relays with SimpleRelayUsage","A list of relays with SimpleRelayUsageV1","When and how to use a Relay","When and how to use a Relay","Try from slice error","This is like <code>Range&lt;usize&gt;</code>, except we impl offset() on it …","A subject. The first string is the subject. Should only be …","A subject. The first string is the subject. Should only be …","A subject. The first string is the subject. Should only be …","A random client-chosen string used to refer to a …","A tag on an Event","A reference to an event tag by index","A tag on an Event","A tag on an Event","Event is a text note (NIP-01)","Time error","Time-Based Calendar Event (NIP-52)","Timestamps","Title (30023 long form)","Title (30023 long form)","Title (30023 long form)","A string that is supposed to represent a URL but which …","An integer count of the number of seconds from 1st January …","Unknown Cipher Version","Unknown event kind","Unknown Key Security","Unpad error","A String representing a valid URL with an authority …","Url Error","USer Emoji List (NIP-51)","User Status (NIP-315 PR 737)","UTF-8 error","Wallet Info (NIP-47)","Wallet Request (NIP-47)","Wallet Response (NIP-47)","This means that the key was exposed in a way such that …","The reason why a relay issued an OK or CLOSED message","Bech32 error","Wrong Decryption Password","Wrong event kind","Wrong length hex string","Wrong length bytes for event kind","An x-only public key, used for verification of schnorr …","Zap","Data about a Zap","Zap Goal (NIP-75)","Zap Receipt issue","Zap Request","Events which refer to this naddr in an ‘a’ tag","about","about","","","Add a PublicKey to the filter","Add an e-tag Id to the filter","Add an EventKind to the filter","Add an Id to the filter.","Add a PublicKey to the filter","Tweaks an <code>XOnlyPublicKey</code> by adding the generator …","Admission fee (read and write)","Admission fee (read and write)","The original content (the allocated string) <code>Range</code>s within …","Whether the lnurl supports nostr zaps","Amount of the fee","The amount that the event was zapped","Amount of the fee","Export as a bech32 encoded string","Export as a bech32 encoded string (“naddr”)","Export as a bech32 encoded string (“nevent”)","Export as a bech32 encoded string (“note”)","Export as a bech32 encoded string (“nprofile”)","Export as a bech32 encoded string","Export as a bech32 encoded string","As nrelay","As nrelay","Export as raw bytes","","Render into a hexadecimal string","Render into a hexadecimal string","Render into a hexadecimal string","Render into a hexadecimal string","","","","","","","","","","","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","","","","","","","","","","As &amp;str","As &amp;str","As &amp;str","As &amp;str","As &amp;str","Return in conmpiled string form. If full form is stored, …","As url crate Url","As url crate Url","Export as XOnlyPublicKey","If this event kind augments a feed related event","auth required","auth required","Author","Author (optional)","Events which match these authors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The URL to make the pay request to with a kind 9374 event","If this event specifies the client that created it, return …","If this event specifies the client that created it, return …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Like <code>cmp::Cmp</code> but faster and with no guarantees across …","An administrative contact for the relay. Should be a URI.","An administrative contact for the relay. Should be a URI.","The content of the event","The content of the event","The content of the event","The content of the event","The content of the event","The content of the event","The content of the event","The content of the event","The content of the event","If this event specifies a content warning, return that …","If this event specifies a content warning, return that …","count","count","If the delegation is only for events created after a …","The (unverified) time at which the event was created","The time at which the event was created","The (unverified) time at which the event was created","The (unverified) time at which the event was created","The time at which the event was created","The (unverified) time at which the event was created","The (unverified) time at which the event was created","The time at which the event was created","The (unverified) time at which the event was created","If the delegation is only for events created before a …","the ‘d’ tag of the Event, or an empty string if the …","Events which refer to this parameter in a ‘d’ tag","Decrypt into a Private Key with a passphrase.","Decrypt NIP-04 only","Decrypt NIP-44 only, version is detected","If an event is an EncryptedDirectMessage, decrypt it’s …","If an event is an EncryptedDirectMessage, decrypt it’s …","","","","","","","","Delete a PublicKey from the filter","Delete an e-tag Id from the filter","Delete an EventKind from the filter","Delete an Id from the filter","Delete a PublicKey from the filter","Was this event delegated, was that valid, and if so what …","Was this event delegated, was that valid, and if so what …","If this event deletes others, get all the Ids of the …","If this event deletes others, get all the EventReferences …","","","","","","","","","","","Description of the relay in plain text","Description of the relay in plain text","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Events which refer to these other events in an ‘e’ tag","Encrypt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Like <code>cmp::Eq</code> but faster and with no guarantees across …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Export in a (non-portable) encrypted form. This does not …","fees","fees","Find all <code>NostrBech32</code>s in a string, returned in the order …","Find all <code>NostrUrl</code>s in a string, returned in the order found","Returns start and end position of next valid NostrBech32","Returns start and end position of next valid NostrUrl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Import from raw bytes","Returns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for <code>keypair</code>.","Creates a schnorr public key directly from a slice.","","","","","","Create an UncheckedUrl from a &amp;str","Create an UncheckedUrl from a String","Optional full string form, in case it was parsed from …","Events which refer to this geohash in a ‘g’ tag","Generate a new <code>PrivateKey</code> (which can be used to get the …","Generate the signature part of a Delegation tag","If a gift wrap event, unwrap and return the inner Rumor","If a gift wrap event, unwrap and return the inner Rumor","","","","","","","","","","","Generate an ID from this PreEvent for use in an Event or a …","Generate an ID from this PreEvent for use in an Event or a …","","Return all the hashtags this event refers to","Return all the hashtags this event refers to","Host","The Id of the event, generated as a SHA256 of the inner …","The Id of the event, generated as a SHA256 of the inner …","The event that was zapped","Event id","The Id of the event, generated as a SHA256 of the inner …","The Id of the event, generated as a SHA256 of the inner …","The Id of the event, generated as a SHA256 of the inner …","The Id of the event, generated as a SHA256 of the inner …","Events which match these ids","Import an encrypted private key which was exported with …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn into an Event (the signature will be all zeroes)","Turn into an Event (the signature will be all zeroes)","Create a rumor, wrapped in a seal, shrouded in a giftwrap …","Create a rumor, wrapped in a seal, shrouded in a giftwrap …","","Into String","Into String","Into String","Into String","Is direct message related","If this event kind is ephemeral","If this event kind is feed displayable.","If this event kind is feed related.","Is a job request kind","Is a job result kind","If this event kind is parameterized replaceable","If this event kind is a replaceable event NOTE: this …","If the pubkey is tagged in the event","If the pubkey is tagged in the event","This iterates through every well-known EventKind","Get the k-tag kind, if any","Get the k-tag kind, if any","Get the security level of the private key","The kind of event","The kind of event","The kind of event","If the delegation is only for a given event kind","Kind","Kind (optional)","The kind of event","The kind of event","The kind of event","The kind of event","The kind of event","The kind of event","kinds","Kinds of events","Events which match these kinds","kinds","Kinds of events","community preferences: language tags","community preferences: language tags","A limit on the number of events to return in the initial …","limitation","limitation","Get the lnurl for the user, if available via lud06 or lud16","max content length","max content length","max event tags","max event tags","max filters","max filters","max limit","max limit","max message length","max message length","max subid length","max subid length","max subscriptions","max subscriptions","If this event mentions others, get those other event Ids …","If this event mentions others, get those other event Ids …","Metadata","min pow difficulty","min pow difficulty","username","Name of the relay","username","Name of the relay","DNS names mapped to public keys","DNS names mapped to public keys","Break content into meaningful segments","Create a new Filter object","Create a new NostrUrl from a NostrBech32","Create a new event","Create a new rumor","Create a new event","Create a new rumor","Create new empty Metadata","Create from an <code>EventPointer</code>","Create from an <code>Id</code>","Create from a <code>Profile</code>","Create from a <code>PublicKey</code>","Create from an <code>UncheckedUrl</code>","Create an event that sets Metadata","Create an event that sets Metadata","Create a new event with proof of work.","Create a new event with proof of work.","Create a ZapRequest event These events are not published …","Create a ZapRequest event These events are not published …","","nip05 dns id","nip05 dns id","The nostr public key of the zapper","Get the current unixtime (depends on the system clock …","Modify a span by offsetting it from the start by <code>offset</code> …","Additional fields not specified in NIP-01 or NIP-05","Additional fields not specified in NIP-11","Other fields such as:","Additional fields not specified in NIP-01 or NIP-05","Additional fields not specified in NIP-11","DEPRECATED (please set to Null): An optional verified time …","Events which refer to these public keys in a ‘p’ tag","If this is a parameterized event, get the parameter","If this is a parameterized event, get the parameter","","","","","","","","","","","payment required","payment required","payments_url","payments_url","If the event refers to people by tag, get all the …","If the event refers to people by tag, get all the …","If the event refers to people within the contents, get all …","If the event refers to people within the contents, get all …","Period purchase lasts for","Period purchase lasts for","picture URL","picture URL","community preferences: posting policy","community preferences: posting policy","Get the proof-of-work count of leading bits","Get the proof-of-work count of leading bits","The public key of the zap provider, for verification …","If the event came through a proxy, get the (Protocol, Id)","If the event came through a proxy, get the (Protocol, Id)","The public key of the actor who created the event","The public key of the actor who is creating the event","The public key of the actor who created the event","Public key of an administrative contact of the relay","The public key of the person who provided the zap","Their public key","The public key of the actor who created the event","The public key of the actor who is creating the event","The public key of the actor who created the event","The public key of the actor who created the event","The public key of the actor who is creating the event","The public key of the actor who created the event","Public key of an administrative contact of the relay","Get the PublicKey matching this PrivateKey","Returns the <code>PublicKey</code> for this <code>XOnlyPublicKey</code>.","Publication fee (write)","Publication fee (write)","Events which refer to this URL reference in an ‘r’ tag","If this event reacts to another, get that other event’s …","If this event reacts to another, get that other event’s …","Whether to read from this relay","Whether to read from this relay","All events IDs that this event refers to, whether root, …","All events IDs that this event refers to, whether root, …","content limitation: relay countries","content limitation: relay countries","Public keys mapped to arrays of relays where they post","Some of the relays where this could be found","Some of the relays where this could be in","Some of the relays they post to (when the profile was …","Public keys mapped to arrays of relays where they post","Get a reference to another event that this event replies …","Get a reference to another event that this event replies …","If this event replies to a thread, get that threads root …","If this event replies to a thread, get that threads root …","retention","retention","The sequence of <code>ContentSegment</code>s","Serializes the key as a byte-encoded x coordinate value …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the shared secret","The signature of the event, which cryptographically …","The signature of the event, which cryptographically …","The signature of the event, which cryptographically …","Sign a message (this hashes with SHA-256 first internally)","Sign a 32-bit hash","Events occuring after this date","","View a slice of the original content as specified in a Span","The software running the relay","The software running the relay","","","","If this event specifies a subject, return that subject …","If this event specifies a subject, return that subject …","Subscription fee (read)","Subscription fee (read)","If this event specifies a summary, return that summary …","If this event specifies a summary, return that summary …","A list of NIPs supported by the relay","A list of NIPs supported by the relay","If the relay supports the queried <code>nip</code>","Events which refer to this hashtag in a ‘t’ tag","Get the tag name for the tag (the first string in the …","Get the tag name for the tag (the first string in the …","A set of tags that apply to the event","A set of tags that apply to the event","A set of tags that apply to the event","community preferences: tags","A set of tags that apply to the event","A set of tags that apply to the event","A set of tags that apply to the event","A set of tags that apply to the event","A set of tags that apply to the event","A set of tags that apply to the event","community preferences: tags","time","time","If this event specifies a title, return that title string","If this event specifies a title, return that title string","Export as raw bytes","Outputs the hash in hexadecimal form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert into a UncheckedUrl","Convert into a UncheckedUrl","Convert into a Url","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Import from a bech32 encoded string","Import from a bech32 encoded string (“naddr”)","Import from a bech32 encoded string (“nevent”)","Import from a bech32 encoded string (“note”)","Import from a bech32 encoded string (“nprofile”)","Import from a bech32 encoded string","Import from a bech32 encoded string (“nrelay”)","Create from a hexadecimal string","Create from a hexadecimal string","Create from a hexadecimal string","Create from a hexadecimal string","Convert from string from","Try from &amp;str","Try from &amp;str","Create a new Url from a string","Construct a new RelayUrl from a Url","Try from String","Try to convert a string into a NostrBech32. Must not have …","Try to convert a string into a NostrUrl. Must not have …","Try from String","Create a new Url from an UncheckedUrl","Create a new RelayUrl from an UncheckedUrl","Create a new RelayUrl from a Url","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that a tweak produced by <code>XOnlyPublicKey::add_tweak</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unit of the amount","Unit of the amount","Events occuring before this date","This converts all recognized bech32 sequences into proper …","Return all the URLs this event refers to","Return all the URLs this event refers to","Get the string value of the tag at an array index","Get the string value of the tag at an array index","Verify a signed message","Check the validity of an event. This is useful if you …","Check the validity of an event. This is useful if you …","Verify the signature part of a Delegation tag","Version","The software version","The software version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Translate the machine-readable prefix from the message","Whether to write to this relay","Whether to write to this relay","If this event zaps another event, get data about that.","If this event zaps another event, get data about that.","A dummy signature of all zeroes","Conditions query string","d-tag identifier","‘d’ indentifier","The subsequent fields","A geohash","Hashtag","The Id of some other event that this event refers to","The id of some other event that is the direct parent to …","EventKind","Event kind","A marker (commonly things like ‘reply’)","A marker (commonly things like ‘reply’)","An optional marker","A random number that makes the event hash meet the proof …","Parameter","A petname given to this identity by the event author","Author","Public key of the delegator","The public key of the identity that this event refers to","A recommended relay URL to find that other event","A recommended relay URL to find information on that public …","A recommended relay URL to find that other event","Relay URL","64-byte schnorr signature of the sha256 hash of the …","The subject","The tag name","The target number of bits for the proof of work","Expiration Time","Title","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","A relay url","Content warning","Conditions query string","d-tag identifier","‘d’ indentifier","The subsequent fields","A geohash","Hashtag","The Id of some other event that this event refers to","The id of some other event that is the direct parent to …","EventKind","Event kind","A marker (commonly things like ‘reply’)","An optional marker","A random number that makes the event hash meet the proof …","Parameter","A petname given to this identity by the event author","Author","Public key of the delegator","The public key of the identity that this event refers to","A recommended relay URL to find that other event","A recommended relay URL to find information on that public …","A recommended relay URL to find that other event","Relay URL","64-byte schnorr signature of the sha256 hash of the …","The subject","The tag name","The target number of bits for the proof of work","Expiration Time","Title","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","A relay url","Content warning","Conditions query string","d-tag identifier","‘d’ indentifier","The subsequent fields","A geohash","Hashtag","The Id of some other event that this event refers to","The id of some other event that is the direct parent to …","EventKind","Event kind","A marker (commonly things like ‘reply’)","A marker (commonly things like ‘reply’)","An optional marker","A random number that makes the event hash meet the proof …","Parameter","A petname given to this identity by the event author","Author","Public key of the delegator","The public key of the identity that this event refers to","A recommended relay URL to find that other event","A recommended relay URL to find information on that public …","A recommended relay URL to find that other event","Relay URL","64-byte schnorr signature of the sha256 hash of the …","The subject","The tag name","The target number of bits for the proof of work","Expiration Time","Title","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","Trailing","A relay url","Content warning"],"i":[50,110,76,77,8,79,111,112,8,57,58,72,73,74,75,79,8,8,79,79,75,8,8,8,8,8,8,8,8,8,8,8,0,0,0,111,57,58,112,74,8,8,8,8,8,0,0,110,76,77,8,8,79,8,8,46,110,76,77,0,8,8,8,75,8,110,76,77,8,0,112,72,73,74,8,0,75,0,111,112,110,57,58,72,73,74,76,77,0,51,0,8,79,0,49,0,0,110,76,77,0,51,0,0,0,110,76,77,0,0,8,0,79,8,79,8,8,110,76,77,8,8,8,79,110,76,77,79,8,8,44,0,50,51,0,110,76,77,8,8,75,46,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,8,8,8,79,0,110,76,77,8,8,8,8,56,0,8,0,0,8,55,0,0,55,55,55,110,76,77,0,8,0,44,46,112,72,73,74,112,72,73,74,110,8,76,77,79,79,110,76,77,79,0,8,44,75,0,0,0,0,79,8,0,51,8,110,51,76,77,8,8,8,8,8,8,0,0,49,75,8,8,110,76,77,51,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,8,8,8,111,57,58,75,0,0,0,79,8,8,79,0,0,0,0,0,0,0,79,0,110,76,77,0,0,44,0,0,8,79,8,8,110,76,77,0,0,79,79,79,79,0,79,8,8,79,8,8,8,56,0,79,79,79,79,79,0,8,0,8,79,8,4,104,63,1,2,4,4,4,4,4,9,113,68,45,53,114,47,67,16,18,19,20,21,22,5,23,24,22,9,16,20,22,27,20,7,22,5,1,27,31,32,2,9,9,9,20,7,22,5,1,27,31,32,2,7,5,23,36,24,37,36,24,22,8,115,65,18,19,4,16,9,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,16,9,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,53,40,42,9,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,20,7,22,5,1,2,23,36,24,9,116,69,117,118,119,40,59,60,42,61,62,40,42,120,66,37,117,118,119,40,59,60,42,61,62,37,18,4,54,16,16,40,42,37,4,53,63,69,70,71,4,4,4,4,4,40,42,40,42,20,7,54,22,5,1,27,31,32,2,116,69,9,37,18,8,49,19,50,4,20,7,53,54,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,16,4,16,9,46,37,18,8,49,19,50,4,20,7,53,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,9,46,37,8,49,4,20,7,53,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,16,116,69,51,52,0,0,9,9,9,79,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,7,51,51,52,52,53,54,54,55,56,21,22,5,5,1,1,27,31,31,32,2,2,23,23,36,36,24,24,57,58,40,59,60,42,61,62,63,64,65,65,66,66,67,67,68,68,69,69,70,71,72,73,74,75,76,77,16,9,9,9,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,43,44,45,46,37,47,18,8,8,48,49,19,50,4,20,20,20,7,7,7,51,52,52,52,52,52,52,52,52,53,54,55,56,21,22,22,5,5,5,5,1,1,27,27,31,31,31,32,32,2,2,23,36,36,24,57,58,40,59,59,60,60,42,61,61,62,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,22,9,9,9,7,5,31,32,23,23,37,4,16,37,40,42,9,20,7,56,22,5,31,23,36,24,59,61,75,40,42,24,117,119,47,19,40,60,42,62,4,16,16,9,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,60,62,59,61,48,7,5,36,24,8,8,8,8,8,8,8,8,40,42,8,40,42,16,117,118,119,37,18,19,40,59,60,42,61,62,120,114,4,66,67,116,69,4,116,69,63,115,65,115,65,115,65,115,65,115,65,115,65,115,65,40,42,53,115,65,104,116,63,69,121,64,45,4,52,40,60,42,62,63,51,51,51,51,51,40,42,40,42,40,42,48,104,63,53,2,43,104,116,53,63,69,40,4,40,42,9,20,7,22,5,1,2,23,36,24,115,65,116,69,40,42,40,42,114,67,104,63,116,69,40,42,47,40,42,117,118,119,116,47,21,40,59,60,42,61,62,69,16,9,113,68,4,40,42,122,70,40,42,116,69,121,18,19,21,64,40,42,40,42,116,69,45,9,9,37,18,8,49,19,50,4,20,7,53,54,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,16,117,40,42,16,16,4,48,45,116,69,79,2,2,40,42,113,68,40,42,116,69,69,4,76,77,117,118,119,116,40,59,60,42,61,62,69,120,66,40,42,22,9,9,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,79,7,51,52,54,5,1,31,2,23,36,24,65,66,67,68,69,36,24,24,16,9,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,7,51,52,53,54,55,56,56,21,22,22,22,5,5,1,27,27,31,32,2,23,36,24,24,24,57,58,40,59,60,60,42,61,62,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,16,18,19,20,21,22,23,16,20,22,27,37,7,5,36,24,7,51,52,5,36,24,24,16,9,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,16,9,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,114,67,4,52,40,42,76,77,22,40,42,37,54,116,69,16,9,79,43,44,45,46,37,47,18,8,48,49,19,50,4,20,7,51,52,53,54,55,56,21,22,5,1,27,31,32,2,23,36,24,57,58,40,59,60,42,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,74,122,70,40,42,27,123,124,125,126,127,128,129,130,124,131,124,129,132,133,134,135,124,123,135,129,135,130,124,123,136,126,133,137,138,124,139,123,129,137,135,128,132,127,125,136,133,134,138,130,131,132,139,140,141,142,143,144,145,146,147,141,148,146,149,150,151,152,141,140,152,146,152,147,141,140,153,143,150,154,155,141,156,140,146,154,152,145,149,144,142,153,150,151,155,147,148,149,156,123,124,125,126,127,128,129,130,124,131,124,129,132,133,134,135,124,123,135,129,135,130,124,123,136,126,133,137,138,124,139,123,129,137,135,128,132,127,125,136,133,134,138,130,131,132,139],"fc":[365,366],"p":[[3,"MilliSatoshi",0],[3,"Unixtime",0],[3,"Duration",1887],[3,"Filter",0],[3,"PublicKeyHex",0],[15,"tuple"],[3,"IdHex",0],[4,"EventKind",0],[3,"XOnlyPublicKey",0],[3,"Secp256k1",1888],[3,"Scalar",1889],[4,"Parity",1890],[4,"Error",1888],[4,"Result",1891],[8,"Verification",1892],[3,"PrivateKey",0],[3,"String",1893],[3,"EventAddr",0],[3,"EventPointer",0],[3,"Id",0],[3,"Profile",0],[3,"PublicKey",0],[3,"UncheckedUrl",0],[3,"RelayUrl",0],[15,"u8"],[15,"slice"],[3,"Signature",0],[15,"array"],[15,"u64"],[3,"Signature",1894],[3,"SignatureHex",0],[3,"SubscriptionId",0],[15,"i64"],[3,"XOnlyPublicKey",1895],[15,"str"],[3,"Url",0],[3,"DelegationConditions",0],[3,"Url",1896],[15,"bool"],[3,"EventV1",0],[4,"Option",1897],[3,"EventV2",0],[3,"Span",0],[4,"ContentSegment",0],[3,"ShatteredContent",0],[4,"EventDelegation",0],[3,"ZapData",0],[3,"EventKindIterator",0],[4,"EventKindOrRange",0],[4,"EventReference",0],[4,"NostrBech32",0],[3,"NostrUrl",0],[3,"PayRequestData",0],[3,"EncryptedPrivateKey",0],[4,"ContentEncryptionAlgorithm",0],[4,"KeySecurity",0],[4,"ClientMessageV1",0],[4,"ClientMessageV2",0],[3,"PreEventV1",0],[3,"RumorV1",0],[3,"PreEventV2",0],[3,"RumorV2",0],[3,"MetadataV1",0],[3,"Nip05V1",0],[3,"RelayLimitationV1",0],[3,"RelayRetentionV1",0],[3,"FeeV1",0],[3,"RelayFeesV1",0],[3,"RelayInformationDocumentV1",0],[3,"SimpleRelayUsageV1",0],[3,"SimpleRelayListV1",0],[4,"RelayMessageV1",0],[4,"RelayMessageV2",0],[4,"RelayMessageV3",0],[4,"Why",0],[4,"TagV1",0],[4,"TagV2",0],[4,"Ordering",1898],[4,"Error",0],[3,"Vec",1899],[8,"Deserializer",1900],[15,"usize"],[3,"Formatter",1901],[3,"Error",1901],[6,"Result",1901],[3,"PublicKey",1890],[3,"FromUtf8Error",1893],[4,"FromHexError",1902],[3,"InvalidLength",1903],[3,"Error",1904],[3,"PadError",1905],[4,"ParseError",1906],[3,"UnpadError",1907],[3,"SystemTimeError",1908],[4,"Error",1909],[3,"TryFromSliceError",1910],[3,"ParseIntError",1911],[3,"Utf8Error",1912],[4,"Error",1913],[4,"DecodeError",1914],[15,"u32"],[3,"KeyPair",1890],[8,"Hasher",1915],[6,"Metadata",0],[3,"Sender",1916],[8,"Serializer",1917],[8,"Error",1918],[3,"TypeId",1919],[15,"i8"],[6,"Tag",0],[6,"ClientMessage",0],[6,"RelayMessage",0],[6,"RelayFees",0],[6,"Fee",0],[6,"RelayLimitation",0],[6,"RelayInformationDocument",0],[6,"Event",0],[6,"PreEvent",0],[6,"Rumor",0],[6,"RelayRetention",0],[6,"Nip05",0],[6,"SimpleRelayUsage",0],[13,"Delegation",1747],[13,"Address",1747],[13,"Identifier",1747],[13,"Other",1747],[13,"Geohash",1747],[13,"Hashtag",1747],[13,"Event",1747],[13,"EventParent",1747],[13,"Kind",1747],[13,"Reference",1747],[13,"Nonce",1747],[13,"Parameter",1747],[13,"Pubkey",1747],[13,"Subject",1747],[13,"Expiration",1747],[13,"Title",1747],[13,"ContentWarning",1747],[13,"Delegation",1794],[13,"Address",1794],[13,"Identifier",1794],[13,"Other",1794],[13,"Geohash",1794],[13,"Hashtag",1794],[13,"Event",1794],[13,"EventParent",1794],[13,"Kind",1794],[13,"Reference",1794],[13,"Nonce",1794],[13,"Parameter",1794],[13,"Pubkey",1794],[13,"Subject",1794],[13,"Expiration",1794],[13,"Title",1794],[13,"ContentWarning",1794]]},\
"num_cpus":{"doc":"A crate with utilities to determine the number of CPUs …","t":"FF","n":["get","get_physical"],"q":[[0,"num_cpus"]],"d":["Returns the number of available CPUs of the current system.","Returns the number of physical cores of the current system."],"i":[0,0],"f":[[[],1],[[],1]],"c":[],"p":[[15,"usize"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[90,"num_traits::bounds"],[97,"num_traits::cast"],[132,"num_traits::float"],[243,"num_traits::identities"],[253,"num_traits::int"],[273,"num_traits::ops"],[281,"num_traits::ops::bytes"],[292,"num_traits::ops::checked"],[308,"num_traits::ops::euclid"],[314,"num_traits::ops::inv"],[317,"num_traits::ops::mul_add"],[322,"num_traits::ops::overflowing"],[328,"num_traits::ops::saturating"],[337,"num_traits::ops::wrapping"],[349,"num_traits::pow"],[354,"num_traits::real"],[402,"num_traits::sign"],[412,"core::cmp"],[413,"core::fmt"],[414,"core::fmt"],[415,"alloc::string"],[416,"core::any"],[417,"core::option"],[418,"core::marker"],[419,"core::ops::arith"],[420,"core::ops::arith"],[421,"core::cmp"],[422,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,40,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,40,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,41,42,41,43,0,0,0,0,44,0,12,45,45,45,45,45,45,45,45,45,45,45,45,45,45,13,13,13,13,13,13,13,13,13,13,13,13,13,13,46,46,46,46,46,46,46,46,46,46,0,0,0,46,46,46,46,46,46,46,46,46,47,48,47,47,47,47,47,47,47,47,47,47,48,48,47,47,47,47,48,47,47,47,47,47,48,47,48,47,48,47,48,47,47,48,47,48,47,48,47,48,47,48,47,48,48,47,47,47,47,47,47,47,48,48,47,47,48,48,47,48,47,47,48,47,48,47,48,47,47,47,48,47,48,47,48,47,48,47,47,47,47,47,47,48,47,48,47,47,48,0,0,34,35,0,34,34,35,0,35,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0,0,0,0,0,50,51,0,0,0,51,51,51,50,50,50,0,0,0,0,0,0,0,0,52,53,37,54,55,56,57,58,0,0,59,59,60,60,0,61,61,0,0,62,62,63,0,0,0,64,65,66,0,0,0,0,67,68,69,67,70,0,0,0,0,0,0,71,72,73,74,75,76,77,0,0,0,77,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,39,0,39,39,39,0,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[8,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,9,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,0,[-1,-2,[],[]],[-1,[[11,[-2]]],12,12],[-1,[[11,[-2]]],13,[]],[14,[[11,[-1]]],[]],[15,[[11,[-1]]],[]],[16,[[11,[-1]]],[]],[17,[[11,[-1]]],[]],[18,[[11,[-1]]],[]],[19,[[11,[-1]]],[]],[20,[[11,[-1]]],[]],[21,[[11,[-1]]],[]],[22,[[11,[-1]]],[]],[23,[[11,[-1]]],[]],[7,[[11,[-1]]],[]],[24,[[11,[-1]]],[]],[25,[[11,[-1]]],[]],[26,[[11,[-1]]],[]],[-1,[[11,[14]]],[]],[-1,[[11,[15]]],[]],[-1,[[11,[16]]],[]],[-1,[[11,[17]]],[]],[-1,[[11,[18]]],[]],[-1,[[11,[19]]],[]],[-1,[[11,[20]]],[]],[-1,[[11,[21]]],[]],[-1,[[11,[22]]],[]],[-1,[[11,[23]]],[]],[-1,[[11,[7]]],[]],[-1,[[11,[24]]],[]],[-1,[[11,[25]]],[]],[-1,[[11,[26]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[27,28]],[[],-1,[]],[[],-1,[27,28]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[27,29]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,30,[]],[-1,30,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[[31,[24,17,20]]],[]],[-1,[[31,[24,17,20]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,18],-1,[]],[[-1,18],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,32,33],[-1,32,[]],[[],-1,34],[[],-1,[]],[-1,31,[]],[-1,31,[]],[[],-1,35],[[],-1,[]],0,[-1,7,[]],[-1,7,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[-1,7,[]],[[-1,7],-1,[]],[-1,-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[-1,7,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],0,0,0,0,0,0,0,0,[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[-1,[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,7],[[11,[-1]]],[]],[[-1,7],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],0,0,[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,[-1,[],[]],0,0,0,[[-1,-2,-3],[],[],[],[]],[[-1,-2,-3],31,[],[],[]],0,0,0,[[-1,-1],[[31,[-1,32]]],[]],[[-1,-1],[[31,[-1,32]]],[]],[[-1,-1],[[31,[-1,32]]],[]],0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,-1],-1,[]],0,0,[[-1,26],[[11,[-1]]],[36,34,37]],[[-1,26],-1,[36,34,38]],[[-1,-2],[],[],[]],0,[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,32,[]],[-1,32,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,18],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-1,39],[-1,-1,[]],[[-1,-1],-1,39],[[-1,-1],-1,[]],[-1,32,[]],[-1,32,[]],[-1,-1,39],[-1,-1,[]]],"c":[],"p":[[8,"PartialOrd",412],[4,"FloatErrorKind",0],[3,"Formatter",413],[6,"Result",413],[3,"ParseFloatError",0],[15,"str"],[15,"u32"],[4,"Result",414],[3,"String",415],[3,"TypeId",416],[4,"Option",417],[8,"NumCast",97],[8,"ToPrimitive",97],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized",418],[8,"Div",419],[8,"Add",419],[4,"FpCategory",420],[15,"tuple"],[15,"bool"],[8,"PartialEq",412],[8,"One",243],[8,"Zero",243],[8,"Clone",421],[8,"CheckedMul",292],[8,"Mul",419],[8,"Signed",402],[8,"Num",0],[8,"Bounded",90],[8,"UpperBounded",90],[8,"LowerBounded",90],[8,"AsPrimitive",97],[8,"FromPrimitive",97],[8,"FloatConst",132],[8,"Float",132],[8,"FloatCore",132],[8,"PrimInt",253],[8,"ToBytes",281],[8,"FromBytes",281],[8,"CheckedAdd",292],[8,"CheckedDiv",292],[8,"CheckedNeg",292],[8,"CheckedRem",292],[8,"CheckedShl",292],[8,"CheckedShr",292],[8,"CheckedSub",292],[8,"CheckedEuclid",308],[8,"Euclid",308],[8,"Inv",314],[8,"MulAdd",317],[8,"MulAddAssign",317],[8,"OverflowingAdd",322],[8,"OverflowingMul",322],[8,"OverflowingSub",322],[8,"Saturating",328],[8,"SaturatingAdd",328],[8,"SaturatingMul",328],[8,"SaturatingSub",328],[8,"WrappingAdd",337],[8,"WrappingMul",337],[8,"WrappingNeg",337],[8,"WrappingShl",337],[8,"WrappingShr",337],[8,"WrappingSub",337],[8,"Pow",349],[8,"Real",354]]},\
"once_cell":{"doc":"Overview","t":"AAADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[3,"once_cell::race"],[64,"once_cell::sync"],[112,"once_cell::unsync"],[158,"core::fmt"],[159,"core::fmt"],[160,"core::num::nonzero"],[161,"core::ops::function"],[162,"core::result"],[163,"alloc::boxed"],[164,"core::any"],[165,"core::clone"],[166,"core::default"],[167,"core::cmp"],[168,"core::fmt"]],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,15,17,15,17,15,15,15,15,17,17,17,15,15,15,17,17,17,15,15,15,17,15,17,15,17,15,15,15,15,17,15,17,15,17,15,15,15,15,17,15,15,17,15,17,15,15,0,0,22,23,22,23,22,22,22,22,23,23,23,22,22,22,23,23,23,22,22,22,23,22,23,22,23,22,22,22,23,22,23,22,23,22,22,22,22,23,22,22,23,22,23,22],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[2,[-1]]],5,[]],[[[1,[-1]],6],7,[]],[[[2,[-1]],6],7,[]],[[3,6],7],[[4,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[2,[-1]]],[[8,[-1]]],[]],[3,[[8,[9]]]],[4,[[8,[10]]]],[[[1,[-1]],-2],-1,[],11],[[[2,[-1]],-2],-1,[],11],[[3,-1],9,11],[[4,-1],10,11],[[[1,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[[2,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[3,-1],[[12,[9,-2]]],11,[]],[[4,-1],[[12,[10,-2]]],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[1,[-1]],-1],[[12,[5,5]]],[]],[[[2,[-1]],[13,[-1]]],[[12,[5,[13,[-1]]]]],[]],[[3,9],[[12,[5,5]]]],[[4,10],[[12,[5,5]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[15,[-1]]],16],[[[15,[-1]],[15,[-1]]],5,16],[[-1,-2],5,[],[]],[[],[[15,[-1]]],[]],[[],[[17,[-1]]],18],[[[17,[-1,-2]]],-1,[],11],[[[17,[-1,-2]]],-1,[],11],[[[15,[-1]],[15,[-1]]],10,19],[[-1,-2],10,[],[]],[[[15,[-1]],6],7,20],[[[17,[-1,-2]],6],7,20,[]],[[[17,[-1,-2]]],-1,[],11],[[[17,[-1,-2]]],-1,[],11],[21,-1,[]],[-1,-1,[]],[-1,[[15,[-1]]],[]],[-1,-1,[]],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[8,[-1]]],[],11],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[8,[-1]]],[],11],[[[15,[-1]],-2],-1,[],11],[[[15,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[[15,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[],[[15,[-1]]],[]],[-1,[[17,[-2,-1]]],[],[]],[[[15,[-1]],-1],[[12,[5,-1]]],[]],[[[15,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[15,[-1]],-1],[[12,[-1,[5,[-1,-1]]]]],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[[[15,[-1]]],-1,[]],[-1,[[15,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[22,[-1]]],16],[[[22,[-1]],[22,[-1]]],5,16],[[-1,-2],5,[],[]],[[],[[22,[-1]]],[]],[[],[[23,[-1]]],18],[[[23,[-1,-2]]],-1,[],11],[[[23,[-1,-2]]],-1,[],11],[[[22,[-1]],[22,[-1]]],10,19],[[-1,-2],10,[],[]],[[[22,[-1]],6],7,20],[[[23,[-1,-2]],6],7,20,[]],[[[23,[-1,-2]]],-1,[],11],[[[23,[-1,-2]]],-1,[],11],[-1,-1,[]],[21,-1,[]],[-1,[[22,[-1]]],[]],[-1,-1,[]],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[8,[-1]]],[],11],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[8,[-1]]],[],11],[[[22,[-1]],-2],-1,[],11],[[[22,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[],[[22,[-1]]],[]],[-1,[[23,[-2,-1]]],[],[]],[[[22,[-1]],-1],[[12,[5,-1]]],[]],[[[22,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[22,[-1]],-1],[[12,[-1,[5,[-1,-1]]]]],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[22,[-1]]],[]]],"c":[],"p":[[3,"OnceRef",3],[3,"OnceBox",3],[3,"OnceNonZeroUsize",3],[3,"OnceBool",3],[15,"tuple"],[3,"Formatter",158],[6,"Result",158],[4,"Option",159],[3,"NonZeroUsize",160],[15,"bool"],[8,"FnOnce",161],[4,"Result",162],[3,"Box",163],[3,"TypeId",164],[3,"OnceCell",64],[8,"Clone",165],[3,"Lazy",64],[8,"Default",166],[8,"PartialEq",167],[8,"Debug",158],[15,"never"],[3,"OnceCell",112],[3,"Lazy",112]]},\
"opaque_debug":{"doc":"Macro for opaque <code>Debug</code> trait implementation.","t":"O","n":["implement"],"q":[[0,"opaque_debug"]],"d":["Macro for defining opaque <code>Debug</code> implementation."],"i":[0],"f":[0],"c":[],"p":[]},\
"password_hash":{"doc":"RustCrypto: Password Hashing Traits","t":"NSNNGECDSSSSSIDQDDDIISCDDDLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLCLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLMNNENNENNNNENNNNNNNNNNGNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMM","n":["B64","B64_MAX_LENGTH","Bcrypt","Crypt","Decimal","Encoding","Error","Ident","MAX_LENGTH","MAX_LENGTH","MAX_LENGTH","MIN_LENGTH","MIN_LENGTH","McfHasher","Output","Params","ParamsString","PasswordHash","PasswordHashString","PasswordHasher","PasswordVerifier","RECOMMENDED_LENGTH","Result","Salt","SaltString","Value","add_b64_bytes","add_decimal","add_str","algorithm","algorithm","as_bytes","as_bytes","as_bytes","as_bytes","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_salt","as_str","as_str","as_str","as_str","as_str","as_str","b64_decode","b64_decode","b64_decode","b64_decode","b64_encode","b64_encode","b64_len","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","ct_eq","decimal","decode","decode","decode_b64","decode_b64","default","default","deref","encode","encode","encode_b64","encoded_len","encoding","encoding","encoding","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_b64","from_b64","from_iter","from_str","from_str","from_str","generate","generate","get","get_decimal","get_str","hash","hash","hash","hash","hash_password","hash_password","hash_password_customized","init_with","into","into","into","into","into","into","into","into","into","is_decimal","is_empty","is_empty","iter","len","len","len","len","len","len","new","new","new","new","new","new","new","new","new_unwrap","new_with_encoding","params","params","parse","parse","partial_cmp","partial_cmp","partial_cmp","password_hash","rand_core","salt","salt","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade_mcf_hash","verify_mcf_hash","verify_mcf_hash","verify_password","verify_password","version","version","Algorithm","B64Encoding","B64Error","Crypto","Err","Error","InvalidChar","InvalidEncoding","InvalidFormat","InvalidLength","InvalidValue","Malformed","Ok","OutputSize","ParamNameDuplicated","ParamNameInvalid","ParamValueInvalid","ParamsMaxExceeded","Password","PhcStringField","PhcStringTrailingData","Result","SaltInvalid","TooLong","TooShort","Version","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","param_error","salt_error","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","expected","provided"],"q":[[0,"password_hash"],[276,"password_hash::errors"],[355,"password_hash::errors::Error"],[357,"core::convert"],[358,"core::cmp"],[359,"subtle"],[360,"core::result"],[361,"core::convert"],[362,"core::fmt"],[363,"rand_core"],[364,"core::convert"],[365,"core::hash"],[366,"core::ops::function"],[367,"alloc::string"],[368,"core::any"],[369,"core::fmt"],[370,"core::str::error"],[371,"base64ct::errors"]],"d":["“B64” encoding: standard Base64 without padding.","Maximum length of <code>Output</code> when encoded as B64 string: …","bcrypt encoding.","<code>crypt(3)</code> encoding.","Type used to represent decimal (i.e. integer) values.","Base64 encoding variants.","","Algorithm or parameter identifier.","Maximum length of <code>Output</code> string: 64-bytes.","Maximum length of a <code>Salt</code> string: 64-bytes.","Maximum length of an <code>Value</code> - 64 ASCII characters (i.e. …","Minimum length of a <code>Output</code> string: 10-bytes.","Minimum length of a <code>Salt</code> string: 4-bytes.","Trait for password hashing algorithms which support the …","Output from password hashing functions, i.e. the “hash”…","Algorithm-specific parameters.","Algorithm parameter string.","Password hash.","Serialized <code>PasswordHash</code>.","Trait for password hashing functions.","Trait for password verification.","Recommended length of a salt: 16-bytes.","","Salt string.","Owned stack-allocated equivalent of <code>Salt</code>.","Algorithm parameter value string.","Add the given byte value to the <code>ParamsString</code>, encoding it …","Add a key/value pair with a decimal value to the …","Add a key/value pair with a string value to the …","Password hashing algorithm identifier.","Password hashing algorithm identifier.","Borrow the output value as a byte slice.","Borrow the contents of this <code>ParamsString</code> as a byte slice.","Borrow this value as bytes.","Borrow this value as bytes.","","","","","","","Borrow the contents of a <code>SaltString</code> as a <code>Salt</code>.","Borrow this ident as a <code>str</code>","Borrow the contents of this <code>ParamsString</code> as a <code>str</code>.","Borrow this value as a <code>str</code>.","Borrow the contents of a <code>SaltString</code> as a <code>str</code>.","Borrow this value as a <code>str</code>.","Borrow this value as a <code>str</code>.","Parse B64-encoded <code>Output</code>, i.e. using the PHC string …","Attempt to decode a B64-encoded <code>Salt</code> into bytes, writing …","Decode this <code>SaltString</code> from B64 into the provided output …","Attempt to decode a B64-encoded <code>Value</code>, writing the decoded …","Write B64-encoded <code>Output</code> to the provided buffer, returning …","Encode the given byte slice as B64 into a new <code>SaltString</code>.","Get the length of this <code>Output</code> when encoded as B64.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to parse this <code>Value</code> as a PHC-encoded decimal (i.e. …","Decode a Base64 string into the provided destination …","Decode the given input string using the specified <code>Encoding</code>.","Attempt to decode a B64-encoded <code>Salt</code> into bytes, writing …","Decode this <code>SaltString</code> from B64 into the provided output …","","","","Encode the input byte slice as Base64.","Encode this <code>Output</code> using the specified <code>Encoding</code>.","Encode the given byte slice as B64 into a new <code>SaltString</code>.","Get the length of Base64 produced by encoding the given …","Get the <code>Encoding</code> that this <code>Output</code> is serialized with.","Get the <code>Encoding</code> that this <code>PasswordHash</code> is serialized with.","Get the <code>Encoding</code> that this <code>PasswordHashString</code> is …","","","","","","","","","","","","","","","","","","","Error types.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Create a <code>Salt</code> from the given B64-encoded input string, …","Create a new <code>SaltString</code> from the given B64-encoded input …","","","","","Generate a random B64-encoded <code>SaltString</code>.","Generate a password hash using the supplied algorithm.","Get a parameter <code>Value</code> by name.","Get a parameter as a <code>Decimal</code>.","Get a parameter as a <code>str</code>.","","","Password hashing function <code>Output</code>, a.k.a. hash/digest.","Password hashing function <code>Output</code>, a.k.a. hash/digest.","Simple API for computing a <code>PasswordHash</code> from a password and","Simple API for computing a <code>PasswordHash</code> from a password and","Compute a <code>PasswordHash</code> from the provided password using an …","Initialize an <code>Output</code> using the provided method, which is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Does this value parse successfully as a decimal?","Is this set of parameters empty?","Is this value empty?","Iterate over the parameters.","Get the length of the output value as a byte slice.","Get the count of the number ASCII characters in this …","Get the length of this value in ASCII characters.","Get the length of this value in ASCII characters.","Get the length of this value in ASCII characters.","Get the length of this value in ASCII characters.","Parse an <code>Ident</code> from a string.","Create a <code>Output</code> from the given byte slice, validating it …","Create new empty <code>ParamsString</code>.","Create a <code>Salt</code> from the given B64-encoded input string, …","Create a new <code>SaltString</code> from the given B64-encoded input …","Parse a <code>Value</code> from the provided <code>str</code>, validating it …","Parse a password hash from a string in the PHC string …","Parse a password hash from a string in the PHC string …","Parse an <code>Ident</code> from a string, panicking on parse errors.","Create a <code>Output</code> from the given byte slice and <code>Encoding</code>, …","Algorithm-specific parameters.","Algorithm-specific parameters.","Parse a password hash from the given <code>Encoding</code>.","Parse a password hash from the given <code>Encoding</code>.","","","","Parse this owned string as a <code>PasswordHash</code>.","","<code>Salt</code> string for personalizing a password hash output.","<code>Salt</code> string for personalizing a password hash output.","Serialize this <code>PasswordHash</code> as a <code>PasswordHashString</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Upgrade an MCF hash to a PHC hash. MCF follow this rough …","Verify a password hash in MCF format against the provided …","Verify a password hash in MCF format against the provided …","Compute this password hashing function against the …","Verify this password hash using the specified set of …","Optional version field.","Optional version field.","Unsupported algorithm.","“B64” encoding error.","Generic error, union of <code>InvalidLengthError</code> and …","Cryptographic error.","Contains the error value","Password hashing errors.","Character is not in the allowed set.","Invalid encoding of provided Base64 string.","Format is invalid.","Insufficient output buffer length.","Parse errors relating to invalid parameter values or salts.","Value is malformed.","Contains the success value","Output size unexpected.","Duplicate parameter name encountered.","Invalid parameter name.","Invalid parameter value.","Maximum number of parameters exceeded.","Invalid password.","Password hash string invalid.","Password hash string contains trailing data.","Result type.","Salt invalid.","Value exceeds the maximum allowed length.","Value does not satisfy the minimum length.","Invalid algorithm version.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an <code>Error::ParamValueInvalid</code> which warps this error.","Create an <code>Error::SaltInvalid</code> which wraps this error.","","","","","","","","","","","","","","","","","Expected output size in relation to <code>provided</code>.","Indicates why the output size is unexpected."],"i":[16,11,16,16,0,0,0,0,11,13,9,11,13,0,0,28,0,0,0,0,0,13,0,0,0,0,1,1,1,10,17,11,1,9,10,6,11,13,14,9,10,14,6,1,13,14,9,10,11,13,14,9,11,14,11,16,6,11,1,13,14,9,17,10,16,6,11,1,13,14,9,17,10,16,6,11,1,13,14,9,17,10,16,6,11,1,13,14,9,17,10,16,6,9,11,9,16,11,13,14,16,1,6,16,11,14,16,11,17,10,16,6,11,1,13,14,9,17,10,16,6,11,1,13,14,9,17,10,0,16,6,6,11,11,1,1,13,13,14,14,9,9,17,17,10,10,16,6,11,1,13,13,14,9,17,10,10,10,13,14,1,11,1,10,14,17,1,1,1,6,9,10,17,28,28,28,11,16,6,11,1,13,14,9,17,10,9,1,9,1,11,1,13,14,9,10,6,11,1,13,14,9,17,10,6,11,10,17,17,10,16,6,9,10,0,10,17,17,16,6,11,1,13,14,9,17,10,6,11,1,13,14,9,17,10,8,8,16,6,6,11,11,1,13,13,14,9,9,17,17,10,16,6,11,1,13,14,9,17,10,16,6,11,1,13,14,9,17,10,43,43,43,35,17,10,17,36,36,0,36,5,0,37,20,37,20,0,37,5,36,36,36,36,36,36,36,36,0,36,37,37,36,36,37,20,36,37,20,36,37,20,36,37,20,36,37,20,36,37,20,36,36,37,37,20,20,36,36,36,37,20,20,20,20,36,37,20,37,37,36,36,37,20,36,37,20,36,37,20,36,37,20,36,37,20,44,44],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1,[3,[2]]],[[5,[4]]],[[7,[6]]]],[[1,-1,8],[[5,[4]]],[[7,[6]]]],[[1,-1,-2],[[5,[4]]],[[7,[6]]],[[7,[9]]]],[10,6],0,[11,[[3,[2]]]],[1,[[3,[2]]]],[9,[[3,[2]]]],[10,[[3,[2]]]],[6,12],[11,[[3,[2]]]],[13,12],[14,12],[9,12],[10,12],[14,13],[6,12],[1,12],[13,12],[14,12],[9,12],[10,12],[12,[[5,[11]]]],[[13,[3,[2]]],[[5,[[3,[2]]]]]],[[14,[3,[2]]],[[5,[[3,[2]]]]]],[[9,[3,[2]]],[[5,[[3,[2]]]]]],[[11,[3,[2]]],[[5,[12]]]],[[[3,[2]]],[[5,[14]]]],[11,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[6,6],[11,11],[1,1],[13,13],[14,14],[9,9],[17,17],[10,10],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[16,16],18],[[6,6],18],[[9,9],18],[[11,11],19],[9,[[5,[8]]]],[[16,-1,[3,[2]]],[[21,[[3,[2]],20]]],[[22,[[3,[2]]]]]],[[12,16],[[5,[11]]]],[[13,[3,[2]]],[[5,[[3,[2]]]]]],[[14,[3,[2]]],[[5,[[3,[2]]]]]],[[],16],[[],1],[6,12],[[16,[3,[2]],[3,[2]]],[[21,[12,20]]]],[[11,[3,[2]],16],[[5,[12]]]],[[[3,[2]]],[[5,[14]]]],[[16,[3,[2]]],15],[11,16],[17,16],[10,16],[[16,16],23],[[6,6],23],[[11,11],23],[[1,1],23],[[13,13],23],[[14,14],23],[[9,9],23],[[17,17],23],[[10,10],23],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],0,[[16,24],25],[[6,24],25],[[6,24],25],[[11,24],25],[[11,24],25],[[1,24],25],[[1,24],25],[[13,24],25],[[13,24],25],[[14,24],25],[[14,24],25],[[9,24],25],[[9,24],25],[[17,24],25],[[17,24],25],[[10,24],25],[[10,24],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,10],[17,10],[-1,-1,[]],[12,[[5,[13]]]],[12,[[5,[14]]]],[-1,1,26],[12,[[5,[11]]]],[12,[[5,[1]]]],[12,[[5,[10]]]],[-1,14,27],[[-1,-2,-3],[[5,[17]]],28,[[22,[[3,[2]]]]],[[29,[13]]]],[[1,-1],[[30,[9]]],[[7,[6]]]],[[1,-1],[[30,[8]]],[[7,[6]]]],[[1,-1],[[30,[12]]],[[7,[6]]]],[[6,-1],4,31],[[9,-1],4,31],[10,[[30,[11]]]],0,[[-1,[3,[2]],-2],[[5,[17]]],[],[[29,[13]]]],[[-1,[3,[2]],-2],[[5,[17]]],[],[[29,[13]]]],[[-1,[3,[2]],[30,[6]],[30,[8]],-2],[[5,[17]]],[],[[29,[13]]]],[[15,-1],[[5,[11]]],32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,23],[1,23],[9,23],0,[11,15],[1,15],[13,15],[14,15],[9,15],[10,15],[12,[[5,[6]]]],[[[3,[2]]],[[5,[11]]]],[[],1],[12,[[5,[13]]]],[12,[[5,[14]]]],[12,[[5,[9]]]],[12,[[5,[17]]]],[12,[[5,[10]]]],[12,6],[[[3,[2]],16],[[5,[11]]]],[10,1],0,[[12,16],[[5,[17]]]],[[12,16],[[5,[10]]]],[[16,16],[[30,[18]]]],[[6,6],[[30,[18]]]],[[9,9],[[30,[18]]]],[10,17],0,[10,[[30,[13]]]],0,[17,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[9,[[5,[8]]]],[9,[[5,[8]]]],[-1,[[21,[-2]]],[],[]],[12,[[5,[6]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[[[3,[2]]],[[5,[11]]]],[-1,[[21,[-2]]],[],[]],[12,[[5,[13]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[12,[[5,[9]]]],[-1,[[21,[-2]]],[],[]],[12,[[5,[17]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[-1,12],[[5,[17]]],[]],[[-1,[3,[2]],12],[[5,[4]]],35],[[-1,[3,[2]],12],[[5,[4]]],35],[[-1,[3,[2]],17],[[5,[4]]],[]],[[17,[3,[35]],-1],[[5,[4]]],[[22,[[3,[2]]]]]],[10,[[30,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[20,20],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[36,36],23],[[37,37],23],[[20,20],23],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[36,24],[[21,[4,38]]]],[[36,24],25],[[37,24],25],[[37,24],[[21,[4,38]]]],[[20,24],[[21,[4,38]]]],[[20,24],[[21,[4,38]]]],[-1,-1,[]],[39,36],[20,36],[-1,-1,[]],[40,20],[41,20],[-1,-1,[]],[39,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,36],[37,36],[36,[[30,[42]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0],"c":[49,50,53,199,200],"p":[[3,"ParamsString",0],[15,"u8"],[15,"slice"],[15,"tuple"],[6,"Result",276],[3,"Ident",0],[8,"TryInto",357],[6,"Decimal",0],[3,"Value",0],[3,"PasswordHashString",0],[3,"Output",0],[15,"str"],[3,"Salt",0],[3,"SaltString",0],[15,"usize"],[4,"Encoding",0],[3,"PasswordHash",0],[4,"Ordering",358],[3,"Choice",359],[4,"B64Error",276],[4,"Result",360],[8,"AsRef",357],[15,"bool"],[3,"Formatter",361],[6,"Result",361],[8,"IntoIterator",362],[8,"CryptoRngCore",363],[8,"PasswordHasher",0],[8,"Into",357],[4,"Option",364],[8,"Hasher",365],[8,"FnOnce",366],[3,"String",367],[3,"TypeId",368],[8,"PasswordVerifier",0],[4,"Error",276],[4,"InvalidValue",276],[3,"Error",361],[3,"InvalidLengthError",369],[3,"Utf8Error",370],[3,"InvalidEncodingError",369],[8,"Error",371],[8,"McfHasher",0],[13,"OutputSize",355]]},\
"pbkdf2":{"doc":"This crate implements the PBKDF2 key derivation function …","t":"CFFFF","n":["hmac","pbkdf2","pbkdf2_array","pbkdf2_hmac","pbkdf2_hmac_array"],"q":[[0,"pbkdf2"],[5,"crypto_common"],[6,"core::result"]],"d":["","Generic implementation of PBKDF2 algorithm which accepts …","A variant of the <code>pbkdf2</code> function which returns an array …","A variant of the <code>pbkdf2</code> function which uses HMAC for PRF. …","A variant of the <code>pbkdf2_hmac</code> function which returns an …"],"i":[0,0,0,0,0],"f":[0,[[[2,[1]],[2,[1]],3,[2,[1]]],[[6,[4,5]]]],[[[2,[1]],[2,[1]],3],[[6,[[7,[1]],5]]]],[[[2,[1]],[2,[1]],3,[2,[1]]],4],[[[2,[1]],[2,[1]],3],[[7,[1]]]]],"c":[],"p":[[15,"u8"],[15,"slice"],[15,"u32"],[15,"tuple"],[3,"InvalidLength",5],[4,"Result",6],[15,"array"]]},\
"percent_encoding":{"doc":"URLs use special characters to indicate the parts of the …","t":"DRRDDLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLF","n":["AsciiSet","CONTROLS","NON_ALPHANUMERIC","PercentDecode","PercentEncode","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode_utf8","decode_utf8_lossy","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","next","next","percent_decode","percent_decode_str","percent_encode","percent_encode_byte","remove","size_hint","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utf8_percent_encode"],"q":[[0,"percent_encoding"],[50,"alloc::borrow"],[51,"core::str::error"],[52,"core::result"],[53,"core::fmt"],[54,"core::fmt"],[55,"alloc::string"],[56,"core::any"]],"d":["Represents a set of characters or bytes in the ASCII range.","The set of 0x00 to 0x1F (C0 controls), and 0x7F (DEL).","Everything that is not an ASCII letter or digit.","The return type of <code>percent_decode</code>.","The return type of <code>percent_encode</code> and <code>utf8_percent_encode</code>.","","","","","","","","","","","","Decode the result of percent-decoding as UTF-8.","Decode the result of percent-decoding as UTF-8, lossily.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Percent-decode the given bytes.","Percent-decode the given string.","Percent-encode the given bytes with the given set.","Return the percent-encoding of the given byte.","","","","","","","","","","","","","","","","Percent-encode the UTF-8 encoding of the given string."],"i":[0,0,0,0,0,1,1,3,4,1,3,4,3,4,3,4,4,4,3,4,1,3,4,1,3,4,3,4,3,4,0,0,0,0,1,3,4,3,4,3,1,3,4,1,3,4,1,3,4,0],"f":[0,0,0,0,0,[[1,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[4,[[9,[[7,[6]],8]]]],[4,[[7,[6]]]],[[3,10],11],[[4,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[12,[6]]]],[4,[[12,[2]]]],[[[13,[2]]],4],[6,4],[[[13,[2]],1],3],[2,6],[[1,2],1],[3,[[5,[14,[12,[14]]]]]],[4,[[5,[14,[12,[14]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[6,1],3]],"c":[],"p":[[3,"AsciiSet",0],[15,"u8"],[3,"PercentEncode",0],[3,"PercentDecode",0],[15,"tuple"],[15,"str"],[4,"Cow",50],[3,"Utf8Error",51],[4,"Result",52],[3,"Formatter",53],[6,"Result",53],[4,"Option",54],[15,"slice"],[15,"usize"],[3,"String",55],[3,"TypeId",56]]},\
"pin_project_lite":{"doc":"A lightweight version of pin-project written with …","t":"O","n":["pin_project"],"q":[[0,"pin_project_lite"]],"d":["A macro that creates a projection type covering all the …"],"i":[0],"f":[0],"c":[],"p":[]},\
"pin_utils":{"doc":"Utilities for pinning","t":"OOO","n":["pin_mut","unsafe_pinned","unsafe_unpinned"],"q":[[0,"pin_utils"]],"d":["Pins a value on the stack.","A pinned projection of a struct field.","An unpinned projection of a struct field."],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"pkcs8":{"doc":"RustCrypto: PKCS#8 (Private Keys)","t":"GNIIIDIINENSSDNNDNGDDGNNEMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLMLMLLMMLLLLLLLCMMLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AlgorithmIdentifierRef","Asn1","AssociatedOid","DecodePrivateKey","DecodePublicKey","Document","EncodePrivateKey","EncodePublicKey","Err","Error","KeyMalformed","MAX_SIZE","OID","ObjectIdentifier","Ok","ParametersMalformed","PrivateKeyInfo","PublicKey","Result","SecretDocument","SubjectPublicKeyInfo","SubjectPublicKeyInfoRef","V1","V2","Version","algorithm","algorithm","algorithm","arc","arcs","as_bytes","as_bytes","as_bytes","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_decode","can_decode","can_decode","can_decode","can_decode","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","decode","decode","decode","decode","decode","decode_msg","decode_msg","decode_value","decode_value","decode_value","der","der_cmp","der_cmp","drop","encode","encode","encode","encode","encode","encode_msg","encode_msg","encode_value","encode_value","encode_value","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_arcs","from_bytes","from_pkcs8_der","from_pkcs8_der","from_public_key_der","from_public_key_der","from_str","has_public_key","hash","into","into","into","into","into","into","into","into_secret","into_vec","len","len","len","new","new","new_unwrap","oid","owned_to_ref","parameters","parent","partial_cmp","private_key","public_key","push_arc","read_der_file","read_der_file","read_pkcs8_der_file","read_pkcs8_der_file","read_public_key_der_file","ref_to_owned","spki","subject_public_key","subject_public_key","tag","tag","tag","tag","tag","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_pkcs8_der","to_public_key_der","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_cmp","value_cmp","value_len","value_len","value_len","version","write_der_file","write_der_file","write_pkcs8_der_file","write_pkcs8_der_file","write_public_key_der_file"],"q":[[0,"pkcs8"],[233,"core::option"],[234,"const_oid::arcs"],[235,"der::tag"],[236,"core::clone"],[237,"core::cmp"],[238,"der::error"],[239,"core::result"],[240,"der::reader"],[241,"der::error"],[242,"der::header"],[243,"der::asn1::choice"],[244,"der::encode"],[245,"der::writer"],[246,"der::length"],[247,"core::fmt"],[248,"core::fmt"],[249,"der::error"],[250,"core::iter::traits::collect"],[251,"core::hash"],[252,"alloc::alloc"],[253,"alloc::vec"],[254,"der::asn1::any::allocating"],[255,"der::asn1::bit_string::allocating"],[256,"std::path"],[257,"core::convert"],[258,"der::asn1::any"],[259,"der::asn1::bit_string"],[260,"zeroize"],[261,"alloc::string"],[262,"der::tag"],[263,"der::ord"],[264,"der::ord"]],"d":["<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.","ASN.1 DER-related errors.","A trait which associates an OID with a type.","Parse a private key object from a PKCS#8 encoded document.","Parse a public key object from an encoded SPKI document.","ASN.1 DER-encoded document.","Serialize a private key object to a PKCS#8 encoded …","Serialize a public key object to a SPKI-encoded document.","Contains the error value","Error type","Malformed cryptographic key contained in a PKCS#8 document.","Maximum size of a BER/DER-encoded OID in bytes.","The OID associated with this type.","Object identifier (OID).","Contains the success value","<code>AlgorithmIdentifier::parameters</code> is malformed or otherwise …","PKCS#8 <code>PrivateKeyInfo</code>.","Public key errors propagated from the <code>spki::Error</code> type.","Result type","Secret <code>Document</code> type.","X.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …","<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …","Denotes PKCS#8 v1: no public key field.","Denotes PKCS#8 v2: <code>OneAsymmetricKey</code> with public key field.","Version identifier for PKCS#8 documents.","X.509 <code>AlgorithmIdentifier</code> for the public key type","X.509 <code>AlgorithmIdentifier</code> for the private key type.","X.509 <code>AlgorithmIdentifier</code> for the public key type","Return the arc with the given index, if it exists.","Iterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…","Get the BER/DER serialization of this OID as bytes.","Get the ASN.1 DER-encoded bytes of this document.","Borrow the inner serialized bytes of this document.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to decode the inner ASN.1 DER message contained in this","Try to decode the inner ASN.1 DER message as the given …","","","","","","","","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","","Encode the provided type as ASN.1 DER, storing the …","Encode the provided type as ASN.1 DER.","","","","Compute the length of this value in bytes when encoded as …","","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Parse an OID from a slice of <code>Arc</code> values (i.e. integers).","Parse an OID from from its BER/DER encoding.","Deserialize PKCS#8 private key from ASN.1 DER-encoded data …","","Deserialize object from ASN.1 DER-encoded […","","","Is this version expected to have a public key?","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to a <code>SecretDocument</code>.","Convert to an ASN.1 DER-encoded byte vector.","Get the length of this <code>ObjectIdentifier</code> in arcs.","Get the length of the encoded ASN.1 DER in bytes.","Get the length of the encoded ASN.1 DER in bytes.","Create a new PKCS#8 <code>PrivateKeyInfo</code> message.","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","Algorithm OID, i.e. the <code>algorithm</code> field in the …","","Algorithm <code>parameters</code>.","Get the parent OID of this one (if applicable).","","Private key data.","Public key data, optionally available if version is V2.","Push an additional arc onto this OID, returning the child …","Read ASN.1 DER document from a file.","Read ASN.1 DER document from a file.","Load PKCS#8 private key from an ASN.1 DER-encoded file on …","Load PKCS#8 private key from an ASN.1 DER-encoded file on …","Load public key object from an ASN.1 DER-encoded file on …","","","Public key data","Public key data","","","","","","Return an allocated ASN.1 DER serialization as a byte …","","","","","","","","Serialize a <code>SecretDocument</code> containing a PKCS#8-encoded …","Serialize a <code>Document</code> containing a SPKI-encoded public key.","","","Return an ASN.1 DER-encoded byte vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the PKCS#8 <code>Version</code> for this structure.","Write ASN.1 DER document to a file.","Write ASN.1 DER document to a file.","Write ASN.1 DER-encoded PKCS#8 private key to the given …","Write ASN.1 DER-encoded PKCS#8 private key to the given …","Write ASN.1 DER-encoded public key to the given path"],"i":[0,12,0,0,0,0,0,0,37,0,12,1,55,0,37,12,0,12,0,0,0,0,14,14,0,56,13,15,1,1,1,8,9,1,8,12,13,14,1,15,8,9,12,13,14,1,15,8,9,13,14,1,15,8,12,13,14,1,15,8,9,12,13,14,1,15,8,9,1,13,14,1,15,8,8,9,13,1,15,0,1,15,9,13,14,1,15,8,8,9,13,1,15,13,14,1,15,8,12,14,1,15,8,12,14,1,15,8,12,12,13,14,1,1,15,8,9,12,12,12,12,13,14,1,1,15,8,9,9,1,1,57,9,58,8,1,14,1,12,13,14,1,15,8,9,8,8,1,8,9,13,1,1,42,15,42,1,1,13,13,1,8,9,57,57,58,15,0,56,15,13,14,1,15,8,9,12,13,14,1,15,8,9,59,60,12,1,8,12,13,13,14,14,1,1,1,15,15,8,8,8,8,8,9,9,9,9,9,12,13,14,1,15,8,9,12,13,14,1,15,8,9,1,15,13,1,15,13,8,9,59,59,60],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[1,5],[1,[[7,[6]]]],[8,[[7,[6]]]],[9,[[7,[6]]]],[1,[[7,[6]]]],[8,[[7,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,11],[10,11],[10,11],[10,11],[10,11],[12,12],[13,13],[14,14],[1,1],[[[15,[-1,-2]]],[[15,[-1,-2]]],16,16],[8,8],[9,9],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[1,1],18],[-1,[[20,[-2,19]]],21,[]],[-1,[[22,[14]]],21],[-1,[[20,[-2,19]]],21,[]],[-1,[[20,[-2,19]]],21,[]],[-1,[[20,[8,19]]],21],[8,[[20,[-1,19]]],23],[9,[[20,[-1,19]]],23],[[-1,24],[[22,[13]]],21],[[-1,24],[[20,[1,19]]],21],[[-1,24],[[20,[[15,[-2,-3]],19]]],21,[25,26],23],0,[[-1,-2],[[20,[18,19]]],[],[]],[[-1,-2],[[20,[18,19]]],[],[]],[9,17],[[-1,-2],[[20,[17,19]]],[],27],[[14,-1],[[22,[17]]],27],[[-1,-2],[[20,[17,19]]],[],27],[[-1,-2],[[20,[17,19]]],[],27],[[8,-1],[[20,[17,19]]],27],[-1,[[20,[8,19]]],26],[-1,[[20,[9,19]]],26],[[13,-1],[[22,[17]]],27],[[1,-1],[[20,[17,19]]],27],[[[15,[-1,-2]],-3],[[20,[17,19]]],[25,26],26,27],[-1,[[20,[28,19]]],[]],[14,[[22,[28]]]],[-1,[[20,[28,19]]],[]],[-1,[[20,[28,19]]],[]],[8,[[20,[28,19]]]],[[12,12],11],[[14,14],11],[[1,1],11],[[[15,[-1,-2]],[15,[-1,-2]]],11,[],[]],[[8,8],11],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[12,29],30],[[12,29],30],[[13,29],30],[[14,29],30],[[1,29],[[20,[17,31]]]],[[1,29],[[20,[17,31]]]],[[[15,[-1,-2]],29],[[20,[17,31]]],32,32],[[8,29],[[20,[17,31]]]],[[9,29],[[20,[17,31]]]],[19,12],[-1,-1,[]],[33,12],[34,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,9],[-1,[[20,[1,35]]],36],[[[7,[6]]],[[20,[1,35]]]],[[[7,[6]]],[[37,[-1]]],[]],[[[7,[6]]],[[20,[-1,12]]],[]],[[[7,[6]]],[[20,[-1,33]]],[]],[[[7,[6]]],[[20,[-1,33]]],[]],[38,[[20,[1,35]]]],[14,11],[[1,-1],17,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,9],[8,[[41,[6,40]]]],[1,2],[8,28],[9,28],[[42,[7,[6]]],13],[38,[[20,[1,35]]]],[38,1],0,[[[15,[43,44]]]],0,[1,[[4,[1]]]],[[1,1],[[4,[18]]]],0,0,[[1,3],[[20,[1,35]]]],[-1,[[20,[8,19]]],[[46,[45]]]],[-1,[[20,[9,19]]],[[46,[45]]]],[-1,[[37,[-2]]],[[46,[45]]],[]],[-1,[[37,[-2]]],[[46,[45]]],[]],[-1,[[20,[-2,33]]],[[46,[45]]],[]],[[[15,[47,48]]]],0,0,0,[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[9,[[49,[[41,[6,40]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[37,[9]]],[]],[-1,[[20,[8,33]]],[]],[-1,50,[]],[-1,50,[]],[8,[[41,[6,40]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[7,[6]]],[[37,[13]]]],[6,[[20,[14,12]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[47,[[20,[1,19]]]],[[[7,[6]]],[[20,[1,35]]]],[[[7,[6]]],[[20,[[15,[-1,-2]],33]]],[25,26],[23,26,51]],[-1,[[20,[-2]]],[],[]],[[[41,[6,40]]],[[20,[8,19]]]],[-1,[[20,[-2]]],[],[]],[[[7,[6]]],[[20,[8,19]]]],[[[15,[-1,-2]]],[[20,[8,33]]],[25,26],[23,26,51]],[[[15,[-1,-2]]],[[20,[8,33]]],[25,26],[23,26,51]],[13,[[37,[9]]]],[[[41,[6,40]]],[[20,[9,19]]]],[13,[[37,[9]]]],[-1,[[20,[-2]]],[],[]],[[[7,[6]]],[[20,[9,19]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[[-1,-2],[[20,[18,19]]],[],[]],[[[15,[-1,-2]],[15,[-1,-2]]],[[20,[18,19]]],[25,53,26],54],[13,[[22,[28]]]],[1,[[20,[28,19]]]],[[[15,[-1,-2]]],[[20,[28,19]]],[25,26],26],[13,14],[[8,-1],[[20,[17,19]]],[[46,[45]]]],[[9,-1],[[20,[17,19]]],[[46,[45]]]],[[-1,-2],[[37,[17]]],[],[[46,[45]]]],[[-1,-2],[[37,[17]]],[],[[46,[45]]]],[[-1,-2],[[20,[17,33]]],[],[[46,[45]]]]],"c":[],"p":[[3,"ObjectIdentifier",0],[15,"usize"],[15,"u32"],[4,"Option",233],[3,"Arcs",234],[15,"u8"],[15,"slice"],[3,"Document",0],[3,"SecretDocument",0],[4,"Tag",235],[15,"bool"],[4,"Error",0],[3,"PrivateKeyInfo",0],[4,"Version",0],[3,"SubjectPublicKeyInfo",0],[8,"Clone",236],[15,"tuple"],[4,"Ordering",237],[3,"Error",238],[4,"Result",239],[8,"Reader",240],[6,"Result",238],[8,"Decode",241],[3,"Header",242],[8,"Choice",243],[8,"Encode",244],[8,"Writer",245],[3,"Length",246],[3,"Formatter",247],[6,"Result",247],[3,"Error",247],[8,"Debug",247],[4,"Error",248],[4,"ErrorKind",238],[4,"Error",249],[8,"IntoIterator",250],[6,"Result",0],[15,"str"],[8,"Hasher",251],[3,"Global",252],[3,"Vec",253],[6,"AlgorithmIdentifierRef",0],[3,"Any",254],[3,"BitString",255],[3,"Path",256],[8,"AsRef",257],[3,"AnyRef",258],[3,"BitStringRef",259],[3,"Zeroizing",260],[3,"String",261],[8,"FixedTag",235],[3,"TypeId",262],[8,"DerOrd",263],[8,"ValueOrd",263],[8,"AssociatedOid",0],[6,"SubjectPublicKeyInfoRef",0],[8,"DecodePrivateKey",0],[8,"DecodePublicKey",0],[8,"EncodePrivateKey",0],[8,"EncodePublicKey",0]]},\
"poly1305":{"doc":"The Poly1305 universal hash function and message …","t":"RGRGDGLLLLLLLLLLLLLLCL","n":["BLOCK_SIZE","Block","KEY_SIZE","Key","Poly1305","Tag","borrow","borrow_mut","clone","clone_into","compute_unpadded","finalize","fmt","from","into","new","to_owned","try_from","try_into","type_id","universal_hash","update_with_backend"],"q":[[0,"poly1305"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"],[25,"universal_hash"]],"d":["Size of the blocks Poly1305 acts upon","Poly1305 blocks (16-bytes)","Size of a Poly1305 key","Poly1305 keys (32-bytes)","The Poly1305 universal hash function.","Poly1305 tags (16-bytes)","","","","","Compute unpadded Poly1305 for the given input data.","Get the hashed output","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Initialize Poly1305 with the given key","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,[4,[3]]],5],[1,5],[[1,6],[[8,[2,7]]]],[-1,-1,[]],[-1,-2,[],[]],[9,1],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,10,[]],0,[[1,-1],2,11]],"c":[],"p":[[3,"Poly1305",0],[15,"tuple"],[15,"u8"],[15,"slice"],[6,"Tag",0],[3,"Formatter",22],[3,"Error",22],[4,"Result",23],[6,"Key",0],[3,"TypeId",24],[8,"UhfClosure",25]]},\
"ppv_lite86":{"doc":"","t":"IIIIIIIIIIQIIIIIIIIIIIIIKKOOOKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKIQIQIQIQIQIQIQIQIQIQKLLKKKLLCCCKKKAGGDDDDDDGGGDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLTTTLLLLLLLLLLLLLLL","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"],[269,"core::marker"],[270,"core::clone"],[271,"core::marker"],[272,"core::any"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,0,0,0,33,34,8,33,34,35,35,35,35,35,36,36,36,36,36,36,37,36,36,38,38,38,39,39,39,40,40,40,40,40,40,40,8,41,42,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,7,35,35,43,4,4,35,35,0,0,0,44,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,22,23,24,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,22,23,23,24,19,21,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,23,24,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,22,0,0,0,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-1],[],[]],[-1,-1,[]],0,0,0,[[-1,1],-2,[],[]],[[-1,1],-2,[],[]],[-1,-2,[],[]],[[-1,-2,1],-1,[],[]],[[-1,-2,1],-1,[],[]],[[],-1,[]],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1,-1,-1],[[5,[-1,-1,-1,-1]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[[-1,-2],-3,[],[],[[7,[-2]]]],[[-1,-2],-3,[],[],[[7,[-2]]]],[-1,-2,[],[]],[[[3,[2]]],-1,[]],[[[3,[2]]],-1,[]],[[-1,-2],-3,[],[],[[8,[-2]]]],[[-1,-2],-3,[],[],[[8,[-2]]]],0,0,0,[-1,-2,[],[]],[[-1,[3,[2]]],5,[]],[[-1,[3,[2]]],5,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[[[19,[-1,-2,-3]]],[[19,[-1,-2,-3]]],20,20,20],[[[21,[-1]]],[[21,[-1]]],20],[22,22],[23,23],[24,24],[[],22],[[],23],[[],24],[[22,22],25],[[23,23],25],[[24,24],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[1]]],22],[-1,-1,[]],[[[26,[27]]],23],[-1,-1,[]],[-1,-1,[]],[[],[[19,[-1,-2,-3]]],28,28,28],[[],[[21,[-1]]],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[22]]],23],[[[26,[22]]],24],[23,[[26,[22]]]],[24,[[26,[22]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[22,22],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"u32"],[15,"u8"],[15,"slice"],[8,"StoreBytes",0],[15,"tuple"],[8,"Sized",269],[8,"Store",0],[8,"MultiLane",0],[3,"YesS3",99],[3,"NoS3",99],[3,"YesS4",99],[3,"NoS4",99],[3,"YesA1",99],[3,"NoA1",99],[3,"YesA2",99],[3,"NoA2",99],[3,"YesNI",99],[3,"NoNI",99],[3,"SseMachine",99],[8,"Clone",270],[3,"Avx2Machine",99],[19,"vec128_storage",99],[19,"vec256_storage",99],[19,"vec512_storage",99],[15,"bool"],[15,"array"],[15,"u64"],[8,"Copy",269],[4,"Result",271],[3,"TypeId",272],[8,"AndNot",0],[8,"BSwap",0],[8,"Vec2",0],[8,"Vec4",0],[8,"Machine",0],[8,"RotateEachWord32",0],[8,"RotateEachWord64",0],[8,"Words4",0],[8,"LaneWords4",0],[8,"Swap64",0],[8,"Vector",0],[8,"Vec4Ext",0],[8,"UnsafeFrom",0],[8,"VZip",0]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[231,"proc_macro2::extra"],[246,"proc_macro2::token_stream"],[262,"core::cmp"],[263,"core::marker"],[264,"core::convert"],[265,"core::iter::traits::collect"],[266,"core::fmt"],[267,"core::fmt"],[268,"proc_macro"],[269,"core::hash"],[270,"core::option"],[271,"alloc::string"],[272,"core::ops::range"],[273,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,10,11,12,7,7,0,5,5,5,5,23,23,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,23,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,23,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,23,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,23,7,8,9,1,12,5,0,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,-1],16,[17,[19,[18]]]],[[12,12],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[7,-1],13,20],[[7,-1],13,20],0,[21,5],[21,5],[22,5],[22,5],[[23,24],25],[[23,24],25],[[7,24],25],[[7,24],25],[[6,24],25],[[8,24],25],[[8,24],25],[[9,24],25],[[9,24],25],[[10,24],25],[[1,24],25],[[1,24],25],[[11,24],25],[[12,24],25],[[12,24],25],[[5,24],25],[[5,24],25],[-1,-1,[]],[8,7],[26,7],[-1,-1,[]],[-1,-1,[]],[27,6],[9,8],[1,8],[-1,-1,[]],[12,8],[5,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,20],[-1,7,20],[18,[[28,[7,23]]]],[18,[[28,[5,23]]]],[[12,-1],13,29],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,35],[7,16],[36,5],[36,5],[[6,6],[[37,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[37,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[37,[38]]]],[1,11],[23,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[37,[6]]],[[40,[39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,27],[39,5],[39,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,24],25],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],13,[],[]],[[35,24],25],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[37,[8]]]],[35,[[13,[39,[37,[39]]]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",262],[3,"DelimSpan",231],[15,"bool"],[8,"Sized",263],[15,"str"],[8,"AsRef",264],[8,"IntoIterator",265],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",266],[6,"Result",266],[3,"TokenStream",267],[3,"Span",267],[4,"Result",268],[8,"Hasher",269],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",246],[15,"isize"],[4,"Option",270],[3,"String",271],[15,"usize"],[8,"RangeBounds",272],[3,"TypeId",273],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]]},\
"rand":{"doc":"Utilities for random number generation","t":"SIDISIIQILLLALLKLLLLLLLKLLLLLLLLLLLKKAFLLALLLLLALLFLKLLKLLLLNDDEDDIINNNDDDDNDEDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLAIIIQDDDDDIQKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCAIDLLLLLLLLLLCCCCCCCCCCCDDDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLQIDILLKLKLLKKLKKLLALLLLKKLLLLLEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLL","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","update_weights","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","WeightedError","WeightedIndex","alias_method","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","equivalent","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","equivalent","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[60,"rand::distributions"],[330,"rand::distributions::uniform"],[475,"rand::distributions::weighted"],[478,"rand::distributions::weighted::alias_method"],[490,"rand::prelude"],[501,"rand::rngs"],[563,"rand::rngs::adapter"],[611,"rand::rngs::mock"],[631,"rand::seq"],[661,"rand::seq::index"],[714,"core::num::nonzero"],[715,"core::option"],[716,"core::marker"],[717,"core::fmt"],[718,"core::fmt"],[719,"getrandom::error"],[720,"core::error"],[721,"alloc::alloc"],[722,"alloc::boxed"],[723,"core::convert"],[724,"std::io::error"],[725,"alloc::string"],[726,"core::any"],[727,"core::clone"],[728,"core::cmp"],[729,"core::cmp"],[730,"core::ops::range"],[731,"core::iter::traits::collect"],[732,"core::ops::arith"],[733,"core::default"],[734,"core::num::nonzero"],[735,"core::num::nonzero"],[736,"alloc::vec"],[737,"rand_core::block"],[738,"std::io"],[739,"core::ops::index"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","Returns the argument unchanged.","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Update a subset of weights, without changing the number of …","","","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,84,0,1,1,1,0,31,31,13,1,1,1,1,1,84,84,84,31,31,31,31,31,31,31,31,1,1,1,13,13,0,0,1,13,0,31,31,31,31,84,0,1,1,0,1,5,31,31,13,1,1,1,1,43,0,0,0,0,0,0,0,36,43,43,0,0,0,0,43,0,0,0,94,33,34,35,36,28,48,37,38,33,39,41,43,44,34,35,36,28,48,37,38,33,39,41,43,44,34,35,36,37,38,33,39,41,43,44,34,35,36,37,38,33,39,41,43,44,34,35,36,41,43,44,36,43,35,36,36,28,48,37,38,33,39,41,43,43,44,34,35,36,28,48,37,38,33,39,41,43,44,44,44,34,35,35,36,28,48,37,38,33,39,41,43,44,34,28,27,27,35,39,41,28,27,35,48,37,37,38,38,33,39,41,44,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,27,27,94,94,28,35,36,37,38,33,39,41,43,44,34,36,43,35,36,28,48,37,38,33,39,41,43,44,34,35,36,28,48,37,38,33,39,41,43,44,34,35,36,28,48,37,38,33,39,41,43,44,34,0,41,35,36,28,48,37,38,33,39,41,43,44,34,0,0,0,0,16,0,0,0,0,0,0,95,75,71,72,73,74,71,72,73,74,71,72,73,74,71,72,73,74,71,73,71,72,73,74,71,72,73,74,71,72,73,74,17,95,44,71,71,71,71,71,71,71,71,71,71,71,71,72,73,73,74,95,44,71,71,71,71,71,71,71,71,71,71,71,71,72,73,73,74,95,71,71,71,71,71,71,71,71,71,71,71,71,72,73,73,74,17,95,71,71,71,71,71,71,71,71,71,71,71,71,73,73,95,71,71,71,71,71,71,71,71,71,71,71,71,71,72,73,74,71,72,73,74,71,72,73,74,71,72,73,74,71,72,73,74,0,0,0,0,0,77,77,77,77,77,77,77,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,81,29,80,81,29,80,81,29,80,81,29,80,81,29,80,29,81,81,80,81,29,80,81,29,80,81,29,81,81,80,81,29,0,80,81,29,80,81,29,80,81,29,80,81,29,80,81,29,80,81,29,80,81,29,80,81,29,0,0,0,82,85,87,82,85,87,82,82,82,85,82,85,87,87,82,85,87,82,85,87,82,85,82,85,82,85,82,82,87,82,87,85,82,85,87,82,85,87,82,85,87,82,85,87,82,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,96,0,0,0,89,89,96,97,96,97,97,96,96,97,96,96,89,89,0,89,89,89,89,96,96,89,89,89,89,89,0,0,0,91,93,92,91,93,92,91,92,91,92,91,91,93,92,91,91,91,93,92,91,91,93,92,91,93,92,91,91,91,91,93,92,0,0,93,92,91,92,91,93,92,91,93,92,91,93,92,91,93,92],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],0,[[-1,-2],4,[],[5,6]],[[-1,-2],4,[],[5,6]],[[-1,[8,[7]]],4,[]],[[1,9],[[11,[4,10]]]],[[1,9],[[11,[4,10]]]],[-1,-1,[]],[12,1],[2,1],[[],-1,[]],[-1,[[11,[-2,1]]],13,[]],[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,14],15,[]],[[-1,14],15,[]],[[-1,-3],-2,[],16,[[17,[-2]]]],[[-1,-3],-2,[],16,[[17,[-2]]]],[[-1,18,18],15,[]],[[-1,18,18],15,[]],[1,19],[-1,-2,[],[]],[-1,1,[[22,[[21,[19,20]]]]]],[-1,18,[]],[-1,23,[]],0,[[],-1,[]],[1,[[3,[24]]]],[[13,[8,[7]]],[[11,[25,26]]]],0,[[-1,-3],-2,[],[],[[27,[-2]]]],[[-1,-3],-2,[],[],[[27,[-2]]]],[[-1,-3],[[28,[-3,-1,-2]]],6,[],[[27,[-2]]]],[[-1,-3],[[28,[-3,-1,-2]]],6,[],[[27,[-2]]]],[23,-1,[]],0,[1,[[3,[19]]]],[1,[[21,[19,20]]]],[[],29],[-1,30,[]],[[-1,-2],[[11,[4,1]]],[],[31,6]],[[-1,-2],[[11,[4,1]]],[],[5,6]],[[-1,-2],[[11,[4,1]]],[],[5,6]],[[-1,[8,[7]]],[[11,[4,1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,30,25],4,[],[31,6]],[[33,-1,30,25],4,[31,6]],[[34,-1,30,25],4,[31,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[36,36],[37,37],[38,38],[33,33],[[[39,[-1]]],[[39,[-1]]],40],[[[41,[-1]]],[[41,[-1]]],[40,16,42]],[43,43],[[[44,[-1]]],[[44,[-1]]],[40,16]],[34,34],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[35,35],15],[[36,36],15],[[[41,[-1]],[41,[-1]]],15,[45,16,42]],[[43,43],15],[[[44,[-1]],[44,[-1]]],15,[45,16]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[35,9],46],[[36,9],46],[[36,9],46],[[[28,[-1,-2,-3]],9],46,47,47,47],[[[48,[-1,-2,-3,-4]],9],46,47,47,47,47],[[37,9],46],[[38,9],46],[[33,9],46],[[[39,[-1]],9],46,47],[[[41,[-1]],9],46,[47,16,42]],[[43,9],46],[[43,9],46],[[[44,[-1]],9],46,[47,16]],[[34,9],46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[49,[-1]]],[[44,[-1]]],16],[-1,-1,[]],[[[50,[-1]]],[[44,[-1]]],16],[-1,-1,[]],[[18,18],[[11,[35,36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[48,[-1,-2,-3,-4]]],6,51,[],[]],[[-1,-2],[[48,[-1,-2,-3,-4]]],6,51,[],[]],[14,[[11,[35,36]]]],[[[8,[-1]]],[[11,[[39,[-1]],0]]],[]],[-1,[[11,[[41,[-2]],43]]],52,[53,40,54,16,42]],[[[28,[-2,-3,-1]]],[[3,[-1]]],[],[[27,[-1]]],31],[[-1,-2],-3,[],[31,6],[]],[[35,-1],15,[31,6]],[[[48,[-2,-3,-1,-4]],-5],-4,[],[[27,[-1]]],51,[],[31,6]],[[37,-1],55,[31,6]],[[37,-1],14,[31,6]],[[38,-1],14,[31,6]],[[38,-1],55,[31,6]],[[33,-1],7,[31,6]],[[[39,[-1]],-2],-1,[],[31,6]],[[[41,[-1]],-2],25,[16,42],[31,6]],[[[44,[-1]],-2],-1,16,[31,6]],[[34,-1],56,[31,6]],[[34,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[31,6],[],[],[],[],[],[],[],[],[],[]],[[34,-1],14,[31,6]],[[34,-1],57,[31,6]],[[34,-1],58,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[31,6],[],[],[],[],[],[],[],[],[],[],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[60,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[4,[-2,-3,-4]]],[31,6],[],[],[]],[[34,-1],[[4,[-2]]],[31,6],[]],[[34,-1],[[3,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],7,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[31,6],[],[],[],[],[],[],[],[],[]],[[34,-1],61,[31,6]],[[34,-1],62,[31,6]],[[34,-1],18,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],63,[31,6]],[[34,-1],64,[31,6]],[[34,-1],23,[31,6]],[[34,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9]]],[31,6],[],[],[],[],[],[],[],[]],[[34,-1],15,[31,6]],[[34,-1],[[4,[-2,-3,-4,-5,-6,-7]]],[31,6],[],[],[],[],[],[]],[[34,-1],65,[31,6]],[[34,-1],2,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[31,6],[],[],[],[],[],[],[],[],[],[],[],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],66,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],24,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],55,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[4,[-2,-3,-4,-5,-6]]],[31,6],[],[],[],[],[]],[[34,-1],67,[31,6]],[[34,-1],[[4,[-2,-3]]],[31,6],[],[]],[[34,-1],[[4,[-2,-3,-4,-5,-6,-7,-8]]],[31,6],[],[],[],[],[],[],[]],[[34,-1],25,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],68,[31,6]],[[34,-1],[[4,[-2,-3,-4,-5]]],[31,6],[],[],[],[]],[[34,-1],69,[31,6]],[[34,-1],4,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],[[59,[-2]]],[31,6],[]],[[34,-1],70,[31,6]],[[34,-1],[[59,[-2]]],[31,6],[]],[[-1,-2],[[28,[-1,-2,-3]]],6,31,[]],[[-1,-2],[[28,[-1,-2,-3]]],6,31,[]],[[-1,-2,25],30,[],[31,6]],[[-1,-2,25],30,[],[31,6]],[[[28,[-2,-3,-1]]],[[4,[25,[3,[25]]]]],[],[[27,[-1]]],31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,[[[41,[-1]],[8,[[4,[25,-1]]]]],[[11,[4,43]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[71,[-1]]],[[71,[-1]]],40],[72,72],[[[73,[-1]]],[[73,[-1]]],40],[74,74],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[71,[-1]],[71,[-1]]],15,45],[[[73,[-1]],[73,[-1]]],15,45],[[[71,[-1]],9],46,47],[[72,9],46],[[[73,[-1]],9],46,47],[[74,9],46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[[-1,-2],-3,[75,6],[75,6],[]],[[-2,-3],[[44,[-1]]],16,[[75,[-1]],6],[[75,[-1]],6]],[[-1,-2],[[71,[70]]],[75,6],[75,6]],[[-1,-2],[[71,[61]]],[75,6],[75,6]],[[-1,-2],[[71,[25]]],[75,6],[75,6]],[[-1,-2],[[71,[56]]],[75,6],[75,6]],[[-1,-2],[[71,[18]]],[75,6],[75,6]],[[-1,-2],[[71,[24]]],[75,6],[75,6]],[[-1,-2],[[71,[69]]],[75,6],[75,6]],[[-1,-2],[[71,[23]]],[75,6],[75,6]],[[-1,-2],[[71,[57]]],[75,6],[75,6]],[[-1,-2],[[71,[7]]],[75,6],[75,6]],[[-1,-2],[[71,[63]]],[75,6],[75,6]],[[-1,-2],[[71,[64]]],[75,6],[75,6]],[[-1,-2],72,[75,6],[75,6]],[[-1,-2],[[73,[55]]],[75,6],[75,6]],[[-1,-2],[[73,[14]]],[75,6],[75,6]],[[-1,-2],74,[75,6],[75,6]],[[-1,-2],-3,[75,6],[75,6],[]],[[-2,-3],[[44,[-1]]],16,[[75,[-1]],6],[[75,[-1]],6]],[[-1,-2],[[71,[56]]],[75,6],[75,6]],[[-1,-2],[[71,[23]]],[75,6],[75,6]],[[-1,-2],[[71,[7]]],[75,6],[75,6]],[[-1,-2],[[71,[64]]],[75,6],[75,6]],[[-1,-2],[[71,[57]]],[75,6],[75,6]],[[-1,-2],[[71,[70]]],[75,6],[75,6]],[[-1,-2],[[71,[63]]],[75,6],[75,6]],[[-1,-2],[[71,[25]]],[75,6],[75,6]],[[-1,-2],[[71,[24]]],[75,6],[75,6]],[[-1,-2],[[71,[18]]],[75,6],[75,6]],[[-1,-2],[[71,[61]]],[75,6],[75,6]],[[-1,-2],[[71,[69]]],[75,6],[75,6]],[[-1,-2],72,[75,6],[75,6]],[[-1,-2],[[73,[55]]],[75,6],[75,6]],[[-1,-2],[[73,[14]]],[75,6],[75,6]],[[-1,-2],74,[75,6],[75,6]],[[-1,-2],[],[],[31,6]],[[[71,[24]],-1],[],[31,6]],[[[71,[18]],-1],[],[31,6]],[[[71,[25]],-1],[],[31,6]],[[[71,[56]],-1],[],[31,6]],[[[71,[23]],-1],[],[31,6]],[[[71,[69]],-1],[],[31,6]],[[[71,[63]],-1],[],[31,6]],[[[71,[70]],-1],[],[31,6]],[[[71,[61]],-1],[],[31,6]],[[[71,[57]],-1],[],[31,6]],[[[71,[64]],-1],[],[31,6]],[[[71,[7]],-1],[],[31,6]],[[72,-1],[],[31,6]],[[[73,[14]],-1],[],[31,6]],[[[73,[55]],-1],[],[31,6]],[[74,-1],76,[31,6]],[[-1,-2],-3,[],[13,6],[]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[[-1,-2,-3],[],[75,6],[75,6],[31,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[-1]],9],46,[47,78]],[-1,-1,[]],[-1,-2,[],[]],[[[79,[-1]]],[[11,[[77,[-1]],43]]],78],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[80,80],[81,81],[29,29],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],80],[[],29],[[81,81],15],[[-1,-2],15,[],[]],[[80,[8,[7]]],4],[[81,[8,[7]]],4],[[29,[8,[7]]],4],[[80,9],[[11,[4,10]]]],[[81,9],46],[[29,9],46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[11,[81,1]]],13],[[],81],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[80,18],[81,18],[29,18],[80,23],[81,23],[29,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[80,[8,[7]]],[[11,[4,1]]]],[[81,[8,[7]]],[[11,[4,1]]]],[[29,[8,[7]]],[[11,[4,1]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[82,[-1,-2]]],[[82,[-1,-2]]],[83,84,40],[13,40]],[[-1,-2],4,[],[]],[[[85,[-1]],[8,[7]]],4,86],[[[82,[-1,-2]],[8,[7]]],4,[83,84],13],[[[85,[-1]],9],46,47],[[87,9],46],[[87,9],46],[[[82,[-1,-2]],9],46,[83,84,47],[13,47]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[85,[-1]]],86],[[-1,23,-2],[[82,[-1,-2]]],[83,84],13],[[[85,[-1]]],18,86],[[[82,[-1,-2]]],18,[83,84],13],[[[85,[-1]]],23,86],[[[82,[-1,-2]]],23,[83,84],13],[[[82,[-1,-2]]],[[11,[4,1]]],[83,84],13],[87,[[3,[19]]]],[-1,-2,[],[]],[-1,30,[]],[[[85,[-1]],[8,[7]]],[[11,[4,1]]],86],[[[82,[-1,-2]],[8,[7]]],[[11,[4,1]]],[83,84],13],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[[-1,-2],4,[],[]],[[88,88],15],[[-1,-2],15,[],[]],[[88,[8,[7]]],4],[[88,9],46],[-1,-1,[]],[-1,-2,[],[]],[[23,23],88],[88,18],[88,23],[-1,-2,[],[]],[[88,[8,[7]]],[[11,[4,1]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],3,[],[31,6]],[[-1,-2],3,[],[31,6]],[[-1,-2,25],[[89,[-1]]],[],[31,6]],[[-1,-2,25],79,[],[31,6]],[[-1,-2,8],25,[],[31,6]],[[-1,-2,25,-3],[[11,[[89,[-1]],43]]],[],[31,6],51],[[-1,-2],3,[],[31,6]],[[-1,-2],3,[],[31,6]],[[-1,-2,-3],[[11,[43]]],[],[31,6],51],[[-1,-2,-3],[[11,[43]]],[],[31,6],51],[[[89,[-1,-2]],9],46,[47,6],47],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[89,[-1,-2]]],25,[[90,[25]],6],[]],[[[89,[-1,-2]]],3,[[90,[25]],6],[]],[[-1,-2,25],[[4,[8,8]]],[],[31,6]],[[-1,-2],4,[],[31,6]],[[[89,[-1,-2]]],[[4,[25,[3,[25]]]]],[[90,[25]],6],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,91],[92,92],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[91,91],15],[[91,9],46],[[93,9],46],[[92,9],46],[[[79,[25]]],91],[-1,-1,[]],[[[79,[18]]],91],[-1,-1,[]],[-1,-1,[]],[[91,25],25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,92],[-1,-2,[],[]],[-1,-2,[],[]],[91,[[79,[25]]]],[91,15],[91,93],[91,25],[93,[[3,[25]]]],[92,3],[[-1,25,25],91,[31,6]],[[-1,25,-2,25],[[11,[91,43]]],[31,6],51],[93,[[4,[25,[3,[25]]]]]],[92,[[4,[25,[3,[25]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[329,475,476,477,478,479,482,485,563,564],"p":[[3,"Error",0],[3,"NonZeroU32",714],[4,"Option",715],[15,"tuple"],[8,"Fill",0],[8,"Sized",716],[15,"u8"],[15,"slice"],[3,"Formatter",717],[3,"Error",717],[4,"Result",718],[3,"Error",719],[8,"RngCore",0],[15,"f64"],[15,"bool"],[8,"SampleUniform",330],[8,"SampleRange",330],[15,"u32"],[8,"Error",720],[3,"Global",721],[3,"Box",722],[8,"Into",723],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error",724],[8,"Distribution",60],[3,"DistIter",60],[3,"ThreadRng",501],[3,"String",725],[8,"Rng",0],[3,"TypeId",726],[3,"Alphanumeric",60],[3,"Standard",60],[3,"Bernoulli",60],[4,"BernoulliError",60],[3,"OpenClosed01",60],[3,"Open01",60],[3,"Slice",60],[8,"Clone",727],[3,"WeightedIndex",60],[8,"PartialOrd",728],[4,"WeightedError",60],[3,"Uniform",60],[8,"PartialEq",728],[6,"Result",717],[8,"Debug",717],[3,"DistMap",60],[3,"RangeInclusive",729],[3,"Range",729],[8,"Fn",730],[8,"IntoIterator",731],[8,"AddAssign",732],[8,"Default",733],[15,"f32"],[15,"i128"],[15,"i8"],[3,"NonZeroUsize",714],[15,"array"],[3,"Wrapping",734],[15,"i64"],[3,"NonZeroU64",714],[15,"u128"],[15,"isize"],[3,"NonZeroU128",714],[3,"NonZeroU16",714],[15,"char"],[3,"NonZeroU8",714],[15,"u16"],[15,"i16"],[3,"UniformInt",330],[3,"UniformChar",330],[3,"UniformFloat",330],[3,"UniformDuration",330],[8,"SampleBorrow",330],[3,"Duration",735],[3,"WeightedIndex",478],[8,"Weight",478],[3,"Vec",736],[3,"OsRng",501],[3,"StdRng",501],[3,"ReseedingRng",563],[8,"BlockRngCore",737],[8,"SeedableRng",0],[3,"ReadRng",563],[8,"Read",738],[3,"ReadError",563],[3,"StepRng",611],[3,"SliceChooseIter",631],[8,"Index",739],[4,"IndexVec",661],[4,"IndexVecIntoIter",661],[4,"IndexVecIter",661],[8,"DistString",60],[8,"UniformSampler",330],[8,"SliceRandom",631],[8,"IteratorRandom",631]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":"DDDDDDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"],[135,"rand_core"],[136,"core::fmt"],[137,"core::fmt"],[138,"core::result"],[139,"core::any"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,3,4,5,5,6,7,7,2,3,4,5,6,7,2,4,6,3,5,7,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,3,5,7,0,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[2,2],9],[[3,3],9],[[4,4],9],[[5,5],9],[[6,6],9],[[7,7],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[3,[11,[10]]],8],[[5,[11,[10]]],8],[[7,[11,[10]]],8],[[2,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[-1,-1,[]],[-1,-1,[]],[2,3],[-1,-1,[]],[-1,-1,[]],[4,5],[-1,-1,[]],[-1,-1,[]],[6,7],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[2,8],[4,8],[6,8],[3,[[14,[10]]]],[5,[[14,[10]]]],[7,[[14,[10]]]],[3,15],[5,15],[7,15],[3,16],[5,16],[7,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,17],[5,17],[7,17],[3,15],[5,15],[7,15],0,[[3,15],8],[[5,15],8],[[7,15],8],[[3,16],8],[[5,16],8],[[7,16],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,[11,[10]]],[[19,[8,18]]]],[[5,[11,[10]]],[[19,[8,18]]]],[[7,[11,[10]]],[[19,[8,18]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[8,"RngCore",135],[3,"ChaCha20Core",0],[3,"ChaCha20Rng",0],[3,"ChaCha12Core",0],[3,"ChaCha12Rng",0],[3,"ChaCha8Core",0],[3,"ChaCha8Rng",0],[15,"tuple"],[15,"bool"],[15,"u8"],[15,"slice"],[3,"Formatter",136],[6,"Result",136],[15,"array"],[15,"u64"],[15,"u128"],[15,"u32"],[3,"Error",137],[4,"Result",138],[3,"TypeId",139]]},\
"rand_core":{"doc":"Random number generation traits","t":"SIIDSDIQIKLALLLLLLLLKLLLLLLLLLLKALLLALKLKLLLLLLLLKLLLLLLLDDIQQLLLLLLLLLMMLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFF","n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","as_rngcore","as_rngcore","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[57,"rand_core::block"],[110,"rand_core::impls"],[116,"rand_core::le"],[118,"core::num::nonzero"],[119,"core::option"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::result"],[123,"core::error"],[124,"alloc::boxed"],[125,"core::convert"],[126,"std::io::error"],[127,"alloc::string"],[128,"core::any"],[129,"core::clone"],[130,"core::marker"],[131,"core::fmt"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[4,0,0,0,4,0,0,29,0,30,2,0,4,2,4,2,2,2,4,2,1,2,4,4,2,4,4,4,2,29,29,29,0,4,4,2,0,4,1,2,1,2,4,1,29,4,4,2,4,1,2,4,2,4,2,4,2,0,0,0,25,25,23,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,25,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[4,[[6,[5]]]],[[],2],[[-1,[8,[7]]],3,[]],[[2,[8,[7]]],3],[[4,9],10],[[4,9],10],[[2,9],10],[-1,-1,[]],[11,4],[5,4],[-1,-1,[]],[[],-1,[]],[-1,[[12,[-2,4]]],1,[]],[[],-1,[]],0,[4,13],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,4,[[15,[[14,[13]]]]]],[-1,16,[]],[2,16],[-1,17,[]],[2,17],[4,[[6,[18]]]],[[1,[8,[7]]],[[12,[19,20]]]],[17,-1,[]],[4,[[6,[13]]]],[4,[[14,[13]]]],[-1,-2,[],[]],[-1,21,[]],[[-1,[8,[7]]],[[12,[3,4]]],[]],[[2,[8,[7]]],[[12,[3,4]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],0,0,0,0,0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[-1]]],[24,25,26]],[[[27,[-1]]],[[27,[-1]]],[24,25,26]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[[23,[-1]],[8,[7]]],3,25],[[[27,[-1]],[8,[7]]],3,25],[[[23,[-1]],9],10,[25,28]],[[[27,[-1]],9],10,[25,28]],[-1,-1,[]],[-1,-1,[]],[-1,[[12,[[23,[-2]],4]]],1,[25,29]],[-1,[[12,[[27,[-2]],4]]],1,[25,29]],[[],[[23,[-1]]],[25,29]],[[],[[27,[-1]]],[25,29]],[-1,3,[]],[[[23,[-1]],19],3,25],[[[27,[-1]],19],3,25],[[[23,[-1]]],19,25],[[[27,[-1]]],19,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-1]]],25],[-1,[[27,[-1]]],25],[[[23,[-1]]],16,25],[[[27,[-1]]],16,25],[[[23,[-1]]],17,25],[[[27,[-1]]],17,25],[[[23,[-1]]],3,25],[[[27,[-1]]],3,25],[17,[[23,[-1]]],[25,29]],[17,[[27,[-1]]],[25,29]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]],[8,[7]]],[[12,[3,4]]],25],[[[27,[-1]],[8,[7]]],[[12,[3,4]]],25],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[-1,[8,[7]]],3,[1,26]],[[[8,[16]],[8,[7]]],[[3,[19,19]]]],[[[8,[17]],[8,[7]]],[[3,[19,19]]]],[-1,16,[1,26]],[-1,17,[1,26]],[-1,17,[1,26]],[[[8,[7]],[8,[16]]],3],[[[8,[7]],[8,[17]]],3]],"c":[],"p":[[8,"RngCore",0],[3,"OsRng",0],[15,"tuple"],[3,"Error",0],[3,"NonZeroU32",118],[4,"Option",119],[15,"u8"],[15,"slice"],[3,"Formatter",120],[6,"Result",120],[3,"Error",121],[4,"Result",122],[8,"Error",123],[3,"Box",124],[8,"Into",125],[15,"u32"],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error",126],[3,"String",127],[3,"TypeId",128],[3,"BlockRng",57],[8,"Clone",129],[8,"BlockRngCore",57],[8,"Sized",130],[3,"BlockRng64",57],[8,"Debug",120],[8,"SeedableRng",0],[8,"CryptoRngCore",0]]},\
"regex":{"doc":"This crate provides routines for searching strings for …","t":"DDDDNEDDDDDDDIDDDDDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDIDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CaptureLocations","CaptureMatches","CaptureNames","Captures","CompiledTooBig","Error","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","Syntax","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","bytes","capture_locations","capture_names","captures","captures_at","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count","crlf","crlf","default","description","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","eq","equivalent","escape","expand","extract","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_match","is_match","is_match_at","is_match_at","iter","iter","len","len","len","len","len","line_terminator","line_terminator","matched","matched_any","matches","matches_at","multi_line","multi_line","name","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","static_captures_len","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode","CaptureLocations","CaptureMatches","CaptureNames","Captures","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","as_bytes","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","capture_locations","capture_names","captures","captures_at","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count","crlf","crlf","default","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","equivalent","expand","extract","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_match","is_match","is_match_at","is_match_at","iter","iter","len","len","len","len","len","line_terminator","line_terminator","matched","matched_any","matches","matches_at","multi_line","multi_line","name","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","static_captures_len","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode"],"q":[[0,"regex"],[342,"regex::bytes"],[664,"core::result"],[665,"core::option"],[666,"alloc::string"],[667,"core::fmt"],[668,"core::fmt"],[669,"core::iter::traits::collect"],[670,"alloc::borrow"],[671,"core::ops::range"],[672,"core::any"],[673,"alloc::vec"]],"d":["A low level representation of the byte offsets of each …","An iterator over all non-overlapping capture matches in a …","An iterator over the names of all capture groups in a …","Represents the capture groups for a single match.","The compiled program exceeded the set size limit. The …","An error that occurred during parsing or compiling a …","Represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches in a haystack.","A helper type for forcing literal string replacement.","A compiled regular expression for searching Unicode …","A configurable builder for a <code>Regex</code>.","Match multiple, possibly overlapping, regexes in a single …","A configurable builder for a <code>RegexSet</code>.","A trait for types that can be used to replace matches in a …","A by-reference adaptor for a <code>Replacer</code>.","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","An iterator over all substrings delimited by a regex match.","An iterator over at most <code>N</code> substrings delimited by a regex …","An iterator over all group matches in a <code>Captures</code> value.","A syntax error.","Returns the original string of this regex.","Returns the substring of the haystack that matched.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compiles the pattern given to <code>RegexBuilder::new</code> with the …","Compiles the patterns given to <code>RegexSetBuilder::new</code> with …","Returns a type that implements <code>Replacer</code>, but that borrows …","Returns a type that implements <code>Replacer</code>, but that borrows …","Search for regex matches in <code>&amp;[u8]</code> haystacks.","Returns a fresh allocated set of capture locations that can","Returns an iterator over the capture names in this regex.","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::captures</code>, but starts the search …","Returns an iterator that yields successive non-overlapping …","Returns the number of captures groups in this regex.","This is like <code>Regex::captures</code>, but writes the byte offsets …","Returns the same as <code>Regex::captures_read</code>, but starts the …","This configures whether to enable case insensitive …","This configures whether to enable case insensitive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures CRLF mode for the entire pattern.","This configures CRLF mode for all of the patterns.","","","Set the approximate capacity, in bytes, of the cache of …","Set the approximate capacity, in bytes, of the cache of …","This configures dot-matches-new-line mode for the entire …","This configures dot-matches-new-line mode for the entire …","Create a new empty regex set.","Returns the byte offset of the end of the match in the …","","","","Escapes all regular expression meta characters in <code>pattern</code>.","Expands all instances of <code>$ref</code> in <code>replacement</code> to the …","This is a convenience routine for extracting the substrings","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::find</code>, but starts the search at …","Returns an iterator that yields successive non-overlapping …","","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the <code>Match</code> associated with the capture group at …","Returns the start and end byte offsets of the capture …","This configures verbose mode for the entire pattern.","This configures verbose mode for all of the patterns.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns true if and only if this match has a length of …","Returns <code>true</code> if this set contains no regexes.","Returns true if and only if there is a match for the regex …","Returns true if and only if one of the regexes in this set …","Returns the same as <code>Regex::is_match</code>, but starts the search …","Returns true if and only if one of the regexes in this set …","Returns an iterator over all capture groups. This includes …","Returns an iterator over the indices of the regexes that …","Returns the total number of capture groups. This includes …","Returns the length, in bytes, of this match.","Returns the total number of capture groups (even if they …","Returns the total number of regexes in this set.","The total number of regexes in the set that created these …","Configures the line terminator to be used by the regex.","Configures the line terminator to be used by the regex.","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regexes that match in the given …","Returns the set of regexes that match in the given …","This configures multi-line mode for the entire pattern.","This configures multi-line mode for all of the patterns.","Returns the <code>Match</code> associated with the capture group named …","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new builder with a default configuration for the …","Create a new builder with a default configuration for the …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement string.","Return a fixed unchanging replacement string.","","","This configures octal mode for the entire pattern.","This configures octal mode for all of the patterns.","Returns the regex patterns that this regex set was …","Returns the range over the starting and ending byte …","Replaces the leftmost-first match in the given haystack …","Replaces all non-overlapping matches in the haystack with …","Appends possibly empty data to <code>dst</code> to replace the current …","","","Replaces at most <code>limit</code> non-overlapping matches in the …","Returns the end byte offset of the first match in the …","Returns the same as <code>Regex::shortest_match</code>, but starts the …","","","","","","Sets the approximate size limit, in bytes, of the compiled …","Sets the approximate size limit, in bytes, of the compiled …","Returns an iterator of substrings of the haystack given, …","Returns an iterator of at most <code>limit</code> substrings of the …","Returns the byte offset of the start of the match in the …","Returns the total number of capturing groups that appear …","This configures swap-greed mode for the entire pattern.","This configures swap-greed mode for all of the patterns.","","","","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","Attempts to parse a string into a regular expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures Unicode mode for the entire pattern.","This configures Unicode mode for the all of the patterns.","A low level representation of the byte offsets of each …","An iterator over all non-overlapping capture matches in a …","An iterator over the names of all capture groups in a …","Represents the capture groups for a single match.","Represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches in a haystack.","A helper type for forcing literal string replacement.","A compiled regular expression for searching Unicode …","A configurable builder for a <code>Regex</code>.","Match multiple, possibly overlapping, regexes in a single …","A configurable builder for a <code>RegexSet</code>.","A trait for types that can be used to replace matches in a …","A by-reference adaptor for a <code>Replacer</code>.","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","An iterator over all substrings delimited by a regex match.","An iterator over at most <code>N</code> substrings delimited by a regex …","An iterator over all group matches in a <code>Captures</code> value.","Returns the substring of the haystack that matched.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compiles the pattern given to <code>RegexBuilder::new</code> with the …","Compiles the patterns given to <code>RegexSetBuilder::new</code> with …","Returns a type that implements <code>Replacer</code>, but that borrows …","Returns a type that implements <code>Replacer</code>, but that borrows …","Returns a fresh allocated set of capture locations that can","Returns an iterator over the capture names in this regex.","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::captures</code>, but starts the search …","Returns an iterator that yields successive non-overlapping …","Returns the number of captures groups in this regex.","This is like <code>Regex::captures</code>, but writes the byte offsets …","Returns the same as <code>Regex::captures_read</code>, but starts the …","This configures whether to enable case insensitive …","This configures whether to enable case insensitive …","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures CRLF mode for the entire pattern.","This configures CRLF mode for all of the patterns.","","Set the approximate capacity, in bytes, of the cache of …","Set the approximate capacity, in bytes, of the cache of …","This configures dot-matches-new-line mode for the entire …","This configures dot-matches-new-line mode for the entire …","Create a new empty regex set.","Returns the byte offset of the end of the match in the …","","","Expands all instances of <code>$ref</code> in <code>replacement</code> to the …","This is a convenience routine for extracting the substrings","This routine searches for the first match of this regex in …","Returns the same as <code>Regex::find</code>, but starts the search at …","Returns an iterator that yields successive non-overlapping …","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the <code>Match</code> associated with the capture group at …","Returns the start and end byte offsets of the capture …","This configures verbose mode for the entire pattern.","This configures verbose mode for all of the patterns.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns true if and only if this match has a length of …","Returns <code>true</code> if this set contains no regexes.","Returns true if and only if there is a match for the regex …","Returns true if and only if one of the regexes in this set …","Returns the same as <code>Regex::is_match</code>, but starts the search …","Returns true if and only if one of the regexes in this set …","Returns an iterator over all capture groups. This includes …","Returns an iterator over the indices of the regexes that …","Returns the total number of capture groups. This includes …","Returns the length, in bytes, of this match.","Returns the total number of capture groups (even if they …","Returns the total number of regexes in this set.","The total number of regexes in the set that created these …","Configures the line terminator to be used by the regex.","Configures the line terminator to be used by the regex.","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regexes that match in the given …","Returns the set of regexes that match in the given …","This configures multi-line mode for the entire pattern.","This configures multi-line mode for all of the patterns.","Returns the <code>Match</code> associated with the capture group named …","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new builder with a default configuration for the …","Create a new builder with a default configuration for the …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement byte string.","Return a fixed unchanging replacement byte string.","","","This configures octal mode for the entire pattern.","This configures octal mode for all of the patterns.","Returns the regex patterns that this regex set was …","Returns the range over the starting and ending byte …","Replaces the leftmost-first match in the given haystack …","Replaces all non-overlapping matches in the haystack with …","Appends possibly empty data to <code>dst</code> to replace the current …","","","Replaces at most <code>limit</code> non-overlapping matches in the …","Returns the end byte offset of the first match in the …","Returns the same as <code>shortest_match</code>, but starts the search …","","","","","","Sets the approximate size limit, in bytes, of the compiled …","Sets the approximate size limit, in bytes, of the compiled …","Returns an iterator of substrings of the haystack given, …","Returns an iterator of at most <code>limit</code> substrings of the …","Returns the byte offset of the start of the match in the …","Returns the total number of capturing groups that appear …","This configures swap-greed mode for the entire pattern.","This configures swap-greed mode for all of the patterns.","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","","Attempts to parse a string into a regular expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This configures Unicode mode for the entire pattern.","This configures Unicode mode for the all of the patterns."],"i":[0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,3,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,4,7,36,36,0,1,1,1,1,1,1,1,1,4,7,4,7,5,1,3,10,11,17,18,8,19,20,4,7,5,1,3,10,11,17,18,8,19,20,22,15,11,17,4,7,8,5,4,7,4,7,8,3,5,3,3,0,12,12,1,1,1,12,4,7,5,5,1,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,1,12,10,4,7,12,12,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,22,15,27,28,11,17,19,19,31,20,3,8,1,8,1,8,12,19,12,3,10,8,19,4,7,19,19,8,8,4,7,12,4,7,4,7,1,8,22,15,27,28,11,17,31,20,31,20,36,36,9,18,4,7,8,3,1,1,36,9,18,1,1,1,28,11,17,31,20,4,7,1,1,3,1,4,7,4,7,5,1,3,10,11,17,18,8,19,20,5,1,12,4,7,5,1,1,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,12,4,7,5,1,3,10,22,15,27,28,11,17,9,18,8,19,31,20,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,42,43,59,59,41,41,41,41,41,41,41,41,42,43,42,43,41,40,46,47,50,51,44,52,53,42,43,41,40,46,47,50,51,44,52,53,54,49,47,50,42,43,44,42,43,42,43,44,40,40,40,48,48,41,41,41,48,42,43,41,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,41,48,46,42,43,48,48,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,54,49,56,57,47,50,52,52,58,53,40,44,41,44,41,44,48,52,48,40,46,44,52,42,43,52,52,44,44,42,43,48,42,43,42,43,41,44,54,49,56,57,47,50,58,53,58,53,59,59,45,51,42,43,44,40,41,41,59,45,51,41,41,41,57,47,50,58,53,42,43,41,41,40,41,42,43,42,43,41,40,46,47,50,51,44,52,53,41,48,42,43,41,41,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,48,42,43,41,40,46,54,49,56,57,47,50,45,51,44,52,58,53,42,43],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[6,[1,5]]]],[7,[[6,[8,5]]]],[-1,[[9,[-1]]],[]],[-1,[[9,[-1]]],[]],0,[1,10],[1,11],[[1,2],[[13,[12]]]],[[1,2,14],[[13,[12]]]],[[1,2],15],[1,14],[[1,10,2],[[13,[3]]]],[[1,10,2,14],[[13,[3]]]],[[4,16],4],[[7,16],7],[4,4],[7,7],[5,5],[1,1],[3,3],[10,10],[11,11],[17,17],[18,18],[8,8],[19,19],[20,20],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[22,14],[15,14],[11,14],[17,14],[[4,16],4],[[7,16],7],[[],8],[5,2],[[4,14],4],[[7,14],7],[[4,16],4],[[7,16],7],[[],8],[3,14],[[5,5],16],[[3,3],16],[[-1,-2],16,[],[]],[2,23],[[12,2,23],21],[12,[[21,[2,[24,[2]]]]]],[[1,2],[[13,[3]]]],[[1,2,14],[[13,[3]]]],[[1,2],22],[[12,25],26],[[4,25],26],[[7,25],26],[[5,25],26],[[5,25],26],[[1,25],26],[[1,25],26],[[3,25],26],[[10,25],26],[[22,25],26],[[15,25],26],[[27,25],26],[[28,25],26],[[11,25],26],[[17,25],26],[[[9,[-1]],25],26,[29,30]],[[18,25],26],[[8,25],26],[[19,25],26],[[31,25],26],[[20,25],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[6,[1,5]]]],[[12,14],[[13,[3]]]],[[10,14],[[13,[[21,[14,14]]]]]],[[4,16],4],[[7,16],7],[[12,14],2],[[12,2],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19],[19],[-1,-2,[],[]],[-1,-2,[],[]],[3,16],[8,16],[[1,2],16],[[8,2],16],[[1,2,14],16],[[8,2,14],16],[12,17],[19,20],[12,14],[3,14],[10,14],[8,14],[19,14],[[4,32],4],[[7,32],7],[[19,14],16],[19,16],[[8,2],19],[[8,2,14],19],[[4,16],4],[[7,16],7],[[12,2],[[13,[3]]]],[[4,33],4],[[7,33],7],[2,4],[-1,7,34],[2,[[6,[1,5]]]],[-1,[[6,[8,5]]],34],[22,[[13,[3]]]],[15,[[13,[12]]]],[27,[[13,[2]]]],[28,[[13,[2]]]],[11,[[13,[[13,[2]]]]]],[17,[[13,[[13,[3]]]]]],[31,[[13,[14]]]],[20,[[13,[14]]]],[31,[[13,[14]]]],[20,[[13,[14]]]],[-1,[[13,[[35,[2]]]]],[]],[-1,[[13,[[35,[2]]]]],[]],[[[9,[-1]]],[[13,[[35,[2]]]]],[36,30]],[18,[[13,[[35,[2]]]]]],[[4,16],4],[[7,16],7],[8,[[37,[23]]]],[3,[[38,[14]]]],[[1,2,-1],[[35,[2]]],36],[[1,2,-1],[[35,[2]]],36],[[-1,12,23],21,[]],[[[9,[-1]],12,23],21,[36,30]],[[18,12,23],21],[[1,2,14,-1],[[35,[2]]],36],[[1,2],[[13,[14]]]],[[1,2,14],[[13,[14]]]],[28,[[21,[14,[13,[14]]]]]],[11,[[21,[14,[13,[14]]]]]],[17,[[21,[14,[13,[14]]]]]],[31,[[21,[14,[13,[14]]]]]],[20,[[21,[14,[13,[14]]]]]],[[4,14],4],[[7,14],7],[[1,2],27],[[1,2,14],28],[3,14],[1,[[13,[14]]]],[[4,16],4],[[7,16],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[2,[[6,[1,5]]]],[23,[[6,[1,5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[4,16],4],[[7,16],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[40,[[37,[32]]]],[41,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,[[6,[41,5]]]],[43,[[6,[44,5]]]],[-1,[[45,[-1]]],[]],[-1,[[45,[-1]]],[]],[41,46],[41,47],[[41,[37,[32]]],[[13,[48]]]],[[41,[37,[32]],14],[[13,[48]]]],[[41,[37,[32]]],49],[41,14],[[41,46,[37,[32]]],[[13,[40]]]],[[41,46,[37,[32]],14],[[13,[40]]]],[[42,16],42],[[43,16],43],[42,42],[43,43],[41,41],[40,40],[46,46],[47,47],[50,50],[51,51],[44,44],[52,52],[53,53],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[54,14],[49,14],[47,14],[50,14],[[42,16],42],[[43,16],43],[[],44],[[42,14],42],[[43,14],43],[[42,16],42],[[43,16],43],[[],44],[40,14],[[40,40],16],[[-1,-2],16,[],[]],[[48,[37,[32]],[55,[32]]],21],[48,[[21,[[37,[32]],[24,[[37,[32]]]]]]]],[[41,[37,[32]]],[[13,[40]]]],[[41,[37,[32]],14],[[13,[40]]]],[[41,[37,[32]]],54],[[48,25],26],[[42,25],26],[[43,25],26],[[41,25],26],[[41,25],26],[[40,25],26],[[46,25],26],[[54,25],26],[[49,25],26],[[56,25],26],[[57,25],26],[[47,25],26],[[50,25],26],[[[45,[-1]],25],26,[29,30]],[[51,25],26],[[44,25],26],[[52,25],26],[[58,25],26],[[53,25],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[6,[41,5]]]],[[48,14],[[13,[40]]]],[[46,14],[[13,[[21,[14,14]]]]]],[[42,16],42],[[43,16],43],[[48,14],[[37,[32]]]],[[48,2],[[37,[32]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52],[52],[-1,-2,[],[]],[-1,-2,[],[]],[40,16],[44,16],[[41,[37,[32]]],16],[[44,[37,[32]]],16],[[41,[37,[32]],14],16],[[44,[37,[32]],14],16],[48,50],[52,53],[48,14],[40,14],[46,14],[44,14],[52,14],[[42,32],42],[[43,32],43],[[52,14],16],[52,16],[[44,[37,[32]]],52],[[44,[37,[32]],14],52],[[42,16],42],[[43,16],43],[[48,2],[[13,[40]]]],[[42,33],42],[[43,33],43],[2,42],[-1,43,34],[2,[[6,[41,5]]]],[-1,[[6,[44,5]]],34],[54,[[13,[40]]]],[49,[[13,[48]]]],[56,[[13,[[37,[32]]]]]],[57,[[13,[[37,[32]]]]]],[47,[[13,[[13,[2]]]]]],[50,[[13,[[13,[40]]]]]],[58,[[13,[14]]]],[53,[[13,[14]]]],[58,[[13,[14]]]],[53,[[13,[14]]]],[-1,[[13,[[35,[[37,[32]]]]]]],[]],[-1,[[13,[[35,[[37,[32]]]]]]],[]],[[[45,[-1]]],[[13,[[35,[[37,[32]]]]]]],[59,30]],[51,[[13,[[35,[[37,[32]]]]]]]],[[42,16],42],[[43,16],43],[44,[[37,[23]]]],[40,[[38,[14]]]],[[41,[37,[32]],-1],[[35,[[37,[32]]]]],59],[[41,[37,[32]],-1],[[35,[[37,[32]]]]],59],[[-1,48,[55,[32]]],21,[]],[[[45,[-1]],48,[55,[32]]],21,[59,30]],[[51,48,[55,[32]]],21],[[41,[37,[32]],14,-1],[[35,[[37,[32]]]]],59],[[41,[37,[32]]],[[13,[14]]]],[[41,[37,[32]],14],[[13,[14]]]],[57,[[21,[14,[13,[14]]]]]],[47,[[21,[14,[13,[14]]]]]],[50,[[21,[14,[13,[14]]]]]],[58,[[21,[14,[13,[14]]]]]],[53,[[21,[14,[13,[14]]]]]],[[42,14],42],[[43,14],43],[[41,[37,[32]]],56],[[41,[37,[32]],14],57],[40,14],[41,[[13,[14]]]],[[42,16],42],[[43,16],43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[23,[[6,[41,5]]]],[-1,[[6,[-2]]],[],[]],[2,[[6,[41,5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[42,16],42],[[43,16],43]],"c":[],"p":[[3,"Regex",0],[15,"str"],[3,"Match",0],[3,"RegexBuilder",0],[4,"Error",0],[4,"Result",664],[3,"RegexSetBuilder",0],[3,"RegexSet",0],[3,"ReplacerRef",0],[3,"CaptureLocations",0],[3,"CaptureNames",0],[3,"Captures",0],[4,"Option",665],[15,"usize"],[3,"CaptureMatches",0],[15,"bool"],[3,"SubCaptureMatches",0],[3,"NoExpand",0],[3,"SetMatches",0],[3,"SetMatchesIter",0],[15,"tuple"],[3,"Matches",0],[3,"String",666],[15,"array"],[3,"Formatter",667],[6,"Result",667],[3,"Split",0],[3,"SplitN",0],[8,"Debug",667],[8,"Sized",668],[3,"SetMatchesIntoIter",0],[15,"u8"],[15,"u32"],[8,"IntoIterator",669],[4,"Cow",670],[8,"Replacer",0],[15,"slice"],[3,"Range",671],[3,"TypeId",672],[3,"Match",342],[3,"Regex",342],[3,"RegexBuilder",342],[3,"RegexSetBuilder",342],[3,"RegexSet",342],[3,"ReplacerRef",342],[3,"CaptureLocations",342],[3,"CaptureNames",342],[3,"Captures",342],[3,"CaptureMatches",342],[3,"SubCaptureMatches",342],[3,"NoExpand",342],[3,"SetMatches",342],[3,"SetMatchesIter",342],[3,"Matches",342],[3,"Vec",673],[3,"Split",342],[3,"SplitN",342],[3,"SetMatchesIntoIter",342],[8,"Replacer",342]]},\
"regex_automata":{"doc":"This crate exposes a variety of regex engines used by the …","t":"NENDNDNDDEENNDDDDNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMMMMADDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNDDNENLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMMMDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANNDDNNDDNDNNNNDNDNDEDNELLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLALLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAADDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLFFDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLNNNEDDDNNNDNNNNNNNNNNNNLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLSSSSSSDDDSSSDDDDSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLDDDMLLLLLLMLLLLLLLLLLLLLLLLLLLLLL","n":["All","Anchored","GaveUp","HalfMatch","HaystackTooLong","Input","LeftmostFirst","Match","MatchError","MatchErrorKind","MatchKind","No","Pattern","PatternID","PatternSet","PatternSetInsertError","PatternSetIter","Quit","Span","UnsupportedAnchored","Yes","anchored","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains","default","default","dfa","earliest","end","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gave_up","get_anchored","get_earliest","get_range","get_span","hash","hash","hash","hash","haystack","haystack_too_long","hybrid","insert","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_anchored","is_char_boundary","is_done","is_empty","is_empty","is_empty","is_full","iter","kind","len","len","len","meta","must","must","new","new","new","new","new","next","next_back","nfa","offset","offset","partial_cmp","pattern","pattern","pattern","quit","range","range","range","set_anchored","set_earliest","set_end","set_range","set_span","set_start","size_hint","span","span","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsupported_anchored","util","byte","len","mode","offset","offset","onepass","BuildError","Builder","Cache","Config","DFA","alphabet_len","always_match","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","byte_classes","captures","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","create_captures","default","find","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_byte_classes","get_config","get_match_kind","get_nfa","get_size_limit","get_starts_for_each_pattern","into","into","into","into","into","is_match","match_kind","memory_usage","memory_usage","never_match","new","new","new","new","new_from_nfa","new_many","pattern_len","reset","reset_cache","size_limit","source","starts_for_each_pattern","state_len","stride","stride2","syntax","thompson","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_search","try_search_slots","type_id","type_id","type_id","type_id","type_id","BuildError","Cache","CacheError","LazyStateID","Quit","StartError","UnsupportedAnchored","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","dfa","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","is_dead","is_match","is_quit","is_start","is_tagged","is_unknown","partial_cmp","regex","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","byte","err","mode","Builder","Cache","Config","DFA","OverlappingState","always_match","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","byte_classes","byte_classes","cache_capacity","clear_count","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","default","eq","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_byte_classes","get_cache_capacity","get_config","get_match","get_match_kind","get_minimum_bytes_per_state","get_minimum_cache_capacity","get_minimum_cache_clear_count","get_nfa","get_prefilter","get_quit","get_skip_cache_capacity_check","get_specialize_start_states","get_starts_for_each_pattern","get_unicode_word_boundary","into","into","into","into","into","match_kind","match_len","match_pattern","memory_usage","memory_usage","minimum_bytes_per_state","minimum_cache_clear_count","never_match","new","new","new","new","new_many","next_eoi_state","next_state","next_state_untagged","next_state_untagged_unchecked","pattern_len","prefilter","quit","reset","reset_cache","search_finish","search_start","search_total_len","search_update","skip_cache_capacity_check","specialize_start_states","start","start_state","start_state_forward","start_state_reverse","starts_for_each_pattern","syntax","thompson","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_search_fwd","try_search_overlapping_fwd","try_search_overlapping_rev","try_search_rev","try_which_overlapping_matches","type_id","type_id","type_id","type_id","type_id","unicode_word_boundary","Builder","Cache","FindMatches","Regex","as_parts","as_parts_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_dfas","build_many","builder","clone","clone","clone_into","clone_into","create_cache","default","dfa","find","find_iter","fmt","fmt","fmt","fmt","forward","forward","forward_mut","from","from","from","from","into","into","into","into","into_iter","is_match","memory_usage","new","new","new","new_many","next","pattern_len","reset","reset_cache","reverse","reverse","reverse_mut","syntax","thompson","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_search","type_id","type_id","type_id","type_id","BuildError","Builder","Cache","CapturesMatches","Config","FindMatches","Regex","Split","SplitN","auto_prefilter","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_hir","build_many","build_many_from_hir","builder","byte_classes","captures","captures_iter","captures_len","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","configure","count","count","create_cache","create_captures","default","dfa","dfa_size_limit","dfa_state_limit","find","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_auto_prefilter","get_backtrack","get_byte_classes","get_config","get_dfa","get_dfa_size_limit","get_dfa_state_limit","get_hybrid","get_hybrid_cache_capacity","get_line_terminator","get_match_kind","get_nfa_size_limit","get_onepass","get_onepass_size_limit","get_prefilter","get_utf8_empty","get_which_captures","group_info","hybrid","hybrid_cache_capacity","input","input","input","input","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_accelerated","is_match","line_terminator","match_kind","memory_usage","memory_usage","new","new","new","new","new_many","next","next","next","next","nfa_size_limit","onepass","onepass_size_limit","pattern","pattern_len","prefilter","regex","regex","reset","search","search_captures","search_captures_with","search_half","search_half_with","search_slots","search_slots_with","search_with","size_hint","size_limit","source","split","splitn","static_captures_len","syntax","syntax_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_empty","which_captures","which_overlapping_matches","which_overlapping_matches_with","thompson","All","BinaryUnion","BuildError","Builder","ByteRange","Capture","Compiler","Config","Dense","DenseTransitions","Fail","Implicit","Look","Match","NFA","None","PatternIter","Sparse","SparseTransitions","State","Transition","Union","WhichCaptures","add_capture_end","add_capture_start","add_empty","add_fail","add_look","add_match","add_range","add_sparse","add_union","add_union_reverse","always_match","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build_from_hir","build_many","build_many_from_hir","byte_classes","captures","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compiler","config","configure","current_pattern_id","default","default","default","end","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finish_pattern","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_captures","get_look_matcher","get_look_matcher","get_nfa_size_limit","get_reverse","get_reverse","get_shrink","get_size_limit","get_utf8","get_utf8","get_which_captures","group_info","has_capture","has_empty","hash","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_always_start_anchored","is_any","is_epsilon","is_none","is_reverse","is_utf8","look_matcher","look_matcher","look_set_any","look_set_prefix_any","matches","matches","matches","matches_byte","matches_byte","matches_byte","matches_unit","memory_usage","memory_usage","never_match","new","new","new","new","new_many","next","next","nfa_size_limit","patch","pattern_len","pattern_len","patterns","pikevm","reverse","set_look_matcher","set_reverse","set_size_limit","set_utf8","shrink","size_limit","source","start","start_anchored","start_pattern","start_pattern","start_unanchored","state","states","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transitions","transitions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8","which_captures","alt1","alt2","alternates","group_index","look","next","next","pattern_id","pattern_id","slot","trans","BoundedBacktracker","Builder","Cache","Config","TryCapturesMatches","TryFindMatches","always_match","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","create_captures","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_config","get_nfa","get_prefilter","get_visited_capacity","into","into","into","into","into","into","into_iter","into_iter","max_haystack_len","memory_usage","min_visited_capacity","never_match","new","new","new","new","new_from_nfa","new_many","next","next","pattern_len","prefilter","reset","reset_cache","syntax","thompson","to_owned","to_owned","to_owned","to_owned","try_captures","try_captures_iter","try_find","try_find_iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_is_match","try_search","try_search_slots","type_id","type_id","type_id","type_id","type_id","type_id","visited_capacity","Builder","Cache","CapturesMatches","Config","FindMatches","PikeVM","always_match","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_nfa","build_many","builder","captures","captures_iter","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","configure","create_cache","create_captures","default","find","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_config","get_match_kind","get_nfa","get_prefilter","into","into","into","into","into","into","into_iter","into_iter","is_match","match_kind","memory_usage","never_match","new","new","new","new","new_from_nfa","new_many","next","next","pattern_len","prefilter","reset","reset_cache","search","search_slots","syntax","thompson","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","which_overlapping_matches","alphabet","captures","escape","interpolate","iter","lazy","look","pool","prefilter","primitives","start","syntax","wire","ByteClassElements","ByteClassIter","ByteClassRepresentatives","ByteClasses","Unit","alphabet_len","as_eoi","as_u8","as_usize","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","elements","empty","eoi","eoi","eq","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_by_unit","into","into","into","into","into","into_iter","into_iter","into_iter","is_byte","is_eoi","is_singleton","is_word_byte","iter","next","next","next","partial_cmp","representatives","set","singletons","stride2","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","u8","Captures","CapturesPatternIter","GroupInfo","GroupInfoAllNames","GroupInfoError","GroupInfoPatternNames","all","all_group_len","all_names","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","default","empty","empty","explicit_slot_len","extract","extract_bytes","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_group","get_group_by_name","get_match","group_info","group_len","group_len","implicit_slot_len","interpolate_bytes","interpolate_bytes_into","interpolate_string","interpolate_string_into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_match","iter","matches","memory_usage","new","next","next","next","pattern","pattern_len","pattern_names","set_pattern","size_hint","size_hint","slot","slot_len","slots","slots","slots_mut","source","to_index","to_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DebugByte","DebugHaystack","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","bytes","string","CapturesIter","HalfMatchesIter","MatchesIter","Searcher","TryCapturesIter","TryHalfMatchesIter","TryMatchesIter","advance","advance_half","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","infallible","infallible","infallible","input","input","input","input","input","into","into","into","into","into","into","into","into_captures_iter","into_half_matches_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_matches_iter","new","next","next","next","next","next","next","to_owned","try_advance","try_advance_half","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Lazy","borrow","borrow_mut","deref","fmt","from","get","into","new","try_from","try_into","type_id","End","EndCRLF","EndLF","Look","LookMatcher","LookSet","LookSetIter","Start","StartCRLF","StartLF","UnicodeWordBoundaryError","WordAscii","WordAsciiNegate","WordEndAscii","WordEndHalfAscii","WordEndHalfUnicode","WordEndUnicode","WordStartAscii","WordStartHalfAscii","WordStartHalfUnicode","WordStartUnicode","WordUnicode","WordUnicodeNegate","as_char","as_repr","available","bits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains_anchor","contains_anchor_crlf","contains_anchor_haystack","contains_anchor_lf","contains_anchor_line","contains_word","contains_word_ascii","contains_word_unicode","default","default","empty","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_repr","full","get_line_terminator","insert","intersect","into","into","into","into","into","into_iter","is_empty","is_end","is_end_crlf","is_end_lf","is_start","is_start_crlf","is_start_lf","is_word_ascii","is_word_ascii_negate","is_word_end_ascii","is_word_end_half_ascii","is_word_end_half_unicode","is_word_end_unicode","is_word_start_ascii","is_word_start_half_ascii","is_word_start_half_unicode","is_word_start_unicode","is_word_unicode","is_word_unicode_negate","iter","len","matches","matches_set","new","next","read_repr","remove","reversed","set_insert","set_intersect","set_line_terminator","set_remove","set_subtract","set_union","singleton","subtract","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","write_repr","Pool","PoolGuard","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","fmt","fmt","from","from","get","into","into","new","put","try_from","try_from","try_into","try_into","type_id","type_id","Prefilter","borrow","borrow_mut","clone","clone_into","find","fmt","from","from_hir_prefix","from_hirs_prefix","into","memory_usage","new","prefix","to_owned","try_from","try_into","type_id","LIMIT","LIMIT","LIMIT","MAX","MAX","MAX","NonMaxUsize","PatternID","PatternIDError","SIZE","SIZE","SIZE","SmallIndex","SmallIndexError","StateID","StateIDError","ZERO","ZERO","ZERO","as_i32","as_i32","as_i32","as_u32","as_u32","as_u32","as_u64","as_u64","as_u64","as_usize","as_usize","as_usize","attempted","attempted","attempted","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes_unchecked","from_ne_bytes_unchecked","from_ne_bytes_unchecked","get","hash","hash","hash","into","into","into","into","into","into","must","must","must","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","one_more","one_more","one_more","partial_cmp","partial_cmp","partial_cmp","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Config","anchored","borrow","borrow_mut","clone","clone_into","fmt","from","from_input_forward","from_input_reverse","get_anchored","get_look_behind","into","look_behind","new","to_owned","try_from","try_into","type_id","Config","borrow","borrow_mut","case_insensitive","clone","clone_into","crlf","default","dot_matches_new_line","fmt","from","get_case_insensitive","get_crlf","get_dot_matches_new_line","get_ignore_whitespace","get_line_terminator","get_multi_line","get_nest_limit","get_octal","get_swap_greed","get_unicode","get_utf8","ignore_whitespace","into","line_terminator","multi_line","nest_limit","new","octal","parse","parse_many","parse_many_with","parse_with","swap_greed","to_owned","try_from","try_into","type_id","unicode","utf8","AlignAs","DeserializeError","SerializeError","_align","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"regex_automata"],[258,"regex_automata::MatchErrorKind"],[263,"regex_automata::dfa"],[264,"regex_automata::dfa::onepass"],[370,"regex_automata::hybrid"],[443,"regex_automata::hybrid::StartError"],[446,"regex_automata::hybrid::dfa"],[577,"regex_automata::hybrid::regex"],[650,"regex_automata::meta"],[843,"regex_automata::nfa"],[844,"regex_automata::nfa::thompson"],[1093,"regex_automata::nfa::thompson::State"],[1104,"regex_automata::nfa::thompson::backtrack"],[1212,"regex_automata::nfa::thompson::pikevm"],[1319,"regex_automata::util"],[1332,"regex_automata::util::alphabet"],[1414,"regex_automata::util::captures"],[1533,"regex_automata::util::escape"],[1554,"regex_automata::util::interpolate"],[1556,"regex_automata::util::iter"],[1650,"regex_automata::util::lazy"],[1662,"regex_automata::util::look"],[1807,"regex_automata::util::pool"],[1830,"regex_automata::util::prefilter"],[1848,"regex_automata::util::primitives"],[2010,"regex_automata::util::start"],[2029,"regex_automata::util::syntax"],[2069,"regex_automata::util::wire"],[2102,"core::cmp"],[2103,"core::ops::range"],[2104,"core::fmt"],[2105,"core::fmt"],[2106,"core::convert"],[2107,"core::hash"],[2108,"core::convert"],[2109,"core::ops::range"],[2110,"core::result"],[2111,"core::any"],[2112,"core::error"],[2113,"regex_syntax::hir"],[2114,"core::borrow"],[2115,"regex_syntax::error"],[2116,"alloc::sync"],[2117,"alloc::vec"],[2118,"core::iter::traits::collect"],[2119,"core::ops::function"],[2120,"core::fmt"]],"d":["Report all possible matches.","The type of anchored search to perform.","The search, based on heuristics, determined that it would …","A representation of “half” of a match reported by a …","This error occurs if the haystack given to the regex …","The parameters for a regex search including the haystack …","Report only the leftmost matches. When multiple leftmost …","A representation of a match reported by a regex engine.","An error indicating that a search stopped before reporting …","The underlying kind of a <code>MatchError</code>.","The kind of match semantics to use for a regex pattern.","Run an unanchored search. This means a match may occur …","Run an anchored search for a specific pattern. This means …","The identifier of a regex pattern, represented by a …","A set of <code>PatternID</code>s.","An error that occurs when a <code>PatternID</code> failed to insert …","An iterator over all pattern identifiers in a <code>PatternSet</code>.","The search saw a “quit” byte at which it was …","A representation of a span reported by a regex engine.","An error indicating that a particular type of anchored …","Run an anchored search. This means that a match must begin …","Sets the anchor mode of a search.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the total number of pattern identifiers that may …","Clear this set such that it contains no pattern IDs.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true when the given offset is contained within …","Return true if and only if the given pattern identifier is …","","","A module for building and searching with deterministic …","Whether to execute an “earliest” search or not.","Return the end position of this search.","The ending position of the match.","The end offset of the span, exclusive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new “gave up” error. The given <code>offset</code> …","Return the anchored mode for this search configuration.","Return whether this search should execute in “earliest”…","Return the span as a range for this search configuration.","Return the span for this search configuration.","","","","","Return a borrow of the underlying haystack as a slice of …","Create a new “haystack too long” error. The given <code>len</code> …","A module for building and searching with lazy …","Insert the given pattern identifier into this set and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if this anchor mode corresponds …","Returns true if and only if the given offset in this search…","Return true if and only if this search can never return …","Returns true when this span is empty. That is, when …","Returns true when the span in this match is empty.","Return true if and only if this set has no pattern …","Return true if and only if this set has the maximum number …","Returns an iterator over all pattern identifiers in this …","Returns a reference to the underlying error kind.","Returns the length of this span.","Returns the length of this match.","Returns the total number of pattern identifiers in this …","Provides a regex matcher that composes several other regex …","Create a new half match from a pattern ID and a byte …","Create a new match from a pattern ID and a byte offset …","Create a new search configuration for the given haystack.","Create a new half match from a pattern ID and a byte …","Create a new match from a pattern ID and a span.","Create a new set of pattern identifiers with the given …","Create a new error value with the given kind.","","","Provides non-deterministic finite automata (NFA) and regex …","Returns a new span with <code>offset</code> added to this span’s <code>start</code>…","The position of the match.","","Returns the ID of the pattern that matched.","Returns the ID of the pattern that matched.","Returns the pattern ID associated with this configuration …","Create a new “quit” error. The given <code>byte</code> corresponds …","Like <code>Input::span</code>, but accepts any range instead.","Returns this span as a range.","Returns the match span as a range.","Set the anchor mode of a search.","Set whether the search should execute in “earliest” …","Set the ending offset for the span for this search …","Set the span for this search configuration given any range.","Set the span for this search configuration.","Set the starting offset for the span for this search …","","Set the span for this search.","Returns the span for this match.","Return the start position of this search.","The starting position of the match.","The start offset of the span, inclusive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert the given pattern identifier into this set and …","","","","","","","","","","","","","","","","","","","","","","","","","Create a new “unsupported anchored” error. This occurs …","A collection of modules that provide APIs that are useful …","The “quit” byte that was observed that caused the …","The length of the haystack that exceeded the limit.","The anchored mode given that is unsupported.","The offset at which the quit byte was observed.","The offset at which the search stopped. This corresponds …","A DFA that can return spans for matching capturing groups.","An error that occurred during the construction of a …","A builder for a one-pass DFA.","A cache represents mutable state that a one-pass <code>DFA</code> …","The configuration used for building a one-pass DFA.","A one-pass DFA for executing a subset of anchored regex …","Returns the total number of elements in the alphabet for …","Create a new one-pass DFA that matches every input.","","","","","","","","","","","Build a one-pass DFA from the given pattern.","Build a DFA from the given NFA.","Build a one-pass DFA from the given patterns.","Return a builder for configuring the construction of a DFA.","Whether to attempt to shrink the size of the DFA’s …","Executes an anchored leftmost forward search and writes …","","","","","","","","","","","Return a default configuration for a DFA.","Apply the given one-pass DFA configuration options to this …","Create a new cache for this DFA.","Create a new empty set of capturing groups that is …","","Executes an anchored leftmost forward search, and returns …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns whether this configuration has enabled byte …","Return the config for this one-pass DFA.","Returns the match semantics set in this configuration.","Returns a reference to the underlying NFA.","Returns the DFA size limit of this configuration if one …","Returns whether this configuration has enabled anchored …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Executes an anchored leftmost forward search, and returns …","Set the desired match semantics.","Returns the memory usage, in bytes, of this DFA.","Returns the heap memory usage, in bytes, of this cache.","Create a new one-pass DFA that never matches any input.","Return a new default one-pass DFA configuration.","Create a new one-pass DFA builder with the default …","Parse the given regular expression using the default …","Create a new <code>onepass::DFA</code> cache.","Like <code>new</code>, but builds a one-pass DFA directly from an NFA. …","Like <code>new</code>, but parses multiple patterns into a single “…","Returns the total number of patterns compiled into this …","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Set a size limit on the total heap used by a one-pass DFA.","","Whether to compile a separate start state for each pattern …","Returns the total number of states in this one-pass DFA.","Returns the total stride for every state in this DFA. This …","Returns the total stride for every state in this DFA, …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","","","","","","","Executes an anchored leftmost forward search and writes …","Executes an anchored leftmost forward search and writes …","","","","","","An error that occurs when initial construction of a lazy …","An error that occurs when cache inefficiency has dropped …","An error that occurs when cache usage has become …","A state identifier specifically tailored for lazy DFAs.","An error that occurs when a starting configuration’s …","An error that can occur when computing the start state for …","An error that occurs when the caller requests an anchored …","","","","","","","","","","","","","","","","","","","Types and routines specific to lazy DFAs.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if and only if this represents a dead state. A …","Return true if and only if this lazy state ID has been …","Return true if and only if this represents a quit state. A …","Return true if and only if this lazy state ID has been …","Return true if and only if this lazy state ID is tagged.","Return true if and only if this represents a lazy state ID …","","A lazy DFA backed <code>Regex</code>.","","","","","","","","","","","","","","","","","","","","","","The quit byte that was found.","The underlying cache error that occurred.","The anchored mode given that is unsupported.","A builder for constructing a lazy deterministic finite …","A cache represents a partially computed DFA.","The configuration used for building a lazy DFA.","A hybrid NFA/DFA (also called a “lazy DFA”) for regex …","Represents the current state of an overlapping search.","Create a new lazy DFA that matches every input.","","","","","","","","","","","Build a lazy DFA from the given pattern.","Build a DFA from the given NFA.","Build a lazy DFA from the given patterns.","Return a builder for configuring the construction of a …","Returns the equivalence classes that make up the alphabet …","Whether to attempt to shrink the size of the lazy DFA’s …","Sets the maximum amount of heap memory, in bytes, to …","Returns the total number of times this cache has been …","","","","","","","","","","","Return a default configuration for a <code>DFA</code>.","Apply the given lazy DFA configuration options to this …","Create a new cache for this lazy DFA.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns whether this configuration has enabled byte …","Returns the cache capacity set on this configuration.","Returns this lazy DFA’s configuration.","Return the match result of the most recent search to …","Returns the match semantics set in this configuration.","Returns, if set, the minimum number of bytes per state …","Returns the minimum lazy DFA cache capacity required for …","Returns, if set, the minimum number of times the cache …","Returns a reference to the underlying NFA.","Returns the prefilter set in this configuration, if one at …","Returns whether this configuration will instruct the lazy …","Returns whether the cache capacity check should be skipped.","Returns whether this configuration will instruct the lazy …","Returns whether this configuration has enabled anchored …","Returns whether this configuration has enabled heuristic …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the desired match semantics.","Returns the total number of patterns that match in this …","Returns the pattern ID corresponding to the given match …","Returns the memory usage, in bytes, of this lazy DFA.","Returns the heap memory usage, in bytes, of this cache.","Configure a lazy DFA search to quit only when its …","Configure a lazy DFA search to quit after a certain number …","Create a new lazy DFA that never matches any input.","Parse the given regular expression using a default …","Create a new cache for the given lazy DFA.","Return a new default lazy DFA builder configuration.","Create a new lazy DFA builder with the default …","Parse the given regular expressions using a default …","Transitions from the current state to the next state for …","Transitions from the current state to the next state, …","Transitions from the current state to the next state, …","Transitions from the current state to the next state, …","Returns the total number of patterns compiled into this …","Set a prefilter to be used whenever a start state is …","Add a “quit” byte to the lazy DFA.","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Indicates that a search has finished at the given position.","Initializes a new search starting at the given position.","Returns the total number of bytes that have been searched …","Updates the current search to indicate that it has search …","Configures construction of a lazy DFA to use the minimum …","Enable specializing start states in the lazy DFA.","Create a new overlapping state that begins at the start …","Return the ID of the start state for this lazy DFA for the …","Return the ID of the start state for this lazy DFA when …","Return the ID of the start state for this lazy DFA when …","Whether to compile a separate start state for each pattern …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","","","","","","Executes a forward search and returns the end position of …","Executes an overlapping forward search and returns the end …","Executes a reverse overlapping search and returns the …","Executes a reverse search and returns the start of the …","Writes the set of patterns that match anywhere in the …","","","","","","Heuristically enable Unicode word boundaries.","A builder for a regex based on a hybrid NFA/DFA.","A cache represents a partially computed forward and …","An iterator over all non-overlapping matches for an …","A regular expression that uses hybrid NFA/DFAs (also …","Return references to the forward and reverse caches, …","Return mutable references to the forward and reverse …","","","","","","","","","Build a regex from the given pattern.","Build a regex from its component forward and reverse …","Build a regex from the given patterns.","Return a builder for configuring the construction of a …","","","","","Create a new cache for this <code>Regex</code>.","","Set the lazy DFA compilation configuration for this …","Returns the start and end offset of the leftmost match. If …","Returns an iterator over all non-overlapping leftmost …","","","","","Return the underlying lazy DFA responsible for forward …","Return a reference to the forward cache.","Return a mutable reference to the forward cache.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if this regex matches the given …","Returns the heap memory usage, in bytes, as a sum of the …","Parse the given regular expression using the default …","Create a new cache for the given <code>Regex</code>.","Create a new regex builder with the default configuration.","Like <code>new</code>, but parses multiple patterns into a single “…","","Returns the total number of patterns matched by this regex.","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Return the underlying lazy DFA responsible for reverse …","Return a reference to the reverse cache.","Return a mutable reference to the reverse cache.","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","Returns the start and end offset of the leftmost match. If …","","","","","An error that occurs when construction of a <code>Regex</code> fails.","A builder for configuring and constructing a <code>Regex</code>.","Represents mutable scratch space used by regex engines …","An iterator over all non-overlapping leftmost matches with …","An object describing the configuration of a <code>Regex</code>.","An iterator over all non-overlapping matches.","A regex matcher that works by composing several other …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> spans delimited by a regular expression …","Toggles whether automatic prefilter support is enabled.","Toggle whether a bounded backtracking regex engine should …","","","","","","","","","","","","","","","","","","","Builds a <code>Regex</code> from a single pattern string.","Builds a <code>Regex</code> directly from an <code>Hir</code> expression.","Builds a <code>Regex</code> from many pattern strings.","Builds a <code>Regex</code> directly from many <code>Hir</code> expressions.","Return a builder for configuring the construction of a …","Whether to attempt to shrink the size of the alphabet for …","Executes a leftmost forward search and writes the spans of …","Returns an iterator over all non-overlapping <code>Captures</code> …","Returns the total number of capturing groups.","","","","","","","","","","","Return a default configuration for a <code>Regex</code>.","Configure the behavior of a <code>Regex</code>.","","","Creates a new cache for use with lower level search APIs …","Creates a new object for recording capture group offsets. …","","Toggle whether a fully compiled DFA should be available …","Sets the size limit, in bytes, for heap memory used for a …","Sets a limit on the total number of NFA states, beyond …","Executes a leftmost search and returns the first match …","Returns an iterator over all non-overlapping leftmost …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns whether automatic prefilters are enabled, as set by","Returns whether the bounded backtracking regex engine may …","Returns whether byte classes are enabled, as set by …","Returns the configuration object used to build this <code>Regex</code>.","Returns whether the DFA regex engine may be used, as set by","Returns DFA size limit, as set by <code>Config::dfa_size_limit</code>.","Returns DFA size limit in terms of the number of states in …","Returns whether the hybrid NFA/DFA regex engine may be …","Returns hybrid NFA/DFA cache capacity, as set by …","Returns the line terminator for this configuration, as set …","Returns the match kind on this configuration, as set by …","Returns NFA size limit, as set by <code>Config::nfa_size_limit</code>.","Returns whether the one-pass DFA regex engine may be used, …","Returns one-pass DFA size limit, as set by …","Returns a manually set prefilter, if one was set by …","Returns whether empty matches must fall on valid UTF-8 …","Returns the capture configuration, as set by …","Return information about the capture groups in this <code>Regex</code>.","Toggle whether the hybrid NFA/DFA (also known as the “…","Set the cache capacity, in bytes, for the lazy DFA.","Returns the current <code>Input</code> associated with this iterator.","Returns the current <code>Input</code> associated with this iterator.","Returns the current <code>Input</code> associated with this iterator.","Returns the current <code>Input</code> associated with this iterator.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns true if this regex has a high chance of being “…","Returns true if and only if this regex matches the given …","Set the line terminator to be used by the <code>^</code> and <code>$</code> anchors …","Set the match semantics for a <code>Regex</code>.","Return the total approximate heap memory, in bytes, used …","Returns the heap memory usage, in bytes, of this cache.","Builds a <code>Regex</code> from a single pattern string using the …","Creates a new <code>Cache</code> for use with this regex.","Create a new configuration object for a <code>Regex</code>.","Creates a new builder for configuring and constructing a …","Builds a <code>Regex</code> from many pattern strings using the default …","","","","","Sets the size limit, in bytes, to enforce on the …","Toggle whether a one-pass DFA should be available for use …","Sets the size limit, in bytes, for the one-pass DFA.","If it is known which pattern ID caused this build error to …","Returns the total number of patterns in this regex.","Overrides and sets the prefilter to use inside a <code>Regex</code>.","Returns the <code>Regex</code> value that created this iterator.","Returns the <code>Regex</code> value that created this iterator.","Reset this cache such that it can be used for searching …","Returns the start and end offset of the leftmost match. If …","Executes a leftmost forward search and writes the spans of …","This is like <code>Regex::search_captures</code>, but requires the …","Returns the end offset of the leftmost match. If no match …","This is like <code>Regex::search_half</code>, but requires the caller to","Executes a leftmost forward search and writes the spans of …","This is like <code>Regex::search_slots</code>, but requires the caller …","This is like <code>Regex::search</code>, but requires the caller to …","","If this error occurred because the regex exceeded the …","","Returns an iterator of spans of the haystack given, …","Returns an iterator of at most <code>limit</code> spans of the haystack …","Returns the total number of capturing groups that appear …","Configure the syntax options when parsing a pattern string …","If this error corresponds to a syntax error, then a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles whether empty matches are permitted to occur …","Configures what kinds of groups are compiled as “…","Writes the set of patterns that match anywhere in the …","This is like <code>Regex::which_overlapping_matches</code>, but …","Defines a Thompson NFA and provides the <code>PikeVM</code> and …","All capture states, including those corresponding to both …","An alternation such that there exists precisely two …","An error that can occurred during the construction of a …","An abstraction for building Thompson NFAs by hand.","A state with a single transition that can only be taken if …","An empty state that records a capture location.","A builder for compiling an NFA from a regex’s high-level …","The configuration used for a Thompson NFA compiler.","A dense representation of a state with multiple …","A sequence of transitions used to represent a dense state.","A state that cannot be transitioned out of. This is useful …","Only capture states corresponding to implicit capture …","A conditional epsilon transition satisfied via some sort of","A match state. There is at least one such occurrence of …","A byte oriented Thompson non-deterministic finite …","No capture states are compiled into the Thompson NFA.","An iterator over all pattern IDs in an NFA.","A state with possibly many transitions represented in a …","A sequence of transitions used to represent a sparse state.","A state in an NFA.","A single transition to another state.","An alternation such that there exists an epsilon …","A configuration indicating which kinds of <code>State::Capture</code> …","Add a “end capture” NFA state.","Add a “start capture” NFA state.","Add an “empty” NFA state.","Adds a “fail” NFA state.","Add a “look” NFA state.","Adds a “match” NFA state.","Add a “range” NFA state.","Add a “sparse” NFA state.","Add a “union” NFA state.","Add a “reverse union” NFA state.","Returns an NFA with a single regex pattern that always …","An NFA backed bounded backtracker for executing regex …","","","","","","","","","","","","","","","","","","","","","","","Assemble a <code>NFA</code> from the states added so far.","Compile the given regular expression pattern into an NFA.","Compile the given high level intermediate representation …","Compile the given regular expression patterns into a …","Compile the given high level intermediate representations …","Get the byte classes for this NFA.","Whether to include ‘Capture’ states in the NFA.","Clear this builder.","","","","","","","","","","","","","","","","","","","","","Return a compiler for configuring the construction of an …","Return a default configuration for an <code>NFA</code>.","Apply the given NFA configuration options to this builder.","Returns the pattern identifier of the current pattern.","","","","The inclusive end of the byte range.","","","","","","","","","Finish the assembly of a pattern in this NFA.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return whether NFA compilation is configured to produce …","Returns the look-around matcher used for this builder.","Return the look-around matcher for this NFA.","Return the configured NFA size limit, if it exists, in the …","Returns whether reverse mode is enabled for this builder.","Returns whether this configuration has enabled reverse NFA …","Return whether NFA shrinking is enabled.","Return the currently configured size limit.","Returns whether UTF-8 mode is enabled for this builder.","Returns whether this configuration has enabled UTF-8 mode.","Return what kinds of capture states will be compiled into …","Returns the capturing group info for this NFA.","Returns true if and only if this NFA has at least one …","Returns true if and only if this NFA can match the empty …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if all starting states for this …","Returns true if this configuration indicates that some …","Returns true if and only if this state contains one or …","Returns true if this configuration indicates that no …","Returns true when this NFA is meant to be matched in …","Whether UTF-8 mode is enabled for this NFA or not.","Sets the look-around matcher that should be used with this …","Returns the look-around matcher associated with this NFA.","Returns the union of all look-around assertions used …","Returns the union of all prefix look-around assertions for …","This follows the matching transition for a particular byte.","This follows the matching transition for a particular byte.","Returns true if the position <code>at</code> in <code>haystack</code> falls in this …","This follows the matching transition for a particular byte.","This follows the matching transition for a particular byte.","Returns true if the given byte falls in this transition’…","Returns true if the given alphabet unit falls in this …","Returns the heap memory usage, in bytes, used by the NFA …","Returns the memory usage, in bytes, of this NFA.","Returns an NFA that never matches at any position.","Create a new builder for hand-assembling NFAs.","Return a new default Thompson NFA compiler configuration.","Create a new NFA builder with its default configuration.","Parse the given regular expression using a default …","Parse the given regular expressions using a default …","","The identifier of the state to transition to.","Sets an approximate size limit on the total heap used by …","Add a transition from one state to another.","Returns the number of patterns added to this builder so …","Returns the total number of regex patterns in this NFA.","Returns an iterator over all pattern identifiers in this …","An NFA backed Pike VM for executing regex searches with …","Reverse the NFA.","Sets the look-around matcher that should be used for the …","Sets whether the NFA produced by this builder should be …","Set the size limit on this builder.","Set whether the NFA produced by this builder should only …","Apply best effort heuristics to shrink the NFA at the …","If this error occurred because the NFA exceeded the …","","The inclusive start of the byte range.","Return the state identifier of the initial anchored state …","Start the assembly of a pattern in this NFA.","Return the state identifier of the initial anchored state …","Return the state identifier of the initial unanchored …","Return a reference to the NFA state corresponding to the …","Returns a slice of all states in this NFA.","Set the syntax configuration for this builder using …","","","","","","","","","","","","The sorted sequence of non-overlapping transitions.","A dense representation of this state’s transitions on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to enable UTF-8 mode during search or not.","Configures what kinds of capture groups are compiled into …","An unconditional epsilon transition to another NFA state. …","An unconditional epsilon transition to another NFA state. …","An ordered sequence of unconditional epsilon transitions …","The capture group index that this capture belongs to. …","The look-around assertion that must be satisfied before …","The state to transition to if the look-around assertion is …","The state to transition to, unconditionally.","The pattern ID that this capture belongs to.","The matching pattern ID.","The slot index for this capture. Every capturing group has …","The transition from this state to the next.","A backtracking regex engine that bounds its execution to …","A builder for a bounded backtracker.","A cache represents mutable state that a <code>BoundedBacktracker</code> …","The configuration used for building a bounded backtracker.","An iterator over all non-overlapping leftmost matches, …","An iterator over all non-overlapping matches for a …","Create a new <code>BoundedBacktracker</code> that matches every input.","","","","","","","","","","","","","Build a <code>BoundedBacktracker</code> from the given pattern.","Build a <code>BoundedBacktracker</code> directly from its NFA.","Build a <code>BoundedBacktracker</code> from the given patterns.","Return a builder for configuring the construction of a …","","","","","","","","","Return a default configuration for a <code>BoundedBacktracker</code>.","Apply the given <code>BoundedBacktracker</code> configuration options …","Create a new cache for this regex.","Create a new empty set of capturing groups that is …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the config for this <code>BoundedBacktracker</code>.","Returns a reference to the underlying NFA.","Returns the prefilter set in this configuration, if one at …","Returns the configured visited capacity.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the maximum haystack length supported by this …","Returns the heap memory usage, in bytes, of this cache.","Returns the minimum visited capacity for the given …","Create a new <code>BoundedBacktracker</code> that never matches any …","Return a new default regex configuration.","Create a new BoundedBacktracker builder with its default …","Parse the given regular expression using the default …","Create a new <code>BoundedBacktracker</code> cache.","Example","Like <code>new</code>, but parses multiple patterns into a single “…","","","Returns the total number of patterns compiled into this …","Set a prefilter to be used whenever a start state is …","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","Executes a leftmost forward search and writes the spans of …","Returns an iterator over all non-overlapping <code>Captures</code> …","Executes a leftmost forward search and returns a <code>Match</code> if …","Returns an iterator over all non-overlapping leftmost …","","","","","","","","","","","","","Returns true if and only if this regex matches the given …","Executes a leftmost forward search and writes the spans of …","Executes a leftmost forward search and writes the spans of …","","","","","","","Set the visited capacity used to bound backtracking.","A builder for a <code>PikeVM</code>.","A cache represents mutable state that a <code>PikeVM</code> requires …","An iterator over all non-overlapping leftmost matches, …","The configuration used for building a <code>PikeVM</code>.","An iterator over all non-overlapping matches for a …","A virtual machine for executing regex searches with …","Create a new <code>PikeVM</code> that matches every input.","","","","","","","","","","","","","Build a <code>PikeVM</code> from the given pattern.","Build a <code>PikeVM</code> directly from its NFA.","Build a <code>PikeVM</code> from the given patterns.","Return a builder for configuring the construction of a …","Executes a leftmost forward search and writes the spans of …","Returns an iterator over all non-overlapping <code>Captures</code> …","","","","","","","","","Return a default configuration for a <code>PikeVM</code>.","Apply the given <code>PikeVM</code> configuration options to this …","Create a new cache for this <code>PikeVM</code>.","Create a new empty set of capturing groups that is …","","Executes a leftmost forward search and returns a <code>Match</code> if …","Returns an iterator over all non-overlapping leftmost …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the config for this <code>PikeVM</code>.","Returns the match semantics set in this configuration.","Returns a reference to the underlying NFA.","Returns the prefilter set in this configuration, if one at …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if and only if this <code>PikeVM</code> matches the given …","Set the desired match semantics.","Returns the heap memory usage, in bytes, of this cache.","Create a new <code>PikeVM</code> that never matches any input.","Return a new default PikeVM configuration.","Create a new PikeVM builder with its default configuration.","Parse the given regular expression using the default …","Create a new <code>PikeVM</code> cache.","Like <code>new</code>, but builds a PikeVM directly from an NFA. This …","Like <code>new</code>, but parses multiple patterns into a single “…","","","Returns the total number of patterns compiled into this …","Set a prefilter to be used whenever a start state is …","Reset this cache such that it can be used for searching …","Reset the given cache such that it can be used for …","Executes a leftmost forward search and writes the spans of …","Executes a leftmost forward search and writes the spans of …","Set the syntax configuration for this builder using …","Set the Thompson NFA configuration for this builder using …","","","","","","","","","","","","","","","","","","","","","","","Writes the set of patterns that match anywhere in the …","This module provides APIs for dealing with the alphabets …","Provides types for dealing with capturing groups.","Provides convenience routines for escaping raw bytes.","Provides routines for interpolating capture group …","Generic helpers for iteration of matches from a regex …","A lazily initialized value for safe sharing between …","Types and routines for working with look-around assertions.","A thread safe memory pool.","Defines a prefilter for accelerating regex searches.","Lower level primitive types that are useful in a variety …","Provides helpers for dealing with start state …","Utilities for dealing with the syntax of a regular …","Types and routines that support the wire format of finite …","An iterator over all elements in an equivalence class.","An iterator over each equivalence class.","An iterator over representative bytes from each …","A representation of byte oriented equivalence classes.","Unit represents a single unit of haystack for DFA based …","Return the total number of elements in the alphabet …","If this unit is an “end of input” sentinel, then …","If this unit is not an “end of input” sentinel, then …","Return this unit as a <code>usize</code>, regardless of whether it is a …","","","","","","","","","","","","","","","","","Returns an iterator of the bytes in the given equivalence …","Creates a new set of equivalence classes where all bytes …","Create a new “end of input” haystack unit.","Create a unit that represents the “end of input” …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the equivalence class for the given byte.","Get the equivalence class for the given haystack unit and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if and only of this unit is a byte value …","Returns true when this unit represents an “end of input…","Returns true if and only if every byte in this class maps …","Returns true when this unit corresponds to an ASCII word …","Returns an iterator over all equivalence classes in this …","","","","","Returns an iterator over a sequence of representative …","Set the equivalence class for the given byte.","Creates a new set of equivalence classes where each byte …","Returns the stride, as a base-2 exponent, required for …","","","","","","","","","","","","","","","","","","Create a new haystack unit from a byte value.","The span offsets of capturing groups after a match has …","An iterator over all capturing groups in a <code>Captures</code> value.","Represents information about capturing groups in a …","An iterator over capturing groups and their names for a …","An error that may occur when building a <code>GroupInfo</code>.","An iterator over capturing groups and their names for a …","Create new storage for the offsets of all matching …","Return the total number of capture groups across all …","Return an iterator of all capture groups for all patterns …","","","","","","","","","","","","","Clear this <code>Captures</code> value.","","","","","","","","","","","","","","Create new storage for only tracking which pattern …","This creates an empty <code>GroupInfo</code>.","Returns the total number of slots for explicit capturing …","This is a convenience routine for extracting the substrings","This is a convenience routine for extracting the substrings","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the span of a capturing group match corresponding …","Returns the span of a capturing group match corresponding …","Returns the pattern ID and the span of the match, if one …","Returns a reference to the underlying group info on which …","Return the total number of capturing groups for the …","Return the number of capture groups in a pattern.","Returns the total number of slots for implicit capturing …","Interpolates the capture references in <code>replacement</code> with the","Interpolates the capture references in <code>replacement</code> with the","Interpolates the capture references in <code>replacement</code> with the","Interpolates the capture references in <code>replacement</code> with the","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if and only if this capturing group …","Returns an iterator of possible spans for every capturing …","Create new storage for only the full match spans of a …","Returns the memory usage, in bytes, of this <code>GroupInfo</code>.","Creates a new group info from a sequence of patterns, …","","","","Returns the identifier of the pattern that matched when …","Returns the total number of patterns in this <code>GroupInfo</code>.","Return an iterator of all capture groups and their names …","Set the pattern on this <code>Captures</code> value.","","","Returns the starting slot corresponding to the given …","Returns the total number of slots in this <code>GroupInfo</code> across …","Returns the underlying slots, where each slot stores a …","Returns the starting and ending slot corresponding to the …","Returns the underlying slots as a mutable slice, where …","","Return the capture group index corresponding to the given …","Return the capture name for the given index and given …","","","","","","","","","","","","","","","","","","","","","","","","","Provides a convenient <code>Debug</code> implementation for a <code>u8</code>.","Provides a convenient <code>Debug</code> implementation for <code>&amp;[u8]</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Accepts a replacement byte string and interpolates capture …","Accepts a replacement string and interpolates capture …","An iterator over all non-overlapping captures for an …","An iterator over all non-overlapping half matches for an …","An iterator over all non-overlapping matches for an …","A searcher for creating iterators and performing lower …","An iterator over all non-overlapping captures for a …","An iterator over all non-overlapping half matches for a …","An iterator over all non-overlapping matches for a …","Return the next match for an infallible search if one …","Return the next half match for an infallible search if one …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an infallible version of this iterator.","Return an infallible version of this iterator.","Return an infallible version of this iterator.","Returns the current <code>Input</code> used by this iterator.","Returns the current <code>Input</code> used by this iterator.","Returns the current <code>Input</code> used by this searcher.","Returns the current <code>Input</code> used by this iterator.","Returns the current <code>Input</code> used by this iterator.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Given a closure that executes a single search, return an …","Given a closure that executes a single search, return an …","","","","","","","Given a closure that executes a single search, return an …","Create a new fallible non-overlapping matches iterator.","","","","","","","","Return the next match for a fallible search if one exists, …","Return the next half match for a fallible search if one …","","","","","","","","","","","","","","","","","","","","","","A lazily initialized value that implements <code>Deref</code> for <code>T</code>.","","","","","Returns the argument unchanged.","Return a reference to the lazily initialized value.","Calls <code>U::from(self)</code>.","Create a new <code>Lazy</code> value that is initialized via the given …","","","","Match the end of text. Specifically, this matches at the …","Match the end of a line or the end of text. Specifically, …","Match the end of a line or the end of text. Specifically, …","A look-around assertion.","A matcher for look-around assertions.","LookSet is a memory-efficient set of look-around …","An iterator over all look-around assertions in a <code>LookSet</code>.","Match the beginning of text. Specifically, this matches at …","Match the beginning of a line or the beginning of text. …","Match the beginning of a line or the beginning of text. …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","Match an ASCII-only word boundary. That is, this matches a …","Match an ASCII-only negation of a word boundary.","Match the end of an ASCII-only word boundary. That is, …","Match the end half of an ASCII-only word boundary. That …","Match the end half of a Unicode word boundary. That is, …","Match the end of a Unicode word boundary. That is, this …","Match the start of an ASCII-only word boundary. That is, …","Match the start half of an ASCII-only word boundary. That …","Match the start half of a Unicode word boundary. That is, …","Match the start of a Unicode word boundary. That is, this …","Match a Unicode-aware word boundary. That is, this matches …","Match a Unicode-aware negation of a word boundary.","Returns a convenient single codepoint representation of …","Return the underlying representation of this look-around …","Checks that all assertions in this set can be matched.","The underlying representation this set is exposed to make …","","","","","","","","","","","Returns an error if and only if Unicode word boundary data …","","","","","","","","","","","Returns true if and only if the given look-around …","Returns true if and only if this set contains any anchor …","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any word …","Returns true if and only if this set contains any ASCII …","Returns true if and only if this set contains any Unicode …","","","Create an empty set of look-around assertions.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Given the underlying representation of a <code>Look</code> value, …","Create a full set of look-around assertions.","Returns the line terminator that was configured for this …","Return a new set that is equivalent to the original, but …","Returns a new set that is the intersection of this and the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if and only if this set is empty.","Returns true when <code>Look::End</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::EndCRLF</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::EndLF</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::Start</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::StartCRLF</code> is satisfied <code>at</code> the given","Returns true when <code>Look::StartLF</code> is satisfied <code>at</code> the given …","Returns true when <code>Look::WordAscii</code> is satisfied <code>at</code> the given","Returns true when <code>Look::WordAsciiNegate</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordEndAscii</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordEndHalfAscii</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordEndHalfUnicode</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordEndUnicode</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordStartAscii</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordStartHalfAscii</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordStartHalfUnicode</code> is satisfied …","Returns true when <code>Look::WordStartUnicode</code> is satisfied <code>at</code> …","Returns true when <code>Look::WordUnicode</code> is satisfied <code>at</code> the …","Returns true when <code>Look::WordUnicodeNegate</code> is satisfied <code>at</code> …","Returns an iterator over all of the look-around assertions …","Returns the total number of look-around assertions in this …","Returns true when the position <code>at</code> in <code>haystack</code> satisfies …","Returns true when <em>all</em> of the assertions in the given set …","Creates a new default matcher for look-around assertions.","","Return a <code>LookSet</code> from the slice given as a native endian …","Return a new set that is equivalent to the original, but …","Flip the look-around assertion to its equivalent for …","Updates this set in place with the result of inserting the …","Updates this set in place with the result of intersecting …","Sets the line terminator for use with <code>(?m:^)</code> and <code>(?m:$)</code>.","Updates this set in place with the result of removing the …","Updates this set in place with the result of subtracting …","Updates this set in place with the result of unioning it …","Create a look-around set containing the look-around …","Returns a new set that is the result of subtracting the …","","","","","","","","","","","","","","","","","","","","","","Returns a new set that is the union of this and the one …","Write a <code>LookSet</code> as a native endian 32-bit integer to the …","A thread safe pool that works in an <code>alloc</code>-only context.","A guard that is returned when a caller requests a value …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a value from the pool. The caller is guaranteed to have","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new pool. The given closure is used to create …","Consumes this guard and puts it back into the pool.","","","","","","","A prefilter for accelerating regex searches.","","","","","Run this prefilter on <code>haystack[span.start..end]</code> and return …","","Returns the argument unchanged.","This attempts to extract prefixes from the given <code>Hir</code> …","This attempts to extract prefixes from the given <code>Hir</code> …","Calls <code>U::from(self)</code>.","Returns the heap memory, in bytes, used by the underlying …","Create a new prefilter from a sequence of needles and a …","Returns the span of a prefix of …","","","","","The total number of values that can be represented as a …","The total number of values that can be represented.","The total number of values that can be represented.","The maximum index value.","The maximum value.","The maximum value.","A <code>usize</code> that can never be <code>usize::MAX</code>.","The identifier of a regex pattern, represented by a …","This error occurs when a value could not be constructed.","The number of bytes that a single small index uses in …","The number of bytes that a single value uses in memory.","The number of bytes that a single value uses in memory.","A type that represents a “small” index.","This error occurs when a small index could not be …","The identifier of a finite automaton state, represented by …","This error occurs when a value could not be constructed.","The zero index value.","The zero value.","The zero value.","Return the internal <code>u32</code> of this small index represented as …","Return the internal value as a i32…","Return the internal value as a i32…","Return the internal <code>u32</code> of this small index. This is …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return the internal value as a <code>u32</code>. This is guaranteed to …","Return this small index as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return the internal value as a <code>u64</code>. This is guaranteed to …","Return this small index as a <code>usize</code>. This is guaranteed to …","Return the internal value as a <code>usize</code>. This is guaranteed to","Return the internal value as a <code>usize</code>. This is guaranteed to","Returns the value that could not be converted to a small …","Returns the value that could not be converted to an ID.","Returns the value that could not be converted to an ID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decode this small index from the bytes given using the …","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Decode this small index from the bytes given using the …","Decode this value from the bytes given using the native …","Decode this value from the bytes given using the native …","Return the underlying <code>usize</code> value. The returned value is …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Like <code>SmallIndex::new</code>, but panics if the given index is not …","Like <code>new</code>, but panics if the given value is not valid.","Like <code>new</code>, but panics if the given value is not valid.","Create a new <code>NonMaxUsize</code> from the given value.","Create a new small index.","Create a new value that is represented by a “small index.…","Create a new value that is represented by a “small index.…","Create a new small index without checking whether the …","Create a new value without checking whether the given …","Create a new value without checking whether the given …","Returns one more than this small index as a usize.","Returns one more than this value as a usize.","Returns one more than this value as a usize.","","","","Return the underlying small index integer as raw bytes in …","Return the underlying integer as raw bytes in native endian","Return the underlying integer as raw bytes in native endian","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The configuration used to determine a DFA’s start state …","Set the anchored mode of a search.","","","","","","Returns the argument unchanged.","A convenience routine for building a start configuration …","A convenience routine for building a start configuration …","Return the anchored mode in this configuration.","Return the look-behind byte in this configuration, if one …","Calls <code>U::from(self)</code>.","Set the look-behind byte at the start of a search.","Create a new default start configuration.","","","","","A common set of configuration options that apply to the …","","","Enable or disable the case insensitive flag by default.","","","Enable or disable the “CRLF mode” flag by default.","","Enable or disable the “dot matches any character” flag …","","Returns the argument unchanged.","Returns whether “case insensitive” mode is enabled.","Returns whether “CRLF” mode is enabled.","Returns whether “dot matches new line” mode is enabled.","Returns whether “ignore whitespace” mode is enabled.","Returns the line terminator in this syntax configuration.","Returns whether “multi line” mode is enabled.","Returns the “nest limit” setting.","Returns whether “octal” mode is enabled.","Returns whether “swap greed” mode is enabled.","Returns whether “unicode” mode is enabled.","Returns whether UTF-8 mode is enabled.","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Sets the line terminator for use with <code>(?u-s:.)</code> and <code>(?-us:.)</code>…","Enable or disable the multi-line matching flag by default.","Set the nesting limit used for the regular expression …","Return a new default syntax configuration.","Whether to support octal syntax or not.","A convenience routine for parsing a pattern into an HIR …","A convenience routine for parsing many patterns into HIR …","A convenience routine for parsing many patterns into HIR …","A convenience routine for parsing a pattern into an HIR …","Enable or disable the “swap greed” flag by default.","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","When disabled, the builder will permit the construction of …","A hack to align a smaller type <code>B</code> with a bigger type <code>T</code>.","An error that occurs when deserializing an object defined …","An error that occurs when serializing an object from this …","A zero-sized field indicating the alignment we want.","","","","","","","A possibly non-sized field containing a sequence of bytes.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[12,0,14,0,14,0,12,0,0,0,0,2,2,0,0,0,0,14,0,14,2,1,6,1,7,8,9,3,10,11,2,12,13,14,6,1,7,8,9,3,10,11,2,12,13,14,3,3,6,1,7,8,9,3,10,11,2,12,13,14,6,1,7,8,9,3,10,11,2,12,13,14,6,7,3,6,12,0,1,1,9,7,6,7,7,8,9,3,2,12,13,14,6,7,8,9,3,2,12,13,14,6,1,7,8,9,3,10,10,11,2,12,13,13,14,6,6,1,1,7,7,8,9,3,10,11,2,12,13,14,13,1,1,1,1,6,7,8,9,1,13,0,3,6,1,7,8,9,3,10,11,2,12,13,14,11,2,1,1,7,9,3,3,3,13,7,9,3,0,8,9,1,8,9,3,13,11,11,0,7,8,6,8,9,2,13,1,7,9,1,1,1,1,1,1,11,1,9,1,9,7,6,1,7,8,9,3,10,11,2,12,13,14,10,13,6,6,6,6,6,1,7,8,9,3,10,11,2,12,13,14,3,6,1,7,8,9,3,10,11,2,12,13,14,6,1,7,8,9,3,10,11,2,12,13,14,13,0,139,140,141,139,142,0,0,0,0,0,0,35,35,40,37,35,41,36,40,37,35,41,36,37,37,37,35,40,35,40,37,35,41,36,40,37,35,41,36,35,37,35,35,40,35,40,37,35,41,36,36,40,37,35,41,36,40,35,40,35,40,40,40,37,35,41,36,35,40,35,41,35,40,37,35,41,35,35,35,41,35,40,36,40,35,35,35,37,37,40,37,35,41,36,36,40,37,35,41,36,40,37,35,41,36,35,35,40,37,35,41,36,0,48,0,0,48,0,48,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,50,50,0,50,50,47,47,48,48,49,49,50,47,48,49,50,50,47,48,49,50,50,50,50,50,50,50,50,0,47,48,47,48,49,50,47,48,49,47,48,49,50,47,48,49,50,47,48,49,50,143,144,145,0,0,0,0,0,51,51,55,54,52,56,51,55,54,52,56,52,52,52,51,51,54,54,55,51,55,54,52,56,51,55,54,52,56,51,52,51,54,56,56,51,55,54,52,56,51,55,54,52,56,54,54,51,56,54,54,54,54,51,54,54,54,54,54,54,51,55,54,52,56,54,51,51,51,55,54,54,51,51,55,54,52,51,51,51,51,51,51,54,54,55,51,55,55,55,55,54,54,56,51,51,51,54,52,52,51,55,54,52,56,51,55,54,52,56,51,55,54,52,56,51,51,51,51,51,51,55,54,52,56,54,0,0,0,0,59,59,61,62,59,60,61,62,59,60,60,60,60,61,59,60,59,60,61,60,60,61,61,61,62,59,60,61,59,59,61,62,59,60,61,62,59,60,62,61,59,61,59,60,61,62,61,59,61,61,59,59,60,60,59,60,61,62,59,60,61,62,59,60,61,61,62,59,60,0,0,0,0,0,0,0,0,0,63,63,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,64,64,64,64,65,63,65,65,65,66,65,70,63,64,66,65,70,63,64,65,64,71,69,65,65,63,63,63,63,65,65,66,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,63,63,63,65,63,63,63,63,63,63,63,63,63,63,63,63,63,65,63,63,71,69,72,73,66,65,71,69,72,73,70,63,64,71,69,72,73,65,65,63,63,65,70,65,70,63,64,65,71,69,72,73,63,63,63,66,65,63,71,69,70,65,65,65,65,65,65,65,65,73,66,66,65,65,65,64,66,66,65,70,63,64,66,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,66,65,71,69,72,73,70,63,64,63,63,65,65,0,74,85,0,0,85,85,0,0,85,0,85,74,85,85,0,74,0,85,0,0,0,85,0,77,77,77,77,77,77,77,77,77,77,39,0,77,45,74,84,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,77,84,84,84,84,39,45,77,77,45,74,84,79,39,85,86,87,82,77,45,74,84,79,39,85,86,87,82,39,39,84,77,77,45,74,82,85,86,87,82,85,86,87,82,77,77,45,74,84,79,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,45,77,45,45,77,45,45,77,77,45,45,39,39,39,82,77,45,74,84,79,39,85,86,87,82,88,88,39,74,85,74,39,39,45,39,39,39,86,87,82,86,87,82,82,77,39,39,77,45,84,39,39,88,82,45,77,77,39,39,0,45,77,77,77,77,45,79,79,82,39,77,39,39,39,39,84,77,45,74,84,79,39,85,86,87,82,79,86,87,77,45,74,84,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,77,45,74,84,79,39,85,86,87,82,88,45,45,146,146,147,148,149,149,148,148,150,148,151,0,0,0,0,0,0,92,94,93,92,96,97,95,94,93,92,96,97,95,93,93,93,92,94,93,92,95,94,93,92,95,92,93,92,92,94,94,93,92,96,97,95,94,93,92,96,97,95,92,92,94,94,94,93,92,96,97,95,96,97,92,95,0,92,94,93,92,95,92,92,96,97,92,94,95,92,93,93,94,93,92,95,92,92,92,92,94,93,92,96,97,95,94,93,92,96,97,95,92,92,92,94,93,92,96,97,95,94,0,0,0,0,0,0,98,102,99,98,103,101,100,102,99,98,103,101,100,99,99,99,98,98,98,102,99,98,100,102,99,98,100,98,99,98,98,102,98,98,102,99,98,103,101,100,102,99,98,103,101,100,98,102,98,102,102,99,98,103,101,100,103,101,98,102,100,98,102,99,98,100,98,98,103,101,98,102,100,98,98,98,99,99,102,99,98,100,102,99,98,103,101,100,102,99,98,103,101,100,102,99,98,103,101,100,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,91,91,91,91,53,105,106,104,91,53,105,106,104,91,53,91,53,91,53,53,53,91,53,91,91,91,53,105,106,104,91,53,105,106,104,53,53,91,53,105,106,104,105,106,104,91,91,53,91,53,105,106,104,91,53,53,53,53,91,53,91,53,105,106,104,91,53,105,106,104,91,53,105,106,104,91,0,0,0,0,0,0,42,75,75,42,108,75,109,110,107,42,108,75,109,110,107,42,42,108,75,109,110,42,108,75,109,110,108,110,75,42,75,75,42,42,42,108,75,109,109,110,107,42,108,75,109,110,107,42,42,42,42,42,75,75,42,42,42,42,42,108,75,109,110,107,108,110,107,42,42,42,75,75,108,110,107,42,75,75,42,108,110,75,75,42,75,42,109,75,75,42,108,75,109,110,109,42,108,75,109,110,107,42,108,75,109,110,107,42,108,75,109,110,107,0,0,114,113,114,113,113,113,114,113,114,113,114,113,113,114,113,114,113,114,113,0,0,0,0,0,0,0,0,0,116,116,117,118,119,116,120,122,123,117,118,119,116,120,122,123,116,116,117,118,119,116,120,122,123,117,118,119,116,120,122,123,117,118,119,117,118,116,120,122,117,118,119,116,120,122,123,116,116,117,118,119,120,122,123,116,116,117,118,119,120,122,123,116,116,116,117,118,119,116,120,122,123,117,118,119,116,120,122,123,117,118,119,116,120,122,123,0,124,124,124,124,124,124,124,124,124,124,124,81,81,81,0,0,0,0,81,81,81,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,90,90,81,90,128,89,127,81,90,128,89,127,127,81,90,128,89,127,81,90,128,89,127,90,90,90,90,90,90,90,90,90,90,89,90,81,90,81,90,81,90,128,89,127,127,81,90,128,89,127,81,90,89,90,90,81,90,128,89,127,128,90,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,89,89,89,128,90,90,81,90,90,89,90,90,90,90,90,81,90,128,89,127,127,81,90,128,89,127,81,90,128,89,127,81,90,128,89,127,90,90,0,0,131,129,131,129,129,129,131,129,131,129,131,131,129,131,129,131,129,131,129,131,129,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,132,6,78,132,6,78,0,0,0,132,6,78,0,0,0,0,132,6,78,132,6,78,132,6,78,132,6,78,132,6,78,134,29,135,46,132,134,78,29,135,46,132,134,78,29,135,46,132,134,78,29,135,46,132,134,78,29,135,46,132,78,132,78,46,132,134,78,29,135,46,132,134,78,29,135,46,132,134,134,78,29,29,135,135,46,132,132,134,78,78,29,135,132,6,78,132,6,78,46,46,132,78,46,132,134,78,29,135,132,6,78,46,132,6,78,132,6,78,132,6,78,46,132,78,132,6,78,46,132,134,78,29,135,134,29,135,46,132,132,132,132,132,134,78,78,78,78,78,29,135,46,132,134,78,29,135,46,132,134,78,29,135,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,44,44,44,44,44,44,44,0,0,0,136,136,137,138,136,137,138,136,136,137,137,138,138,136,137,138,136,137,138,137,138,136,137,138,136,137,138,136,137,138],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[3,5],[6,6],[1,1],[7,7],[8,8],[9,9],[3,3],[10,10],[11,11],[2,2],[12,12],[13,13],[14,14],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[6,6],15],[[7,4],16],[[3,6],16],[[],6],[[],12],0,[[1,16],1],[1,4],[9,4],0,[[6,6],16],[[7,7],16],[[7,[17,[4]]],16],[[8,8],16],[[9,9],16],[[3,3],16],[[2,2],16],[[12,12],16],[[13,13],16],[[14,14],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[6,18],19],[[1,18],19],[[7,18],19],[[8,18],19],[[9,18],19],[[3,18],19],[[10,18],19],[[10,18],19],[[11,18],19],[[2,18],19],[[12,18],19],[[13,18],19],[[13,18],19],[[14,18],19],[20,6],[-1,-1,[]],[-1,1,[21,[23,[[22,[20]]]]]],[-1,-1,[]],[-1,-1,[]],[[[17,[4]]],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,13],[1,2],[1,16],[1,[[17,[4]]]],[1,7],[[6,-1],5,24],[[7,-1],5,24],[[8,-1],5,24],[[9,-1],5,24],[1,[[22,[20]]]],[4,13],0,[[3,6],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,16],[[1,4],16],[1,16],[7,16],[9,16],[3,16],[3,16],[3,11],[13,14],[7,4],[9,4],[3,4],0,[[4,4],8],[[4,-1],9,[[25,[7]]]],[-1,1,[21,[23,[[22,[20]]]]]],[[6,4],8],[[6,-1],9,[[25,[7]]]],[4,3],[14,13],[11,[[26,[6]]]],[11,[[26,[6]]]],0,[[7,4],7],[8,4],[[6,6],[[26,[15]]]],[8,6],[9,6],[2,[[26,[6]]]],[[20,4],13],[[1,-1],1,[[27,[4]]]],[7,[[17,[4]]]],[9,[[17,[4]]]],[[1,2],5],[[1,16],5],[[1,4],5],[[1,-1],5,[[27,[4]]]],[[1,-1],5,[[25,[7]]]],[[1,4],5],[11,[[5,[4,[26,[4]]]]]],[[1,-1],1,[[25,[7]]]],[9,7],[1,4],[9,4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[4,[[30,[6,29]]]],[31,[[30,[6,29]]]],[32,[[30,[6,29]]]],[-1,[[30,[-2]]],[],[]],[33,[[30,[6,29]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[3,6],[[30,[16,10]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[2,13],0,0,0,0,0,0,0,0,0,0,0,0,[35,4],[[],[[30,[35,36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,38],[[30,[35,36]]]],[[37,39],[[30,[35,36]]]],[[37,[22,[-1]]],[[30,[35,36]]],[[23,[38]]]],[[],37],[[40,16],40],[[35,41,-1,42],5,[[25,[1]]]],[40,40],[37,37],[35,35],[41,41],[36,36],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],40],[[37,40],37],[35,41],[35,42],[[],40],[[35,41,-1],[[26,[9]]],[[25,[1]]]],[[40,18],19],[[37,18],19],[[35,18],19],[[41,18],19],[[36,18],19],[[36,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[40,16],[35,40],[40,12],[35,39],[40,[[26,[4]]]],[40,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,41,-1],16,[[25,[1]]]],[[40,12],40],[35,4],[41,4],[[],[[30,[35,36]]]],[[],40],[[],37],[38,[[30,[35,36]]]],[35,41],[39,[[30,[35,36]]]],[[[22,[-1]]],[[30,[35,36]]],[[23,[38]]]],[35,4],[[41,35],5],[[35,41],5],[[40,[26,[4]]],40],[36,[[26,[43]]]],[[40,16],40],[35,4],[35,4],[35,4],[[37,44],37],[[37,45],37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[35,41,1,42],[[30,[5,13]]]],[[35,41,1,[22,[[26,[46]]]]],[[30,[[26,[6]],13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,47],[48,48],[49,49],[50,50],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[50,50],15],[[],50],0,[[50,50],16],[[-1,-2],16,[],[]],[[47,18],19],[[47,18],19],[[48,18],19],[[48,18],19],[[49,18],19],[[49,18],19],[[50,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[50,-1],5,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,16],[50,16],[50,16],[50,16],[50,16],[50,16],[[50,50],[[26,[15]]]],0,[47,[[26,[43]]]],[48,[[26,[43]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,[[],[[30,[51,47]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[52,38],[[30,[51,47]]]],[[52,39],[[30,[51,47]]]],[[52,[22,[-1]]],[[30,[51,47]]],[[23,[38]]]],[[],52],[51,53],[[54,16],54],[[54,4],54],[55,4],[51,51],[55,55],[54,54],[52,52],[56,56],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],54],[[52,54],52],[51,55],[[],54],[[56,56],16],[[-1,-2],16,[],[]],[[51,18],19],[[55,18],19],[[54,18],19],[[52,18],19],[[56,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[54,16],[54,4],[51,54],[56,[[26,[8]]]],[54,12],[54,[[26,[4]]]],[[54,39],[[30,[4,47]]]],[54,[[26,[4]]]],[51,39],[54,[[26,[57]]]],[[54,20],16],[54,16],[54,16],[54,16],[54,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[54,12],54],[[51,55,50],4],[[51,55,50,4],6],[51,4],[55,4],[[54,[26,[4]]],54],[[54,[26,[4]]],54],[[],[[30,[51,47]]]],[38,[[30,[51,47]]]],[51,55],[[],54],[[],52],[[[22,[-1]]],[[30,[51,47]]],[[23,[38]]]],[[51,55,50],[[30,[50,49]]]],[[51,55,50,20],[[30,[50,49]]]],[[51,55,50,20],50],[[51,55,50,20],50],[51,4],[[54,[26,[57]]],54],[[54,20,16],54],[[55,51],5],[[51,55],5],[[55,4],5],[[55,4],5],[55,4],[[55,4],5],[[54,16],54],[[54,16],54],[[],56],[[51,55,58],[[30,[50,48]]]],[[51,55,1],[[30,[50,13]]]],[[51,55,1],[[30,[50,13]]]],[[54,16],54],[[52,44],52],[[52,45],52],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[51,55,1],[[30,[[26,[8]],13]]]],[[51,55,1,56],[[30,[5,13]]]],[[51,55,1,56],[[30,[5,13]]]],[[51,55,1],[[30,[[26,[8]],13]]]],[[51,55,1,3],[[30,[5,13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[54,16],54],0,0,0,0,[59,[[5,[55,55]]]],[59,[[5,[55,55]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[60,38],[[30,[61,47]]]],[[60,51,51],61],[[60,[22,[-1]]],[[30,[61,47]]],[[23,[38]]]],[[],60],[59,59],[60,60],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[61,59],[[],60],[[60,54],60],[[61,59,-1],[[26,[9]]],[[25,[1]]]],[[61,59,-1],62,[[25,[1]]]],[[61,18],19],[[62,18],19],[[59,18],19],[[60,18],19],[61,51],[59,55],[59,55],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[61,59,-1],16,[[25,[1]]]],[59,4],[38,[[30,[61,47]]]],[61,59],[[],60],[[[22,[-1]]],[[30,[61,47]]],[[23,[38]]]],[62,[[26,[9]]]],[61,4],[[59,61],5],[[61,59],5],[61,51],[59,55],[59,55],[[60,44],60],[[60,45],60],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[61,59,1],[[30,[[26,[9]],13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,[[63,16],63],[[63,16],63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[64,38],[[30,[65,66]]]],[[64,67],[[30,[65,66]]]],[[64,[22,[-1]]],[[30,[65,66]]],[[23,[38]]]],[[64,[22,[-1]]],[[30,[65,66]]],[[68,[67]]]],[[],64],[[63,16],63],[[65,-1,42],5,[[25,[1]]]],[[65,-1],69,[[25,[1]]]],[65,4],[66,66],[65,65],[70,70],[63,63],[64,64],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],63],[[64,63],64],[71,4],[69,4],[65,70],[65,42],[[],63],[[63,16],63],[[63,[26,[4]]],63],[[63,[26,[4]]],63],[[65,-1],[[26,[9]]],[[25,[1]]]],[[65,-1],71,[[25,[1]]]],[[66,18],19],[[66,18],19],[[65,18],19],[[71,18],19],[[69,18],19],[[72,18],19],[[73,18],19],[[70,18],19],[[63,18],19],[[64,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[63,16],[63,16],[63,16],[65,63],[63,16],[63,[[26,[4]]]],[63,[[26,[4]]]],[63,16],[63,4],[63,20],[63,12],[63,[[26,[4]]]],[63,16],[63,[[26,[4]]]],[63,[[26,[57]]]],[63,16],[63,74],[65,75],[[63,16],63],[[63,4],63],[71,1],[69,1],[72,1],[73,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,16],[[65,-1],16,[[25,[1]]]],[[63,20],63],[[63,12],63],[65,4],[70,4],[38,[[30,[65,66]]]],[65,70],[[],63],[[],64],[[[22,[-1]]],[[30,[65,66]]],[[23,[38]]]],[71,[[26,[9]]]],[69,[[26,[42]]]],[72,[[26,[7]]]],[73,[[26,[7]]]],[[63,[26,[4]]],63],[[63,16],63],[[63,[26,[4]]],63],[66,[[26,[6]]]],[65,4],[[63,[26,[57]]],63],[71,65],[69,65],[[70,65],5],[[65,1],[[26,[9]]]],[[65,1,42],5],[[65,70,1,42],5],[[65,1],[[26,[8]]]],[[65,70,1],[[26,[8]]]],[[65,1,[22,[[26,[46]]]]],[[26,[6]]]],[[65,70,1,[22,[[26,[46]]]]],[[26,[6]]]],[[65,70,1],[[26,[9]]]],[73,[[5,[4,[26,[4]]]]]],[66,[[26,[4]]]],[66,[[26,[43]]]],[[65,-1],72,[[25,[1]]]],[[65,-1,4],73,[[25,[1]]]],[65,[[26,[4]]]],[[64,44],64],[66,[[26,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[63,16],63],[[63,74],63],[[65,1,3],5],[[65,70,1,3],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[77,78,32],[[30,[78,79]]]],[[77,78,32,[26,[[80,[38]]]]],[[30,[78,79]]]],[77,[[30,[78,79]]]],[77,[[30,[78,79]]]],[[77,78,81],[[30,[78,79]]]],[77,[[30,[78,79]]]],[[77,82],[[30,[78,79]]]],[[77,[83,[82]]],[[30,[78,79]]]],[[77,[83,[78]]],[[30,[78,79]]]],[[77,[83,[78]]],[[30,[78,79]]]],[[],39],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[77,78,78],[[30,[39,79]]]],[[84,38],[[30,[39,79]]]],[[84,67],[[30,[39,79]]]],[[84,[22,[-1]]],[[30,[39,79]]],[[23,[38]]]],[[84,[22,[-1]]],[[30,[39,79]]],[[68,[67]]]],[39,53],[[45,16],45],[77,5],[77,77],[45,45],[74,74],[84,84],[79,79],[39,39],[85,85],[86,86],[87,87],[82,82],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],84],[[],45],[[84,45],84],[77,6],[[],77],[[],45],[[],74],0,[[85,85],16],[[86,86],16],[[87,87],16],[[82,82],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[77,78],[[30,[6,79]]]],[[77,18],19],[[45,18],19],[[74,18],19],[[84,18],19],[[79,18],19],[[79,18],19],[[39,18],19],[[85,18],19],[[86,18],19],[[87,18],19],[[82,18],19],[[88,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[45,16],[77,89],[45,89],[45,[[26,[4]]]],[77,16],[45,16],[45,16],[77,[[26,[4]]]],[77,16],[45,16],[45,74],[39,75],[39,16],[39,16],[[82,-1],5,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,16],[74,16],[85,16],[74,16],[39,16],[39,16],[[45,89],45],[39,89],[39,90],[39,90],[[86,[22,[20]],4],[[26,[78]]]],[[87,[22,[20]],4],[[26,[78]]]],[[82,[22,[20]],4],16],[[86,20],[[26,[78]]]],[[87,20],[[26,[78]]]],[[82,20],16],[[82,91],16],[77,4],[39,4],[[],39],[[],77],[[],45],[[],84],[38,[[30,[39,79]]]],[[[22,[-1]]],[[30,[39,79]]],[[23,[38]]]],[88,[[26,[6]]]],0,[[45,[26,[4]]],45],[[77,78,78],[[30,[5,79]]]],[77,4],[39,4],[39,88],0,[[45,16],45],[[77,89],5],[[77,16],5],[[77,[26,[4]]],[[30,[5,79]]]],[[77,16],5],[[45,16],45],[79,[[26,[4]]]],[79,[[26,[43]]]],0,[39,78],[77,[[30,[6,79]]]],[[39,6],[[26,[78]]]],[39,78],[[39,78],85],[39,[[22,[85]]]],[[84,44],84],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],0,0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[45,16],45],[[45,74],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[30,[92,79]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[93,38],[[30,[92,79]]]],[[93,39],[[30,[92,79]]]],[[93,[22,[-1]]],[[30,[92,79]]],[[23,[38]]]],[[],93],[94,94],[93,93],[92,92],[95,95],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],94],[[93,94],93],[92,95],[92,42],[[],94],[[94,18],19],[[93,18],19],[[92,18],19],[[96,18],19],[[97,18],19],[[95,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[92,94],[92,39],[94,[[26,[57]]]],[94,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,4],[95,4],[[39,1],4],[[],[[30,[92,79]]]],[[],94],[[],93],[38,[[30,[92,79]]]],[92,95],[39,[[30,[92,79]]]],[[[22,[-1]]],[[30,[92,79]]],[[23,[38]]]],[96,[[26,[[30,[9,13]]]]]],[97,[[26,[[30,[42,13]]]]]],[92,4],[[94,[26,[57]]],94],[[95,92],5],[[92,95],5],[[93,44],93],[[93,45],93],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[92,95,-1,42],[[30,[5,13]]],[[25,[1]]]],[[92,95,-1],97,[[25,[1]]]],[[92,95,-1],[[30,[[26,[9]],13]]],[[25,[1]]]],[[92,95,-1],96,[[25,[1]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[92,95,-1],[[30,[16,13]]],[[25,[1]]]],[[92,95,1,42],[[30,[5,13]]]],[[92,95,1,[22,[[26,[46]]]]],[[30,[[26,[6]],13]]]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[94,4],94],0,0,0,0,0,0,[[],[[30,[98,79]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[99,38],[[30,[98,79]]]],[[99,39],[[30,[98,79]]]],[[99,[22,[-1]]],[[30,[98,79]]],[[23,[38]]]],[[],99],[[98,100,-1,42],5,[[25,[1]]]],[[98,100,-1],101,[[25,[1]]]],[102,102],[99,99],[98,98],[100,100],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],102],[[99,102],99],[98,100],[98,42],[[],102],[[98,100,-1],[[26,[9]]],[[25,[1]]]],[[98,100,-1],103,[[25,[1]]]],[[102,18],19],[[99,18],19],[[98,18],19],[[103,18],19],[[101,18],19],[[100,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[98,102],[102,12],[98,39],[102,[[26,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[98,100,-1],16,[[25,[1]]]],[[102,12],102],[100,4],[[],[[30,[98,79]]]],[[],102],[[],99],[38,[[30,[98,79]]]],[98,100],[39,[[30,[98,79]]]],[[[22,[-1]]],[[30,[98,79]]],[[23,[38]]]],[103,[[26,[9]]]],[101,[[26,[42]]]],[98,4],[[102,[26,[57]]],102],[[100,98],5],[[98,100],5],[[98,100,1,42],5],[[98,100,1,[22,[[26,[46]]]]],[[26,[6]]]],[[99,44],99],[[99,45],99],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[98,100,1,3],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[53,4],[91,[[26,[31]]]],[91,[[26,[20]]]],[91,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,91],[53,53],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[91,91],15],[[],53],[[53,91],104],[[],53],[4,91],[53,91],[[91,91],16],[[-1,-2],16,[],[]],[[91,18],19],[[53,18],19],[[105,18],19],[[106,18],19],[[104,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[53,20],20],[[53,91],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[91,20],16],[91,16],[53,16],[91,16],[53,105],[105,[[26,[91]]]],[106,[[26,[91]]]],[104,[[26,[91]]]],[[91,91],[[26,[15]]]],[[53,-1],106,[[27,[20]]]],[[53,20,20],5],[[],53],[53,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[20,91],0,0,0,0,0,0,[75,42],[75,4],[75,107],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,5],[42,42],[108,108],[75,75],[109,109],[110,110],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[108,4],[110,4],[[],75],[75,42],[[],75],[75,4],[[42,38],[[5,[38,[111,[38]]]]]],[[42,[22,[20]]],[[5,[[22,[20]],[111,[[22,[20]]]]]]]],[[42,18],19],[[108,18],19],[[75,18],19],[[109,18],19],[[109,18],19],[[110,18],19],[[107,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[42,4],[[26,[7]]]],[[42,38],[[26,[7]]]],[42,[[26,[9]]]],[42,75],[42,4],[[75,6],4],[75,4],[[42,[22,[20]],[22,[20]]],[[83,[20]]]],[[42,[22,[20]],[22,[20]],[83,[20]]],5],[[42,38,38],28],[[42,38,38,28],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,16],[42,108],[75,42],[75,4],[-1,[[30,[75,109]]],112],[108,[[26,[[26,[7]]]]]],[110,[[26,[[26,[38]]]]]],[107,[[26,[[5,[6,4,[26,[38]]]]]]]],[42,[[26,[6]]]],[75,4],[[75,6],110],[[42,[26,[6]]],5],[108,[[5,[4,[26,[4]]]]]],[110,[[5,[4,[26,[4]]]]]],[[75,6,4],[[26,[4]]]],[75,4],[42,[[22,[[26,[46]]]]]],[[75,6,4],[[26,[[5,[4,4]]]]]],[42,[[22,[[26,[46]]]]]],[109,[[26,[43]]]],[[75,6,38],[[26,[4]]]],[[75,6,4],[[26,[38]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,113],[[-1,-2],5,[],[]],[[114,18],19],[[113,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[[[22,[20]],-1,-2,[83,[20]]],5,115,115],[[38,-1,-2,28],5,115,115],0,0,0,0,0,0,0,[[116,-1],[[26,[9]]],115],[[116,-1],[[26,[8]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[[-1,-2],5,[],[]],[[[117,[-1]],18],19,[]],[[[118,[-1]],18],19,[]],[[[119,[-1]],18],19,[]],[[116,18],19],[[[120,[-1]],18],19,121],[[[122,[-1]],18],19,121],[[[123,[-1]],18],19,121],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[117,[-1]]],[[120,[-1]]],[]],[[[118,[-1]]],[[122,[-1]]],[]],[[[119,[-1]]],[[123,[-1]]],[]],[[[117,[-1]]],1,[]],[[[118,[-1]]],1,[]],[116,1],[[[120,[-1]]],1,[]],[[[122,[-1]]],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[116,42,-1],[[119,[-1]]],115],[[116,-1],[[117,[-1]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[116,-1],[[118,[-1]]],115],[1,116],[[[117,[-1]]],[[26,[[30,[8,13]]]]],115],[[[118,[-1]]],[[26,[[30,[9,13]]]]],115],[[[119,[-1]]],[[26,[[30,[42,13]]]]],115],[[[120,[-1]]],[[26,[8]]],115],[[[122,[-1]]],[[26,[9]]],115],[[[123,[-1]]],[[26,[42]]],115],[-1,-2,[],[]],[[116,-1],[[30,[[26,[9]],13]]],115],[[116,-1],[[30,[[26,[8]],13]]],115],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1,-2]]],-1,[],125],[[[124,[-1,-2]],18],19,121,125],[-1,-1,[]],[[[124,[-1,-2]]],-1,[],125],[-1,-2,[],[]],[-1,[[124,[-2,-1]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[81,126],[81,32],[90,[[30,[5,127]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[30,[5,127]]]],[81,81],[90,90],[128,128],[89,89],[127,127],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[90,81],16],[90,16],[90,16],[90,16],[90,16],[90,16],[90,16],[90,16],[90,16],[[],90],[[],89],[[],90],[[81,81],16],[[90,90],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[81,18],19],[[90,18],19],[[128,18],19],[[89,18],19],[[127,18],19],[[127,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,[[26,[81]]]],[[],90],[89,20],[[90,81],90],[[90,90],90],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],[[30,[16,127]]]],[[89,[22,[20]],4],[[30,[16,127]]]],[[89,[22,[20]],4],16],[[89,[22,[20]],4],16],[[89,[22,[20]],4],[[30,[16,127]]]],[[89,[22,[20]],4],[[30,[16,127]]]],[[89,[22,[20]],4],[[30,[16,127]]]],[[89,[22,[20]],4],[[30,[16,127]]]],[90,128],[90,4],[[89,81,[22,[20]],4],16],[[89,90,[22,[20]],4],16],[[],89],[128,[[26,[81]]]],[[[22,[20]]],90],[[90,81],90],[81,81],[[90,81],5],[[90,90],5],[[89,20],89],[[90,81],5],[[90,90],5],[[90,90],5],[81,90],[[90,90],90],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[90,90],90],[[90,[22,[20]]],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1,-2]]],-1,130,125],[[[129,[-1,-2]]],-1,130,125],[[[131,[-1,-2]],18],19,121,[]],[[[129,[-1,-2]],18],19,[130,121],125],[-1,-1,[]],[-1,-1,[]],[[[131,[-1,-2]]],[[129,[-1,-2]]],130,125],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[131,[-2,-1]]],[],[]],[[[129,[-1,-2]]],5,130,125],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[[-1,-2],5,[],[]],[[57,[22,[20]],7],[[26,[7]]]],[[57,18],19],[-1,-1,[]],[[12,67],[[26,[57]]]],[[12,[22,[-1]]],[[26,[57]]],[[68,[67]]]],[-1,-2,[],[]],[57,4],[[12,[22,[-1]]],[[26,[57]]],[[23,[[22,[20]]]]]],[[57,[22,[20]],7],[[26,[7]]]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[132,133],[6,133],[78,133],[132,32],[6,32],[78,32],[132,33],[6,33],[78,33],[132,4],[6,4],[78,4],[134,33],[29,33],[135,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,46],[132,132],[134,134],[78,78],[29,29],[135,135],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[46,46],15],[[132,132],15],[[78,78],15],[[],132],[[],78],[[46,46],16],[[132,132],16],[[134,134],16],[[78,78],16],[[29,29],16],[[135,135],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[46,18],19],[[132,18],19],[[134,18],19],[[134,18],19],[[78,18],19],[[29,18],19],[[29,18],19],[[135,18],19],[[135,18],19],[-1,-1,[]],[20,132],[-1,-1,[]],[-1,-1,[]],[20,78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[111,[20]]],[[30,[132,134]]]],[[[111,[20]]],[[30,[6,29]]]],[[[111,[20]]],[[30,[78,135]]]],[[[111,[20]]],132],[[[111,[20]]],6],[[[111,[20]]],78],[46,4],[[46,-1],5,24],[[132,-1],5,24],[[78,-1],5,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,132],[4,6],[4,78],[4,[[26,[46]]]],[4,[[30,[132,134]]]],[4,[[30,[6,29]]]],[4,[[30,[78,135]]]],[4,132],[4,6],[4,78],[132,4],[6,4],[78,4],[[46,46],[[26,[15]]]],[[132,132],[[26,[15]]]],[[78,78],[[26,[15]]]],[132,[[111,[20]]]],[6,[[111,[20]]]],[78,[[111,[20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[32,[[30,[132,134]]]],[4,[[30,[132,134]]]],[31,[[30,[132,134]]]],[33,[[30,[132,134]]]],[-1,[[30,[-2]]],[],[]],[31,[[30,[78,135]]]],[4,[[30,[78,135]]]],[32,[[30,[78,135]]]],[33,[[30,[78,135]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,[[58,2],58],[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[[-1,-2],5,[],[]],[[58,18],19],[-1,-1,[]],[1,58],[1,58],[58,2],[58,[[26,[20]]]],[-1,-2,[],[]],[[58,[26,[20]]],58],[[],58],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[44,16],44],[44,44],[[-1,-2],5,[],[]],[[44,16],44],[[],44],[[44,16],44],[[44,18],19],[-1,-1,[]],[44,16],[44,16],[44,16],[44,16],[44,20],[44,16],[44,32],[44,16],[44,16],[44,16],[44,16],[[44,16],44],[-1,-2,[],[]],[[44,20],44],[[44,16],44],[[44,32],44],[[],44],[[44,16],44],[38,[[30,[67,76]]]],[[[22,[-1]]],[[30,[[83,[67]],76]]],[[23,[38]]]],[[[22,[-1]],44],[[30,[[83,[67]],76]]],[[23,[38]]]],[[38,44],[[30,[67,76]]]],[[44,16],44],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[[44,16],44],[[44,16],44],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[136,[-1,-2]],18],19,[121,21],121],[[137,18],19],[[137,18],19],[[138,18],19],[[138,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]]],"c":[907,969],"p":[[3,"Input",0],[4,"Anchored",0],[3,"PatternSet",0],[15,"usize"],[15,"tuple"],[3,"PatternID",0],[3,"Span",0],[3,"HalfMatch",0],[3,"Match",0],[3,"PatternSetInsertError",0],[3,"PatternSetIter",0],[4,"MatchKind",0],[3,"MatchError",0],[4,"MatchErrorKind",0],[4,"Ordering",2102],[15,"bool"],[3,"Range",2103],[3,"Formatter",2104],[6,"Result",2104],[15,"u8"],[8,"Sized",2105],[15,"slice"],[8,"AsRef",2106],[8,"Hasher",2107],[8,"Into",2106],[4,"Option",2108],[8,"RangeBounds",2103],[3,"String",2109],[3,"PatternIDError",1848],[4,"Result",2110],[15,"u16"],[15,"u32"],[15,"u64"],[3,"TypeId",2111],[3,"DFA",264],[3,"BuildError",264],[3,"Builder",264],[15,"str"],[3,"NFA",844],[3,"Config",264],[3,"Cache",264],[3,"Captures",1414],[8,"Error",2112],[3,"Config",2029],[3,"Config",844],[3,"NonMaxUsize",1848],[3,"BuildError",370],[4,"StartError",370],[3,"CacheError",370],[3,"LazyStateID",370],[3,"DFA",446],[3,"Builder",446],[3,"ByteClasses",1332],[3,"Config",446],[3,"Cache",446],[3,"OverlappingState",446],[3,"Prefilter",1830],[3,"Config",2010],[3,"Cache",577],[3,"Builder",577],[3,"Regex",577],[3,"FindMatches",577],[3,"Config",650],[3,"Builder",650],[3,"Regex",650],[3,"BuildError",650],[3,"Hir",2113],[8,"Borrow",2114],[3,"CapturesMatches",650],[3,"Cache",650],[3,"FindMatches",650],[3,"Split",650],[3,"SplitN",650],[4,"WhichCaptures",844],[3,"GroupInfo",1414],[4,"Error",2115],[3,"Builder",844],[3,"StateID",1848],[3,"BuildError",844],[3,"Arc",2116],[4,"Look",1662],[3,"Transition",844],[3,"Vec",2117],[3,"Compiler",844],[4,"State",844],[3,"SparseTransitions",844],[3,"DenseTransitions",844],[3,"PatternIter",844],[3,"LookMatcher",1662],[3,"LookSet",1662],[3,"Unit",1332],[3,"BoundedBacktracker",1104],[3,"Builder",1104],[3,"Config",1104],[3,"Cache",1104],[3,"TryFindMatches",1104],[3,"TryCapturesMatches",1104],[3,"PikeVM",1212],[3,"Builder",1212],[3,"Cache",1212],[3,"CapturesMatches",1212],[3,"Config",1212],[3,"FindMatches",1212],[3,"ByteClassElements",1332],[3,"ByteClassIter",1332],[3,"ByteClassRepresentatives",1332],[3,"GroupInfoAllNames",1414],[3,"CapturesPatternIter",1414],[3,"GroupInfoError",1414],[3,"GroupInfoPatternNames",1414],[15,"array"],[8,"IntoIterator",2118],[3,"DebugByte",1533],[3,"DebugHaystack",1533],[8,"FnMut",2119],[3,"Searcher",1556],[3,"TryHalfMatchesIter",1556],[3,"TryMatchesIter",1556],[3,"TryCapturesIter",1556],[3,"HalfMatchesIter",1556],[8,"Debug",2104],[3,"MatchesIter",1556],[3,"CapturesIter",1556],[3,"Lazy",1650],[8,"Fn",2119],[15,"char"],[3,"UnicodeWordBoundaryError",1662],[3,"LookSetIter",1662],[3,"PoolGuard",1807],[8,"Send",2105],[3,"Pool",1807],[3,"SmallIndex",1848],[15,"i32"],[3,"SmallIndexError",1848],[3,"StateIDError",1848],[3,"AlignAs",2069],[3,"SerializeError",2069],[3,"DeserializeError",2069],[13,"Quit",258],[13,"HaystackTooLong",258],[13,"UnsupportedAnchored",258],[13,"GaveUp",258],[13,"Quit",443],[13,"Cache",443],[13,"UnsupportedAnchored",443],[13,"BinaryUnion",1093],[13,"Union",1093],[13,"Capture",1093],[13,"Look",1093],[13,"Match",1093],[13,"ByteRange",1093]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","t":"ENDDNDALLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLALLLLLFFFFLLLLLLFLLLLLLLLLLLLLLLFLLLLLALNNDNNNDNEENNNNNNNNNDNNNDEDNNDNENNEDEEDDNDNEENNDDNNNNNNNNNNNNNQDENNNNNNENNNNNNDNDENNDNENNNNNNNNENNNNDNNENNNNNNNNNNNNNQNDNNNNDNNNNENDEDNNNDNENNNNNNNNNNNNNNNNNNNNIDNNNNNNNNNNNNNLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMMMMMMMMLMMMMMLLMMALLLALLMLLLLMMMMMMMMMMMMMMMMMMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLMMMMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLNNNNNNNNNNDNDENDDDDDDNENNNNQDEDENNDNENDDQDDNNNNNNNNNNINNNNNNNNNNNNLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLMLLLLLMLLLLMLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLEDDNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNDEDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLL","n":["Error","Parse","Parser","ParserBuilder","Translate","UnicodeWordError","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone","clone_into","clone_into","clone_into","crlf","default","dot_matches_new_line","eq","equivalent","escape","escape_into","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hir","ignore_whitespace","into","into","into","into","is_escapeable_character","is_meta_character","is_word_byte","is_word_character","line_terminator","multi_line","nest_limit","new","new","octal","parse","parse","swap_greed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_is_word_character","type_id","type_id","type_id","type_id","unicode","utf8","utf8","Alnum","Alpha","Alternation","Alternation","Ascii","Ascii","Assertion","Assertion","AssertionKind","Ast","AtLeast","Bell","BinaryOp","Blank","Bounded","Bracketed","CRLF","CaptureIndex","CaptureLimitExceeded","CaptureName","CaptureName","CarriageReturn","CaseInsensitive","ClassAscii","ClassAsciiKind","ClassBracketed","ClassBracketed","ClassEscapeInvalid","ClassPerl","ClassPerl","ClassPerlKind","ClassRangeInvalid","ClassRangeLiteral","ClassSet","ClassSetBinaryOp","ClassSetBinaryOpKind","ClassSetItem","ClassSetRange","ClassSetUnion","ClassUnclosed","ClassUnicode","ClassUnicode","ClassUnicodeKind","ClassUnicodeOpKind","Cntrl","Colon","Comment","Concat","Concat","DecimalEmpty","DecimalInvalid","Difference","Digit","Digit","Dot","DotMatchesNewLine","Empty","Empty","EndLine","EndText","Equal","Err","Error","ErrorKind","EscapeHexEmpty","EscapeHexInvalid","EscapeHexInvalidDigit","EscapeUnexpectedEof","EscapeUnrecognized","Exactly","Flag","Flag","FlagDanglingNegation","FlagDuplicate","FlagRepeatedNegation","FlagUnexpectedEof","FlagUnrecognized","Flags","Flags","FlagsItem","FlagsItemKind","FormFeed","Graph","Group","Group","GroupKind","GroupNameDuplicate","GroupNameEmpty","GroupNameInvalid","GroupNameUnexpectedEof","GroupUnclosed","GroupUnopened","HexBrace","HexFixed","HexLiteralKind","IgnoreWhitespace","Intersection","Item","LineFeed","Literal","Literal","Literal","LiteralKind","Lower","Meta","MultiLine","Named","NamedValue","Negation","NestLimitExceeded","NonCapturing","NotEqual","NotWordBoundary","Octal","OneLetter","OneOrMore","Output","Perl","Position","Print","Punct","Range","Range","Repetition","Repetition","RepetitionCountDecimalEmpty","RepetitionCountInvalid","RepetitionCountUnclosed","RepetitionKind","RepetitionMissing","RepetitionOp","RepetitionRange","SetFlags","Space","Space","Space","Span","Special","SpecialLiteralKind","SpecialWordBoundaryUnclosed","SpecialWordBoundaryUnrecognized","SpecialWordOrRepetitionUnexpectedEof","StartLine","StartText","Superfluous","SwapGreed","SymmetricDifference","Tab","Unicode","Unicode","UnicodeClassInvalid","UnicodeLong","UnicodeShort","Union","UnsupportedBackreference","UnsupportedLookAround","Upper","Verbatim","VerticalTab","Visitor","WithComments","Word","Word","WordBoundary","WordBoundaryEnd","WordBoundaryEndAngle","WordBoundaryEndHalf","WordBoundaryStart","WordBoundaryStartAngle","WordBoundaryStartHalf","X","Xdigit","ZeroOrMore","ZeroOrOne","add_item","alternation","assertion","ast","ast","ast","asts","asts","auxiliary_span","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","c","capture_index","class_bracketed","class_perl","class_unicode","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column","comment","comments","concat","digits","dot","drop","drop","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finish","flag_state","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_name","greedy","group","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ast","into_ast","into_item","is_capturing","is_empty","is_empty","is_equal","is_negated","is_negation","is_one_line","is_valid","is_valid","items","items","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","lhs","line","literal","name","negated","negated","negated","negated","new","new","offset","op","parse","partial_cmp","partial_cmp","pattern","print","push","repetition","rhs","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","splat","start","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","visit","visit_alternation_in","visit_alternation_in","visit_class_set_binary_op_in","visit_class_set_binary_op_in","visit_class_set_binary_op_post","visit_class_set_binary_op_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_pre","visit_class_set_item_post","visit_class_set_item_post","visit_class_set_item_pre","visit_class_set_item_pre","visit_concat_in","visit_concat_in","visit_post","visit_post","visit_pre","visit_pre","with_end","with_start","name","op","value","original","original","original","name","starts_with_p","Parser","ParserBuilder","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","ignore_whitespace","into","into","nest_limit","new","new","octal","parse","parse_with_comments","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Alternation","AnyByte","AnyByteExcept","AnyByteExceptCRLF","AnyByteExceptLF","AnyChar","AnyCharExcept","AnyCharExceptCRLF","AnyCharExceptLF","Bytes","Capture","Capture","CaseFoldError","Class","Class","ClassBytes","ClassBytesIter","ClassBytesRange","ClassUnicode","ClassUnicodeIter","ClassUnicodeRange","Concat","Dot","Empty","End","EndCRLF","EndLF","Err","Error","ErrorKind","Hir","HirKind","InvalidLineTerminator","InvalidUtf8","Literal","Literal","Look","Look","LookSet","LookSetIter","Output","Properties","Repetition","Repetition","Start","StartCRLF","StartLF","Unicode","UnicodeCaseUnavailable","UnicodeNotAllowed","UnicodePerlClassNotFound","UnicodePropertyNotFound","UnicodePropertyValueNotFound","Visitor","WordAscii","WordAsciiNegate","WordEndAscii","WordEndHalfAscii","WordEndHalfUnicode","WordEndUnicode","WordStartAscii","WordStartHalfAscii","WordStartHalfUnicode","WordStartUnicode","WordUnicode","WordUnicodeNegate","alternation","as_char","as_repr","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capture","case_fold_simple","case_fold_simple","case_fold_simple","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","concat","contains","contains_anchor","contains_anchor_crlf","contains_anchor_haystack","contains_anchor_lf","contains_anchor_line","contains_word","contains_word_ascii","contains_word_unicode","default","default","default","difference","difference","dot","drop","empty","empty","empty","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","explicit_captures_len","fail","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_repr","full","greedy","index","insert","intersect","intersect","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_kind","is_alternation_literal","is_ascii","is_ascii","is_empty","is_empty","is_literal","is_utf8","is_utf8","iter","iter","iter","kind","kind","len","len","len","literal","literal","literal","literal","literal","look","look_set","look_set_prefix","look_set_prefix_any","look_set_suffix","look_set_suffix_any","max","maximum_len","maximum_len","maximum_len","maximum_len","memory_usage","min","minimum_len","minimum_len","minimum_len","minimum_len","name","negate","negate","negate","new","new","new","new","next","next","next","partial_cmp","partial_cmp","pattern","print","properties","push","push","ranges","ranges","read_repr","remove","repetition","reversed","set_insert","set_intersect","set_remove","set_subtract","set_union","singleton","span","start","start","start","start","static_explicit_captures_len","sub","sub","subs","subtract","symmetric_difference","symmetric_difference","to_byte_class","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_unicode_class","translate","try_case_fold_simple","try_case_fold_simple","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","visit","visit_alternation_in","visit_alternation_in","visit_concat_in","visit_concat_in","visit_post","visit_post","visit_pre","visit_pre","with","write_repr","ExtractKind","Extractor","Literal","Prefix","Seq","Suffix","as_bytes","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cross_forward","cross_reverse","dedup","default","default","empty","eq","eq","equivalent","equivalent","exact","extend","extract","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","inexact","infinite","into","into","into","into","into_bytes","is_empty","is_empty","is_exact","is_exact","is_finite","is_inexact","is_prefix","is_suffix","keep_first_bytes","keep_first_bytes","keep_last_bytes","keep_last_bytes","kind","len","len","limit_class","limit_literal_len","limit_repeat","limit_total","literals","longest_common_prefix","longest_common_suffix","make_inexact","make_inexact","make_infinite","max_cross_len","max_literal_len","max_union_len","min_literal_len","minimize_by_preference","new","new","optimize_for_prefix_by_preference","optimize_for_suffix_by_preference","partial_cmp","push","rank","reverse","reverse_literals","singleton","sort","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union_into_empty","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Translator","TranslatorBuilder","borrow","borrow","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone_into","clone_into","crlf","default","dot_matches_new_line","fmt","fmt","from","from","into","into","line_terminator","multi_line","new","new","swap_greed","to_owned","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","unicode","utf8","Four","One","Three","Two","Utf8Range","Utf8Sequence","Utf8Sequences","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","end","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","len","matches","matches","new","next","partial_cmp","partial_cmp","reverse","start","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"regex_syntax"],[82,"regex_syntax::ast"],[927,"regex_syntax::ast::ClassUnicodeKind"],[930,"regex_syntax::ast::ErrorKind"],[933,"regex_syntax::ast::GroupKind"],[935,"regex_syntax::ast::parse"],[968,"regex_syntax::ast::print"],[979,"regex_syntax::hir"],[1445,"regex_syntax::hir::literal"],[1560,"regex_syntax::hir::print"],[1571,"regex_syntax::hir::translate"],[1608,"regex_syntax::utf8"],[1664,"alloc::string"],[1665,"core::fmt"],[1666,"core::fmt"],[1667,"core::any"],[1668,"core::option"],[1669,"core::cmp"],[1670,"core::fmt"],[1671,"alloc::boxed"],[1672,"core::convert"],[1673,"core::iter::traits::collect"]],"d":["This error type encompasses any error that can be returned …","An error that occurred while translating concrete syntax …","A convenience parser for regular expressions.","A builder for a regular expression parser.","An error that occurred while translating abstract syntax …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","Defines an abstract syntax for regular expressions.","","","","","","","","","Build a parser from this configuration with the given …","Enable or disable the case insensitive flag by default.","","","","","","","Enable or disable the CRLF mode flag by default.","","Enable or disable the “dot matches any character” flag …","","","Escapes all regular expression meta characters in <code>text</code>.","Escapes all meta characters in <code>text</code> and writes the result …","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Defines a high-level intermediate (HIR) representation for …","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the given character can be escaped in a …","Returns true if the given character has significance in a …","Returns true if and only if the given character is an …","Returns true if and only if the given character is a …","Sets the line terminator for use with <code>(?u-s:.)</code> and <code>(?-us:.)</code>…","Enable or disable the multi-line matching flag by default.","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","A convenience routine for parsing a regex using default …","Parse the regular expression into a high level intermediate","Enable or disable the “swap greed” flag by default.","","","","","","","","","","","","","","Returns true if and only if the given character is a …","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Converts ranges of Unicode scalar values to equivalent …","When disabled, translation will permit the construction of …","<code>[0-9A-Za-z]</code>","<code>[A-Za-z]</code>","An alternation of regular expressions.","An alternation of regular expressions.","<code>[\\\\x00-\\\\x7F]</code>","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.","A single zero-width assertion.","A single zero-width assertion.","An assertion kind.","An abstract syntax tree for a single regular expression.","<code>{m,}</code>","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).","A single binary operation (i.e., &amp;&amp;, – or ~~).","<code>[ \\\\t]</code>","<code>{m,n}</code>","A bracketed character class set, which may contain zero or …","<code>R</code>","<code>(a)</code>","The capturing group limit was exceeded.","A capture name.","<code>(?&lt;name&gt;a)</code> or <code>(?P&lt;name&gt;a)</code>","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).","<code>i</code>","An ASCII character class.","The available ASCII character classes.","A bracketed character class, e.g., <code>[a-z0-9]</code>.","A single bracketed character class set, which may contain …","An invalid escape sequence was found in a character class …","A Perl character class.","A single perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","The available Perl character classes.","An invalid character class range was found. An invalid …","An invalid range boundary was found in a character class. …","A character class set.","A Unicode character class set operation.","The type of a Unicode character class set operation.","A single component of a character class set.","A single character class range in a set.","A union of items inside a character class set.","An opening <code>[</code> was found with no corresponding closing <code>]</code>.","A Unicode character class.","A single Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","The available forms of Unicode character classes.","The type of op used in a Unicode character class.","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>","A property set to a specific value using a colon, e.g., …","A comment from a regular expression with an associated …","A concatenation of regular expressions.","A concatenation of regular expressions.","Note that this error variant is no longer used. Namely, a …","An invalid decimal number was given where one was expected.","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.","Decimal numbers.","<code>[0-9]</code>","The “any character” class.","<code>s</code>","An empty regex that matches everything.","An empty item.","<code>$</code>","<code>\\\\z</code>","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>.","An error that visiting an AST might return.","An error that occurred while parsing a regular expression …","The type of an error that occurred while building an AST.","A bracketed hex literal was empty.","A bracketed hex literal did not correspond to a Unicode …","An invalid hexadecimal digit was found.","EOF was found before an escape sequence was completed.","An unrecognized escape sequence.","<code>{m}</code>","A single flag.","A single flag in a group.","A dangling negation was used when setting flags, e.g., <code>i-</code>.","A flag was used twice, e.g., <code>i-i</code>.","The negation operator was used twice, e.g., <code>-i-s</code>.","Expected a flag but got EOF, e.g., <code>(?</code>.","Unrecognized flag, e.g., <code>a</code>.","A group of flags.","A set of flags, e.g., <code>(?is)</code>.","A single item in a group of flags.","The kind of an item in a group of flags.","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).","<code>[!-~]</code>","A grouped regular expression.","A grouped regular expression.","The kind of a group.","A duplicate capture name was found.","A capture group name is empty, e.g., <code>(?P&lt;&gt;abc)</code>.","An invalid character was seen for a capture group name. …","A closing <code>&gt;</code> could not be found for a capture group name.","An unclosed group, e.g., <code>(ab</code>.","An unopened group, e.g., <code>ab)</code>.","The literal is written as a hex code with a bracketed …","The literal is written as a hex code with a fixed number …","The type of a Unicode hex literal.","<code>x</code>","The intersection of two sets, e.g., <code>\\\\pN&amp;&amp;[a-z]</code>.","An item, which can be a single literal, range, nested …","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).","A single literal expression.","A single character literal, which includes escape …","A single literal.","The kind of a single literal expression.","<code>[a-z]</code>","The literal is written as an escape because it is …","<code>m</code>","A binary property, general category or script. The string …","A property name and an associated value.","A negation operator applied to all subsequent flags in the …","The nest limit was exceeded. The limit stored here is the …","<code>(?:a)</code> and <code>(?i:a)</code>","A property that isn’t a particular value, e.g., …","<code>\\\\B</code>","The literal is written as an octal escape, e.g., <code>\\\\141</code>.","A one letter abbreviated class, e.g., <code>\\\\pN</code>.","<code>+</code>","The result of visiting an AST.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A single position in a regular expression.","<code>[ -~]</code>","<code>[!-/:-@\\\\[-</code>{-~]`","A range between two literals.","<code>{m,n}</code>","A repetition operation applied to a regular expression.","A repetition operator applied to an arbitrary regular …","An opening <code>{</code> was not followed by a valid decimal value. …","The range provided in a counted repetition operator is …","An opening <code>{</code> was found with no corresponding closing <code>}</code>.","The kind of a repetition operator.","A repetition operator was applied to a missing …","The repetition operator itself.","A range repetition operator.","A group of flags that is not applied to a particular …","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …","Whitespace.","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>","Span represents the position information of a single AST …","The literal is written as a specially recognized escape, …","The type of a special literal.","The special word boundary syntax, <code>\\\\b{something}</code>, was used, …","The special word boundary syntax, <code>\\\\b{something}</code>, was used, …","The syntax <code>\\\\b{</code> was observed, but afterwards the end of the …","<code>^</code>","<code>\\\\A</code>","The literal is written as an escape despite the fact that …","<code>U</code>","The symmetric difference of two sets. The symmetric …","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","<code>u</code>","The Unicode class is not valid. This typically occurs when …","A <code>\\\\U</code> prefix. When used without brackets, this form is …","A <code>\\\\u</code> prefix. When used without brackets, this form is …","A union of items.","When octal support is disabled, this error is produced …","When syntax similar to PCRE’s look-around is used, this …","<code>[A-Z]</code>","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).","A trait for visiting an abstract syntax tree (AST) in …","An abstract syntax tree for a singular expression along …","Word characters.","<code>[0-9A-Za-z_]</code>","<code>\\\\b</code>","<code>\\\\b{end}</code>","<code>\\\\&gt;</code> (alias for <code>\\\\b{end}</code>)","<code>\\\\b{end-half}</code>","<code>\\\\b{start}</code>","<code>\\\\&lt;</code> (alias for <code>\\\\b{start}</code>)","<code>\\\\b{start-half}</code>","A <code>\\\\x</code> prefix. When used without brackets, this form is …","<code>[0-9A-Fa-f]</code>","<code>*</code>","<code>?</code>","Add the given item to this sequence of flags.","Create a “alternation” AST item.","Create a “assertion” AST item.","The actual ast.","The regular expression under repetition.","The regular expression in this group.","The alternate regular expressions.","The concatenation regular expressions.","Return an auxiliary span. This span exists only for some …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this literal was written as a <code>\\\\x</code> hex escape, then this …","The Unicode scalar value corresponding to this literal.","Returns the capture index of this group, if this is a …","Create a “bracketed class” AST item.","Create a “Perl class” AST item.","Create a “Unicode class” AST item.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The approximate column number, starting at <code>1</code>.","The comment text, starting with the first character …","All comments found in the original regular expression.","Create a “concat” AST item.","The number of digits that must be used with this literal …","Create a “dot” AST item.","","","Create an “empty” AST item.","The end byte offset.","The end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","Returns the state of the given flag in this set.","Create a “flags” AST item.","If this group is non-capturing, then this returns the …","The actual sequence of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the corresponding ClassAsciiKind variant for the …","Whether this operation was applied greedily or not.","Create a “group” AST item.","The capture index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return this alternation as an AST.","Return this concatenation as an AST.","Return this union as a character class set item.","Returns true if and only if this group is capturing.","Returns true if and only if this span is empty. That is, …","Return true if and only if this Ast is empty.","Whether the op is an equality op or not.","Returns true if this class has been negated.","Returns true if and only if this item is a negation …","Returns true if and only if this span occurs on a single …","Returns true if and only if this character class range is …","Returns true if and only if this repetition range is valid.","The sequence of items that make up this union.","A sequence of flag items. Each item is either a flag or a …","Return the type of this error.","The kind of this literal.","The kind of Perl class.","The kind of ASCII class.","The kind of Unicode class.","The type of this set. A set is either a normal union of …","The type of this set operation.","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.","The type of operation.","The kind of this group.","The kind of this item.","The left hand side of the operation.","The line number, starting at <code>1</code>.","Create a “literal” AST item.","The capture name.","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …","Whether this class is negated or not.","Whether this class is negated or not. e.g., <code>[a]</code> is not …","Create a new span with the given positions.","Create a new position with the given information.","The absolute offset of this position, starting at <code>0</code> from …","The actual operation.","This module provides a regular expression parser.","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Ast</code>.","Push a new item in this union.","Create a “repetition” AST item.","The right hand side of the operation.","Return the span at which this error occurred.","Return the span of this abstract syntax tree.","Return the span of this character class set.","Return the span of this character class set item.","The span of this comment, including the beginning <code>#</code> and …","The span of this alternation.","The span of this concatenation.","The span of this literal.","The span of this class.","The span of this class.","The span of this class.","The span of this class.","The span of this range.","The span of the items in this operation. e.g., the <code>a-z0-9</code> …","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …","The span of this assertion.","The span of this operation.","The span of this operator. This includes things like <code>+</code>, <code>*?</code> …","The span of this group.","The span of this capture name.","The span of these flags, including the grouping …","The span of this group of flags.","The span of this item.","Create a new span using the given position as the start …","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","The start byte offset.","The start of this rangeuild a set from a union.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an <code>Alternation</code>…","This method is called between child nodes of an <code>Alternation</code>…","This method is called between the left hand and right hand …","This method is called between the left hand and right hand …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> before …","This method is called between child nodes of a …","This method is called between child nodes of a …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> before descending into …","Create a new span by replacing the ending the position …","Create a new span by replacing the starting the position …","The property name (which may be empty).","The type of Unicode op used to associate <code>name</code> with <code>value</code>.","The property value (which may be empty).","The position of the original flag. The error position …","The position of the original negation operator. The error …","The position of the initial occurrence of the capture …","The capture name.","True if the <code>?P&lt;</code> syntax is used and false if the <code>?&lt;</code> syntax …","A regular expression parser.","A builder for a regular expression parser.","","","","","Build a parser from this configuration with the given …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into an abstract syntax tree.","Parse the regular expression and return an abstract syntax …","","","","","","","","","A printer for a regular expression abstract syntax tree.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","An alternation of expressions.","Matches any byte value.","Matches any byte value except for the <code>u8</code> given.","Matches any byte value except for <code>\\\\r</code> and <code>\\\\n</code>.","Matches any byte value except for <code>\\\\n</code>.","Matches the UTF-8 encoding of any Unicode scalar value.","Matches the UTF-8 encoding of any Unicode scalar value …","Matches the UTF-8 encoding of any Unicode scalar value …","Matches the UTF-8 encoding of any Unicode scalar value …","A set of characters represented by arbitrary bytes (one …","The high-level intermediate representation for a capturing …","A capturing group, which contains a sub-expression.","An error that occurs when Unicode-aware simple case …","The high-level intermediate representation of a character …","A single character class that matches any of the …","A set of characters represented by arbitrary bytes.","An iterator over all ranges in a byte character class.","A single range of characters represented by arbitrary …","A set of characters represented by Unicode scalar values.","An iterator over all ranges in a Unicode character class.","A single range of characters represented by Unicode scalar …","A concatenation of expressions.","A type describing the different flavors of <code>.</code>.","The empty regular expression, which matches everything, …","Match the end of text. Specifically, this matches at the …","Match the end of a line or the end of text. Specifically, …","Match the end of a line or the end of text. Specifically, …","An error that visiting an HIR might return.","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.","The type of an error that occurred while building an <code>Hir</code>.","A high-level intermediate representation (HIR) for a …","The underlying kind of an arbitrary <code>Hir</code> expression.","This error occurs when one uses a non-ASCII byte for a …","This error occurs when translating a pattern that could …","The high-level intermediate representation of a literal.","A literalstring that matches exactly these bytes.","The high-level intermediate representation for a …","A look-around assertion. A look-around match always has …","A set of look-around assertions.","An iterator over all look-around assertions in a <code>LookSet</code>.","The result of visiting an HIR.","A type that collects various properties of an HIR value.","The high-level intermediate representation of a repetition …","A repetition operation applied to a sub-expression.","Match the beginning of text. Specifically, this matches at …","Match the beginning of a line or the beginning of text. …","Match the beginning of a line or the beginning of text. …","A set of characters represented by Unicode scalar values.","This occurs when the Unicode simple case mapping tables …","This error occurs when a Unicode feature is used when …","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>, …","This occurs when an unrecognized Unicode property name …","This occurs when an unrecognized Unicode property value …","A trait for visiting the high-level IR (HIR) in depth …","Match an ASCII-only word boundary. That is, this matches a …","Match an ASCII-only negation of a word boundary.","Match the end of an ASCII-only word boundary. That is, …","Match the end half of an ASCII-only word boundary. That …","Match the end half of a Unicode word boundary. That is, …","Match the end of a Unicode word boundary. That is, this …","Match the start of an ASCII-only word boundary. That is, …","Match the start half of an ASCII-only word boundary. That …","Match the start half of a Unicode word boundary. That is, …","Match the start of a Unicode word boundary. That is, this …","Match a Unicode-aware word boundary. That is, this matches …","Match a Unicode-aware negation of a word boundary.","Returns the alternation of the given expressions.","Returns a convenient single codepoint representation of …","Return the underlying representation of this look-around …","The underlying representation this set is exposed to make …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a capture HIR expression.","Apply Unicode simple case folding to this character class, …","Expand this character class such that it contains all case …","Expand this character class such that it contains all case …","Creates a class HIR expression. The class may either be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the concatenation of the given expressions.","Returns true if and only if the given look-around …","Returns true if and only if this set contains any anchor …","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any “…","Returns true if and only if this set contains any word …","Returns true if and only if this set contains any ASCII …","Returns true if and only if this set contains any Unicode …","","","","Subtract the given character class from this character …","Subtract the given byte class from this byte class, in …","Returns an HIR expression for <code>.</code>.","","Returns an empty HIR expression.","Create a new class with no ranges.","Create a new class with no ranges.","Create an empty set of look-around assertions.","Return the end of this range.","Return the end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the total number of explicit capturing groups in …","Returns an HIR expression that can never match anything. …","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Given the underlying representation of a <code>Look</code> value, …","Create a full set of look-around assertions.","Whether this repetition operator is greedy or not. A …","The capture index of the capture.","Return a new set that is equivalent to the original, but …","Intersect this character class with the given character …","Intersect this byte class with the given byte class, in …","Returns a new set that is the intersection of this and the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Consumes ownership of this HIR expression and returns its …","Return true if and only if this HIR is either a simple …","Returns true if and only if this character class will …","Returns true if and only if this character class will …","Returns true if and only if this character class is empty. …","Returns true if and only if this set is empty.","Return true if and only if this HIR is a simple literal. …","Returns true if and only if this character class will only …","Return true if and only if the corresponding HIR will …","Return an iterator over all ranges in this class.","Return an iterator over all ranges in this class.","Returns an iterator over all of the look-around assertions …","Return the type of this error.","Returns a reference to the underlying HIR kind.","Returns the number of codepoints in this range.","Returns the number of bytes in this range.","Returns the total number of look-around assertions in this …","Provides literal extraction from <code>Hir</code> expressions.","Creates a literal HIR expression.","If this class consists of exactly one element (whether a …","If this class consists of exactly one codepoint, then …","If this class consists of exactly one byte, then return it …","Creates a look-around assertion HIR expression.","Returns a set of all look-around assertions that appear at …","Returns a set of all look-around assertions that appear as …","Returns a set of all look-around assertions that appear as …","Returns a set of all look-around assertions that appear as …","Returns a set of all look-around assertions that appear as …","The maximum range of the repetition.","Returns the length, in bytes, of the longest string …","Returns the length, in bytes, of the longest string …","Returns the length, in bytes, of the longest string …","Returns the length (in bytes) of the longest string …","Returns the total amount of heap memory usage, in bytes, …","The minimum range of the repetition.","Returns the length, in bytes, of the smallest string …","Returns the length, in bytes, of the smallest string …","Returns the length, in bytes, of the smallest string …","Returns the length (in bytes) of the smallest string …","The name of the capture, if it exists.","Negate this character class in place.","Negate this character class.","Negate this byte class.","Create a new class from a sequence of ranges.","Create a new Unicode scalar value range for a character …","Create a new class from a sequence of ranges.","Create a new byte range for a character class.","","","","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Hir</code>.","Returns the properties computed for this <code>Hir</code>.","Add a new range to this set.","Add a new range to this set.","Return the underlying ranges as a slice.","Return the underlying ranges as a slice.","Return a <code>LookSet</code> from the slice given as a native endian …","Return a new set that is equivalent to the original, but …","Creates a repetition HIR expression.","Flip the look-around assertion to its equivalent for …","Updates this set in place with the result of inserting the …","Updates this set in place with the result of intersecting …","Updates this set in place with the result of removing the …","Updates this set in place with the result of subtracting …","Updates this set in place with the result of unioning it …","Create a look-around set containing the look-around …","Return the span at which this error occurred.","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","Return the start of this range.","Return the start of this range.","Returns the total number of explicit capturing groups that …","The expression inside the capturing group, which may be …","The expression being repeated.","Returns a slice of this kind’s sub-expressions, if any.","Returns a new set that is the result of subtracting the …","Compute the symmetric difference of the given character …","Compute the symmetric difference of the given byte …","If this class consists of only ASCII ranges, then return …","","","","","","","","","","","","","","","","","","","","","","If this class consists of only ASCII ranges, then return …","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.","Apply Unicode simple case folding to this character class, …","Expand this character class such that it contains all case …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Union this character class with the given character class, …","Union this byte class with the given byte class, in place.","Returns a new set of properties that corresponds to the …","Returns a new set that is the union of this and the one …","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called between child nodes of a …","This method is called between child nodes of a …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> before descending into …","Returns a new repetition with the same <code>min</code>, <code>max</code> and <code>greedy</code> …","Write a <code>LookSet</code> as a native endian 32-bit integer to the …","The kind of literals to extract from an <code>Hir</code> expression.","Extracts prefix or suffix literal sequences from <code>Hir</code> …","A single literal extracted from an <code>Hir</code> expression.","Extracts only prefix literals from a regex.","A sequence of literals.","Extracts only suffix literals from a regex.","Returns the bytes in this literal.","","","","","","","","","","","","","","","","","","","Modify this sequence to contain the cross product between …","Modify this sequence to contain the cross product between …","Deduplicate adjacent equivalent literals in this sequence.","","","Returns an empty sequence.","","","","","Returns a new exact literal containing the bytes given.","Extend this literal with the literal given.","Execute the extractor and return a sequence of literals.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns a new inexact literal containing the bytes given.","Returns a sequence of literals without a finite size and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Yields ownership of the bytes inside this literal.","Returns true if and only if this sequence is finite and …","Returns true if and only if this literal has zero bytes.","Returns true if and only if all literals in this sequence …","Returns true if and only if this literal is exact.","Returns true if this sequence is finite.","Returns true if and only if all literals in this sequence …","Returns true if this kind is the <code>Prefix</code> variant.","Returns true if this kind is the <code>Suffix</code> variant.","Trims all literals in this seq such that only the first <code>len</code>…","Trims this literal such that only the first <code>len</code> bytes …","Trims all literals in this seq such that only the last <code>len</code> …","Trims this literal such that only the last <code>len</code> bytes …","Set the kind of literal sequence to extract from an <code>Hir</code> …","Returns the number of literals in this sequence if the …","Returns the length of this literal in bytes.","Configure a limit on the length of the sequence that is …","Configure a limit on the maximum length of any literal in …","Configure a limit on the total number of repetitions that …","Configure a limit on the total number of literals that …","If this is a finite sequence, return its members as a …","Returns the longest common prefix from this seq.","Returns the longest common suffix from this seq.","Make all of the literals in this sequence inexact.","Marks this literal as inexact.","Converts this sequence to an infinite sequence.","Return the maximum length of the sequence that would …","Returns the length of the longest literal in this sequence.","Return the maximum length of the sequence that would …","Returns the length of the shortest literal in this …","Shrinks this seq to its minimal size while respecting the …","Create a new extractor with a default configuration.","Returns a sequence of exact literals from the given byte …","Optimizes this seq while treating its literals as prefixes …","Optimizes this seq while treating its literals as suffixes …","","Push a literal to the end of this sequence.","Returns the “rank” of the given byte.","Reverse the bytes in this literal.","Reverses all of the literals in this sequence.","Returns a sequence containing a single literal.","Sorts this sequence of literals lexicographically.","","","","","","","","","","","","","","","","","Unions the <code>other</code> sequence into this one.","Unions the <code>other</code> sequence into this one by splice the <code>other</code>","A printer for a regular expression’s high-level …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","A translator maps abstract syntax to a high level …","A builder for constructing an AST-&gt;HIR translator.","","","","","Build a translator using the current configuration.","Enable or disable the case insensitive flag (<code>i</code>) by default.","","","","","Enable or disable the CRLF mode flag (<code>R</code>) by default.","","Enable or disable the “dot matches any character” flag …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets the line terminator for use with <code>(?u-s:.)</code> and <code>(?-us:.)</code>…","Enable or disable the multi-line matching flag (<code>m</code>) by …","Create a new translator builder with a default c …","Create a new translator using the default configuration.","Enable or disable the “swap greed” flag (<code>U</code>) by default.","","","Translate the given abstract syntax tree (AST) into a high …","","","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","When disabled, translation will permit the construction of …","Four successive byte ranges.","One byte range.","Three successive byte ranges.","Two successive byte ranges.","A single inclusive range of UTF-8 bytes.","Utf8Sequence represents a sequence of byte ranges.","An iterator over ranges of matching UTF-8 byte sequences.","Returns the underlying sequence of byte ranges as a slice.","","","","","","","","","","","","","End of byte range (inclusive).","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of byte ranges in this sequence.","Returns true if and only if a prefix of <code>bytes</code> matches this …","Returns true if and only if the given byte is in this …","Create a new iterator over UTF-8 byte ranges for the …","","","","Reverses the ranges in this sequence.","Start of byte range (inclusive).","","","","","","","","","","",""],"i":[0,4,0,0,4,0,0,4,1,2,10,4,1,2,10,1,1,4,1,2,4,1,2,1,1,1,4,4,0,0,4,4,1,2,10,10,4,4,4,1,2,10,0,1,4,1,2,10,0,0,0,0,1,1,1,1,2,1,0,2,1,4,1,2,4,10,4,1,2,10,4,1,2,10,0,4,1,2,10,1,0,1,42,42,0,24,42,46,0,24,0,0,55,38,45,42,55,46,60,56,32,0,56,38,60,0,0,0,24,32,0,24,0,32,32,0,0,0,0,0,0,32,0,24,0,0,42,44,0,0,24,32,32,50,40,42,24,60,24,46,51,51,44,62,0,0,32,32,32,32,32,55,0,59,32,32,32,32,32,0,24,0,0,38,42,0,24,0,32,32,32,32,32,32,37,37,0,60,50,45,38,0,24,46,0,42,37,60,43,43,59,32,56,44,51,37,43,54,62,46,0,42,42,46,54,0,24,32,32,32,0,32,0,0,0,38,40,42,0,37,0,32,32,32,51,51,37,60,50,38,46,60,32,39,39,46,32,32,42,37,38,0,0,40,42,51,51,51,51,51,51,51,39,42,54,54,19,24,24,34,52,28,23,36,11,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,27,27,28,24,24,24,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,26,33,33,35,34,24,39,24,24,45,24,26,47,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,62,19,24,28,58,11,11,32,32,26,33,34,35,24,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,42,52,24,57,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,23,36,48,28,26,24,44,31,59,26,47,55,48,19,11,27,30,41,31,29,49,25,53,28,20,49,33,24,57,30,41,31,29,26,33,33,52,0,26,33,11,0,48,24,49,11,24,45,46,35,23,36,27,30,41,31,29,47,48,49,25,52,53,28,57,58,19,20,26,62,62,26,47,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,24,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,11,32,26,33,34,35,24,23,36,27,37,38,39,30,40,41,42,31,43,44,29,45,46,47,48,49,50,25,51,52,53,54,55,28,56,57,58,19,20,59,60,45,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,26,26,101,101,101,102,103,104,105,105,0,0,63,64,63,64,63,63,64,63,64,63,63,64,63,64,63,63,64,63,63,64,63,64,64,63,64,63,64,63,64,63,64,0,65,65,65,65,65,65,65,65,65,65,74,79,79,79,79,79,79,79,79,70,0,74,0,0,74,0,0,0,0,0,0,74,0,74,68,68,68,90,0,0,0,0,73,73,0,74,0,74,0,0,90,0,0,74,68,68,68,70,73,73,73,73,73,0,68,68,68,68,68,68,68,68,68,68,68,68,16,68,68,81,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,16,70,71,72,16,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,82,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,82,76,77,16,81,81,81,81,81,81,81,81,81,76,77,81,71,72,16,16,16,71,72,81,76,77,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,80,16,90,12,12,73,73,16,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,68,81,78,69,81,71,72,81,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,83,84,82,16,80,71,72,70,81,80,70,80,71,72,81,12,16,76,77,81,0,16,70,71,72,16,80,80,80,80,80,78,70,71,72,80,80,78,70,71,72,80,69,70,71,72,71,76,72,77,83,84,82,76,77,12,0,16,71,72,71,72,81,81,16,68,81,81,81,81,81,81,12,90,90,76,77,80,69,78,74,81,71,72,71,12,73,16,74,75,70,71,76,72,77,68,69,78,79,80,81,82,12,73,16,85,72,0,70,71,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,12,73,16,74,75,70,71,83,76,72,84,77,68,69,78,79,80,81,82,85,71,72,80,81,0,90,90,90,90,90,90,90,90,78,81,0,0,0,93,0,93,91,91,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,91,94,94,94,92,93,94,94,91,94,91,91,91,92,92,93,94,91,92,93,94,91,91,91,94,91,94,92,93,94,91,91,94,91,94,91,94,94,93,93,94,91,94,91,92,94,91,92,92,92,92,94,94,94,94,91,94,94,94,94,94,94,92,94,94,94,91,94,0,91,94,94,94,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,94,94,0,95,95,95,95,95,95,95,95,95,95,0,0,96,97,96,97,96,96,96,97,96,97,96,96,96,96,97,96,97,96,97,96,96,96,97,96,96,97,97,96,97,96,97,96,97,96,96,98,98,98,98,0,0,0,98,98,99,100,98,99,100,98,99,98,99,98,99,99,98,99,98,99,98,99,100,98,99,100,98,99,100,98,100,98,98,99,100,100,98,99,98,99,98,99,98,99,100,98,99,100,98,99,100],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[1,3],1],[4,4],[1,1],[2,2],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,3],1],[[],1],[[1,3],1],[[4,4],3],[[-1,-2],3,[],[]],[6,7],[[6,7],5],[[4,8],9],[[4,8],9],[[1,8],9],[[2,8],9],[[10,8],9],[[10,8],9],[11,4],[-1,-1,[]],[12,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[1,3],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,3],[13,3],[14,3],[13,3],[[1,14],1],[[1,3],1],[[1,15],1],[[],1],[[],2],[[1,3],1],[6,[[17,[16,4]]]],[[2,6],[[17,[16,4]]]],[[1,3],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[13,[[17,[3,10]]]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[1,3],1],0,[[1,3],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[19,20],[[22,[21]]]],[23,24],[25,24],0,0,0,0,0,[11,[[22,[26]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,[[22,[14]]]],0,[28,[[22,[15]]]],[29,24],[30,24],[31,24],[11,11],[32,32],[26,26],[33,33],[34,34],[35,35],[24,24],[23,23],[36,36],[27,27],[37,37],[38,38],[39,39],[30,30],[40,40],[41,41],[42,42],[31,31],[43,43],[44,44],[29,29],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[25,25],[51,51],[52,52],[53,53],[54,54],[55,55],[28,28],[56,56],[57,57],[58,58],[19,19],[20,20],[59,59],[60,60],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[26,26],61],[[33,33],61],0,0,0,[36,24],[39,15],[26,24],[24,5],[45,5],[26,24],0,0,[[11,11],3],[[32,32],3],[[26,26],3],[[33,33],3],[[34,34],3],[[35,35],3],[[24,24],3],[[23,23],3],[[36,36],3],[[27,27],3],[[37,37],3],[[38,38],3],[[39,39],3],[[30,30],3],[[40,40],3],[[41,41],3],[[42,42],3],[[31,31],3],[[43,43],3],[[44,44],3],[[29,29],3],[[45,45],3],[[46,46],3],[[47,47],3],[[48,48],3],[[49,49],3],[[50,50],3],[[25,25],3],[[51,51],3],[[52,52],3],[[53,53],3],[[54,54],3],[[55,55],3],[[28,28],3],[[56,56],3],[[57,57],3],[[58,58],3],[[19,19],3],[[20,20],3],[[59,59],3],[[60,60],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[-1,17,[]],[[19,60],[[22,[3]]]],[58,24],[28,[[22,[19]]]],0,[[11,8],9],[[11,8],9],[[32,8],9],[[32,8],9],[[26,8],9],[[33,8],9],[[34,8],9],[[35,8],9],[[24,8],9],[[24,8],9],[[23,8],9],[[36,8],9],[[27,8],9],[[37,8],9],[[38,8],9],[[39,8],9],[[30,8],9],[[40,8],9],[[41,8],9],[[42,8],9],[[31,8],9],[[43,8],9],[[44,8],9],[[29,8],9],[[45,8],9],[[46,8],9],[[47,8],9],[[48,8],9],[[49,8],9],[[50,8],9],[[25,8],9],[[51,8],9],[[52,8],9],[[53,8],9],[[54,8],9],[[55,8],9],[[28,8],9],[[56,8],9],[[57,8],9],[[58,8],9],[[19,8],9],[[20,8],9],[[59,8],9],[[60,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,[[22,[42]]]],0,[28,24],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,24],[36,24],[48,46],[28,3],[26,3],[24,3],[44,3],[31,3],[59,3],[26,3],[47,3],[55,3],0,0,[11,32],0,0,0,0,0,0,0,0,0,0,0,0,[27,24],0,0,0,0,0,[[33,33],26],[[21,21,21],33],0,0,0,[[26,26],[[22,[61]]]],[[33,33],[[22,[61]]]],[11,6],0,[[48,46],5],[52,24],0,[11,26],[24,26],[45,26],[46,26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[33,26],[-1,5,[]],[-1,5,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[48,45],[[24,-1],17,62],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,49],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[[-1,46],[[17,[5]]],[]],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[-1,24],[[17,[5]]],[]],[[26,33],26],[[26,33],26],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,64],[63,63],[64,64],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],63],[[63,8],9],[[64,8],9],[-1,-1,[]],[-1,-1,[]],[[63,3],63],[-1,-2,[],[]],[-1,-2,[],[]],[[63,15],63],[[],63],[[],64],[[63,3],63],[[64,6],[[17,[24,11]]]],[[64,6],[[17,[34,11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[65,8],9],[-1,-1,[]],[-1,-2,[],[]],[[],65],[[65,24,-1],9,66],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[67,[16]]],16],[68,13],[68,15],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,16],[70,5],[71,5],[72,5],[70,16],[12,12],[73,73],[16,16],[74,74],[75,75],[70,70],[71,71],[76,76],[72,72],[77,77],[68,68],[69,69],[78,78],[79,79],[80,80],[81,81],[82,82],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[76,76],61],[[77,77],61],[[[67,[16]]],16],[[81,68],3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[[],76],[[],77],[[],81],[[71,71],5],[[72,72],5],[79,16],[16,5],[[],16],[[],71],[[],72],[[],81],[76,13],[77,14],[[12,12],3],[[73,73],3],[[16,16],3],[[74,74],3],[[75,75],3],[[70,70],3],[[71,71],3],[[76,76],3],[[72,72],3],[[77,77],3],[[68,68],3],[[69,69],3],[[78,78],3],[[79,79],3],[[80,80],3],[[81,81],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[80,21],[[],16],[-1,17,[]],[[12,8],9],[[12,8],9],[[73,8],9],[[73,8],9],[[16,8],9],[[16,8],9],[[74,8],9],[[75,8],9],[[70,8],9],[[71,8],9],[[83,8],9],[[76,8],9],[[72,8],9],[[84,8],9],[[77,8],9],[[68,8],9],[[69,8],9],[[78,8],9],[[79,8],9],[[80,8],9],[[81,8],9],[[82,8],9],[[85,8],9],[[85,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,[[22,[68]]]],[[],81],0,0,[[81,68],81],[[71,71],5],[[72,72],5],[[81,81],81],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,74],[80,3],[71,3],[72,3],[70,3],[81,3],[80,3],[70,3],[80,3],[71,83],[72,84],[81,82],[12,73],[16,74],[76,21],[77,21],[81,21],0,[-1,16,[[88,[[87,[[86,[14]]]]]]]],[70,[[22,[[67,[14]]]]]],[71,[[22,[[67,[14]]]]]],[72,[[22,[[67,[14]]]]]],[68,16],[80,81],[80,81],[80,81],[80,81],[80,81],0,[70,[[22,[21]]]],[71,[[22,[21]]]],[72,[[22,[21]]]],[80,[[22,[21]]]],[80,21],0,[70,[[22,[21]]]],[71,[[22,[21]]]],[72,[[22,[21]]]],[80,[[22,[21]]]],0,[70,5],[71,5],[72,5],[-1,71,89],[[13,13],76],[-1,72,89],[[14,14],77],[83,[[22,[76]]]],[84,[[22,[77]]]],[82,[[22,[68]]]],[[76,76],[[22,[61]]]],[[77,77],[[22,[61]]]],[12,6],0,[16,80],[[71,76],5],[[72,77],5],[71,[[86,[76]]]],[72,[[86,[77]]]],[[[86,[14]]],81],[[81,68],81],[78,16],[68,68],[[81,68],5],[[81,81],5],[[81,68],5],[[81,81],5],[[81,81],5],[68,81],[12,26],[-1,5,[]],[-1,5,[]],[76,13],[77,14],[80,[[22,[21]]]],0,0,[74,[[86,[16]]]],[[81,81],81],[[71,71],5],[[72,72],5],[71,[[22,[72]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[72,[[22,[71]]]],0,[70,[[17,[5,85]]]],[71,[[17,[5,85]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[71,71],5],[[72,72],5],[-1,80,89],[[81,81],81],[[16,-1],17,90],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[-1,[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[-1,16],[[17,[5]]],[]],[[78,16],78],[[81,[86,[14]]],5],0,0,0,0,0,0,[91,[[86,[14]]]],[91,[[86,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[93,93],[94,94],[91,91],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[91,91],61],[[94,94],5],[[94,94],5],[94,5],[[],92],[[],93],[[],94],[[94,94],3],[[91,91],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[-1,91,[[88,[[67,[14]]]]]],[[91,91],5],[[92,16],94],[[92,8],9],[[93,8],9],[[94,8],9],[[91,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,91],[14,91],[-1,94,89],[-1,91,[[88,[[67,[14]]]]]],[[],94],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,[[67,[14]]]],[94,3],[91,3],[94,3],[91,3],[94,3],[94,3],[93,3],[93,3],[[94,21],5],[[91,21],5],[[94,21],5],[[91,21],5],[[92,93],92],[94,[[22,[21]]]],[91,21],[[92,21],92],[[92,21],92],[[92,21],92],[[92,21],92],[94,[[22,[[86,[91]]]]]],[94,[[22,[[86,[14]]]]]],[94,[[22,[[86,[14]]]]]],[94,5],[91,5],[94,5],[[94,94],[[22,[21]]]],[94,[[22,[21]]]],[[94,94],[[22,[21]]]],[94,[[22,[21]]]],[94,5],[[],92],[-1,94,89],[94,5],[94,5],[[91,91],[[22,[61]]]],[[94,91],5],[14,14],[91,5],[94,5],[91,94],[94,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[94,94],5],[[94,94],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[95,8],9],[-1,-1,[]],[-1,-2,[],[]],[[],95],[[95,16,-1],9,66],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[96,97],[[96,3],96],[96,96],[97,97],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[96,3],96],[[],96],[[96,3],96],[[96,8],9],[[97,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[96,14],96],[[96,3],96],[[],96],[[],97],[[96,3],96],[-1,-2,[],[]],[-1,-2,[],[]],[[97,6,24],[[17,[16,12]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[96,3],96],[[96,3],96],0,0,0,0,0,0,0,[98,[[86,[99]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98,98],[99,99],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[98,98],61],[[99,99],61],0,[[98,98],3],[[99,99],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[98,8],9],[[99,8],9],[[100,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98],[-1,-2,[],[]],[98,21],[[98,[86,[14]]],3],[[99,14],3],[[13,13],100],[100,22],[[98,98],[[22,[61]]]],[[99,99],[[22,[61]]]],[98,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[3,"ParserBuilder",0],[3,"Parser",0],[15,"bool"],[4,"Error",0],[15,"tuple"],[15,"str"],[3,"String",1664],[3,"Formatter",1665],[6,"Result",1665],[3,"UnicodeWordError",0],[3,"Error",82],[3,"Error",979],[15,"char"],[15,"u8"],[15,"u32"],[3,"Hir",979],[4,"Result",1666],[3,"TypeId",1667],[3,"Flags",82],[3,"FlagsItem",82],[15,"usize"],[4,"Option",1668],[3,"Alternation",82],[4,"Ast",82],[3,"Assertion",82],[3,"Span",82],[3,"Literal",82],[3,"Group",82],[3,"ClassBracketed",82],[3,"ClassPerl",82],[3,"ClassUnicode",82],[4,"ErrorKind",82],[3,"Position",82],[3,"WithComments",82],[3,"Comment",82],[3,"Concat",82],[4,"LiteralKind",82],[4,"SpecialLiteralKind",82],[4,"HexLiteralKind",82],[4,"ClassPerlKind",82],[3,"ClassAscii",82],[4,"ClassAsciiKind",82],[4,"ClassUnicodeKind",82],[4,"ClassUnicodeOpKind",82],[4,"ClassSet",82],[4,"ClassSetItem",82],[3,"ClassSetRange",82],[3,"ClassSetUnion",82],[3,"ClassSetBinaryOp",82],[4,"ClassSetBinaryOpKind",82],[4,"AssertionKind",82],[3,"Repetition",82],[3,"RepetitionOp",82],[4,"RepetitionKind",82],[4,"RepetitionRange",82],[4,"GroupKind",82],[3,"CaptureName",82],[3,"SetFlags",82],[4,"FlagsItemKind",82],[4,"Flag",82],[4,"Ordering",1669],[8,"Visitor",82],[3,"ParserBuilder",935],[3,"Parser",935],[3,"Printer",968],[8,"Write",1665],[3,"Vec",1670],[4,"Look",979],[3,"Capture",979],[4,"Class",979],[3,"ClassUnicode",979],[3,"ClassBytes",979],[4,"ErrorKind",979],[4,"HirKind",979],[3,"Literal",979],[3,"ClassUnicodeRange",979],[3,"ClassBytesRange",979],[3,"Repetition",979],[4,"Dot",979],[3,"Properties",979],[3,"LookSet",979],[3,"LookSetIter",979],[3,"ClassUnicodeIter",979],[3,"ClassBytesIter",979],[3,"CaseFoldError",979],[15,"slice"],[3,"Box",1671],[8,"Into",1672],[8,"IntoIterator",1673],[8,"Visitor",979],[3,"Literal",1445],[3,"Extractor",1445],[4,"ExtractKind",1445],[3,"Seq",1445],[3,"Printer",1560],[3,"TranslatorBuilder",1571],[3,"Translator",1571],[4,"Utf8Sequence",1608],[3,"Utf8Range",1608],[3,"Utf8Sequences",1608],[13,"NamedValue",927],[13,"FlagDuplicate",930],[13,"FlagRepeatedNegation",930],[13,"GroupNameDuplicate",930],[13,"CaptureName",933]]},\
"reqwest":{"doc":"reqwest","t":"SSSSDSSSSCDDSSNDSSSSSSSSSSSSSSSSSCISSSSSSSSDSSSSSSSSDSSNSSSSSSSSSSSDSSSSDDDIGSSSDSSSSSSSSSSDDSDLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGIGKRRRRRRRRRRRRRRRRRIRRRRRRRRRRRRRRRRDRRRERRDRDDDRRRRRIDDDDDDRRRRRNDRRRRRRRRRRRRRRRRRRRRRDRRRRRNDDDDDDRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDSSSSDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","Body","CONFLICT","CONNECT","CONTINUE","CREATED","Certificate","Client","ClientBuilder","DELETE","EXPECTATION_FAILED","Err","Error","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GET","GONE","HEAD","HTTP_09","HTTP_10","HTTP_11","HTTP_2","HTTP_3","HTTP_VERSION_NOT_SUPPORTED","IM_A_TEAPOT","IM_USED","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","Identity","IntoUrl","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_NOT_ALLOWED","MISDIRECTED_REQUEST","MOVED_PERMANENTLY","MULTIPLE_CHOICES","MULTI_STATUS","Method","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","NoProxy","OK","OPTIONS","Ok","PARTIAL_CONTENT","PATCH","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","POST","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","PUT","Proxy","RANGE_NOT_SATISFIABLE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","RESET_CONTENT","Request","RequestBuilder","Response","ResponseBuilderExt","Result","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","StatusCode","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","TRACE","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","Upgraded","Url","VARIANT_ALSO_NEGOTIATES","Version","add_root_certificate","all","as_bytes","as_ref","as_ref","as_str","as_str","as_str","as_u16","authority","basic_auth","basic_auth","bearer_auth","blocking","body","body","body_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build_split","builder","bytes","call","call","cannot_be_a_base","canonical_reason","chunk","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","connect_timeout","connection_verbose","content_length","custom","danger_accept_invalid_certs","default","default","default","default","default","default","default_headers","delete","dns","dns_resolver","domain","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error_for_status","error_for_status_ref","execute","extensions","extensions_mut","fetch_mode_no_cors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","form","fragment","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_directory_path","from_env","from_file_path","from_parts","from_str","from_str","from_str","from_string","from_u16","get","get","has_authority","has_host","hash","hash","hash","hash","head","header","header","headers","headers","headers","headers_mut","headers_mut","host","host_str","http","http09_responses","http1_allow_obsolete_multiline_headers_in_responses","http1_allow_spaces_after_header_name_in_responses","http1_ignore_invalid_headers_in_responses","http1_only","http1_title_case_headers","http2_adaptive_window","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_keep_alive_interval","http2_keep_alive_timeout","http2_keep_alive_while_idle","http2_max_frame_size","http2_prior_knowledge","https","https_only","identity","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_string","is_body","is_builder","is_client_error","is_connect","is_decode","is_idempotent","is_informational","is_redirect","is_redirection","is_request","is_safe","is_server_error","is_special","is_status","is_success","is_timeout","is_write_vectored","join","json","json","local_address","make_relative","max_tls_version","method","method_mut","min_tls_version","new","new","new","no_brotli","no_deflate","no_gzip","no_proxy","no_proxy","no_trust_dns","options","origin","parse","parse_with_params","partial_cmp","partial_cmp","partial_cmp","password","patch","path","path_segments","path_segments_mut","poll_flush","poll_read","poll_ready","poll_ready","poll_shutdown","poll_write","poll_write_vectored","pool_idle_timeout","pool_max_idle_per_host","port","port_or_known_default","post","proxy","put","query","query","query_pairs","query_pairs_mut","redirect","redirect","referer","remote_addr","request","resolve","resolve_to_addrs","scheme","send","set_fragment","set_host","set_ip_host","set_password","set_path","set_port","set_query","set_scheme","set_username","socket_addrs","source","status","status","tcp_keepalive","tcp_nodelay","text","text_with_charset","timeout","timeout","timeout","timeout_mut","tls","tls_built_in_root_certs","tls_info","tls_sni","to_file_path","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_clone","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","url","url","url","url","url_mut","url_mut","use_preconfigured_tls","use_rustls_tls","user_agent","username","version","version","version","version_mut","with_url","without_url","Body","Client","ClientBuilder","Request","RequestBuilder","Response","add_root_certificate","as_bytes","basic_auth","bearer_auth","body","body","body_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","build","build","builder","bytes","clone","clone_into","connect_timeout","connection_verbose","content_length","copy_to","danger_accept_invalid_certs","default","default","default_headers","delete","error_for_status","error_for_status_ref","execute","extensions","extensions_mut","fmt","fmt","fmt","fmt","fmt","fmt","form","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","head","header","headers","headers","headers","headers_mut","headers_mut","http09_responses","http1_allow_obsolete_multiline_headers_in_responses","http1_allow_spaces_after_header_name_in_responses","http1_ignore_invalid_headers_in_responses","http1_only","http1_title_case_headers","http2_adaptive_window","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_max_frame_size","http2_prior_knowledge","https_only","identity","into","into","into","into","into","into","json","json","local_address","max_tls_version","method","method_mut","min_tls_version","new","new","new","new","no_brotli","no_deflate","no_gzip","no_proxy","no_trust_dns","patch","pool_idle_timeout","pool_max_idle_per_host","post","proxy","put","query","read","redirect","referer","remote_addr","request","resolve","resolve_to_addrs","send","sized","status","tcp_keepalive","tcp_nodelay","text","text_with_charset","timeout","timeout","timeout","timeout_mut","tls_built_in_root_certs","tls_info","tls_sni","to_owned","try_clone","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","url","url","url_mut","use_preconfigured_tls","use_rustls_tls","user_agent","version","version","version","version_mut","Addrs","Resolve","Resolving","resolve","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_RANGES","ACCESS_CONTROL_ALLOW_CREDENTIALS","ACCESS_CONTROL_ALLOW_HEADERS","ACCESS_CONTROL_ALLOW_METHODS","ACCESS_CONTROL_ALLOW_ORIGIN","ACCESS_CONTROL_EXPOSE_HEADERS","ACCESS_CONTROL_MAX_AGE","ACCESS_CONTROL_REQUEST_HEADERS","ACCESS_CONTROL_REQUEST_METHOD","AGE","ALLOW","ALT_SVC","AUTHORIZATION","AsHeaderName","CACHE_CONTROL","CACHE_STATUS","CDN_CACHE_CONTROL","CONNECTION","CONTENT_DISPOSITION","CONTENT_ENCODING","CONTENT_LANGUAGE","CONTENT_LENGTH","CONTENT_LOCATION","CONTENT_RANGE","CONTENT_SECURITY_POLICY","CONTENT_SECURITY_POLICY_REPORT_ONLY","CONTENT_TYPE","COOKIE","DATE","DNT","Drain","ETAG","EXPECT","EXPIRES","Entry","FORWARDED","FROM","GetAll","HOST","HeaderMap","HeaderName","HeaderValue","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","IF_UNMODIFIED_SINCE","IntoHeaderName","IntoIter","InvalidHeaderName","InvalidHeaderValue","Iter","IterMut","Keys","LAST_MODIFIED","LINK","LOCATION","MAX_FORWARDS","ORIGIN","Occupied","OccupiedEntry","PRAGMA","PROXY_AUTHENTICATE","PROXY_AUTHORIZATION","PUBLIC_KEY_PINS","PUBLIC_KEY_PINS_REPORT_ONLY","RANGE","REFERER","REFERRER_POLICY","REFRESH","RETRY_AFTER","SEC_WEBSOCKET_ACCEPT","SEC_WEBSOCKET_EXTENSIONS","SEC_WEBSOCKET_KEY","SEC_WEBSOCKET_PROTOCOL","SEC_WEBSOCKET_VERSION","SERVER","SET_COOKIE","STRICT_TRANSPORT_SECURITY","TE","TRAILER","TRANSFER_ENCODING","ToStrError","UPGRADE","UPGRADE_INSECURE_REQUESTS","USER_AGENT","VARY","VIA","Vacant","VacantEntry","ValueDrain","ValueIter","ValueIterMut","Values","ValuesMut","WARNING","WWW_AUTHENTICATE","X_CONTENT_TYPE_OPTIONS","X_DNS_PREFETCH_CONTROL","X_FRAME_OPTIONS","X_XSS_PROTECTION","append","append","as_bytes","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","cjk_compat_variants","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains_key","default","drain","drop","drop","drop","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_iter","from_lowercase","from_maybe_shared","from_maybe_shared_unchecked","from_name","from_static","from_static","from_str","from_str","from_str","get","get","get_all","get_mut","get_mut","hash","hash","index","insert","insert","insert","insert_entry","insert_mult","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","is_empty","is_sensitive","iter","iter","iter","iter_mut","iter_mut","key","key","key","keys","keys_len","len","len","new","next","next","next","next","next","next","next","next","next","next","next_back","next_back","nfc","nfd","nfkc","nfkd","or_insert","or_insert_with","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove_entry","remove_entry_mult","reserve","set_sensitive","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","stream_safe","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","try_entry","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","Action","Attempt","Policy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","custom","default","error","fmt","fmt","fmt","follow","from","from","from","into","into","into","limited","none","previous","redirect","status","stop","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","url","Certificate","Identity","TLS_1_0","TLS_1_1","TLS_1_2","TLS_1_3","TlsInfo","Version","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_der","from_pem","from_pem","into","into","into","into","partial_cmp","peer_certificate","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"reqwest"],[496,"reqwest::blocking"],[667,"reqwest::dns"],[671,"reqwest::header"],[1121,"reqwest::redirect"],[1159,"reqwest::tls"],[1220,"core::option"],[1221,"core::fmt"],[1222,"core::convert"],[1223,"bytes::bytes"],[1224,"core::cmp"],[1225,"core::time"],[1226,"core::ops::function"],[1227,"core::marker"],[1228,"core::marker"],[1229,"core::future::future"],[1230,"http::extensions"],[1231,"core::fmt"],[1232,"serde::ser"],[1233,"core::marker"],[1234,"hyper::body::body"],[1235,"alloc::vec"],[1236,"http::response"],[1237,"hyper::upgrade"],[1238,"http::method"],[1239,"http::status"],[1240,"std::path"],[1241,"core::convert"],[1242,"core::hash"],[1243,"url::host"],[1244,"url::slicing"],[1245,"core::ops::range"],[1246,"core::ops::range"],[1247,"core::net::ip_addr"],[1248,"url"],[1249,"url::origin"],[1250,"core::iter::traits::collect"],[1251,"core::str::iter"],[1252,"url::path_segments"],[1253,"core::pin"],[1254,"core::task::wake"],[1255,"std::io::error"],[1256,"core::task::poll"],[1257,"tokio::io::read_buf"],[1258,"std::io"],[1259,"form_urlencoded"],[1260,"url"],[1261,"alloc::alloc"],[1262,"std::io::error"],[1263,"std::path"],[1264,"core::any"],[1265,"core::any"],[1266,"std::io"],[1267,"unicode_normalization::replace"],[1268,"core::clone"],[1269,"core::fmt"],[1270,"unicode_normalization::decompose"],[1271,"core::ops::function"],[1272,"std::collections::hash::map"],[1273,"std::collections::hash::map"]],"d":["202 Accepted [RFC7231, Section 6.3.3]","208 Already Reported [RFC5842]","502 Bad Gateway [RFC7231, Section 6.6.3]","400 Bad Request [RFC7231, Section 6.5.1]","An asynchronous request body.","409 Conflict [RFC7231, Section 6.5.8]","CONNECT","100 Continue [RFC7231, Section 6.2.1]","201 Created [RFC7231, Section 6.3.2]","","An asynchronous <code>Client</code> to make Requests with.","A <code>ClientBuilder</code> can be used to create a <code>Client</code> with custom …","DELETE","417 Expectation Failed [RFC7231, Section 6.5.14]","Contains the error value","The Errors that may occur when processing a <code>Request</code>.","424 Failed Dependency [RFC4918]","403 Forbidden [RFC7231, Section 6.5.3]","302 Found [RFC7231, Section 6.4.3]","504 Gateway Timeout [RFC7231, Section 6.6.5]","GET","410 Gone [RFC7231, Section 6.5.9]","HEAD","<code>HTTP/0.9</code>","<code>HTTP/1.0</code>","<code>HTTP/1.1</code>","<code>HTTP/2.0</code>","<code>HTTP/3.0</code>","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]","418 I’m a teapot [curiously not registered by IANA but …","226 IM Used [RFC3229]","507 Insufficient Storage [RFC4918]","500 Internal Server Error [RFC7231, Section 6.6.1]","","A trait to try to convert some type into a <code>Url</code>.","411 Length Required [RFC7231, Section 6.5.10]","423 Locked [RFC4918]","508 Loop Detected [RFC5842]","405 Method Not Allowed [RFC7231, Section 6.5.5]","421 Misdirected Request RFC7540, Section 9.1.2","301 Moved Permanently [RFC7231, Section 6.4.2]","300 Multiple Choices [RFC7231, Section 6.4.1]","207 Multi-Status [RFC4918]","The Request Method (VERB)","511 Network Authentication Required [RFC6585]","203 Non-Authoritative Information [RFC7231, Section 6.3.4]","406 Not Acceptable [RFC7231, Section 6.5.6]","510 Not Extended [RFC2774]","404 Not Found [RFC7231, Section 6.5.4]","501 Not Implemented [RFC7231, Section 6.6.2]","304 Not Modified [RFC7232, Section 4.1]","204 No Content [RFC7231, Section 6.3.5]","A configuration for filtering out requests that shouldn’…","200 OK [RFC7231, Section 6.3.1]","OPTIONS","Contains the success value","206 Partial Content [RFC7233, Section 4.1]","PATCH","413 Payload Too Large [RFC7231, Section 6.5.11]","402 Payment Required [RFC7231, Section 6.5.2]","308 Permanent Redirect [RFC7238]","POST","412 Precondition Failed [RFC7232, Section 4.2]","428 Precondition Required [RFC6585]","102 Processing [RFC2518]","407 Proxy Authentication Required [RFC7235, Section 3.2]","PUT","Configuration of a proxy that a <code>Client</code> should pass …","416 Range Not Satisfiable [RFC7233, Section 4.4]","431 Request Header Fields Too Large [RFC6585]","408 Request Timeout [RFC7231, Section 6.5.7]","205 Reset Content [RFC7231, Section 6.3.6]","A request which can be executed with <code>Client::execute()</code>.","A builder to construct the properties of a <code>Request</code>.","A Response to a submitted <code>Request</code>.","Extension trait for http::response::Builder objects","A <code>Result</code> alias where the <code>Err</code> case is <code>reqwest::Error</code>.","303 See Other [RFC7231, Section 6.4.4]","503 Service Unavailable [RFC7231, Section 6.6.4]","101 Switching Protocols [RFC7231, Section 6.2.2]","An HTTP status code (<code>status-code</code> in RFC 7230 et al.).","307 Temporary Redirect [RFC7231, Section 6.4.7]","429 Too Many Requests [RFC6585]","TRACE","401 Unauthorized [RFC7235, Section 3.1]","451 Unavailable For Legal Reasons [RFC7725]","422 Unprocessable Entity [RFC4918]","415 Unsupported Media Type [RFC7231, Section 6.5.13]","426 Upgrade Required [RFC7231, Section 6.5.15]","414 URI Too Long [RFC7231, Section 6.5.12]","305 Use Proxy [RFC7231, Section 6.4.5]","An upgraded HTTP connection.","A parsed URL record.","506 Variant Also Negotiates [RFC2295]","Represents a version of the HTTP spec.","Add a custom root certificate.","Proxy <strong>all</strong> traffic to the passed URL.","Returns a reference to the internal data of the <code>Body</code>.","","","Return the serialization of this URL.","Return a &amp;str representation of the HTTP method","Returns a &amp;str representation of the <code>StatusCode</code>","Returns the <code>u16</code> corresponding to this <code>StatusCode</code>.","Return the authority of this URL as an ASCII string.","Enable HTTP basic authentication.","Set the <code>Proxy-Authorization</code> header using Basic auth.","Enable HTTP bearer authentication.","A blocking Client API.","Get the body.","Set the request body.","Get a mutable reference to the body.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Client</code> that uses this <code>ClientBuilder</code> …","Build a <code>Request</code>, which can be inspected, modified and …","Build a <code>Request</code>, which can be inspected, modified and …","Creates a <code>ClientBuilder</code> to configure a <code>Client</code>.","Get the full response body as <code>Bytes</code>.","","","Return whether this URL is a cannot-be-a-base URL, meaning …","Get the standardised <code>reason-phrase</code> for this status code.","Stream a chunk of the response body.","","","","","","","","","","","","","","","","","","Set a timeout for only the connect phase of a <code>Client</code>.","Set whether connections should emit verbose logs.","Get the content-length of this response, if known.","Provide a custom function to determine what traffic to …","Controls the use of certificate validation.","","","","","","","Sets the default headers for every request.","Convenience method to make a <code>DELETE</code> request to a URL.","DNS resolution","Override the DNS resolver implementation.","If this URL has a host and it is a domain name (not an IP …","","","","","","","","","","","","","","","","","","Turn a response into an error if the server returned an …","Turn a reference to a response into an error if the server …","Executes a <code>Request</code>.","Returns a reference to the associated extensions.","Returns a mutable reference to the associated extensions.","Disable CORS on fetching the request.","","","","","","","","","","","","","","","","","","","Send a form body.","Return this URL’s fragment identifier, if any.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Converts a slice of bytes to an HTTP method.","Converts a &amp;u8 to a status code","Convert a directory name as <code>std::path::Path</code> into an URL in …","Returns a new no-proxy configuration based on environment …","Convert a file name as <code>std::path::Path</code> into an URL in the …","Assemble a builder starting from an existing <code>Client</code> and a …","","","","Returns a new no-proxy configuration based on a <code>no_proxy</code> …","Converts a u16 to a status code.","Shortcut method to quickly make a <code>GET</code> request.","Convenience method to make a <code>GET</code> request to a URL.","Return whether the URL has an ‘authority’, which can …","Equivalent to <code>url.host().is_some()</code>.","","","","","Convenience method to make a <code>HEAD</code> request to a URL.","HTTP header types","Add a <code>Header</code> to this Request.","Get the headers.","Add a set of Headers to the existing ones on this Request.","Get the <code>Headers</code> of this <code>Response</code>.","Get a mutable reference to the headers.","Get a mutable reference to the <code>Headers</code> of this <code>Response</code>.","Return the parsed representation of the host for this URL. …","Return the string representation of the host (domain or IP …","Proxy all HTTP traffic to the passed URL.","Allow HTTP/0.9 responses","Set whether HTTP/1 connections will accept obsolete line …","Set whether HTTP/1 connections will accept spaces between …","Sets whether invalid header lines should be silently …","Only use HTTP/1.","Send headers as title case instead of lowercase.","Sets whether to use an adaptive flow control.","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Sets an interval for HTTP2 Ping frames should be sent to …","Sets a timeout for receiving an acknowledgement of the …","Sets whether HTTP2 keep-alive should apply while the …","Sets the maximum frame size to use for HTTP2.","Only use HTTP/2.","Proxy all HTTPS traffic to the passed URL.","Restrict the Client to be used with HTTPS only requests.","Sets the identity to be used for client certificate …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the serialization of this URL.","Returns true if the error is related to the request or …","Returns true if the error is from a type Builder.","Check if status is within 400-499.","Returns true if the error is related to connect","Returns true if the error is related to decoding the …","Whether a method is considered “idempotent”, meaning …","Check if status is within 100-199.","Returns true if the error is from a <code>RedirectPolicy</code>.","Check if status is within 300-399.","Returns true if the error is related to the request","Whether a method is considered “safe”, meaning the …","Check if status is within 500-599.","Return whether the URL is special (has a special scheme)","Returns true if the error is from …","Check if status is within 200-299.","Returns true if the error is related to a timeout.","","Parse a string as an URL, with this URL as the base URL.","Send a JSON body.","Try to deserialize the response body as JSON.","Bind to a local IP Address.","Creates a relative URL if possible, with this URL as the …","Set the maximum allowed TLS version for connections.","Get the method.","Get a mutable reference to the method.","Set the minimum required TLS version for connections.","Constructs a new <code>ClientBuilder</code>.","Constructs a new request.","Constructs a new <code>Client</code>.","Disable auto response body brotli decompression.","Disable auto response body deflate decompression.","Disable auto response body gzip decompression.","Clear all <code>Proxies</code>, so <code>Client</code> will use no proxy anymore.","Adds a <code>No Proxy</code> exclusion list to this Proxy","Disables the trust-dns async resolver.","Return a default <code>ParseOptions</code> that can fully configure the …","Return the origin of this URL (…","Parse an absolute URL from a string.","Parse an absolute URL from a string and add params to its …","","","","Return the password for this URL, if any, as a …","Convenience method to make a <code>PATCH</code> request to a URL.","Return the path for this URL, as a percent-encoded ASCII …","Unless this URL is cannot-be-a-base, return an iterator of …","Return an object with methods to manipulate this URL’s …","","","","","","","","Set an optional timeout for idle sockets being kept-alive.","Sets the maximum idle connection per host allowed in the …","Return the port number for this URL, if any.","Return the port number for this URL, or the default port …","Convenience method to make a <code>POST</code> request to a URL.","Add a <code>Proxy</code> to the list of proxies the <code>Client</code> will use.","Convenience method to make a <code>PUT</code> request to a URL.","Modify the query string of the URL.","Return this URL’s query string, if any, as a …","Parse the URL’s query string, if any, as …","Manipulate this URL’s query string, viewed as a sequence …","Redirect Handling","Set a <code>RedirectPolicy</code> for this client.","Enable or disable automatic setting of the <code>Referer</code> header.","Get the remote address used to get this <code>Response</code>.","Start building a <code>Request</code> with the <code>Method</code> and <code>Url</code>.","Override DNS resolution for specific domains to a …","Override DNS resolution for specific domains to particular …","Return the scheme of this URL, lower-cased, as an ASCII …","Constructs the Request and sends it to the target URL, …","Change this URL’s fragment identifier.","Change this URL’s host.","Change this URL’s host to the given IP address.","Change this URL’s password.","Change this URL’s path.","Change this URL’s port number.","Change this URL’s query string.","Change this URL’s scheme.","Change this URL’s username.","Resolve a URL’s host and port number to <code>SocketAddr</code>.","","Returns the status code, if the error was generated from a …","Get the <code>StatusCode</code> of this <code>Response</code>.","Set that all sockets have <code>SO_KEEPALIVE</code> set with the …","Set whether sockets have <code>TCP_NODELAY</code> enabled.","Get the full response text.","Get the full response text given a specific encoding.","Enables a request timeout.","Get the timeout.","Enables a request timeout.","Get a mutable reference to the timeout.","TLS configuration","Controls the use of built-in/preloaded certificates during …","Add TLS information as <code>TlsInfo</code> extension to responses.","Controls the use of TLS server name indication.","Assuming the URL is in the <code>file</code> scheme or similar, convert …","","","","","","","","","","","","Attempt to clone the request.","Attempt to clone the RequestBuilder.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the response and returns a future for a possible …","A builder method for the <code>http::response::Builder</code> type that …","Returns a possible URL related to this error.","Get the url.","Get the final <code>Url</code> of this <code>Response</code>.","Returns a mutable reference to the URL related to this …","Get a mutable reference to the url.","Use a preconfigured TLS backend.","Force using the Rustls TLS backend.","Sets the <code>User-Agent</code> header to be used by this client.","Return the username for this URL (typically the empty …","Get the http version.","Set HTTP version","Get the HTTP <code>Version</code> of this <code>Response</code>.","Get a mutable reference to the http version.","Add a url related to this error (overwriting any existing)","Strip the related url from this error (if, for example, it …","The body of a <code>Request</code>.","A <code>Client</code> to make Requests with.","A <code>ClientBuilder</code> can be used to create a <code>Client</code> with  …","A request which can be executed with <code>Client::execute()</code>.","A builder to construct the properties of a <code>Request</code>.","A Response to a submitted <code>Request</code>.","Add a custom root certificate.","Returns the body as a byte slice if the body is already …","Enable HTTP basic authentication.","Enable HTTP bearer authentication.","Get the body.","Set the request body.","Get a mutable reference to the body.","","","","","","","","","","","","","Converts streamed requests to their buffered equivalent and","Returns a <code>Client</code> that uses this <code>ClientBuilder</code> …","Build a <code>Request</code>, which can be inspected, modified and …","Creates a <code>ClientBuilder</code> to configure a <code>Client</code>.","Get the full response body as <code>Bytes</code>.","","","Set a timeout for only the connect phase of a <code>Client</code>.","Set whether connections should emit verbose logs.","Get the content-length of the response, if it is known.","Copy the response body into a writer.","Controls the use of certificate validation.","","","Sets the default headers for every request.","Convenience method to make a <code>DELETE</code> request to a URL.","Turn a response into an error if the server returned an …","Turn a reference to a response into an error if the server …","Executes a <code>Request</code>.","Returns a reference to the associated extensions.","Returns a mutable reference to the associated extensions.","","","","","","","Send a form body.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Shortcut method to quickly make a <em>blocking</em> <code>GET</code> request.","Convenience method to make a <code>GET</code> request to a URL.","Convenience method to make a <code>HEAD</code> request to a URL.","Add a <code>Header</code> to this Request.","Get the headers.","Get the <code>Headers</code> of this <code>Response</code>.","Add a set of Headers to the existing ones on this Request.","Get a mutable reference to the headers.","Get a mutable reference to the <code>Headers</code> of this <code>Response</code>.","Allow HTTP/0.9 responses","Set whether HTTP/1 connections will accept obsolete line …","Set whether HTTP/1 connections will accept spaces between …","Sets whether invalid header lines should be silently …","Only use HTTP/1.","Send headers as title case instead of lowercase.","Sets whether to use an adaptive flow control.","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Sets the maximum frame size to use for HTTP2.","Only use HTTP/2.","Restrict the Client to be used with HTTPS only requests.","Sets the identity to be used for client certificate …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Try and deserialize the response body as JSON using <code>serde</code>.","Send a JSON body.","Bind to a local IP Address.","Set the maximum allowed TLS version for connections.","Get the method.","Get a mutable reference to the method.","Set the minimum required TLS version for connections.","Constructs a new <code>ClientBuilder</code>.","Constructs a new request.","Instantiate a <code>Body</code> from a reader.","Constructs a new <code>Client</code>.","Disable auto response body brotli decompression.","Disable auto response body deflate decompression.","Disable auto response body gzip decompression.","Clear all <code>Proxies</code>, so <code>Client</code> will use no proxy anymore.","Disables the trust-dns async resolver.","Convenience method to make a <code>PATCH</code> request to a URL.","Set an optional timeout for idle sockets being kept-alive.","Sets the maximum idle connection per host allowed in the …","Convenience method to make a <code>POST</code> request to a URL.","Add a <code>Proxy</code> to the list of proxies the <code>Client</code> will use.","Convenience method to make a <code>PUT</code> request to a URL.","Modify the query string of the URL.","","Set a <code>redirect::Policy</code> for this client.","Enable or disable automatic setting of the <code>Referer</code> header.","Get the remote address used to get this <code>Response</code>.","Start building a <code>Request</code> with the <code>Method</code> and <code>Url</code>.","Override DNS resolution for specific domains to a …","Override DNS resolution for specific domains to particular …","Constructs the Request and sends it the target URL, …","Create a <code>Body</code> from a <code>Read</code> where the size is known in …","Get the <code>StatusCode</code> of this <code>Response</code>.","Set that all sockets have <code>SO_KEEPALIVE</code> set with the …","Set whether sockets have <code>TCP_NODELAY</code> enabled.","Get the response text.","Get the response text given a specific encoding.","Set a timeout for connect, read and write operations of a …","Get the timeout.","Enables a request timeout.","Get a mutable reference to the timeout.","Controls the use of built-in system certificates during …","Add TLS information as <code>TlsInfo</code> extension to responses.","Controls the use of TLS server name indication.","","Attempts to clone the <code>Request</code>.","Attempts to clone the <code>RequestBuilder</code>.","","","","","","","","","","","","","","","","","","","","Get the url.","Get the final <code>Url</code> of this <code>Response</code>.","Get a mutable reference to the url.","Use a preconfigured TLS backend.","Force using the Rustls TLS backend.","Sets the <code>User-Agent</code> header to be used by this client.","Get the http version.","Get the HTTP <code>Version</code> of this <code>Response</code>.","Set HTTP version","Get a mutable reference to the http version.","Alias for an <code>Iterator</code> trait object over <code>SocketAddr</code>.","Trait for customizing DNS resolution in reqwest.","Alias for the <code>Future</code> type returned by a DNS resolver.","Performs DNS resolution on a <code>Name</code>. The return type is a …","Advertises which content types the client is able to …","Advertises which character set the client is able to …","Advertises which content encoding the client is able to …","Advertises which languages the client is able to …","Marker used by the server to advertise partial request …","Preflight response indicating if the response to the …","Preflight response indicating permitted HTTP headers.","Preflight header response indicating permitted access …","Indicates whether the response can be shared with …","Indicates which headers can be exposed as part of the …","Indicates how long the results of a preflight request can …","Informs the server which HTTP headers will be used when an …","Informs the server know which HTTP method will be used …","Indicates the time in seconds the object has been in a …","Lists the set of methods support by a resource.","Advertises the availability of alternate services to …","Contains the credentials to authenticate a user agent with …","A marker trait used to identify values that can be used as …","Specifies directives for caching mechanisms in both …","Indicates how caches have handled a response and its …","Specifies directives that allow origin servers to control …","Controls whether or not the network connection stays open …","Indicates if the content is expected to be displayed …","Used to compress the media-type.","Used to describe the languages intended for the audience.","Indicates the size of the entity-body.","Indicates an alternate location for the returned data.","Indicates where in a full body message a partial message …","Allows controlling resources the user agent is allowed to …","Allows experimenting with policies by monitoring their …","Used to indicate the media type of the resource.","Contains stored HTTP cookies previously sent by the server …","Contains the date and time at which the message was …","Indicates the client’s tracking preference.","A drain iterator for <code>HeaderMap</code>.","Identifier for a specific version of a resource.","Indicates expectations that need to be fulfilled by the …","Contains the date/time after which the response is …","A view into a single location in a <code>HeaderMap</code>, which may be …","Contains information from the client-facing side of proxy …","Contains an Internet email address for a human user who …","A view to all values stored in a single entry.","Specifies the domain name of the server and (optionally) …","A set of HTTP headers","Represents an HTTP header field name","Represents an HTTP header field value.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on the modification date.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on range.","Makes the request conditional based on the last …","A marker trait used to identify values that can be used as …","An owning iterator over the entries of a <code>HeaderMap</code>.","A possible error when converting a <code>HeaderName</code> from another …","A possible error when converting a <code>HeaderValue</code> from a …","<code>HeaderMap</code> entry iterator.","<code>HeaderMap</code> mutable entry iterator","An iterator over <code>HeaderMap</code> keys.","Content-Types that are acceptable for the response.","Allows the server to point an interested client to another …","Indicates the URL to redirect a page to.","Indicates the max number of intermediaries the request …","Indicates where a fetch originates from.","An occupied entry","A view into a single occupied location in a <code>HeaderMap</code>.","HTTP/1.0 header usually used for backwards compatibility.","Defines the authentication method that should be used to …","Contains the credentials to authenticate a user agent to a …","Associates a specific cryptographic public key with a …","Sends reports of pinning violation to the report-uri …","Indicates the part of a document that the server should …","Contains the address of the previous web page from which a …","Governs which referrer information should be included with …","Informs the web browser that the current page or frame …","The Retry-After response HTTP header indicates how long …","The |Sec-WebSocket-Accept| header field is used in the …","The |Sec-WebSocket-Extensions| header field is used in the …","The |Sec-WebSocket-Key| header field is used in the …","The |Sec-WebSocket-Protocol| header field is used in the …","The |Sec-WebSocket-Version| header field is used in the …","Contains information about the software used by the origin …","Used to send cookies from the server to the user agent.","Tells the client to communicate with HTTPS instead of …","Informs the server of transfer encodings willing to be …","Allows the sender to include additional fields at the end …","Specifies the form of encoding used to safely transfer the …","A possible error when converting a <code>HeaderValue</code> to a string …","Used as part of the exchange to upgrade the protocol.","Sends a signal to the server expressing the client’s …","Contains a string that allows identifying the requesting …","Determines how to match future requests with cached …","Added by proxies to track routing.","A vacant entry","A view into a single empty location in a <code>HeaderMap</code>.","An drain iterator of all values associated with a single …","An iterator of all values associated with a single header …","A mutable iterator of all values associated with a single …","<code>HeaderMap</code> value iterator.","<code>HeaderMap</code> mutable value iterator","General HTTP header contains information about possible …","Defines the authentication method that should be used to …","Marker used by the server to indicate that the MIME types …","Controls DNS prefetching.","Indicates whether or not a browser should be allowed to …","Stop pages from loading when an XSS attack is detected.","Inserts a key-value pair into the map.","Insert the value into the entry.","Converts a <code>HeaderValue</code> to a byte slice.","","","","Returns a <code>str</code> representation of the header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of headers the map can hold without …","","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","Returns true if the map contains a value for the specified …","","Clears the map, returning all entries as an iterator.","","","","Gets the given key’s corresponding entry in the map for …","","","","Performs a case-insensitive comparison of the string …","","","Performs a case-insensitive comparison of the string …","","","","","","","","","","","","","","Extend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a slice of bytes to an HTTP header name.","Attempt to convert a byte slice to a <code>HeaderValue</code>.","","Converts a slice of bytes to an HTTP header name.","Attempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.","Convert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …","Converts a HeaderName into a HeaderValue","Converts a static string to a HTTP header name.","Convert a static string to a <code>HeaderValue</code>.","","","Attempt to convert a string to a <code>HeaderValue</code>.","Returns a reference to the value associated with the key.","Get a reference to the first value in the entry.","Returns a view of all values associated with a key.","Returns a mutable reference to the value associated with …","Get a mutable reference to the first value in the entry.","","","Panics","Inserts a key-value pair into the map.","Insert the value into the entry.","Sets the value of the entry.","Insert the value into the entry.","Sets the value of the entry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a consuming iterator, that is, one that moves keys …","","","","","","","","","","","","","","","","Take ownership of the key","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns true if the map contains no elements.","Returns true if the <code>HeaderValue</code> has a length of zero bytes.","Returns <code>true</code> if the value represents sensitive data.","An iterator visiting all key-value pairs.","Returns an iterator visiting all values associated with …","Returns an iterator visiting all values associated with …","An iterator visiting all key-value pairs, with mutable …","Returns an iterator mutably visiting all values associated …","Returns a reference to the entry’s key","Returns a reference to the entry’s key","Returns a reference to the entry’s key.","An iterator visiting all keys.","Returns the number of keys stored in the map.","Returns the number of headers stored in the map.","Returns the length of <code>self</code>.","Create an empty <code>HeaderMap</code>.","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","","","","","","","Removes a key from the map, returning the value associated …","Remove the entry from the map.","Remove the entry from the map.","Remove the entry from the map.","Reserves capacity for at least <code>additional</code> more headers to …","Mark that the header value represents sensitive …","","","","","","","","","","","","","","Yields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …","","","","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values.","An iterator visiting all values mutably.","Create an empty <code>HeaderMap</code> with the specified capacity.","An action to perform when a redirect status code is found.","A type that holds information on the next request and …","A type that controls the policy on how to handle the …","","","","","","","Create a custom <code>Policy</code> using the passed function.","","Returns an action failing the redirect with an error.","","","","Returns an action meaning reqwest should follow the next …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a <code>Policy</code> with a maximum number of redirects.","Create a <code>Policy</code> that does not follow any redirect.","Get the list of previous URLs that have already been …","Apply this policy to a given <code>Attempt</code> to produce a <code>Action</code>.","Get the type of redirect.","Returns an action meaning reqwest should not follow the …","","","","","","","","","","Get the next URL to redirect to.","Represents a server X509 certificate.","Represents a private key and X509 cert as a client …","Version 1.0 of the TLS protocol.","Version 1.1 of the TLS protocol.","Version 1.2 of the TLS protocol.","Version 1.3 of the TLS protocol.","Hyper extension carrying extra TLS layer information. Made …","A TLS protocol version.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>Certificate</code> from a binary DER encoded certificate","Create a <code>Certificate</code> from a PEM encoded certificate","Parses PEM encoded private key and certificate.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the DER encoded leaf certificate of the peer.","","","","","","","","","","","","","","","",""],"i":[12,12,12,12,0,12,11,12,12,0,0,0,11,12,4,0,12,12,12,12,11,12,11,24,24,24,24,24,12,12,12,12,12,0,0,12,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,0,12,11,4,12,11,12,12,12,11,12,12,12,12,11,0,12,12,12,12,0,0,0,0,0,12,12,12,0,12,12,11,12,12,12,12,12,12,12,0,0,12,0,1,3,5,9,11,9,11,12,12,9,14,3,14,0,16,14,16,37,5,1,16,14,20,9,42,18,3,23,11,12,24,37,5,1,16,14,20,9,42,18,3,23,11,12,24,1,14,14,18,20,18,18,9,12,20,9,18,3,23,11,12,24,9,18,3,23,11,12,24,9,12,24,1,1,20,3,1,1,18,23,11,12,24,1,18,0,1,9,9,11,11,11,11,11,12,12,24,9,9,11,11,12,12,24,24,20,20,18,20,20,14,37,37,5,1,16,14,20,9,9,42,18,3,23,11,11,12,12,24,14,9,37,5,5,5,5,5,5,5,5,1,16,14,20,20,9,42,42,18,3,23,11,11,12,12,24,11,12,9,23,9,14,9,11,12,23,12,0,18,9,9,9,11,12,24,18,0,14,16,14,20,16,20,9,9,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,9,9,9,9,37,5,1,16,14,20,9,42,18,3,23,11,12,24,9,37,37,12,37,37,11,12,37,12,37,11,12,9,37,12,37,42,9,14,20,1,9,1,16,16,1,1,16,18,1,1,1,1,3,1,9,9,9,9,9,12,24,9,18,9,9,9,42,42,18,18,42,42,42,1,1,9,9,18,1,18,14,9,9,9,0,1,1,20,18,1,1,9,14,9,9,9,9,9,9,9,9,9,9,37,37,20,1,1,20,20,1,16,14,16,0,1,1,1,9,9,18,3,23,11,12,24,37,9,11,12,16,14,37,5,1,16,16,14,20,9,9,42,18,3,23,11,11,11,12,12,12,12,24,37,5,1,16,14,20,9,42,18,3,23,11,12,24,37,5,1,16,14,20,9,42,18,3,23,11,12,24,20,145,37,16,20,37,16,1,1,1,9,16,14,20,16,37,37,0,0,0,0,0,0,94,95,96,96,97,96,97,94,97,99,95,98,96,94,97,99,95,98,96,95,94,96,98,99,98,98,94,94,99,99,94,94,98,94,98,99,99,98,99,99,94,97,99,95,98,96,96,94,94,97,99,99,95,95,95,95,95,95,95,98,96,0,98,98,96,97,99,96,97,99,94,94,94,94,94,94,94,94,94,94,94,94,94,94,97,99,95,98,96,99,96,94,94,97,97,94,94,97,95,98,94,94,94,94,94,98,94,94,98,94,98,96,99,94,94,99,98,94,94,96,95,99,94,94,99,99,94,97,96,97,94,94,94,98,97,96,94,97,97,99,95,98,96,94,97,99,95,98,96,94,97,99,95,98,96,97,99,97,94,94,94,97,99,96,97,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,31,106,92,107,107,92,107,116,117,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,107,92,127,116,117,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,92,127,31,113,31,31,107,92,31,107,92,92,31,31,31,112,111,113,31,31,115,107,107,107,107,107,92,92,92,92,92,92,31,31,107,107,92,92,31,31,116,116,117,117,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,107,92,127,127,116,117,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,107,92,92,92,92,92,92,92,92,92,92,92,127,107,92,31,107,92,92,92,107,92,107,92,92,31,106,31,31,106,107,92,31,31,124,106,124,106,116,117,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,92,127,31,31,31,119,120,112,121,122,123,111,115,115,106,106,106,125,126,113,124,106,31,92,92,31,115,106,31,106,114,124,106,31,31,31,92,31,119,120,112,121,122,123,111,125,126,113,125,126,113,113,113,113,114,114,92,92,92,92,92,92,31,106,106,106,31,92,119,120,112,121,122,123,111,125,113,113,31,107,92,92,116,117,107,127,31,116,117,31,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,107,107,107,107,107,92,92,92,92,92,92,127,116,117,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,92,127,116,117,31,119,120,112,121,122,123,111,115,114,124,106,125,126,113,107,92,127,31,31,31,0,0,0,83,141,142,83,141,142,83,83,141,83,141,142,141,83,141,142,83,141,142,83,83,141,83,141,141,83,141,142,83,141,142,83,141,142,141,0,0,66,66,66,66,0,0,2,58,66,144,2,58,66,144,2,58,66,144,2,58,66,144,66,66,66,66,2,58,66,144,2,58,66,144,2,2,58,2,58,66,144,66,144,2,58,66,144,2,58,66,144,2,58,66,144,2,58,66,144],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[-1,[[4,[3]]],0],[5,[[8,[[7,[6]]]]]],[9,10],[11,10],[9,10],[11,10],[12,10],[12,13],[9,10],[[14,-1,[8,[-2]]],14,15,15],[[3,10,10],3],[[14,-1],14,15],0,[16,[[8,[5]]]],[[14,-1],14,[[17,[5]]]],[16,[[8,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[18]]]],[14,[[4,[16]]]],[14,[[19,[18,[4,[16]]]]]],[[],1],[20,[[4,[21]]]],[[18,16]],[[18,16]],[9,22],[12,[[8,[10]]]],[20,[[4,[[8,[21]]]]]],[9,9],[18,18],[3,3],[23,23],[11,11],[12,12],[24,24],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[9,9],25],[[12,12],25],[[24,24],25],[[1,26],1],[[1,22],1],[20,[[8,[27]]]],[-1,3,[28,29,30]],[[1,22],1],[[],1],[[],18],[[],23],[[],11],[[],12],[[],24],[[1,31],1],[[18,-1],14,32],0,[[1,[33,[-1]]],1,34],[9,[[8,[10]]]],[[9,9],22],[[11,10],22],[[11,11],22],[[11,10],22],[[11,11],22],[[11,11],22],[[12,13],22],[[12,12],22],[[24,24],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[20,[[4,[20]]]],[20,[[4,[20]]]],[[18,16],[[0,[35]]]],[20,36],[20,36],[14,14],[[37,38],39],[[37,38],39],[[5,38],39],[[1,38],39],[[16,38],39],[[14,38],39],[[20,38],39],[[9,38],[[41,[19,40]]]],[[9,38],[[41,[19,40]]]],[[42,38],39],[[18,38],39],[[3,38],39],[[23,38],39],[[11,38],[[41,[19,40]]]],[[11,38],[[41,[19,40]]]],[[12,38],[[41,[19,40]]]],[[12,38],[[41,[19,40]]]],[[24,38],[[41,[19,40]]]],[[14,-1],14,[43,44]],[9,[[8,[10]]]],[-1,-1,[]],[20,5],[45,5],[10,5],[46,5],[[[7,[6]]],5],[21,5],[-1,-1,[]],[[[47,[6]]],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]]],20,[[17,[5]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[49,42],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,11],[-1,-1,[]],[12,12],[-1,-1,[]],[[[7,[6]]],[[41,[11,50]]]],[[[7,[6]]],[[41,[12,51]]]],[-1,[[41,[9,19]]],[[53,[52]]]],[[],[[8,[23]]]],[-1,[[41,[9,19]]],[[53,[52]]]],[[18,16],14],[10,[[41,[9,54]]]],[10,[[41,[11]]]],[10,[[41,[12,51]]]],[10,[[8,[23]]]],[13,[[41,[12,51]]]],[-1,[[4,[20]]],32],[[18,-1],14,32],[9,22],[9,22],[[9,-1],19,55],[[11,-1],19,55],[[12,-1],19,55],[[24,-1],19,55],[[18,-1],14,32],0,[[14,-1,-2],14,[],[]],[16,31],[[14,31],14],[20,31],[16,31],[20,31],[9,[[8,[[56,[10]]]]]],[9,[[8,[10]]]],[-1,[[4,[3]]],0],[1,1],[[1,22],1],[[1,22],1],[[1,22],1],[1,1],[1,1],[[1,22],1],[[1,-1],1,[[17,[[8,[57]]]]]],[[1,-1],1,[[17,[[8,[57]]]]]],[[1,-1],1,[[17,[[8,[26]]]]]],[[1,26],1],[[1,22],1],[[1,-1],1,[[17,[[8,[57]]]]]],[1,1],[-1,[[4,[3]]],0],[[1,22],1],[[1,58],1],[[9,[60,[59]]],10],[[9,[61,[59]]],10],[[9,62],10],[[9,[63,[59]]],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,45],[37,22],[37,22],[12,22],[37,22],[37,22],[11,22],[12,22],[37,22],[12,22],[37,22],[11,22],[12,22],[9,22],[37,22],[12,22],[37,22],[42,22],[[9,10],[[41,[9,54]]]],[[14,-1],14,[43,44]],[20,[[4,[-1]]],64],[[1,-1],1,[[17,[[8,[65]]]]]],[[9,9],[[8,[45]]]],[[1,66],1],[16,11],[16,11],[[1,66],1],[[],1],[[11,9],16],[[],18],[1,1],[1,1],[1,1],[1,1],[[3,[8,[23]]],3],[1,1],[[],67],[9,68],[10,[[41,[9,54]]]],[[10,-1],[[41,[9,54]]],69],[[9,9],[[8,[25]]]],[[12,12],[[8,[25]]]],[[24,24],[[8,[25]]]],[9,[[8,[10]]]],[[18,-1],14,32],[9,10],[9,[[8,[[71,[70]]]]]],[9,[[41,[72,19]]]],[[[73,[42]],74],[[76,[[75,[19]]]]]],[[[73,[42]],74,77],[[76,[[75,[19]]]]]],[[18,74],[[76,[[41,[19]]]]]],[[18,74],[[76,[[41,[19]]]]]],[[[73,[42]],74],[[76,[[75,[19]]]]]],[[[73,[42]],74,[7,[6]]],[[76,[[75,[78]]]]]],[[[73,[42]],74,[7,[79]]],[[76,[[75,[78]]]]]],[[1,-1],1,[[17,[[8,[26]]]]]],[[1,78],1],[9,[[8,[13]]]],[9,[[8,[13]]]],[[18,-1],14,32],[[1,3],1],[[18,-1],14,32],[[14,-1],14,[43,44]],[9,[[8,[10]]]],[9,80],[9,[[82,[81]]]],0,[[1,83],1],[[1,22],1],[20,[[8,[84]]]],[[18,11,-1],14,32],[[1,10,84],1],[[1,10,[7,[84]]],1],[9,10],[14,[[0,[35]]]],[[9,[8,[10]]],19],[[9,[8,[10]]],[[41,[19,54]]]],[[9,65],[[41,[19,19]]]],[[9,[8,[10]]],[[41,[19,19]]]],[[9,10],19],[[9,[8,[13]]],[[41,[19,19]]]],[[9,[8,[10]]],19],[[9,10],[[41,[19,19]]]],[[9,10],[[41,[19,19]]]],[[9,-1],[[41,[[47,[84,85]],86]]],28],[37,[[8,[87]]]],[37,[[8,[12]]]],[20,12],[[1,-1],1,[[17,[[8,[26]]]]]],[[1,22],1],[20,[[4,[45]]]],[[20,10],[[4,[45]]]],[[1,26],1],[16,[[8,[26]]]],[[14,26],14],[16,[[8,[26]]]],0,[[1,22],1],[[1,22],1],[[1,22],1],[9,[[41,[88,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[16,[[8,[16]]]],[14,[[8,[14]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[[[89,[-1]]],[[4,[16]]],[[17,[5]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[10,[[41,[9]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[[[7,[6]]],[[41,[11]]]],[10,[[41,[11]]]],[10,[[41,[12]]]],[-1,[[41,[-2]]],[],[]],[13,[[41,[12]]]],[[[7,[6]]],[[41,[12]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[20,[[4,[42]]]],[[-1,9],-1,[]],[37,[[8,[9]]]],[16,9],[20,9],[37,[[8,[9]]]],[16,9],[[1,-1],1,91],[1,1],[[1,-1],1,[[93,[92]]]],[9,10],[16,24],[[14,24],14],[20,24],[16,24],[[37,9],37],[37,37],0,0,0,0,0,0,[[94,2],94],[95,[[8,[[7,[6]]]]]],[[96,-1,[8,[-2]]],96,15,15],[[96,-1],96,15],[97,[[8,[95]]]],[[96,-1],96,[[17,[95]]]],[97,[[8,[95]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[95,[[41,[[7,[6]],37]]]],[94,[[4,[98]]]],[96,[[4,[97]]]],[[],94],[99,[[4,[21]]]],[98,98],[[-1,-2],19,[],[]],[[94,-1],94,[[17,[[8,[26]]]]]],[[94,22],94],[99,[[8,[27]]]],[[99,-1],[[4,[27]]],[100,44]],[[94,22],94],[[],94],[[],98],[[94,31],94],[[98,-1],96,32],[99,[[4,[99]]]],[99,[[4,[99]]]],[[98,97],[[4,[99]]]],[99,36],[99,36],[[94,38],39],[[97,38],39],[[99,38],39],[[95,38],39],[[98,38],39],[[96,38],39],[[96,-1],96,[43,44]],[1,94],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]]],99,[[17,[5]]]],[-1,-1,[]],[[[7,[6]]],95],[[[47,[6]]],95],[21,95],[101,95],[10,95],[-1,-1,[]],[45,95],[-1,-1,[]],[-1,-1,[]],[-1,[[4,[99]]],32],[[98,-1],96,32],[[98,-1],96,32],[[96,-1,-2],96,[],[]],[97,31],[99,31],[[96,31],96],[97,31],[99,31],[94,94],[[94,22],94],[[94,22],94],[[94,22],94],[94,94],[94,94],[[94,22],94],[[94,-1],94,[[17,[[8,[57]]]]]],[[94,-1],94,[[17,[[8,[57]]]]]],[[94,-1],94,[[17,[[8,[57]]]]]],[94,94],[[94,22],94],[[94,58],94],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[99,[[4,[-1]]],64],[[96,-1],96,[43,44]],[[94,-1],94,[[17,[[8,[65]]]]]],[[94,66],94],[97,11],[97,11],[[94,66],94],[[],94],[[11,9],97],[-1,95,[102,29]],[[],98],[94,94],[94,94],[94,94],[94,94],[94,94],[[98,-1],96,32],[[94,-1],94,[[17,[[8,[26]]]]]],[[94,78],94],[[98,-1],96,32],[[94,3],94],[[98,-1],96,32],[[96,-1],96,[43,44]],[[99,[7,[6]]],[[75,[78]]]],[[94,83],94],[[94,22],94],[99,[[8,[84]]]],[[98,11,-1],96,32],[[94,10,84],94],[[94,10,[7,[84]]],94],[96,[[4,[99]]]],[[-1,27],95,[102,29]],[99,12],[[94,-1],94,[[17,[[8,[26]]]]]],[[94,22],94],[99,[[4,[45]]]],[[99,10],[[4,[45]]]],[[94,-1],94,[[17,[[8,[26]]]]]],[97,[[8,[26]]]],[[96,26],96],[97,[[8,[26]]]],[[94,22],94],[[94,22],94],[[94,22],94],[-1,-2,[],[]],[97,[[8,[97]]]],[96,[[8,[96]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[[[89,[-1]]],[[4,[97]]],[[17,[95]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[97,9],[99,9],[97,9],[[94,-1],94,91],[94,94],[[94,-1],94,[[93,[92]]]],[97,24],[99,24],[[96,24],96],[97,24],0,0,0,[[-1,103],104,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[31,[-1]],-2,-1],22,[],105],[[[106,[-1]],-1],19,[]],[92,[[7,[6]]]],[107,10],[107,[[7,[6]]]],[92,[[7,[6]]]],[107,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[107,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[-1]]],78,[]],[-1,[[108,[-2]]],[],[]],[[[31,[-1]]],19,[]],[[[31,[-1]]],[[31,[-1]]],109],[107,107],[92,92],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[92,92],25],[[[31,[-1]],-2],22,[],110],[[],[[31,[-1]]],[]],[[[31,[-1]]],[[111,[-1]]],[]],[[[112,[-1]]],19,[]],[[[111,[-1]]],19,[]],[[[113,[-1]]],19,[]],[[[31,[-1]],-2],[[114,[-1]]],[],105],[[[31,[-1]],[31,[-1]]],22,[]],[[[115,[-1]],[115,[-1]]],22,[]],[[107,107],22],[[107,10],22],[[107,107],22],[[107,107],22],[[107,10],22],[[92,-1],22,44],[[92,92],22],[[92,10],22],[[92,[7,[6]]],22],[[92,45],22],[[92,92],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[[31,[-1]],-2],19,[],69],[[[31,[-1]],-2],19,[],69],[[116,38],[[41,[19,40]]]],[[116,38],[[41,[19,40]]]],[[117,38],[[41,[19,40]]]],[[117,38],[[41,[19,40]]]],[[[31,[-1]],38],[[41,[19,40]]],118],[[[119,[-1]],38],[[41,[19,40]]],118],[[[120,[-1]],38],[[41,[19,40]]],118],[[[112,[-1]],38],[[41,[19,40]]],118],[[[121,[-1]],38],[[41,[19,40]]],118],[[[122,[-1]],38],[[41,[19,40]]],118],[[[123,[-1]],38],[[41,[19,40]]],118],[[[111,[-1]],38],[[41,[19,40]]],118],[[[115,[-1]],38],[[41,[19,40]]],118],[[[114,[-1]],38],[[41,[19,40]]],118],[[[124,[-1]],38],[[41,[19,40]]],118],[[[106,[-1]],38],[[41,[19,40]]],118],[[[125,[-1]],38],[[41,[19,40]]],118],[[[126,[-1]],38],[[41,[19,40]]],118],[[[113,[-1]],38],[[41,[19,40]]],118],[[107,38],[[41,[19,40]]]],[[107,38],[[41,[19,40]]]],[[92,38],[[41,[19,40]]]],[[127,38],[[41,[19,40]]]],[[127,38],[[41,[19,40]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[107,107],[-1,-1,[]],[107,92],[78,92],[57,92],[128,92],[129,92],[27,92],[130,92],[131,92],[92,92],[13,92],[-1,-1,[]],[-1,-1,[]],[[[7,[6]]],[[41,[107,116]]]],[[[7,[6]]],[[41,[92,117]]]],[-1,[[31,[-2]]],69,[]],[[[7,[6]]],[[41,[107,116]]]],[-1,[[41,[92,117]]],[[53,[[7,[6]]]]]],[-1,92,[[53,[[7,[6]]]]]],[107,92],[10,107],[10,92],[10,[[41,[107,116]]]],[10,[[41,[92]]]],[10,[[41,[92,117]]]],[[[31,[-1]],-2],[[8,[-1]]],[],110],[[[106,[-1]]],-1,[]],[[[31,[-1]],-2],[[115,[-1]]],[],110],[[[31,[-1]],-2],[[8,[-1]]],[],110],[[[106,[-1]]],-1,[]],[[107,-1],19,55],[[92,-1],19,55],[[[31,[-1]],-2],-1,[],110],[[[31,[-1]],-2,-1],[[8,[-1]]],[],105],[[[124,[-1]],-1],-1,[]],[[[106,[-1]],-1],-1,[]],[[[124,[-1]],-1],[[106,[-1]]],[]],[[[106,[-1]],-1],[[113,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[-1]]],[[119,[-1]]],[]],[[[31,[-1]]],[[120,[-1]]],[]],[[[31,[-1]]],[[112,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[115,[-1]]],[[125,[-1]]],[]],[[[115,[-1]]],[[125,[-1]]],[]],[[[106,[-1]]],[[125,[-1]]],[]],[[[106,[-1]]],[[126,[-1]]],[]],[[[106,[-1]]],[[126,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1]]],107,[]],[[[106,[-1]]],-1,[]],[[[31,[-1]]],22,[]],[92,22],[92,22],[[[31,[-1]]],[[119,[-1]]],[]],[[[115,[-1]]],[[125,[-1]]],[]],[[[106,[-1]]],[[125,[-1]]],[]],[[[31,[-1]]],[[120,[-1]]],[]],[[[106,[-1]]],[[126,[-1]]],[]],[[[114,[-1]]],107,[]],[[[124,[-1]]],107,[]],[[[106,[-1]]],107,[]],[[[31,[-1]]],[[121,[-1]]],[]],[[[31,[-1]]],78,[]],[[[31,[-1]]],78,[]],[92,78],[[],[[31,[92]]]],[[[119,[-1]]],8,[]],[[[120,[-1]]],8,[]],[[[112,[-1]]],8,[]],[[[121,[-1]]],8,[]],[[[122,[-1]]],8,[]],[[[123,[-1]]],8,[]],[[[111,[-1]]],8,[]],[[[125,[-1]]],8,[]],[[[126,[-1]]],8,[]],[[[113,[-1]]],[[8,[-1]]],[]],[[[125,[-1]]],8,[]],[[[126,[-1]]],8,[]],[-1,[[132,[-2]]],[],[]],[-1,[[133,[-2]]],[],[]],[-1,[[132,[-2]]],[],[]],[-1,[[133,[-2]]],[],[]],[[[114,[-1]],-1],-1,[]],[[[114,[-1]],-2],-1,[],134],[[92,45],[[8,[25]]]],[[92,92],[[8,[25]]]],[[92,92],[[8,[25]]]],[[92,10],[[8,[25]]]],[[92,[7,[6]]],[[8,[25]]]],[[92,-1],[[8,[25]]],44],[[[31,[-1]],-2],[[8,[-1]]],[],110],[[[106,[-1]]],-1,[]],[[[106,[-1]]],[[19,[107,-1]]],[]],[[[106,[-1]]],[[19,[107,[113,[-1]]]]],[]],[[[31,[-1]],78],19,[]],[[92,22],19],[[[119,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[120,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[112,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[121,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[122,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[123,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[111,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[125,[-1]]],[[19,[78,[8,[78]]]]],[]],[[[113,[-1]]],[[19,[78,[8,[78]]]]],[]],[-1,[[135,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,[[41,[10,127]]]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[[31,[-1]],-2],[[41,[[114,[-1]],116]]],[],110],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[[[137,[-1,-2,136]]],[[41,[[31,[-3]]]]],[138,139],[],[[140,[-2]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[45,[[41,[107]]]],[45,[[41,[107]]]],[10,[[41,[107]]]],[[[7,[6]]],[[41,[107]]]],[-1,[[41,[-2]]],[],[]],[[[47,[6,85]]],[[41,[107]]]],[[[47,[6,85]]],[[41,[92]]]],[45,[[41,[92]]]],[-1,[[41,[-2]]],[],[]],[10,[[41,[92]]]],[45,[[41,[92]]]],[[[7,[6]]],[[41,[92]]]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[[[31,[-1]]],[[122,[-1]]],[]],[[[31,[-1]]],[[123,[-1]]],[]],[78,[[31,[-1]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,83,[28,29,30]],[[],83],[[141,-1],142,[[17,[[143,[87]]]]]],[[83,38],39],[[141,38],39],[[142,38],39],[141,142],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[78,83],[[],83],[141,[[7,[9]]]],[[83,141],142],[141,12],[141,142],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[141,9],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[58,58],[66,66],[144,144],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[66,66],25],[[66,66],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[2,38],39],[[58,38],39],[[66,38],39],[[144,38],39],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[7,[6]]],[[4,[2]]]],[[[7,[6]]],[[4,[2]]]],[[[7,[6]]],[[4,[58]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[66,66],[[8,[25]]]],[144,[[8,[[7,[6]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,90,[]],[-1,90,[]],[-1,90,[]],[-1,90,[]]],"c":[316],"p":[[3,"ClientBuilder",0],[3,"Certificate",1159],[3,"Proxy",0],[6,"Result",0],[3,"Body",0],[15,"u8"],[15,"slice"],[4,"Option",1220],[3,"Url",0],[15,"str"],[3,"Method",0],[3,"StatusCode",0],[15,"u16"],[3,"RequestBuilder",0],[8,"Display",1221],[3,"Request",0],[8,"Into",1222],[3,"Client",0],[15,"tuple"],[3,"Response",0],[3,"Bytes",1223],[15,"bool"],[3,"NoProxy",0],[3,"Version",0],[4,"Ordering",1224],[3,"Duration",1225],[15,"u64"],[8,"Fn",1226],[8,"Send",1227],[8,"Sync",1227],[3,"HeaderMap",671],[8,"IntoUrl",0],[3,"Arc",1228],[8,"Resolve",667],[8,"Future",1229],[3,"Extensions",1230],[3,"Error",0],[3,"Formatter",1221],[6,"Result",1221],[3,"Error",1221],[4,"Result",1231],[3,"Upgraded",0],[8,"Serialize",1232],[8,"Sized",1227],[3,"String",1233],[3,"Body",1234],[3,"Vec",1235],[3,"Response",1236],[3,"Upgraded",1237],[3,"InvalidMethod",1238],[3,"InvalidStatusCode",1239],[3,"Path",1240],[8,"AsRef",1222],[4,"ParseError",1241],[8,"Hasher",1242],[4,"Host",1243],[15,"u32"],[3,"Identity",1159],[4,"Position",1244],[3,"RangeTo",1245],[3,"RangeFrom",1245],[3,"RangeFull",1245],[3,"Range",1245],[8,"DeserializeOwned",1246],[4,"IpAddr",1247],[3,"Version",1159],[3,"ParseOptions",1248],[4,"Origin",1249],[8,"IntoIterator",1250],[15,"char"],[3,"Split",1251],[3,"PathSegmentsMut",1252],[3,"Pin",1253],[3,"Context",1254],[6,"Result",1255],[4,"Poll",1256],[3,"ReadBuf",1257],[15,"usize"],[3,"IoSlice",1258],[3,"Parse",1259],[3,"UrlQuery",1248],[3,"Serializer",1259],[3,"Policy",1121],[4,"SocketAddr",1260],[3,"Global",1261],[3,"Error",1255],[8,"Error",1262],[3,"PathBuf",1240],[3,"Request",1263],[3,"TypeId",1264],[8,"Any",1264],[3,"HeaderValue",671],[8,"TryInto",1222],[3,"ClientBuilder",496],[3,"Body",496],[3,"RequestBuilder",496],[3,"Request",496],[3,"Client",496],[3,"Response",496],[8,"Write",1258],[3,"File",1265],[8,"Read",1258],[3,"Name",1266],[6,"Resolving",667],[8,"IntoHeaderName",671],[3,"OccupiedEntry",671],[3,"HeaderName",671],[3,"Replacements",1267],[8,"Clone",1268],[8,"AsHeaderName",671],[3,"Drain",671],[3,"IntoIter",671],[3,"ValueDrain",671],[4,"Entry",671],[3,"GetAll",671],[3,"InvalidHeaderName",671],[3,"InvalidHeaderValue",671],[8,"Debug",1221],[3,"Iter",671],[3,"IterMut",671],[3,"Keys",671],[3,"Values",671],[3,"ValuesMut",671],[3,"VacantEntry",671],[3,"ValueIter",671],[3,"ValueIterMut",671],[3,"ToStrError",671],[15,"i64"],[15,"isize"],[15,"i16"],[15,"i32"],[3,"Recompositions",1269],[3,"Decompositions",1270],[8,"FnOnce",1226],[3,"StreamSafe",1271],[3,"RandomState",1272],[3,"HashMap",1272],[8,"Eq",1224],[8,"Hash",1242],[8,"TryFrom",1222],[3,"Attempt",1121],[3,"Action",1121],[3,"Box",1273],[3,"TlsInfo",1159],[8,"ResponseBuilderExt",0]]},\
"rfc6979":{"doc":"RustCrypto: RFC6979 Deterministic Signatures","tn":["ByteArray","HmacDrbg","borrow","borrow_mut","consts","fill_bytes","from","generate_k","into","new","try_from","try_into","type_id","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"rfc6979"],[13,"rfc6979::consts"],[3403,"digest::digest"],[3404,"crypto_common"],[3405,"digest"],[3406,"generic_array"],[3407,"core::result"],[3408,"core::any"],[3409,"typenum::marker_traits"],[3410,"typenum::marker_traits"],[3411,"typenum::marker_traits"],[3412,"core::fmt"],[3413,"typenum::int"],[3414,"typenum::marker_traits"],[3415,"typenum::array"]],"d":["Array of bytes representing a scalar serialized as a big …","Internal implementation of <code>HMAC_DRBG</code> as described in NIST …","","","Type aliases for many constants.","Write the next <code>HMAC_DRBG</code> output to the given byte slice.","Returns the argument unchanged.","Deterministically generate ephemeral scalar <code>k</code>.","Calls <code>U::from(self)</code>.","Initialize <code>HMAC_DRBG</code>","","","","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,14,16,16,14,14,16,14,14,16,16,14,16,12,14,16,12,14,16,12,14,16,12,14,16,12,14,16,12,12,14,16,12,14,16,12,14,16,12,14,16,12,14,16,12,14,16,12,14,14,16,16,12,12,12,14,14,16,16,12,12,12,12,12,12,12,14,14,16,16,12,14,16,14,16,12,12,12,12,12,12,12,12,12,14,16,12,12,12,12,12,12,12,12,12,14,16,12,14,16,14,16,12,14,16,12,14,16,12],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[-1]],[3,[2]]],4,[5,6,7]],[-1,-1,[]],[[[8,[-1]],[8,[-1]],[8,[-1]],[3,[2]]],[[8,[-1]]],[[9,[2]]]],[-1,-2,[],[]],[[[3,[2]],[3,[2]],[3,[2]]],[[1,[-1]]],[5,6,7]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,-1],[],13],[[14,-1],[],15],[[16,16]],[[16,14]],[[14,16]],[[14,14]],[[16,-1],[],15],[[14,14]],[[14,16]],[[16,16]],[[16,14]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[16,16],[12,12],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[14,14],17],[[16,16],17],[[12,12],17],[[],14],[[],16],[[],12],[[12,-1],[],[13,18]],[[14,14],19],[[16,16],19],[[12,12],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[14,20],[[10,[4,21]]]],[[16,20],[[10,[4,21]]]],[[12,20],[[10,[4,21]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[14,-1],4,22],[[16,-1],4,22],[[12,-1],4,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[14,16],16],[[14,14],14],[[16,16],16],[[16,14],16],[[12,[23,[-1]]],[],[24,18]],[[12,12]],[[12,[25,[-1]]],[],[24,18]],[[14,14],14],[[14,16],14],[[16,16],16],[[16,14],14],[[12,[23,[-1]]],[],[24,18]],[[12,[25,[-1]]],[],[24,18]],[[12,12]],[[12,[26,[-1,-2]]],[],[],[]],[[12,27]],[[12,-1],[],13],[12],[[],14],[[],14],[[],16],[[],16],[[],12],[14],[16],[[14,14],[[28,[17]]]],[[16,16],[[28,[17]]]],[[12,12],[[28,[17]]]],[[-1,-2],[],[],[]],[[12,[23,[-1]]],[],[24,18]],[[12,12]],[[12,[25,[-1]]],[],[24,18]],[[12,-1],[],[13,18]],[[12,12]],[[12,[25,[-1]]],[],[24,18]],[[12,[23,[-1]]],[],[24,18]],[[],19],[[],19],[[],29],[[],30],[[],31],[[],32],[[],31],[[],32],[[],29],[[],30],[[],33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],2],[[],2],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[3,"HmacDrbg",0],[15,"u8"],[15,"slice"],[15,"tuple"],[8,"Digest",3403],[8,"BlockSizeUser",3404],[8,"FixedOutputReset",3405],[6,"ByteArray",0],[8,"ArrayLength",3406],[4,"Result",3407],[3,"TypeId",3408],[3,"Z0",13],[8,"Integer",3409],[3,"B0",13],[8,"Bit",3409],[3,"B1",13],[4,"Ordering",3410],[8,"NonZero",3409],[15,"bool"],[3,"Formatter",3411],[3,"Error",3411],[8,"Hasher",3412],[3,"PInt",3413],[8,"Unsigned",3409],[3,"NInt",3413],[3,"TArr",3414],[3,"ATerm",3414],[4,"Option",3415],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"]]},\
"ring":{"doc":"Safe, fast, small crypto using Rust with BoringSSL’s …","t":"AAAAAAAAAAAAAAOHHDDIHDRRDIDDDDKKLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRDRDRLLLLLLLLLLLLLLLLLLLHHDHDGLLLLLLLLLLLLLLLLLLLLLLLLDHHDDDHFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDDDRRRHRHRHRHHRRLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDHHHHIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLDDHHHHDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLFLDLLLLLLLLLLLLDHHHHLLLLFLLLLLLLLFDLLLLLLLLDIIDLLLLLLLKLLLLFLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLMMLLMLMMLLLLLLLLLLLLLLLLLLLLLHHHHHHHHHHHRDDDDDIQHHHHHHHHHHHHHHHHHIGCDDDILLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLDDLLLLFFFFFLLLLLLLLMMLLLFLLFLLLLLL","n":["aead","agreement","constant_time","digest","error","hkdf","hmac","io","pbkdf2","pkcs8","rand","rsa","signature","test","test_file","AES_128_GCM","AES_256_GCM","Aad","Algorithm","BoundKey","CHACHA20_POLY1305","LessSafeKey","MAX_TAG_LEN","NONCE_LEN","Nonce","NonceSequence","OpeningKey","SealingKey","Tag","UnboundKey","advance","algorithm","algorithm","algorithm","algorithm","algorithm","as_ref","as_ref","as_ref","assume_unique_for_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chacha20_poly1305_openssh","clone","clone","clone","clone_into","clone_into","clone_into","empty","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","key_len","len","new","new","new","new","new","nonce_len","open_in_place","open_in_place","open_in_place_separate_tag","open_within","open_within","quic","seal_in_place_append_tag","seal_in_place_append_tag","seal_in_place_separate_tag","seal_in_place_separate_tag","tag_len","to_owned","to_owned","to_owned","try_assume_unique_for_key","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","KEY_LEN","OpeningKey","PACKET_LENGTH_LEN","SealingKey","TAG_LEN","borrow","borrow","borrow_mut","borrow_mut","decrypt_packet_length","from","from","into","into","new","new","open_in_place","seal_in_place","try_from","try_from","try_into","try_into","type_id","type_id","AES_128","AES_256","Algorithm","CHACHA20","HeaderProtectionKey","Sample","algorithm","borrow","borrow","borrow_mut","borrow_mut","eq","equivalent","fmt","from","from","from","into","into","key_len","len","new","new_mask","sample_len","try_from","try_from","try_into","try_into","type_id","type_id","Algorithm","ECDH_P256","ECDH_P384","EphemeralPrivateKey","PublicKey","UnparsedPublicKey","X25519","agree_ephemeral","algorithm","algorithm","algorithm","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","compute_public_key","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","generate","into","into","into","into","new","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_slices_are_equal","Algorithm","Context","Digest","MAX_BLOCK_LEN","MAX_CHAINING_LEN","MAX_OUTPUT_LEN","SHA1_FOR_LEGACY_USE_ONLY","SHA1_OUTPUT_LEN","SHA256","SHA256_OUTPUT_LEN","SHA384","SHA384_OUTPUT_LEN","SHA512","SHA512_256","SHA512_256_OUTPUT_LEN","SHA512_OUTPUT_LEN","algorithm","algorithm","as_ref","block_len","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chaining_len","clone","clone","clone_into","clone_into","digest","eq","equivalent","finish","fmt","fmt","from","from","from","into","into","into","new","output_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","KeyRejected","Unspecified","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Algorithm","HKDF_SHA1_FOR_LEGACY_USE_ONLY","HKDF_SHA256","HKDF_SHA384","HKDF_SHA512","KeyType","Okm","Prk","Salt","algorithm","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","expand","extract","fill","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hmac_algorithm","into","into","into","into","len","len","len","new","new_less_safe","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Algorithm","Context","HMAC_SHA1_FOR_LEGACY_USE_ONLY","HMAC_SHA256","HMAC_SHA384","HMAC_SHA512","Key","Tag","algorithm","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","digest_algorithm","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","generate","into","into","into","into","len","new","sign","sign","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","verify","with_key","Positive","big_endian_without_leading_zero","borrow","borrow_mut","clone","clone_into","first_byte","from","into","to_owned","try_from","try_into","type_id","Algorithm","PBKDF2_HMAC_SHA1","PBKDF2_HMAC_SHA256","PBKDF2_HMAC_SHA384","PBKDF2_HMAC_SHA512","borrow","borrow_mut","clone","clone_into","derive","eq","equivalent","from","into","to_owned","try_from","try_into","type_id","verify","Document","as_ref","borrow","borrow_mut","from","into","try_from","try_into","type_id","Random","RandomlyConstructable","SecureRandom","SystemRandom","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","expose","fill","fill","fmt","from","from","generate","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","KeyPair","KeyPairComponents","PublicKey","PublicKeyComponents","RsaParameters","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","d","dP","dQ","e","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_components","from_der","from_pkcs8","into","into","into","into","into","modulus_len","n","p","public","public_key","public_key","public_modulus_len","q","qInv","sign","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","verify","ECDSA_P256_SHA256_ASN1","ECDSA_P256_SHA256_ASN1_SIGNING","ECDSA_P256_SHA256_FIXED","ECDSA_P256_SHA256_FIXED_SIGNING","ECDSA_P256_SHA384_ASN1","ECDSA_P384_SHA256_ASN1","ECDSA_P384_SHA384_ASN1","ECDSA_P384_SHA384_ASN1_SIGNING","ECDSA_P384_SHA384_FIXED","ECDSA_P384_SHA384_FIXED_SIGNING","ED25519","ED25519_PUBLIC_KEY_LEN","EcdsaKeyPair","EcdsaSigningAlgorithm","EcdsaVerificationAlgorithm","Ed25519KeyPair","EdDSAParameters","KeyPair","PublicKey","RSA_PKCS1_1024_8192_SHA1_FOR_LEGACY_USE_ONLY","RSA_PKCS1_1024_8192_SHA256_FOR_LEGACY_USE_ONLY","RSA_PKCS1_1024_8192_SHA512_FOR_LEGACY_USE_ONLY","RSA_PKCS1_2048_8192_SHA1_FOR_LEGACY_USE_ONLY","RSA_PKCS1_2048_8192_SHA256","RSA_PKCS1_2048_8192_SHA384","RSA_PKCS1_2048_8192_SHA512","RSA_PKCS1_3072_8192_SHA384","RSA_PKCS1_SHA256","RSA_PKCS1_SHA384","RSA_PKCS1_SHA512","RSA_PSS_2048_8192_SHA256","RSA_PSS_2048_8192_SHA384","RSA_PSS_2048_8192_SHA512","RSA_PSS_SHA256","RSA_PSS_SHA384","RSA_PSS_SHA512","RsaEncoding","RsaKeyPair","RsaParameters","RsaPublicKeyComponents","Signature","UnparsedPublicKey","VerificationAlgorithm","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","e","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_pkcs8","from_pkcs8","from_pkcs8_maybe_unchecked","from_private_key_and_public_key","from_seed_and_public_key","from_seed_unchecked","generate_pkcs8","generate_pkcs8","into","into","into","into","into","into","into","n","new","public_key","public_key","public_key","sign","sign","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","verify","verify","File","TestCase","borrow","borrow","borrow_mut","borrow_mut","compile_time_assert_clone","compile_time_assert_copy","compile_time_assert_eq","compile_time_assert_send","compile_time_assert_sync","consume_bool","consume_bytes","consume_digest_alg","consume_optional_bytes","consume_optional_string","consume_string","consume_usize","consume_usize_bits","contents","file_name","fmt","from","from","from_hex","into","into","run","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"ring"],[15,"ring::aead"],[141,"ring::aead::chacha20_poly1305_openssh"],[165,"ring::aead::quic"],[195,"ring::agreement"],[252,"ring::constant_time"],[253,"ring::digest"],[310,"ring::error"],[342,"ring::hkdf"],[403,"ring::hmac"],[469,"ring::io"],[482,"ring::pbkdf2"],[501,"ring::pkcs8"],[510,"ring::rand"],[537,"ring::rsa"],[612,"ring::signature"],[740,"ring::test"],[774,"core::result"],[775,"core::convert"],[776,"core::clone"],[777,"core::cmp"],[778,"core::fmt"],[779,"core::fmt"],[780,"core::convert"],[781,"core::any"],[782,"core::ops::function"],[783,"untrusted::reader"],[784,"core::array"],[785,"alloc::string"],[786,"core::num::nonzero"],[787,"core::iter::traits::collect"],[788,"alloc::vec"],[789,"core::option"],[790,"core::ops::function"]],"d":["Authenticated Encryption with Associated Data (AEAD).","Key Agreement: ECDH, including X25519.","Constant-time operations.","SHA-2 and the legacy SHA-1 digest algorithm.","Error reporting.","HMAC-based Extract-and-Expand Key Derivation Function.","HMAC is specified in RFC 2104.","Serialization and deserialization.","PBKDF2 derivation and verification.","PKCS#8 is specified in RFC 5958.","Cryptographic pseudo-random number generation.","RSA.","Public key signatures: signing and verification.","Testing framework.","References a test input file.","AES-128 in GCM mode with 128-bit tags and 96 bit nonces.","AES-256 in GCM mode with 128-bit tags and 96 bit nonces.","The additionally authenticated data (AAD) for an opening …","An AEAD Algorithm.","An AEAD key bound to a nonce sequence.","ChaCha20-Poly1305 as described in RFC 8439.","Immutable keys for use in situations where <code>OpeningKey</code>/…","The maximum length of a tag for the algorithms in this …","All the AEADs we support use 96-bit nonces.","A nonce for a single AEAD opening or sealing operation.","A sequences of unique nonces.","An AEAD key for authenticating and decrypting (“opening…","An AEAD key for encrypting and signing (“sealing”), …","A possibly valid authentication tag.","An AEAD key without a designated role or nonce sequence.","Returns the next nonce in the sequence.","The key’s AEAD algorithm.","","","The key’s AEAD algorithm.","The key’s AEAD algorithm.","","","","Constructs a <code>Nonce</code> with the given value, assuming that the …","","","","","","","","","","","","","","","","","The chacha20-poly1305@openssh.com AEAD-ish construct.","","","","","","","Construct an empty <code>Aad</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Construct the <code>Aad</code> from the given bytes.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length of the key.","","Constructs a new key from the given <code>UnboundKey</code> and …","","","Constructs a <code>UnboundKey</code>.","Constructs a <code>LessSafeKey</code>.","The length of the nonces.","Authenticates and decrypts (“opens”) data in place.","Like <code>super::OpeningKey::open_in_place()</code>, except it accepts …","Like open_in_place, except the authentication tag is …","Authenticates and decrypts (“opens”) data in place, …","Like <code>super::OpeningKey::open_within()</code>, except it accepts an","QUIC Header Protection.","Encrypts and signs (“seals”) data in place, appending …","Like <code>super::SealingKey::seal_in_place_append_tag()</code>, except …","Encrypts and signs (“seals”) data in place.","Like <code>super::SealingKey::seal_in_place_separate_tag()</code>, …","The length of a tag.","","","","Constructs a <code>Nonce</code> with the given value, assuming that the …","","","","","","","","","","","","","","","","","","","","","","","","","","The length of key.","A key for opening packets.","The length in bytes of the <code>packet_length</code> field in a SSH …","A key for sealing packets.","The length in bytes of an authentication tag.","","","","","Returns the decrypted, but unauthenticated, packet length.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>SealingKey</code>.","Constructs a new <code>OpeningKey</code>.","Opens (authenticates and decrypts) a packet.","Seals (encrypts and signs) a packet.","","","","","","","AES-128.","AES-256.","A QUIC Header Protection Algorithm.","ChaCha20.","A key for generating QUIC Header Protection masks.","QUIC sample for new key masks","The key’s algorithm.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length of the key.","","Create a new header protection key.","Generate a new QUIC Header Protection mask.","The required sample length.","","","","","","","A key agreement algorithm.","ECDH using the NSA Suite B P-256 (secp256r1) curve.","ECDH using the NSA Suite B P-384 (secp384r1) curve.","An ephemeral private key for use (only) with …","A public key for key agreement.","An unparsed, possibly malformed, public key for key …","X25519 (ECDH using Curve25519) as described in RFC 7748.","Performs a key agreement with an ephemeral private key and …","The algorithm for the private key.","The algorithm for the public key.","The algorithm for the public key.","","","","","","","","","","","TODO: doc","","","","","Computes the public key from the private key.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate a new ephemeral private key for the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>UnparsedPublicKey</code>.","","","","","","","","","","","","","","","Returns <code>Ok(())</code> if <code>a == b</code> and <code>Err(error::Unspecified)</code> …","A digest algorithm.","A context for multi-step (Init-Update-Finish) digest …","A calculated digest value.","The maximum block length (<code>Algorithm::block_len()</code>) of all …","The maximum chaining length (<code>Algorithm::chaining_len()</code>) of …","The maximum output length (<code>Algorithm::output_len()</code>) of all …","SHA-1 as specified in FIPS 180-4. Deprecated.","The length of the output of SHA-1, in bytes.","SHA-256 as specified in FIPS 180-4.","The length of the output of SHA-256, in bytes.","SHA-384 as specified in FIPS 180-4.","The length of the output of SHA-384, in bytes.","SHA-512 as specified in FIPS 180-4.","SHA-512/256 as specified in FIPS 180-4.","The length of the output of SHA-512/256, in bytes.","The length of the output of SHA-512, in bytes.","The algorithm that this context is using.","The algorithm that was used to calculate the digest value.","","The internal block length.","","","","","","","The size of the chaining value of the digest function, in …","","","","","Returns the digest of <code>data</code> using the given digest …","","","Finalizes the digest calculation and returns the digest …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new context.","The length of a finalized digest.","","","","","","","","","","","","Updates the digest with all the data in <code>data</code>.","An error parsing or validating a key.","An error with absolutely no details.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","An HKDF algorithm.","HKDF using HMAC-SHA-1. Obsolete.","HKDF using HMAC-SHA-256.","HKDF using HMAC-SHA-384.","HKDF using HMAC-SHA-512.","The length of the OKM (Output Keying Material) for a …","An HKDF OKM (Output Keying Material)","A HKDF PRK (pseudorandom key).","A salt for HKDF operations.","The algorithm used to derive this salt.","","","","","","","","","","","","","","","The HKDF-Expand operation.","The HKDF-Extract operation.","Fills <code>out</code> with the output of the HKDF-Expand operation for …","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","The underlying HMAC algorithm.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length that <code>Prk::expand()</code> should expand its input to.","","The <code>OkmLength</code> given to <code>Prk::expand()</code>.","Constructs a new <code>Salt</code> with the given value based on the …","Construct a new <code>Prk</code> directly with the given value.","","","","","","","","","","","","","","","An HMAC algorithm.","A context for multi-step (Init-Update-Finish) HMAC signing.","HMAC using SHA-1. Obsolete.","HMAC using SHA-256.","HMAC using SHA-384.","HMAC using SHA-512.","A key to use for HMAC signing.","An HMAC tag.","The digest algorithm for the key.","","","","","","","","","","","","","","","","","","The digest algorithm this HMAC algorithm is based on.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Generate an HMAC signing key using the given digest …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct an HMAC signing key using the given digest …","Calculates the HMAC of <code>data</code> using the key <code>key</code> in one step.","Finalizes the HMAC calculation and returns the HMAC value. …","","","","","","","","","","","","","","","","","Updates the HMAC with all the data in <code>data</code>. <code>update</code> may be …","Calculates the HMAC of <code>data</code> using the signing key <code>key</code>, and …","Constructs a new HMAC signing context using the given …","A serialized positive integer.","Returns the value, ordered from significant byte to least …","","","","","Returns the first byte.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","A PBKDF2 algorithm.","PBKDF2 using HMAC-SHA1.","PBKDF2 using HMAC-SHA256.","PBKDF2 using HMAC-SHA384.","PBKDF2 using HMAC-SHA512.","","","","","Fills <code>out</code> with the key derived using PBKDF2 with the given …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Verifies that a previously-derived (e.g., using <code>derive</code>) …","A generated PKCS#8 document.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","A random value constructed from a <code>SecureRandom</code> that hasn’…","A type that can be returned by <code>ring::rand::generate()</code>.","A secure random number generator.","A secure random number generator where the random values …","","","","","","","Expose the random value.","Fills <code>dest</code> with random bytes.","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate the new random value using <code>rng</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>SystemRandom</code>.","","","","","","","","An RSA key pair, used for signing.","RSA key pair components.","An RSA Public Key.","RSA public key components.","Parameters for RSA verification.","","","","","","","","","","","","","","","","","","The private exponent.","<code>p</code>’s public Chinese Remainder Theorem exponent.","<code>q</code>’s public Chinese Remainder Theorem exponent.","The public exponent, encoded in big-endian bytes without …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs an RSA private key from its big-endian-encoded …","Parses an RSA private key that is not inside a PKCS#8 …","Parses an unencrypted PKCS#8-encoded RSA private key.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length, in bytes, of the public modulus.","The public modulus, encoded in big-endian bytes without …","The first prime factor of <code>d</code>.","Returns a reference to the public key.","","The public key components.","Returns the length in bytes of the key pair’s public …","The second prime factor of <code>d</code>.","<code>q**-1 mod p</code>.","Computes the signature of <code>msg</code> and writes it into <code>signature</code>.","","","","","","","","","","","","","","","","","","","","Verifies that <code>signature</code> is a valid signature of <code>message</code> …","Verification of ASN.1 DER-encoded ECDSA signatures using …","Signing of ASN.1 DER-encoded ECDSA signatures using the …","Verification of fixed-length (PKCS#11 style) ECDSA …","Signing of fixed-length (PKCS#11 style) ECDSA signatures …","<em>Not recommended</em>. Verification of ASN.1 DER-encoded ECDSA …","<em>Not recommended</em>. Verification of ASN.1 DER-encoded ECDSA …","Verification of ASN.1 DER-encoded ECDSA signatures using …","Signing of ASN.1 DER-encoded ECDSA signatures using the …","Verification of fixed-length (PKCS#11 style) ECDSA …","Signing of fixed-length (PKCS#11 style) ECDSA signatures …","Verification of Ed25519 signatures.","The length of an Ed25519 public key.","An ECDSA key pair, used for signing.","An ECDSA signing algorithm.","An ECDSA verification algorithm.","An Ed25519 key pair, for signing.","Parameters for EdDSA signing and verification.","Key pairs for signing messages (private key and public …","The type of the public key.","Verification of signatures using RSA keys of 1024-8192 …","Verification of signatures using RSA keys of 1024-8192 …","Verification of signatures using RSA keys of 1024-8192 …","Verification of signatures using RSA keys of 2048-8192 …","Verification of signatures using RSA keys of 2048-8192 …","Verification of signatures using RSA keys of 2048-8192 …","Verification of signatures using RSA keys of 2048-8192 …","Verification of signatures using RSA keys of 3072-8192 …","PKCS#1 1.5 padding using SHA-256 for RSA signatures.","PKCS#1 1.5 padding using SHA-384 for RSA signatures.","PKCS#1 1.5 padding using SHA-512 for RSA signatures.","Verification of signatures using RSA keys of 2048-8192 …","Verification of signatures using RSA keys of 2048-8192 …","Verification of signatures using RSA keys of 2048-8192 …","RSA PSS padding using SHA-256 for RSA signatures.","RSA PSS padding using SHA-384 for RSA signatures.","RSA PSS padding using SHA-512 for RSA signatures.","An RSA signature encoding as described in RFC 3447 Section …","An RSA key pair, used for signing.","","RSA public key components.","A public key signature returned from a signing operation.","An unparsed, possibly malformed, public key for signature …","A signature verification algorithm.","","","","","","","","","","","","","","","","","","","","","The public exponent, encoded in big-endian bytes without …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs an Ed25519 key pair by parsing an unencrypted …","Constructs an ECDSA key pair by parsing an unencrypted …","Constructs an Ed25519 key pair by parsing an unencrypted …","Constructs an ECDSA key pair from the private key and …","Constructs an Ed25519 key pair from the private key seed …","Constructs a Ed25519 key pair from the private key seed …","Generates a new key pair and returns the key pair …","Generates a new key pair and returns the key pair …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The public modulus, encoded in big-endian bytes without …","Construct a new <code>UnparsedPublicKey</code>.","The public key for the key pair.","","","Returns the signature of the message <code>msg</code>.","Returns the signature of the <code>message</code> using a random nonce …","","","","","","","","","","","","","","","","","","","","","","","","Verify the signature <code>signature</code> of message <code>msg</code> with the …","","","Parses the public key and verifies <code>signature</code> is a valid …","A test input file.","A test case. A test case consists of a set of named …","","","","","<code>compile_time_assert_clone::&lt;T&gt;();</code> fails to compile if <code>T</code> …","<code>compile_time_assert_copy::&lt;T&gt;();</code> fails to compile if <code>T</code> …","<code>compile_time_assert_eq::&lt;T&gt;();</code> fails to compile if <code>T</code> doesn…","<code>compile_time_assert_send::&lt;T&gt;();</code> fails to compile if <code>T</code> …","<code>compile_time_assert_sync::&lt;T&gt;();</code> fails to compile if <code>T</code> …","Maps the string “true” to true and the string “false…","Returns the value of an attribute that is encoded as a …","Maps the strings “SHA1”, “SHA256”, “SHA384”, …","Like <code>consume_bytes()</code> except it returns <code>None</code> if the test …","Like <code>consume_string()</code> except it returns <code>None</code> if the test …","Returns the raw value of an attribute, without any …","Returns the value of an attribute that is an integer, in …","Returns the value of an attribute that is an integer, in …","The contents of the file.","The name (path) of the file.","","Returns the argument unchanged.","Returns the argument unchanged.","Decode an string of hex digits into a sequence of bytes. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parses test cases out of the given file, calling <code>f</code> on each …","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,85,5,7,8,9,1,12,15,1,4,1,5,7,8,12,15,9,4,1,5,7,8,12,15,9,0,12,15,9,12,15,9,12,4,12,4,12,4,5,7,8,12,9,4,1,5,7,8,8,12,12,15,15,9,4,1,5,7,8,12,15,9,4,4,85,5,7,8,9,4,5,9,9,5,9,0,7,9,7,9,4,12,15,9,1,4,1,5,7,8,12,15,15,9,4,1,5,7,8,12,15,9,4,1,5,7,8,12,15,9,0,0,0,0,0,32,30,32,30,30,32,30,32,30,32,30,30,32,32,30,32,30,32,30,0,0,0,0,0,0,33,33,34,33,34,34,34,34,33,33,34,33,34,34,34,33,33,34,33,34,33,34,33,34,0,0,0,0,0,0,0,0,35,39,36,39,36,38,35,39,36,38,35,39,36,36,39,36,39,36,35,38,38,38,35,39,36,38,35,39,36,35,38,35,39,36,36,39,36,38,35,39,36,38,35,39,36,38,35,39,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,43,43,42,42,41,43,42,41,43,42,41,43,41,43,0,42,42,41,42,43,42,41,43,42,41,43,41,42,41,43,42,41,43,42,41,43,42,41,43,41,0,0,2,44,2,44,2,44,2,44,2,2,2,44,44,2,2,2,2,44,2,44,2,44,2,44,2,44,2,44,2,44,0,0,0,0,0,0,0,0,0,48,49,48,50,24,49,48,50,24,49,50,49,50,49,49,50,48,24,49,48,50,24,49,48,48,50,50,24,49,49,48,50,24,51,49,24,48,50,49,50,49,48,50,24,49,48,50,24,49,48,50,24,0,0,0,0,0,0,0,0,53,54,52,54,53,55,52,54,53,55,52,54,53,55,52,54,53,55,52,52,52,52,54,53,55,52,54,53,53,55,53,52,54,53,55,52,53,0,55,52,54,53,55,52,54,53,55,52,54,53,55,52,54,53,55,55,0,55,0,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,57,57,57,57,0,57,57,57,57,57,57,57,57,0,0,59,59,59,59,59,59,59,59,0,0,0,0,61,60,61,60,60,60,61,40,60,60,61,60,0,61,60,60,60,61,60,61,60,61,60,0,0,0,0,0,63,66,67,64,63,65,66,67,64,63,65,64,63,65,64,63,65,64,64,64,65,66,67,64,63,65,66,67,64,63,65,65,66,66,66,66,67,64,63,65,63,65,64,66,66,64,66,64,64,66,64,63,65,66,67,64,63,65,66,67,64,63,65,66,67,64,63,65,67,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,72,74,75,73,76,77,71,72,74,75,73,76,77,71,72,71,72,71,72,65,73,73,74,75,73,76,77,72,74,75,73,76,77,71,72,74,76,74,76,74,74,74,76,74,75,73,76,77,71,72,65,72,86,74,76,74,76,71,72,74,75,73,76,77,71,72,74,75,73,76,77,71,72,74,75,73,76,77,71,72,78,75,77,72,0,0,83,79,83,79,0,0,0,0,0,79,79,79,79,79,79,79,79,83,83,79,83,79,0,83,79,0,83,79,83,79,83,79],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[1,2]]],[]],[-1,4,[]],[[[5,[-1]]],4,6],[[[7,[-1]]],4,6],[8,4],[9,4],[1,[[11,[10]]]],[[[12,[-1]]],[[13,[10]]],[[14,[[13,[10]]]]]],[15,[[13,[10]]]],[[[11,[10]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[12,[-1]]],[[12,[-1]]],16],[15,15],[9,9],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[],[[12,[[11,[10]]]]]],[[4,4],18],[[[12,[-1]],[12,[-1]]],18,19],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[4,20],[[3,[17,21]]]],[[[5,[-1]],20],[[3,[17,21]]],6],[[[7,[-1]],20],[[3,[17,21]]],6],[[8,20],[[3,[17,21]]]],[[[12,[-1]],20],22,23],[[9,20],[[3,[17,21]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[24,[4]]],8],[-1,-1,[]],[-1,-1,[]],[-1,[[12,[-1]]],[[14,[[13,[10]]]]]],[-1,-1,[]],[[[11,[10]]],15],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,25],[4,25],[[8,-1],-2,[],[]],[[8,-1],[[5,[-1]]],6],[[8,-1],[[7,[-1]]],6],[[4,[13,[10]]],[[3,[8,2]]]],[8,9],[4,25],[[[5,[-1]],[12,[-2]],[13,[10]]],[[3,[[13,[10]],2]]],6,[[14,[[13,[10]]]]]],[[9,1,[12,[-1]],[13,[10]]],[[3,[[13,[10]],2]]],[[14,[[13,[10]]]]]],[[9,1,[12,[-1]],15,[13,[10]],[26,[25]]],[[3,[[13,[10]],2]]],[[14,[[13,[10]]]]]],[[[5,[-1]],[12,[-2]],[13,[10]],[26,[25]]],[[3,[[13,[10]],2]]],6,[[14,[[13,[10]]]]]],[[9,1,[12,[-1]],[13,[10]],[26,[25]]],[[3,[[13,[10]],2]]],[[14,[[13,[10]]]]]],0,[[[7,[-1]],[12,[-2]],-3],[[3,[17,2]]],6,[[14,[[13,[10]]]]],[[27,[[13,[10]]]],[28,[10]]]],[[9,1,[12,[-1]],-2],[[3,[17,2]]],[[14,[[13,[10]]]]],[[27,[[13,[10]]]],[28,[10]]]],[[[7,[-1]],[12,[-2]],[13,[10]]],[[3,[15,2]]],6,[[14,[[13,[10]]]]]],[[9,1,[12,[-1]],[13,[10]]],[[3,[15,2]]],[[14,[[13,[10]]]]]],[4,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[10]]],[[3,[1,2]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[13,[10]]],[[3,[15]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[30,31,[11,[10]]],[[11,[10]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[10]]],32],[[[11,[10]]],30],[[30,31,[13,[10]],[11,[10]]],[[3,[[13,[10]],2]]]],[[32,31,[13,[10]],[11,[10]]],17],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,0,[33,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,34],18],[[-1,-2],18,[],[]],[[34,20],[[3,[17,21]]]],[-1,-1,[]],[[[24,[34]]],33],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,25],[34,25],[[34,[13,[10]]],[[3,[33,2]]]],[[33,[13,[10]]],[[3,[[11,[10]],2]]]],[34,25],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,0,0,[[35,[36,[-1]],-2],[[3,[-3,2]]],[[14,[[13,[10]]]]],37,[]],[35,38],[39,38],[[[36,[-1]]],38,[]],[39,[[13,[10]]]],[[[36,[-1]]],[[13,[10]]],[[14,[[13,[10]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1]]],-1,[]],[39,39],[[[36,[-1]]],[[36,[-1]]],16],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[35,[[3,[39,2]]]],[[38,38],18],[[-1,-2],18,[],[]],[[38,20],[[3,[17,21]]]],[[35,20],[[3,[17,21]]]],[[39,20],[[3,[17,21]]]],[[[36,[-1]],20],[[3,[17,21]]],[[14,[[13,[10]]]],23]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[38,40],[[3,[35,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[38,-1],[[36,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[[[13,[10]],[13,[10]]],[[3,[17,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[41,42],[43,42],[43,[[13,[10]]]],[42,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,25],[41,41],[43,43],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[42,[13,[10]]],43],[[42,42],18],[[-1,-2],18,[],[]],[41,43],[[42,20],[[3,[17,21]]]],[[43,20],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,41],[42,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[[41,[13,[10]]],17],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[44,44],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[2,2],18],[[2,20],22],[[2,20],22],[[44,20],22],[[44,20],22],[-1,-1,[]],[44,2],[45,2],[46,2],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,47,[]],[-1,47,[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,0,0,0,0,[48,49],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[49,49],18],[[-1,-2],18,[],[]],[[50,[13,[[13,[10]]]],-1],[[3,[[24,[-1]],2]]],51],[[48,[13,[10]]],50],[[[24,[-1]],[13,[10]]],[[3,[17,2]]],51],[[49,20],22],[[48,20],22],[[50,20],22],[[[24,[-1]],20],22,[23,51]],[-1,-1,[]],[[[24,[49]]],48],[-1,-1,[]],[-1,-1,[]],[[[24,[49]]],50],[-1,-1,[]],[49,52],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[49,25],[[[24,[-1]]],-1,51],[[49,[13,[10]]],48],[[49,[13,[10]]],50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,0,0,0,[53,52],[54,[[13,[10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52,52],[54,54],[53,53],[55,55],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[52,42],[[52,52],18],[[-1,-2],18,[],[]],[[52,20],22],[[54,20],22],[[53,20],[[3,[17,21]]]],[[55,20],[[3,[17,21]]]],[-1,-1,[]],[-1,-1,[]],[[[24,[52]]],53],[-1,-1,[]],[-1,-1,[]],[[52,40],[[3,[53,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52,25],[[52,[13,[10]]],53],[[53,[13,[10]]],54],[55,54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[[55,[13,[10]]],17],[[53,[13,[10]],[13,[10]]],[[3,[17,2]]]],[53,55],0,[56,[[13,[10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[[-1,-2],17,[],[]],[56,10],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[[-1,-2],17,[],[]],[[57,58,[13,[10]],[13,[10]],[13,[10]]],17],[[57,57],18],[[-1,-2],18,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[[57,58,[13,[10]],[13,[10]],[13,[10]]],[[3,[17,2]]]],0,[59,[[13,[10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[60,60],[[-1,-2],17,[],[]],[[[61,[-1]]],-1,62],[[-1,[13,[10]]],[[3,[17,2]]],[]],[[-1,[13,[10]]],[[3,[17,2]]],[]],[[60,20],22],[-1,-1,[]],[-1,-1,[]],[40,[[3,[[61,[-1]],2]]],62],[-1,-2,[],[]],[-1,-2,[],[]],[[],60],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,[63,[[13,[10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2]]],[[64,[-1,-2]]],16,16],[63,63],[[[65,[-1]]],[[65,[-1]]],16],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,0,0,0,[[66,20],[[3,[17,21]]]],[[67,20],22],[[[64,[-1,-2]],20],[[3,[17,21]]],[],[]],[[63,20],[[3,[17,21]]]],[[[65,[-1]],20],[[3,[17,21]]],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[63,[[65,[-1]]],[[68,[10]]]],[[[64,[-1,-2]]],[[3,[66,44]]],[[14,[[13,[10]]]]],[[14,[[13,[10]]]]]],[[[13,[10]]],[[3,[66,44]]]],[[[13,[10]]],[[3,[66,44]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,25],0,0,[66,63],[66],0,[66,25],0,0,[[66,69,40,[13,[10]],[13,[10]]],[[3,[17,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[[67,70,70,70],[[3,[17,2]]]],[[[65,[-1]],67,[13,[10]],[13,[10]]],[[3,[17,2]]],[[14,[[13,[10]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[71,[[13,[10]]]],[[[72,[-1]]],[[13,[10]]],[[14,[[13,[10]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[71,71],[[[72,[-1]]],[[72,[-1]]],16],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,[[73,73],18],[[-1,-2],18,[],[]],[[74,20],[[3,[17,21]]]],[[75,20],[[3,[17,21]]]],[[73,20],[[3,[17,21]]]],[[76,20],[[3,[17,21]]]],[[77,20],[[3,[17,21]]]],[[[72,[-1]],20],[[3,[17,21]]],[[14,[[13,[10]]]],23]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[13,[10]]],[[3,[74,44]]]],[[73,[13,[10]],40],[[3,[76,44]]]],[[[13,[10]]],[[3,[74,44]]]],[[73,[13,[10]],[13,[10]],40],[[3,[76,44]]]],[[[13,[10]],[13,[10]]],[[3,[74,44]]]],[[[13,[10]]],[[3,[74,44]]]],[40,[[3,[59,2]]]],[[73,40],[[3,[59,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[78,-1],[[72,[-1]]],[]],[-1,[],[]],[74],[76],[[74,[13,[10]]],71],[[76,40,[13,[10]]],[[3,[71,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[[-1,70,70,70],[[3,[17,2]]],[]],[[75,70,70,70],[[3,[17,2]]]],[[77,70,70,70],[[3,[17,2]]]],[[[72,[-1]],[13,[10]],[13,[10]]],[[3,[17,2]]],[[14,[[13,[10]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[79,80],18],[[79,80],[[81,[10]]]],[[79,80],[[82,[42]]]],[[79,80],[[82,[[81,[10]]]]]],[[79,80],[[82,[47]]]],[[79,80],47],[[79,80],25],0,0,0,[[79,20],22],[-1,-1,[]],[-1,-1,[]],[80,[[3,[[81,[10]],47]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[83,-1],17,84],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,29,[]],[-1,29,[]]],"c":[588],"p":[[3,"Nonce",15],[3,"Unspecified",310],[4,"Result",774],[3,"Algorithm",15],[3,"OpeningKey",15],[8,"NonceSequence",15],[3,"SealingKey",15],[3,"UnboundKey",15],[3,"LessSafeKey",15],[15,"u8"],[15,"array"],[3,"Aad",15],[15,"slice"],[8,"AsRef",775],[3,"Tag",15],[8,"Clone",776],[15,"tuple"],[15,"bool"],[8,"PartialEq",777],[3,"Formatter",778],[3,"Error",778],[6,"Result",778],[8,"Debug",778],[3,"Okm",342],[15,"usize"],[3,"RangeFrom",779],[8,"AsMut",775],[8,"Extend",780],[3,"TypeId",781],[3,"OpeningKey",141],[15,"u32"],[3,"SealingKey",141],[3,"HeaderProtectionKey",165],[3,"Algorithm",165],[3,"EphemeralPrivateKey",195],[3,"UnparsedPublicKey",195],[8,"FnOnce",782],[3,"Algorithm",195],[3,"PublicKey",195],[8,"SecureRandom",510],[3,"Context",253],[3,"Algorithm",253],[3,"Digest",253],[3,"KeyRejected",310],[3,"EndOfInput",783],[3,"TryFromSliceError",784],[3,"String",785],[3,"Salt",342],[3,"Algorithm",342],[3,"Prk",342],[8,"KeyType",342],[3,"Algorithm",403],[3,"Key",403],[3,"Tag",403],[3,"Context",403],[3,"Positive",469],[3,"Algorithm",482],[3,"NonZeroU32",786],[3,"Document",501],[3,"SystemRandom",510],[3,"Random",510],[8,"RandomlyConstructable",510],[3,"PublicKey",537],[3,"KeyPairComponents",537],[3,"PublicKeyComponents",537],[3,"KeyPair",537],[3,"RsaParameters",537],[8,"FromIterator",780],[8,"RsaEncoding",612],[3,"Input",787],[3,"Signature",612],[3,"UnparsedPublicKey",612],[3,"EcdsaSigningAlgorithm",612],[3,"Ed25519KeyPair",612],[3,"EdDSAParameters",612],[3,"EcdsaKeyPair",612],[3,"EcdsaVerificationAlgorithm",612],[8,"VerificationAlgorithm",612],[3,"TestCase",740],[15,"str"],[3,"Vec",788],[4,"Option",789],[3,"File",740],[8,"FnMut",782],[8,"BoundKey",15],[8,"KeyPair",612]]},\
"rpassword":{"doc":"This library makes it easy to read passwords in a console …","t":"FFFF","n":["prompt_password","prompt_password_from_bufread","read_password","read_password_from_bufread"],"q":[[0,"rpassword"],[4,"alloc::string"],[5,"std::io::error"],[6,"alloc::string"],[7,"std::io"]],"d":["Prompts on the TTY and then reads a password from TTY","Prompts on the TTY and then reads a password from anything …","Reads a password from the TTY","Reads a password from anything that implements BufRead"],"i":[0,0,0,0],"f":[[-1,[[2,[1]]],3],[[-1,-2,-3],[[2,[1]]],4,5,3],[[],[[2,[1]]]],[-1,[[2,[1]]],4]],"c":[],"p":[[3,"String",4],[6,"Result",5],[8,"ToString",4],[8,"BufRead",6],[8,"Write",6]]},\
"rtoolbox":{"doc":"","t":"AAAAANNNELLLLLLLFFLLLLFFFDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLMLLLLLLL","n":["atty","fix_line_issues","print_tty","safe_string","safe_vec","Stderr","Stdin","Stdout","Stream","borrow","borrow_mut","clone","clone_into","fmt","from","into","is","isnt","to_owned","try_from","try_into","type_id","fix_line_issues","print_tty","print_writer","SafeString","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","from_string","into","into_inner","new","to_owned","try_from","try_into","type_id","SafeVec","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","inner","inner_mut","into","new","to_owned","try_from","try_into","type_id"],"q":[[0,"rtoolbox"],[5,"rtoolbox::atty"],[22,"rtoolbox::fix_line_issues"],[23,"rtoolbox::print_tty"],[25,"rtoolbox::safe_string"],[45,"rtoolbox::safe_vec"],[65,"core::fmt"],[66,"core::fmt"],[67,"core::any"],[68,"alloc::string"],[69,"std::io::error"],[70,"alloc::string"],[71,"alloc::vec"]],"d":["","","","","","","","","possible stream sources","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","returns true if this is a tty","returns true if this is <em>not</em> a tty","","","","","Normalizes the return of <code>read_line()</code> in the context of a …","Displays a message on the TTY","Prints a message to a writer","String that is zeroed when dropped","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Vec that is zeroed when dropped","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,3],4],[-1,-1,[]],[-1,-2,[],[]],[1,5],[1,5],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[8,[[9,[8]]]],[-1,[[9,[2]]],10],[[-1,-2],[[9,[2]]],11,10],0,[-1,-2,[],[]],[-1,-2,[],[]],[12,12],[[-1,-2],2,[],[]],[12,8],[12],[12,2],[[12,12],5],[[-1,-2],5,[],[]],[[12,3],4],[-1,-1,[]],[8,12],[-1,-2,[],[]],[12,8],[[],12],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],2,[],[]],[13,[[15,[14]]]],[13,[[15,[14]]]],[13,2],[[13,13],5],[[-1,-2],5,[],[]],[[13,3],4],[-1,-1,[]],0,[13,[[16,[14]]]],[-1,-2,[],[]],[[[16,[14]]],13],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]]],"c":[],"p":[[4,"Stream",5],[15,"tuple"],[3,"Formatter",65],[6,"Result",65],[15,"bool"],[4,"Result",66],[3,"TypeId",67],[3,"String",68],[6,"Result",69],[8,"ToString",68],[8,"Write",70],[3,"SafeString",25],[3,"SafeVec",45],[15,"u8"],[15,"slice"],[3,"Vec",71]]},\
"rustls":{"doc":"Rustls - a modern TLS library","t":"HHHNNNNENNNNNNNNNNNNNNEEDNENNNNNNNNNNNENNCCNNNDDIEDEHHNNNNNNNNNDNDNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNDNNIDNNNNNNNNNNNNNNENNNNNNNNNDNNNNNNNNNNNNNDNENENNDENNNNNNNNNNNDNNNNNNNNDNNNNNNNNNNNNNNNNNCCNNNNNCNNNNEIENENNDDEDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNDNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDDDDDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALKLLAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNNNLALAMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDHHHHHHHHHLLMLLLMLLLDDDDDIDNNDDNIDDIENNDEDDDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLMKLMLLLLKLLLKMLKLKLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLFFLLLLLAAAIKAAAAAAAAAADLLMLLLLMLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLIEDSINNNLLLLLLLLLKLLLLLLLLLLLLLFFKLLLLLLLLLLLLLLLLDLMDENDMLLLLLLLLLLLLLLLLMLLMLLLLLLLLLMNNNENENNNENENNNNNENNENNNNNNENNNNNNNENEENNENNNNENENNNNENNNNNNNNNNNNNNNNNNNNNNSNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRDRLLLLLLLLLLLNNENDEGDNDDNDNNNENNNDENDNEIINNNNDNNNDDNNNNNNNNNNDEINEDNNENNNDNNNNEDDNNDNNNDDNDDNNNDNNDDDENNDNEDNNEDNNNNNNNNNNNNNNNNNNNNNNNNDMLLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLMLLLLLLKLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLMLLLLLLLLLLLMMMMMMMMLMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMMLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDNNNNSDEENDDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLMMMLLLLLLMMMMMMDDGDDDMMMLLLLLLLLLLMMLLLLMLLLLMLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLMMDDLLLLLLLLLLMLLLLLLMHHHAAAAADDDDDIDDDDDIDIDDDDDIDDLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMLLLLKLLLLLLLLLLKLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMLLLLLLLLLLLLLLLLLLLMKMMLLLLLLLLLLLKLLLLLLKLMMLLMLLLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLDDIIKFFFLLLLMKLLLLLLLLLMLMKMKFLLLLLLLLHH","n":["ALL_CIPHER_SUITES","ALL_KX_GROUPS","ALL_VERSIONS","AccessDenied","Aes128Gcm","Aes256Gcm","Alert","AlertDescription","AlertReceived","Anonymous","ApplicationData","ApplicationVerificationFailure","AttemptedDowngradeToTls12WhenTls13IsSupported","BadCertChainExtensions","BadCertificate","BadCertificateHashValue","BadCertificateStatusResponse","BadEncoding","BadMaxFragmentSize","BadRecordMac","BadSignature","BadSignature","BulkAlgorithm","CertRevocationListError","Certificate","Certificate","CertificateError","CertificateExpired","CertificateRequest","CertificateRequired","CertificateRevoked","CertificateStatus","CertificateURL","CertificateUnknown","CertificateUnobtainable","CertificateVerify","Chacha20Poly1305","ChangeCipherSpec","CipherSuite","Client","Client","ClientConfig","ClientConnection","ClientHello","ClientKeyExchange","CloseNotify","CommonState","ConfigBuilder","ConfigSide","Connection","ConnectionCommon","ContentType","DEFAULT_CIPHER_SUITES","DEFAULT_VERSIONS","DSA","DTLSv1_0","DTLSv1_2","DTLSv1_3","DecodeError","DecompressionFailure","DecryptError","DecryptError","DecryptionFailed","DigitallySignedStruct","DisallowedEncryptedExtension","DistinguishedName","DuplicateClientHelloExtensions","DuplicateEncryptedExtensions","DuplicateHelloRetryRequestExtensions","DuplicateNewSessionTicketExtensions","DuplicateServerHelloExtensions","DuplicateServerNameTypes","ECDSA","ECDSA_NISTP256_SHA256","ECDSA_NISTP384_SHA384","ECDSA_NISTP521_SHA512","ECDSA_SHA1_Legacy","ED25519","ED25519","ED448","ED448","EarlyDataAttemptedInSecondClientHello","EarlyDataExtensionWithoutResumption","EarlyDataOfferedWithVariedCipherSuite","EcPointsExtensionRequired","EncryptError","EncryptedExtensions","EndOfEarlyData","Error","Expired","ExportRestriction","FFDHE2048","FFDHE3072","FFDHE4096","FFDHE6144","FFDHE8192","FailedToGetCurrentTime","FailedToGetRandomBytes","Finished","General","Handshake","HandshakeFailure","HandshakeHashVariedAfterRetry","HandshakeNotComplete","HandshakePayloadTooLarge","HandshakeType","Heartbeat","HelloRequest","HelloRetryRequest","HelloVerifyRequest","IllegalHelloRetryRequestWithEmptyCookie","IllegalHelloRetryRequestWithNoChanges","IllegalHelloRetryRequestWithOfferedGroup","IllegalHelloRetryRequestWithUnofferedCipherSuite","IllegalHelloRetryRequestWithUnofferedNamedGroup","IllegalHelloRetryRequestWithUnsupportedVersion","IllegalHelloRetryRequestWithWrongSessionId","IllegalMiddleboxChangeCipherSpec","IllegalParameter","IllegalTlsInnerPlaintext","InappropriateFallback","InappropriateHandshakeMessage","InappropriateMessage","IncorrectBinder","InsufficientSecurity","InternalError","InvalidCcs","InvalidCertRequest","InvalidCertRevocationList","InvalidCertificate","InvalidCertificateStatusType","InvalidContentType","InvalidCrlNumber","InvalidDhParams","InvalidEmptyPayload","InvalidKeyShare","InvalidKeyUpdate","InvalidMaxEarlyDataSize","InvalidMessage","InvalidMessage","InvalidPurpose","InvalidRevokedCertSerialNumber","InvalidSct","InvalidSctList","InvalidServerName","IoState","IssuerInvalidForCrl","KeyEpochWithPendingFragment","KeyLog","KeyLogFile","KeyShareExtensionRequired","KeyUpdate","KeyUpdateReceivedInQuicConnection","MessageHash","MessageInterleavedWithHandshakeMessage","MessageTooLarge","MessageTooShort","MissingBinderInPskExtension","MissingData","MissingExtension","MissingKeyExchange","MissingKeyShare","MissingPskModesExtension","MissingQuicTransportParameters","NamedGroup","NamedGroupsExtensionRequired","NewSessionTicket","NoApplicationProtocol","NoApplicationProtocol","NoCertificate","NoCertificateRequestSignatureSchemesInCommon","NoCertificatesPresented","NoCipherSuitesInCommon","NoEcPointFormatsInCommon","NoKeyLog","NoKxGroupsInCommon","NoRenegotiation","NoSignatureSchemes","NoSignatureSchemesInCommon","NotValidForName","NotValidYet","NullCompressionRequired","OfferedDuplicateKeyShares","OfferedEarlyDataWithOldProtocolVersion","OfferedEmptyApplicationProtocol","OfferedIncorrectCompressions","Other","Other","OwnedTrustAnchor","ParseError","PeerIncompatible","PeerIncompatible","PeerMisbehaved","PeerMisbehaved","PeerSentOversizedRecord","PrivateKey","ProtocolVersion","ProtocolVersion","PskExtensionMustBeLast","PskExtensionWithMismatchedIdsAndBinders","RSA","RSA_PKCS1_SHA1","RSA_PKCS1_SHA256","RSA_PKCS1_SHA384","RSA_PKCS1_SHA512","RSA_PSS_SHA256","RSA_PSS_SHA384","RSA_PSS_SHA512","Reader","RecordOverflow","RefusedToFollowHelloRetryRequest","RejectedEarlyDataInterleavedWithHandshakeMessage","ResumptionAttemptedWithVariedEms","ResumptionOfferedWithIncompatibleCipherSuite","ResumptionOfferedWithVariedCipherSuite","ResumptionOfferedWithVariedEms","Revoked","RootCertStore","SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA","SSL_FORTEZZA_KEA_WITH_NULL_SHA","SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA","SSL_RSA_FIPS_WITH_DES_CBC_SHA","SSLv2","SSLv3","SelectedDifferentCipherSuiteAfterRetry","SelectedInvalidPsk","SelectedTls12UsingTls13VersionExtension","SelectedUnofferedApplicationProtocol","SelectedUnofferedCipherSuite","SelectedUnofferedCompression","SelectedUnofferedKxGroup","SelectedUnofferedPsk","SelectedUnusableCipherSuiteForVersion","Server","Server","ServerConfig","ServerConnection","ServerDoesNotSupportTls12Or13","ServerHello","ServerHelloDone","ServerHelloMustOfferUncompressedEcPoints","ServerKeyExchange","ServerName","ServerNameDifferedOnRetry","ServerNameMustContainOneHostName","ServerSentHelloRetryRequestWithUnknownExtension","ServerTlsVersionIsDisabledByOurConfig","Side","SideData","SignatureAlgorithm","SignatureAlgorithmsExtensionRequired","SignatureScheme","SignedHandshakeWithUnadvertisedSigScheme","SignedKxWithWrongAlgorithm","Stream","StreamOwned","SupportedCipherSuite","SupportedKxGroup","SupportedProtocolVersion","SupportedVersionsExtensionRequired","TLS13_AES_128_CCM_8_SHA256","TLS13_AES_128_CCM_SHA256","TLS13_AES_128_GCM_SHA256","TLS13_AES_256_GCM_SHA384","TLS13_CHACHA20_POLY1305_SHA256","TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA","TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA","TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA","TLS_DHE_DSS_WITH_3DES_EDE_CBC_RMD","TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA","TLS_DHE_DSS_WITH_AES_128_CBC_RMD","TLS_DHE_DSS_WITH_AES_128_CBC_SHA","TLS_DHE_DSS_WITH_AES_128_CBC_SHA256","TLS_DHE_DSS_WITH_AES_128_GCM_SHA256","TLS_DHE_DSS_WITH_AES_256_CBC_RMD","TLS_DHE_DSS_WITH_AES_256_CBC_SHA","TLS_DHE_DSS_WITH_AES_256_CBC_SHA256","TLS_DHE_DSS_WITH_AES_256_GCM_SHA384","TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256","TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256","TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384","TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384","TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA","TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256","TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256","TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA","TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256","TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384","TLS_DHE_DSS_WITH_DES_CBC_SHA","TLS_DHE_DSS_WITH_RC4_128_SHA","TLS_DHE_DSS_WITH_SEED_CBC_SHA","TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA","TLS_DHE_PSK_WITH_AES_128_CBC_SHA","TLS_DHE_PSK_WITH_AES_128_CBC_SHA256","TLS_DHE_PSK_WITH_AES_128_CCM","TLS_DHE_PSK_WITH_AES_128_GCM_SHA256","TLS_DHE_PSK_WITH_AES_256_CBC_SHA","TLS_DHE_PSK_WITH_AES_256_CBC_SHA384","TLS_DHE_PSK_WITH_AES_256_CCM","TLS_DHE_PSK_WITH_AES_256_GCM_SHA384","TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256","TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256","TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384","TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384","TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256","TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384","TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256","TLS_DHE_PSK_WITH_NULL_SHA","TLS_DHE_PSK_WITH_NULL_SHA256","TLS_DHE_PSK_WITH_NULL_SHA384","TLS_DHE_PSK_WITH_RC4_128_SHA","TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA","TLS_DHE_RSA_WITH_3DES_EDE_CBC_RMD","TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA","TLS_DHE_RSA_WITH_AES_128_CBC_RMD","TLS_DHE_RSA_WITH_AES_128_CBC_SHA","TLS_DHE_RSA_WITH_AES_128_CBC_SHA256","TLS_DHE_RSA_WITH_AES_128_CCM","TLS_DHE_RSA_WITH_AES_128_CCM_8","TLS_DHE_RSA_WITH_AES_128_GCM_SHA256","TLS_DHE_RSA_WITH_AES_256_CBC_RMD","TLS_DHE_RSA_WITH_AES_256_CBC_SHA","TLS_DHE_RSA_WITH_AES_256_CBC_SHA256","TLS_DHE_RSA_WITH_AES_256_CCM","TLS_DHE_RSA_WITH_AES_256_CCM_8","TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256","TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256","TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384","TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384","TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA","TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA","TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256","TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256","TLS_DHE_RSA_WITH_DES_CBC_SHA","TLS_DHE_RSA_WITH_SEED_CBC_SHA","TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA","TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA","TLS_DH_DSS_WITH_AES_128_CBC_SHA","TLS_DH_DSS_WITH_AES_128_CBC_SHA256","TLS_DH_DSS_WITH_AES_128_GCM_SHA256","TLS_DH_DSS_WITH_AES_256_CBC_SHA","TLS_DH_DSS_WITH_AES_256_CBC_SHA256","TLS_DH_DSS_WITH_AES_256_GCM_SHA384","TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256","TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256","TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384","TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384","TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA","TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256","TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256","TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA","TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256","TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384","TLS_DH_DSS_WITH_DES_CBC_SHA","TLS_DH_DSS_WITH_SEED_CBC_SHA","TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA","TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA","TLS_DH_RSA_WITH_AES_128_CBC_SHA","TLS_DH_RSA_WITH_AES_128_CBC_SHA256","TLS_DH_RSA_WITH_AES_128_GCM_SHA256","TLS_DH_RSA_WITH_AES_256_CBC_SHA","TLS_DH_RSA_WITH_AES_256_CBC_SHA256","TLS_DH_RSA_WITH_AES_256_GCM_SHA384","TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256","TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256","TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384","TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384","TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA","TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA","TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256","TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_DH_RSA_WITH_DES_CBC_SHA","TLS_DH_RSA_WITH_SEED_CBC_SHA","TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA","TLS_DH_anon_EXPORT_WITH_RC4_40_MD5","TLS_DH_anon_WITH_3DES_EDE_CBC_SHA","TLS_DH_anon_WITH_AES_128_CBC_SHA","TLS_DH_anon_WITH_AES_128_CBC_SHA256","TLS_DH_anon_WITH_AES_128_GCM_SHA256","TLS_DH_anon_WITH_AES_256_CBC_SHA","TLS_DH_anon_WITH_AES_256_CBC_SHA256","TLS_DH_anon_WITH_AES_256_GCM_SHA384","TLS_DH_anon_WITH_ARIA_128_CBC_SHA256","TLS_DH_anon_WITH_ARIA_128_GCM_SHA256","TLS_DH_anon_WITH_ARIA_256_CBC_SHA384","TLS_DH_anon_WITH_ARIA_256_GCM_SHA384","TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA","TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256","TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256","TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA","TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256","TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384","TLS_DH_anon_WITH_DES_CBC_SHA","TLS_DH_anon_WITH_RC4_128_MD5","TLS_DH_anon_WITH_SEED_CBC_SHA","TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_ECDSA_WITH_AES_128_CCM","TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_ECDSA_WITH_AES_256_CCM","TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256","TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384","TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256","TLS_ECDHE_ECDSA_WITH_NULL_SHA","TLS_ECDHE_ECDSA_WITH_RC4_128_SHA","TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA","TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA","TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256","TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA","TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384","TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256","TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384","TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256","TLS_ECDHE_PSK_WITH_NULL_SHA","TLS_ECDHE_PSK_WITH_NULL_SHA256","TLS_ECDHE_PSK_WITH_NULL_SHA384","TLS_ECDHE_PSK_WITH_RC4_128_SHA","TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384","TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256","TLS_ECDHE_RSA_WITH_NULL_SHA","TLS_ECDHE_RSA_WITH_RC4_128_SHA","TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA","TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA_draft","TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA","TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256","TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA_draft","TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384","TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA_draft","TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256","TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256","TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384","TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384","TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDH_ECDSA_WITH_DES_CBC_SHA_draft","TLS_ECDH_ECDSA_WITH_NULL_SHA","TLS_ECDH_ECDSA_WITH_NULL_SHA_draft","TLS_ECDH_ECDSA_WITH_RC4_128_SHA","TLS_ECDH_ECDSA_WITH_RC4_128_SHA_draft","TLS_ECDH_ECNRA_WITH_3DES_EDE_CBC_SHA_draft","TLS_ECDH_ECNRA_WITH_DES_CBC_SHA_draft","TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA","TLS_ECDH_RSA_WITH_AES_128_CBC_SHA","TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256","TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDH_RSA_WITH_AES_256_CBC_SHA","TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384","TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256","TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256","TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384","TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384","TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDH_RSA_WITH_NULL_SHA","TLS_ECDH_RSA_WITH_RC4_128_SHA","TLS_ECDH_anon_EXPORT_WITH_DES40_CBC_SHA_draft","TLS_ECDH_anon_EXPORT_WITH_RC4_40_SHA_draft","TLS_ECDH_anon_NULL_WITH_SHA_draft","TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA","TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA_draft","TLS_ECDH_anon_WITH_AES_128_CBC_SHA","TLS_ECDH_anon_WITH_AES_256_CBC_SHA","TLS_ECDH_anon_WITH_DES_CBC_SHA_draft","TLS_ECDH_anon_WITH_NULL_SHA","TLS_ECDH_anon_WITH_RC4_128_SHA","TLS_ECDH_anon_WITH_RC4_128_SHA_draft","TLS_ECMQV_ECDSA_NULL_SHA_draft","TLS_ECMQV_ECDSA_WITH_3DES_EDE_CBC_SHA_draft","TLS_ECMQV_ECDSA_WITH_DES_CBC_SHA_draft","TLS_ECMQV_ECDSA_WITH_RC4_128_SHA_draft","TLS_ECMQV_ECNRA_NULL_SHA_draft","TLS_ECMQV_ECNRA_WITH_3DES_EDE_CBC_SHA_draft","TLS_ECMQV_ECNRA_WITH_DES_CBC_SHA_draft","TLS_ECMQV_ECNRA_WITH_RC4_128_SHA_draft","TLS_EMPTY_RENEGOTIATION_INFO_SCSV","TLS_GOSTR341001_WITH_28147_CNT_IMIT","TLS_GOSTR341001_WITH_NULL_GOSTR3411","TLS_GOSTR341094_WITH_28147_CNT_IMIT","TLS_GOSTR341094_WITH_NULL_GOSTR3411","TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5","TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA","TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5","TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA","TLS_KRB5_EXPORT_WITH_RC4_40_MD5","TLS_KRB5_EXPORT_WITH_RC4_40_SHA","TLS_KRB5_WITH_3DES_EDE_CBC_MD5","TLS_KRB5_WITH_3DES_EDE_CBC_SHA","TLS_KRB5_WITH_DES_CBC_MD5","TLS_KRB5_WITH_DES_CBC_SHA_or_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA","TLS_KRB5_WITH_IDEA_CBC_MD5","TLS_KRB5_WITH_IDEA_CBC_SHA","TLS_KRB5_WITH_RC4_128_MD5","TLS_KRB5_WITH_RC4_128_SHA","TLS_NULL_WITH_NULL_NULL","TLS_PSK_DHE_WITH_AES_128_CCM_8","TLS_PSK_DHE_WITH_AES_256_CCM_8","TLS_PSK_WITH_3DES_EDE_CBC_SHA","TLS_PSK_WITH_AES_128_CBC_SHA","TLS_PSK_WITH_AES_128_CBC_SHA256","TLS_PSK_WITH_AES_128_CCM","TLS_PSK_WITH_AES_128_CCM_8","TLS_PSK_WITH_AES_128_GCM_SHA256","TLS_PSK_WITH_AES_256_CBC_SHA","TLS_PSK_WITH_AES_256_CBC_SHA384","TLS_PSK_WITH_AES_256_CCM","TLS_PSK_WITH_AES_256_CCM_8","TLS_PSK_WITH_AES_256_GCM_SHA384","TLS_PSK_WITH_ARIA_128_CBC_SHA256","TLS_PSK_WITH_ARIA_128_GCM_SHA256","TLS_PSK_WITH_ARIA_256_CBC_SHA384","TLS_PSK_WITH_ARIA_256_GCM_SHA384","TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256","TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384","TLS_PSK_WITH_CHACHA20_POLY1305_SHA256","TLS_PSK_WITH_NULL_SHA","TLS_PSK_WITH_NULL_SHA256","TLS_PSK_WITH_NULL_SHA384","TLS_PSK_WITH_RC4_128_SHA","TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA","TLS_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5","TLS_RSA_EXPORT1024_WITH_RC4_56_MD5","TLS_RSA_EXPORT1024_WITH_RC4_56_SHA","TLS_RSA_EXPORT_WITH_DES40_CBC_SHA","TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5","TLS_RSA_EXPORT_WITH_RC4_40_MD5","TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA","TLS_RSA_PSK_WITH_AES_128_CBC_SHA","TLS_RSA_PSK_WITH_AES_128_CBC_SHA256","TLS_RSA_PSK_WITH_AES_128_GCM_SHA256","TLS_RSA_PSK_WITH_AES_256_CBC_SHA","TLS_RSA_PSK_WITH_AES_256_CBC_SHA384","TLS_RSA_PSK_WITH_AES_256_GCM_SHA384","TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256","TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256","TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384","TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384","TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256","TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384","TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256","TLS_RSA_PSK_WITH_NULL_SHA","TLS_RSA_PSK_WITH_NULL_SHA256","TLS_RSA_PSK_WITH_NULL_SHA384","TLS_RSA_PSK_WITH_RC4_128_SHA","TLS_RSA_WITH_3DES_EDE_CBC_RMD","TLS_RSA_WITH_3DES_EDE_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_RMD","TLS_RSA_WITH_AES_128_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_SHA256","TLS_RSA_WITH_AES_128_CCM","TLS_RSA_WITH_AES_128_CCM_8","TLS_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_CBC_RMD","TLS_RSA_WITH_AES_256_CBC_SHA","TLS_RSA_WITH_AES_256_CBC_SHA256","TLS_RSA_WITH_AES_256_CCM","TLS_RSA_WITH_AES_256_CCM_8","TLS_RSA_WITH_AES_256_GCM_SHA384","TLS_RSA_WITH_ARIA_128_CBC_SHA256","TLS_RSA_WITH_ARIA_128_GCM_SHA256","TLS_RSA_WITH_ARIA_256_CBC_SHA384","TLS_RSA_WITH_ARIA_256_GCM_SHA384","TLS_RSA_WITH_CAMELLIA_128_CBC_SHA","TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_RSA_WITH_CAMELLIA_256_CBC_SHA","TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256","TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_RSA_WITH_DES_CBC_SHA","TLS_RSA_WITH_IDEA_CBC_SHA","TLS_RSA_WITH_NULL_MD5","TLS_RSA_WITH_NULL_SHA","TLS_RSA_WITH_NULL_SHA256","TLS_RSA_WITH_RC4_128_MD5","TLS_RSA_WITH_RC4_128_SHA","TLS_RSA_WITH_SEED_CBC_SHA","TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA","TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA","TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA","TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA","TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA","TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA","TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA","TLS_SRP_SHA_WITH_AES_128_CBC_SHA","TLS_SRP_SHA_WITH_AES_256_CBC_SHA","TLSv1_0","TLSv1_1","TLSv1_2","TLSv1_3","Ticketer","Tls12","Tls12CipherSuite","Tls12NotOffered","Tls12NotOfferedOrEnabled","Tls13","Tls13CipherSuite","Tls13RequiredForQuic","TooMuchEarlyDataReceived","TrailingData","UncompressedEcPointsRequired","UnexpectedCleartextExtension","UnexpectedMessage","UnexpectedMessage","UnhandledCriticalExtension","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","UnknownCA","UnknownIssuer","UnknownPSKIdentity","UnknownProtocolVersion","UnrecognisedName","UnsolicitedCertExtension","UnsolicitedEncryptedExtension","UnsolicitedSctList","UnsolicitedServerHelloExtension","UnsupportedCertificate","UnsupportedCompression","UnsupportedCriticalExtension","UnsupportedCrlVersion","UnsupportedCurveType","UnsupportedDeltaCrl","UnsupportedExtension","UnsupportedIndirectCrl","UnsupportedKeyExchangeAlgorithm","UnsupportedNameType","UnsupportedRevocationReason","UserCanceled","WantsCipherSuites","WantsKxGroups","WantsVerifier","WantsVersions","Writer","WrongGroupForKeyShare","X25519","X448","add","add_parsable_certificates","add_server_trust_anchors","add_trust_anchors","alpn_protocol","as_ref","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_resume_from","cipher_suite","client","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","common","common","complete_io","complete_io","conn","conn","deref","deref","deref_mut","deref_mut","empty","encode","encode","encode","encode","encode","encode","encode","encode","encode","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","explicit_nonce_len","export_keying_material","export_keying_material","fixed_iv_len","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subject_spki_name_constraints","get_mut","get_ref","get_u16","get_u16","get_u16","get_u8","get_u8","get_u8","get_u8","hash","hash_algorithm","internal","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_handshaking","kx","kx_group","len","log","log","log","manual","name","negotiated_cipher_suite","new","new","new","new","partial_cmp","peer_certificates","peer_has_closed","plaintext_bytes_to_read","process_new_packets","process_new_packets","protocol_version","read","read","read","read","read","read","read","read","read","read","read","read","read_tls","read_tls","reader","reader","resolve_sig_schemes","roots","scheme","secp256r1","secp384r1","secp521r1","send_close_notify","server","set_buffer_limit","sign","sign","signature","sock","sock","subject","suite","tls_bytes_to_write","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usable_for_signature_algorithm","version","version","version","wants_read","wants_write","will_log","will_log","will_log","with_cert_resolver","with_certificate_transparency_logs","with_cipher_suites","with_client_auth_cert","with_client_auth_cert","with_client_cert_resolver","with_client_cert_resolver","with_client_cert_verifier","with_custom_certificate_verifier","with_kx_groups","with_no_client_auth","with_no_client_auth","with_no_client_auth","with_protocol_versions","with_root_certificates","with_safe_default_cipher_suites","with_safe_default_kx_groups","with_safe_default_protocol_versions","with_safe_defaults","with_single_cert","with_single_cert","with_single_cert","with_single_cert_with_ocsp_and_sct","write","write","write","write_tls","write_tls","write_vectored","write_vectored","writer","writer","expect_types","expect_types","got_type","got_type","CipherSuiteCommon","TLS13_AES_128_GCM_SHA256","TLS13_AES_256_GCM_SHA384","TLS13_CHACHA20_POLY1305_SHA256","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256","borrow","borrow_mut","bulk","fmt","from","into","suite","try_from","try_into","type_id","CertificateTransparencyPolicy","ClientConfig","ClientConnection","ClientConnectionData","ClientSessionMemoryCache","ClientSessionStore","DangerousClientConfig","Disabled","DnsName","HandshakeSignatureValid","InvalidDnsNameError","IpAddress","ResolvesClientCert","Resumption","ServerCertVerified","ServerCertVerifier","ServerName","SessionIdOnly","SessionIdOrTickets","Tls12ClientSessionValue","Tls12Resumption","Tls13ClientSessionValue","WantsClientCert","WantsTransparencyPolicyOrClientCert","WebPkiVerifier","WriteEarlyData","alpn_protocols","assertion","assertion","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","bytes_left","cfg","client_auth_cert_resolver","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","dangerous","default","deref","deref_mut","disabled","early_data","enable_early_data","enable_sni","eq","eq","equivalent","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","has_certs","hash","in_memory_sessions","insert_tls13_ticket","insert_tls13_ticket","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_early_data_accepted","key_log","kx_hint","kx_hint","max_fragment_size","new","new","new","new","remove_tls12_session","remove_tls12_session","request_scts","request_scts","resolve","resumption","set_certificate_verifier","set_kx_hint","set_kx_hint","set_tls12_session","set_tls12_session","store","supported_verify_schemes","supported_verify_schemes","take_tls13_ticket","take_tls13_ticket","tls12_resumption","tls12_session","tls12_session","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verification_schemes","verify_server_cert","verify_server_cert","verify_server_cert_signed_by_trust_anchor","verify_server_name","verify_tls12_signature","verify_tls12_signature","verify_tls13_signature","verify_tls13_signature","write","cipher","msgs","record_layer","MessageDecrypter","decrypt","alert","base","ccs","codec","deframer","enums","fragmenter","handshake","message","persist","AlertMessagePayload","borrow","borrow_mut","description","encode","fmt","from","into","level","read","try_from","try_into","type_id","Payload","PayloadU16","PayloadU24","PayloadU8","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","empty","empty","empty","encode","encode","encode","encode","encode_slice","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into_inner","new","new","new","new","read","read","read","read","read","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ChangeCipherSpecPayload","borrow","borrow_mut","encode","fmt","from","into","read","try_from","try_into","type_id","Codec","ListLength","Reader","SIZE_LEN","TlsListElement","U16","U24","U8","any_left","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","encode","encode","expect_empty","fmt","from","from","from","get_encoding","get_encoding","init","into","into","into","left","put_u16","put_u64","read","read","read_bytes","read_bytes","rest","sub","take","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u24","used","max","Deframed","DeframerError","HandshakePayloadSizeTooLarge","MessageDeframer","aligned","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","fmt","fmt","from","from","from","has_pending","into","into","into","message","pop","read","trial_decryption_finished","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","want_close_before_decrypt","ALProtocolNegotiation","ANSIX962CompressedChar2","ANSIX962CompressedPrime","AlertLevel","CertificateAuthorities","CertificateStatusType","CertificateType","ChannelId","ClientAuthz","ClientCertificateType","ClientCertificateUrl","Compression","Cookie","DSSEphemeralDH","DSSFixedDH","DSSSign","Deflate","ECCurveType","ECDSAFixedECDH","ECDSASign","ECPointFormat","ECPointFormats","EarlyData","EllipticCurves","ExplicitChar2","ExplicitPrime","ExtendedMasterSecret","ExtensionType","FFDHE2048","FFDHE3072","FFDHE4096","FFDHE6144","FFDHE8192","Fatal","FortezzaDMS","HashAlgorithm","Heartbeat","HeartbeatMessageType","HeartbeatMode","HostName","KeyShare","KeyUpdateRequest","LSZ","MD5","MaxFragmentLength","NONE","NamedCurve","NamedCurve","NamedGroup","NextProtocolNegotiation","Null","OCSP","OIDFilters","PSKKeyExchangeMode","PSKKeyExchangeModes","PSK_DHE_KE","PSK_KE","Padding","PeerAllowedToSend","PeerNotAllowedToSend","PostHandshakeAuth","PreSharedKey","RSAEphemeralDH","RSAFixedDH","RSAFixedECDH","RSASign","RenegotiationInfo","Request","Response","SCT","SHA1","SHA224","SHA256","SHA384","SHA512","SRP","SUPPORTED","ServerAuthz","ServerName","ServerNameType","SessionTicket","SignatureAlgorithms","SignatureAlgorithmsCert","StatusRequest","SupportedVersions","TicketEarlyDataInfo","TransportParameters","TransportParametersDraft","TruncatedHMAC","TrustedCAKeys","Uncompressed","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","UpdateNotRequested","UpdateRequested","UseSRTP","UserMapping","Warning","X25519","X25519","X448","X448","arbitrary_explicit_char2_curves","arbitrary_explicit_prime_curves","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brainpoolp256r1","brainpoolp384r1","brainpoolp512r1","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_u16","get_u16","get_u16","get_u8","get_u8","get_u8","get_u8","get_u8","get_u8","get_u8","get_u8","get_u8","get_u8","get_u8","get_u8","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","secp160k1","secp160r1","secp160r2","secp192k1","secp192r1","secp224k1","secp224r1","secp256k1","secp256r1","secp256r1","secp384r1","secp384r1","secp521r1","secp521r1","sect163k1","sect163r1","sect163r2","sect193r1","sect193r2","sect233k1","sect233r1","sect239k1","sect283k1","sect283r1","sect409k1","sect409r1","sect571k1","sect571r1","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","MAX_FRAGMENT_LEN","MAX_FRAGMENT_SIZE","MessageFragmenter","PACKET_OVERHEAD","borrow","borrow_mut","default","fragment_message","fragment_slice","from","into","set_max_fragment_size","try_from","try_into","type_id","AuthorityNames","BulkOnly","CertReqExtension","Certificate","CertificateEntry","CertificateExtension","CertificatePayload","CertificatePayloadTLS13","CertificateRequest","CertificateRequestPayload","CertificateRequestPayloadTLS13","CertificateRequestTLS13","CertificateStatus","CertificateStatus","CertificateStatus","CertificateStatusAck","CertificateStatusRequest","CertificateStatusRequest","CertificateTLS13","CertificateVerify","ClientECDHParams","ClientExtension","ClientHello","ClientHelloPayload","ClientKeyExchange","ClientSessionTicket","ConvertProtocolNameList","ConvertServerNameList","Cookie","Cookie","DH","DHE","DistinguishedName","ECDH","ECDHE","ECDHE","ECDHEServerKeyExchange","ECParameters","ECPointFormats","ECPointFormats","EarlyData","EarlyData","EarlyData","EncryptedExtensions","EndOfEarlyData","ExtendedMasterSecretAck","ExtendedMasterSecretRequest","Finished","HandshakeMessagePayload","HandshakePayload","HasServerExtensions","HelloRequest","HelloRetryExtension","HelloRetryRequest","HelloRetryRequest","HostName","KeyExchangeAlgorithm","KeyShare","KeyShare","KeyShare","KeyShareEntry","KeyUpdate","MessageHash","NamedGroups","NewSessionTicket","NewSessionTicketExtension","NewSessionTicketPayload","NewSessionTicketPayloadTLS13","NewSessionTicketTLS13","OCSP","OCSPCertificateStatusRequest","Offer","PresharedKey","PresharedKey","PresharedKeyBinder","PresharedKeyIdentity","PresharedKeyModes","PresharedKeyOffer","ProtocolName","Protocols","Protocols","RSA","Random","RenegotiationInfo","Request","ResponderId","Sct","ServerECDHParams","ServerExtension","ServerHello","ServerHelloDone","ServerHelloPayload","ServerKeyExchange","ServerKeyExchangePayload","ServerName","ServerName","ServerNameAck","ServerNamePayload","SessionId","SessionTicket","SessionTicketAck","SignatureAlgorithms","SignatureAlgorithms","SignedCertificateTimestamp","SignedCertificateTimestamp","SignedCertificateTimestampRequest","SupportedVersions","SupportedVersions","SupportedVersions","TransportParameters","TransportParameters","TransportParametersDraft","TransportParametersDraft","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","Unknown","UnknownExtension","age_add","any_entry_has_duplicate_extension","any_entry_has_extension","any_entry_has_unknown_extension","as_ref","as_ref","as_ref","as_ref","as_ref","as_single_slice","binders","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_handshake_hash","build_key_update_notify","build_ocsp","canames","cert","certtypes","check_psk_ext_is_last","cipher_suite","cipher_suite","cipher_suites","client_version","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compression_method","compression_methods","context","context","convert","curve_params","curve_type","dss","early_data_extension_offered","early_data_extension_offered","early_data_extension_offered","empty","ems_support_acked","ems_support_offered","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","entries","eq","eq","eq","equivalent","extensions","extensions","extensions","extensions","extensions","exts","exts","find_extension","find_extension","find_extension","find_extension","find_extension","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_slices","get_alpn_extension","get_alpn_protocol","get_alpn_protocol","get_authorities_extension","get_cert_status","get_cookie","get_ecpoints_extension","get_ecpoints_extension","get_encoding_for_binder_signing","get_end_entity_ocsp","get_end_entity_scts","get_extensions","get_extensions","get_key_share","get_keyshare_extension","get_max_early_data_size","get_namedgroups_extension","get_ocsp_response","get_psk","get_psk_index","get_psk_modes","get_quic_params_extension","get_quic_params_extension","get_quic_params_extension","get_requested_key_share_group","get_sct_list","get_sct_list","get_scts","get_sigalgs_extension","get_sigalgs_extension","get_single_hostname","get_sni_extension","get_supported_versions","get_supported_versions","get_ticket_extension","get_type","get_type","get_type","get_type","get_type","get_type","get_versions_extension","group","has_duplicate_extension","has_duplicate_extension","has_duplicate_extension","has_duplicate_extension","has_duplicate_extension","has_duplicate_extension","has_duplicate_names_for_type","has_keyshare_extension_with_duplicates","has_unknown_extension","has_unknown_extension","identities","identity","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","is_empty","legacy_version","legacy_version","len","lifetime","lifetime_hint","make_alpn","make_empty_renegotiation_info","make_sct","make_sct","make_sni","named_group","new","new","new","new","new","new","new","new","new","new","new_hostname","nonce","obfuscated_ticket_age","ocsp_response","params","payload","payload","payload","payload","psk_mode_offered","public","public","random","random","random","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read","read_version","responder_ids","session_id","session_id","session_id","set_psk_binder","sigschemes","ticket","ticket","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_slices","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_given_kxa","write_slice","Alert","ApplicationData","BorrowedPlainMessage","ChangeCipherSpec","Handshake","InvalidContentType","InvalidEmptyPayload","MAX_WIRE_SIZE","Message","MessageError","MessagePayload","MessageTooLarge","OpaqueMessage","PlainMessage","TooShortForHeader","TooShortForLength","UnknownProtocolVersion","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_alert","build_key_update_notify","clone","clone","clone_into","clone_into","content_type","encode","encode","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","handshake","into","into","into","into","into","into","into_plain_message","into_unencrypted_opaque","is_handshake_type","new","payload","payload","payload","payload","read","to_owned","to_owned","to_unencrypted_opaque","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","encoded","parsed","ClientSessionCommon","Retrieved","ServerSessionKey","ServerSessionValue","Tls12ClientSessionValue","Tls13ClientSessionValue","age_obfuscation_offset","alpn","application_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cipher_suite","client_cert_chain","clone","clone","clone_into","clone_into","creation_time_sec","deref","deref","deref","encode","extended_ms","fmt","fmt","fmt","fmt","from","from","from","from","from","has_expired","into","into","into","into","into","is_fresh","map","master_secret","max_early_data_size","new","new","obfuscated_ticket_age","read","set_extended_ms_used","set_freshness","sni","suite","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","version","Decrypted","RecordLayer","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","into","into","new","plaintext","try_from","try_from","try_into","try_into","type_id","type_id","want_close_before_decrypt","SECP256R1","SECP384R1","X25519","_01_impl_vulnerabilities","_02_tls_vulnerabilities","_03_howto","_04_features","_05_defaults","Accepted","Acceptor","AllowAnyAnonymousOrAuthenticatedClient","AllowAnyAuthenticatedClient","ClientCertVerified","ClientCertVerifier","ClientHello","DnsName","NoClientAuth","NoServerSessionStorage","ParsedCertificate","ProducesTickets","ReadEarlyData","ResolvesServerCert","ResolvesServerCertUsingSni","ServerConfig","ServerConnection","ServerConnectionData","ServerSessionMemoryCache","StoresServerSessions","UnparsedCertRevocationList","WantsServerCert","accept","add","alpn","alpn_protocols","as_ref","assertion","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","boxed","builder","can_cache","can_cache","can_cache","cert_resolver","cipher_suites","client_auth_mandatory","client_auth_mandatory","client_auth_mandatory","client_auth_root_subjects","client_auth_root_subjects","client_auth_root_subjects","client_auth_root_subjects","client_hello","clone","clone","clone","clone_into","clone_into","clone_into","decrypt","default","default","deref","deref_mut","early_data","enabled","encrypt","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","hash","ignore_client_order","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_connection","key_log","lifetime","max_early_data_size","max_fragment_size","new","new","new","new","new","offer_client_auth","offer_client_auth","offer_client_auth","offer_client_auth","offer_client_auth","parse","put","put","put","read","read_tls","received_resumption_data","reject_early_data","resolve","resolve","send_half_rtt_data","send_tls13_tickets","server_name","server_name","session_storage","set_resumption_data","signature_schemes","supported_verify_schemes","supported_verify_schemes","take","take","take","ticketer","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_ascii","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_client_cert","verify_client_cert","verify_client_cert","verify_client_cert","verify_tls12_signature","verify_tls12_signature","verify_tls13_signature","verify_tls13_signature","with_crls","with_crls","CertifiedKey","SignError","Signer","SigningKey","algorithm","any_ecdsa_type","any_eddsa_type","any_supported_type","borrow","borrow","borrow_mut","borrow_mut","cert","choose_scheme","clone","clone_into","end_entity_cert","fmt","fmt","from","from","into","into","key","new","ocsp","scheme","sct_list","sign","supported_sign_tls13","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","TLS12","TLS13"],"q":[[0,"rustls"],[1288,"rustls::Error"],[1292,"rustls::cipher_suite"],[1312,"rustls::client"],[1545,"rustls::internal"],[1548,"rustls::internal::cipher"],[1550,"rustls::internal::msgs"],[1560,"rustls::internal::msgs::alert"],[1573,"rustls::internal::msgs::base"],[1648,"rustls::internal::msgs::ccs"],[1659,"rustls::internal::msgs::codec"],[1711,"rustls::internal::msgs::codec::ListLength"],[1712,"rustls::internal::msgs::deframer"],[1747,"rustls::internal::msgs::enums"],[2153,"rustls::internal::msgs::fragmenter"],[2168,"rustls::internal::msgs::handshake"],[2907,"rustls::internal::msgs::message"],[3003,"rustls::internal::msgs::message::MessagePayload"],[3005,"rustls::internal::msgs::persist"],[3082,"rustls::internal::record_layer"],[3102,"rustls::kx_group"],[3105,"rustls::manual"],[3110,"rustls::server"],[3363,"rustls::sign"],[3401,"rustls::version"],[3403,"core::result"],[3404,"core::convert"],[3405,"core::iter::traits::iterator"],[3406,"core::option"],[3407,"core::clone"],[3408,"core::cmp"],[3409,"std::io::error"],[3410,"std::io"],[3411,"std::io"],[3412,"core::convert"],[3413,"core::ops::deref"],[3414,"core::fmt"],[3415,"std::time"],[3416,"webpki::error"],[3417,"core::convert"],[3418,"ring::digest"],[3419,"alloc::sync"],[3420,"alloc::string"],[3421,"core::any"],[3422,"sct"],[3423,"std::time"],[3424,"core::ops::function"],[3425,"webpki::crl"],[3426,"core::iter::traits::collect"],[3427,"alloc::boxed"]],"d":["A list of all the cipher suites supported by rustls.","A list of all the key exchange groups supported by rustls.","A list of all the protocol versions supported by rustls.","","AES with 128-bit keys in Galois counter mode.","AES with 256-bit keys in Galois counter mode.","","The <code>AlertDescription</code> TLS protocol enum.  Values in this …","We received a fatal alert.  This means the peer is unhappy.","","","The certificate is valid, but the handshake is rejected …","","","","","","The certificate is not correctly encoded.","The <code>max_fragment_size</code> value supplied in configuration was …","","A certificate is not correctly signed by the key of its …","The CRL had a bad, or unsupported signature from its …","Bulk symmetric encryption scheme used by a cipher suite.","The ways in which a certificate revocation list (CRL) can …","This type contains a single certificate by value.","","The ways in which certificate validators can express …","","","","","","","","","","Chacha20 for confidentiality with poly1305 for …","","The <code>CipherSuite</code> TLS protocol enum.  Values in this enum …","A client initiates the connection.","A client connection","","","","","","Connection state common to both client and server …","Building a <code>ServerConfig</code> or <code>ClientConfig</code> in a …","Helper trait to abstract <code>ConfigBuilder</code> over building a …","A client or server connection.","Interface shared by client and server connections.","The <code>ContentType</code> TLS protocol enum.  Values in this enum …","The cipher suite configuration that an application should …","The version configuration that an application should use …","","","","","","","We couldn’t decrypt a message.  This is invariably fatal.","","","This type combines a <code>SignatureScheme</code> and a signature …","","A <code>DistinguishedName</code> is a <code>Vec&lt;u8&gt;</code> wrapped in internal types.","","","","","","","","","","","","","","","","","","","","We couldn’t encrypt a message because it was larger than …","","","rustls reports protocol errors using this type.","The current time is after the <code>notAfter</code> time in the …","","","","","","","We failed to figure out what time it currently is.","We failed to acquire random bytes from the system.","","A catch-all error for unlikely errors.","","","","This function doesn’t work until the TLS handshake is …","An advertised message was larger then expected.","The <code>HandshakeType</code> TLS protocol enum.  Values in this enum …","","","","","","","","","","","","","","","","We received a TLS handshake message that isn’t valid …","We received a TLS message that isn’t valid right now. …","","","","The peer sent us a syntactically incorrect …","Context was incorrectly attached to a certificate request …","A provided certificate revocation list (CRL) was invalid.","We saw an invalid certificate.","A peer sent an invalid certificate status type","An unknown content type was encountered during message …","The CRL contained an invalid CRL number.","A peer’s DH params could not be decoded","A message was zero-length when its record kind forbids it.","","A peer sent an unexpected key update request.","","A corrupt TLS message payload that resulted in an error.","The peer sent us a TLS message with invalid contents.","The certificate is being used for a different purpose than …","The CRL contained a revoked certificate with an invalid …","The presented SCT(s) were invalid.","","A peer’s server name could not be decoded","Values of this structure are returned from …","The CRL issuer does not specify the cRLSign key usage.","","This trait represents the ability to do something useful …","<code>KeyLog</code> implementation that opens a file whose name is …","","","","","","A TLS message payload was larger then allowed by the …","Message is shorter than the expected length","","Missing data for the named handshake payload value","","A peer did not advertise its supported key exchange groups.","","","","The <code>NamedGroup</code> TLS protocol enum.  Values in this enum are …","","","An incoming connection did not support any known …","","","","The peer didn’t give us any certificates.","","","KeyLog that does exactly nothing.","","","A peer sent an empty list of signature schemes","","The subject names in an end-entity certificate do not …","The current time is before the <code>notBefore</code> time in the …","","","","","","Any other error.","The CRL is invalid for some other reason.","A trust anchor, commonly known as a “Root Certificate.”","The CRL is not correctly encoded.","The set of cases where we failed to make a connection …","The peer doesn’t support a protocol version/feature we …","The set of cases where we failed to make a connection …","The peer deviated from the standard TLS protocol. The …","The peer sent an oversized record/fragment.","This type contains a private key by value.","The <code>ProtocolVersion</code> TLS protocol enum.  Values in this …","","","","","","","","","","","","A structure that implements <code>std::io::Read</code> for reading …","","","","","","","","The certificate has been revoked.","A container for root certificates able to provide a …","","","","","","","","","","","","","","","","A server waits for a client to connect.","A server connection","","","","","","","","","","","","","Side of the connection.","Data specific to the peer’s side (client or server).","The <code>SignatureAlgorithm</code> TLS protocol enum.  Values in this …","","The <code>SignatureScheme</code> TLS protocol enum.  Values in this …","","","This type implements <code>io::Read</code> and <code>io::Write</code>, encapsulating …","This type implements <code>io::Read</code> and <code>io::Write</code>, encapsulating …","A cipher suite supported by rustls.","A key-exchange group supported by rustls.","A TLS protocol version supported by rustlsconcrete, safe ticket creation mechanism.","A TLS 1.2 cipher suite","A TLS 1.2 cipher suite supported by rustls.","","","A TLS 1.3 cipher suite","A TLS 1.3 cipher suite supported by rustls.","","","Trailing data found for the named handshake payload value","","","A peer sent an unexpected message type.","","The certificate contains an extension marked critical, but …","","","","","","","","","","The certificate chain is not issued by a known root …","","An unknown TLS protocol was encountered during message …","","","","","","","A peer sent a non-null compression method.","The CRL, or a revoked certificate in the CRL, contained an …","The CRL is not a v2 X.509 CRL.","A peer sent an unknown elliptic curve type.","The CRL is an unsupported delta CRL, containing only …","","The CRL is an unsupported indirect CRL, containing revoked …","A peer sent an unsupported key exchange algorithm.","The certificate verifier doesn’t support the given type …","The CRL contained a revoked certificate with an …","","Config builder state where the caller must supply cipher …","Config builder state where the caller must supply key …","Config builder state where the caller must supply a …","Config builder state where the caller must supply TLS …","A structure that implements <code>std::io::Write</code> for writing …","","","","Add a single DER-encoded certificate to the store.","Parse the given DER-encoded certificates and add all that …","Adds all the given TrustAnchors <code>anchors</code>.  This does not …","Adds all the given TrustAnchors <code>anchors</code>.  This does not …","Retrieves the protocol agreed with the peer via ALPN.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Can a session using suite self resume from suite prev?","All defined ciphersuites appear in this module.","Items for use in a client.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Common cipher suite fields.","Common cipher suite fields.","This function uses <code>io</code> to complete any outstanding IO for …","This function uses <code>io</code> to complete any outstanding IO for …","Our TLS connection","Our connection","","","","","Make a new, empty <code>RootCertStore</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is a non-standard extension which extends the key …","Derives key material from the agreed connection secrets.","Derives key material from the agreed connection secrets.","How long the fixed part of the ‘IV’ is.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs an <code>OwnedTrustAnchor</code> from its components.","Get a mutable reference to the underlying socket","Get a reference to the underlying socket","","","","","","","","","Which hash function to use with this suite.","Internal classes which may be useful outside the library. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if there are no certificates.","Returns true if the connection is currently performing the …","How to exchange/agree keys.","All defined key exchange groups appear in this module.","Say how many certificates are in the container.","Log the given <code>secret</code>.  <code>client_random</code> is provided for …","","","This is the rustls manual.","The IANA “TLS Supported Groups” name of the group","Retrieves the ciphersuite agreed with the peer.","Makes a new <code>KeyLogFile</code>.  The environment variable is …","Make the recommended Ticketer.  This produces tickets with …","Make a new Stream using the Connection <code>conn</code> and …","Make a new StreamOwned taking the Connection <code>conn</code> and …","","Retrieves the certificate chain used by the peer to …","True if the peer has sent us a close_notify alert.  This is","How many plaintext bytes could be obtained via …","Processes any new packets read by a previous call to …","Processes any new packets read by a previous call to …","Retrieves the protocol version agreed with the peer.","Obtain plaintext data received from the peer over this TLS …","","","","","","","","","","","","Read TLS content from <code>rd</code> into the internal buffer.","Read TLS content from <code>rd</code>.","Returns an object that allows reading plaintext.","Returns an object that allows reading plaintext.","Resolve the set of supported <code>SignatureScheme</code>s from the …","The list of roots.","The <code>SignatureScheme</code> used to produce the signature.","","","","Queues a close_notify warning alert to be sent in the next …","Items for use in a server.","Sets a limit on the internal buffers used to buffer unsent …","Message signing interfaces and implementations.","How to sign messages for authentication.","Get the signature.","The underlying transport, like a socket","The underlying transport, like a socket","Return the subject field including its outer SEQUENCE …","The cipher suite’s identifier","How many bytes could be written by <code>Connection::write_tls</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if this suite is usable for a key only …","All defined protocol versions appear in this module.","Return supported protocol version for the cipher suite.","The TLS enumeration naming this version.","Returns true if the caller should call <code>Connection::read_tls</code>…","Returns true if the caller should call …","Indicates whether the secret with label <code>label</code> will be …","Indicates whether the secret with label <code>label</code> will be …","","Sets a custom <code>ResolvesServerCert</code>.","Set Certificate Transparency logs to use for server …","Choose a specific set of cipher suites.","Sets a single certificate chain and matching private key …","Sets a single certificate chain and matching private key …","Sets a custom <code>ResolvesClientCert</code>.","Sets a custom <code>ResolvesClientCert</code>.","Choose how to verify client certificates.","Set a custom certificate verifier.","Choose a specific set of key exchange groups.","Disable client authentication.","Do not support client auth.","Do not support client auth.","Use a specific set of protocol versions.","Choose how to verify server certificates.","Choose the default set of cipher suites (…","Choose the default set of key exchange groups (…","Accept the default protocol versions: both TLS1.2 and …","Start side-specific config with defaults for underlying …","Sets a single certificate chain and matching private key …","Sets a single certificate chain and matching private key …","Sets a single certificate chain and matching private key.  …","Sets a single certificate chain, matching private key, OCSP","Send the plaintext <code>buf</code> to the peer, encrypting and …","","","Writes TLS messages to <code>wr</code>.","Writes TLS messages to <code>wr</code>.","","","Returns an object that allows writing plaintext.","Returns an object that allows writing plaintext.","Which types we expected","Which handshake type we expected","What type we received","What handshake type we received","Common state for cipher suites (both for TLS 1.2 and TLS …","The TLS1.3 ciphersuite TLS_AES_128_GCM_SHA256","The TLS1.3 ciphersuite TLS_AES_256_GCM_SHA384","The TLS1.3 ciphersuite TLS_CHACHA20_POLY1305_SHA256","The TLS1.2 ciphersuite …","The TLS1.2 ciphersuite …","The TLS1.2 ciphersuite …","The TLS1.2 ciphersuite …","The TLS1.2 ciphersuite …","The TLS1.2 ciphersuite …","","","How to do bulk encryption.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The TLS enumeration naming this cipher suite.","","","","Policy for enforcing Certificate Transparency.","Common configuration for (typically) all connections made …","This represents a single TLS client connection.","State associated with a client connection.","An implementer of <code>ClientSessionStore</code> that stores everything","A trait for the ability to store client session data, so …","Accessor for dangerous configuration options.","Disable 1.2 resumption.","The server is identified by a DNS name.  The name is sent …","Zero-sized marker type representing verification of a …","The provided input could not be parsed because it is not a …","The server is identified by an IP address. SNI is not done.","A trait for the ability to choose a certificate chain and …","Configuration for how/when a client is allowed to resume a …","Zero-sized marker type representing verification of a …","Something that can verify a server certificate chain, and …","Encodes ways a client can know the expected name of the …","Support 1.2 resumption using session ids only.","Support 1.2 resumption using session ids or RFC 5077 …","","What mechanisms to support for resuming a TLS 1.2 session.","","A config builder state where the caller needs to supply …","A config builder state where the caller needs to supply a …","Default <code>ServerCertVerifier</code>, see the trait impl for more …","Stub that implements io::Write and dispatches to …","Which ALPN protocols we include in our client hello. If …","Make a <code>HandshakeSignatureValid</code>","Make a <code>ServerCertVerified</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a builder to build up the client configuration.","How many bytes you may send.  Writes will become short …","The underlying ClientConfig","How to decide what client auth certificate/keys to use.","","","","","","","","","","","","","Access configuration options whose use is dangerous and …","Create an in-memory session store resumption with up to …","","","Disable all use of session resumption.","Returns an <code>io::Write</code> implementer you can write bytes to to …","Whether to send data on the first flight (“early data”…","Whether to send the Server Name Indication (SNI) extension …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return true if any certificates at all are available.","","Create a new <code>Resumption</code> that stores data for the given …","Remember a TLS1.3 ticket that might be retrieved later …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns True if the server signalled it will process early …","How to output key material for debugging.  The default …","This should return the value most recently passed to …","","The maximum size of TLS message we’ll emit.  If None, we …","Constructs a new <code>WebPkiVerifier</code>.","Create a new policy.","Make a new ClientConnection.  <code>config</code> controls how we …","Make a new ClientSessionMemoryCache.  <code>size</code> is the maximum …","Remove and forget any saved TLS1.2 session for <code>server_name</code>.","","Returns <code>true</code> if Rustls should ask the server to send SCTs.","Returns <code>true</code> if Rustls should ask the server to send SCTs.","With the server-supplied acceptable issuers in …","How and when the client can resume a previous session.","Overrides the default <code>ServerCertVerifier</code> with something …","Remember what <code>NamedGroup</code> the given server chose.","","Remember a TLS1.2 session.","","Use a custom <code>ClientSessionStore</code> implementation to store …","Return the list of SignatureSchemes that this verifier …","Return the list of SignatureSchemes that this verifier …","Return a TLS1.3 ticket previously provided to …","","Configure whether TLS 1.2 sessions may be resumed, and by …","Get the most recently saved TLS1.2 session for <code>server_name</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the signature verification methods supported by …","Verify the end-entity certificate <code>end_entity</code> is valid for …","Will verify the certificate is valid in the following ways:","Verify that the end-entity certificate <code>end_entity</code> is a …","Verify that the <code>end_entity</code> has a name or alternative name …","Verify a signature allegedly by the given server …","Verify a signature allegedly by the given server …","Verify a signature allegedly by the given server …","Verify a signature allegedly by the given server …","","Low-level TLS message decryption functions.","Low-level TLS message parsing and encoding functions.","Low-level TLS record layer functions.","Objects with this trait can decrypt TLS messages.","Perform the decryption over the concerned TLS message.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","An externally length’d payload","An arbitrary, unknown-content, u16-length-prefixed payload","An arbitrary, unknown-content, u24-length-prefixed payload","An arbitrary, unknown-content, u8-length-prefixed payload","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Trait for implementing encoding and decoding functionality …","The length of the length prefix for a list.","Wrapper over a slice of bytes that allows reading chunks …","","A trait for types that can be encoded and decoded in a …","","","","Used to check whether the reader has any content left …","","","","","","","","","Function for encoding itself by appending itself to the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convenience function for encoding the implementation into …","Convenience function for encoding the implementation into …","Creates a new Reader of the provided <code>bytes</code> slice with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the number of bytes that are still able to be read …","","","Function for decoding itself from the provided reader will …","","Function for wrapping a call to the read function in a …","Function for wrapping a call to the read function in a …","Borrows a slice of all the remaining bytes that appear …","Attempts to create a new Reader on a sub section of this …","Attempts to borrow a slice of bytes from the current …","","","","","","","","","","","","Returns the cursor position which is also the number of …","","","","","This deframer works to reconstruct TLS messages from a …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns true if we have messages for the caller to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return any decrypted messages that the deframer has been …","Read some bytes from <code>rd</code>, and add them to our internal …","","","","","","","","","","","","","","","The <code>AlertLevel</code> TLS protocol enum.  Values in this enum are …","","The <code>CertificateStatusType</code> TLS protocol enum.  Values in …","","","","The <code>ClientCertificateType</code> TLS protocol enum.  Values in …","","The <code>Compression</code> TLS protocol enum.  Values in this enum …","","","","","","The <code>ECCurveType</code> TLS protocol enum.  Values in this enum …","","","The <code>ECPointFormat</code> TLS protocol enum.  Values in this enum …","","","","","","","The <code>ExtensionType</code> TLS protocol enum.  Values in this enum …","","","","","","","","The <code>HashAlgorithm</code> TLS protocol enum.  Values in this enum …","","The <code>HeartbeatMessageType</code> TLS protocol enum.  Values in …","The <code>HeartbeatMode</code> TLS protocol enum.  Values in this enum …","","","The <code>KeyUpdateRequest</code> TLS protocol enum.  Values in this …","","","","","The <code>NamedCurve</code> TLS protocol enum.  Values in this enum are …","","The <code>NamedGroup</code> TLS protocol enum.  Values in this enum are …","","","","","The <code>PSKKeyExchangeMode</code> TLS protocol enum.  Values in this …","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>ServerNameType</code> TLS protocol enum.  Values in this enum …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Take the Message <code>msg</code> and re-fragment it into new messages …","Enqueue borrowed fragments of (version, typ, payload) which","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Set the maximum fragment size that will be produced.","","","","","","","","","","","","","","","","Only supports OCSP","","","","","","","","","","","","","","","","","","","","A <code>DistinguishedName</code> is a <code>Vec&lt;u8&gt;</code> wrapped in internal typeseturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if there is more than one extension of a given","Returns true if there is more than one extension of a given","Returns true if there is more than one extension of a given","Returns true if there is more than one extension of a given","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Make a basic SNI ServerNameRequest quoting <code>hostname</code>.","","","","","Make a new one with one entryframe, named TLSPlaintext in the standard.","","","","","Maximum on-wire message size.","A message with decoded payload","","","","A TLS frame, named TLSPlaintext in the standard.","A decrypted TLS frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Force conversion into a plaintext message.","","","","","","","","<code>MessageError</code> allows callers to distinguish between valid …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Result of decryption.","Record layer that tracks decryption and encryption keys.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new record layer with no keys.","The decrypted message.","","","","","","","Whether the peer appears to be getting close to encrypting …","Ephemeral ECDH on secp256r1 (aka NIST-P256)","Ephemeral ECDH on secp384r1 (aka NIST-P384)","Ephemeral ECDH on curve25519 (see RFC7748)","This section discusses vulnerabilities in other TLS …","This section discusses vulnerabilities and design errors …","This section collects together goal-oriented documentation.","This section documents rustls itself: what protocol …","This section provides rationale for the defaults in rustls.","Represents a <code>ClientHello</code> message received through the …","Handle on a server-side connection before configuration is …","A <code>ClientCertVerifier</code> that will allow both anonymous and …","A <code>ClientCertVerifier</code> that will ensure that every client …","Zero-sized marker type representing verification of a …","Something that can verify a client certificate chain","A struct representing the received Client Hello","A type which encapsulates an owned string that is a …","Turns off client authentication.","Something which never stores sessions.","wrapper around internal representation of a parsed …","A trait for the ability to encrypt and decrypt tickets.","Allows reading of early data in resumed TLS1.3 connections.","How to choose a certificate chain and signing key for use …","Something that resolves do different cert chains/keys based","Common configuration for a set of server sessions.","This represents a single TLS server connection.","State associated with a server connection.","An implementer of <code>StoresServerSessions</code> that stores …","A trait for the ability to store server session data.","An unparsed DER encoded Certificate Revocation List (CRL).","A config builder state where the caller must supply how to …","Check if a <code>ClientHello</code> message has been received.","Add a new <code>sign::CertifiedKey</code> to be used for the given SNI …","Get the ALPN protocol identifiers submitted by the client.","Protocol names we support, most preferred first. If empty …","","Make a <code>ClientCertVerified</code>","","","","","","","","","","","","","","Produce a borrowed <code>DnsNameRef</code> from this owned <code>DnsName</code>.","","","","","","","","","","","","","","","","","","","","","","","","Wrap this verifier in an <code>Arc</code> and coerce it to …","Wrap this verifier in an <code>Arc</code> and coerce it to …","Construct a <code>NoClientAuth</code>, wrap it in an <code>Arc</code> and coerce it …","Create builder to build up the server configuration.","Whether the store can cache another session. This is used …","","","How to choose a server cert and key.","Get cipher suites.","Return <code>true</code> to require a client certificate and <code>false</code> to …","Return <code>true</code> to require a client certificate and <code>false</code> to …","","Returns the Subjects of the client authentication trust …","","","","Get the <code>ClientHello</code> for this connection.","","","","","","","Decrypt <code>cipher</code>, validating its authenticity protection and …","Return an empty Acceptor, ready to receive bytes from a …","","","","Returns an <code>io::Read</code> implementer you can read bytes from …","Returns true if this implementation will encrypt/decrypt …","Encrypt and authenticate <code>plain</code>, returning the resulting …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Find a value with the given <code>key</code>.  Return it, or None if it …","","","","Ignore the client’s ciphersuite order. Instead, choose …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>Accepted</code> into a <code>ServerConnection</code>.","How to output key material for debugging.  The default …","Returns the lifetime in seconds of tickets produced now. …","Amount of early data to accept for sessions created by …","The maximum size of TLS message we’ll emit.  If None, we …","Construct a new <code>AllowAnyAuthenticatedClient</code>.","Construct a new <code>AllowAnyAnonymousOrAuthenticatedClient</code>.","Make a new ServerSessionMemoryCache.  <code>size</code> is the maximum …","Create a new and empty (i.e., knows no certificates) …","Make a new ServerConnection.  <code>config</code> controls how we …","Returns <code>true</code> to enable the server to request a client …","Returns <code>true</code> to enable the server to request a client …","","","","Parse the CRL DER, yielding a <code>webpki::CertRevocationList</code> …","Store session secrets encoded in <code>value</code> against <code>key</code>, …","","","","Read TLS content from <code>rd</code>.","Application-controlled portion of the resumption ticket …","Explicitly discard early data, notifying the client","Choose a certificate chain and matching key given …","","Whether the server should send “0.5RTT” data.  This …","How many TLS1.3 tickets to send immediately after a …","Get the server name indicator.","Retrieves the server name, if any, used to select the …","How to store client sessions.","Set the resumption data to embed in future resumption …","Get the compatible signature schemes.","Return the list of SignatureSchemes that this verifier …","Return the list of SignatureSchemes that this verifier …","Find a value with the given <code>key</code>.  Return it and delete it; …","","","How to produce tickets.","","","","","","","","","","","","","","","","","","","","","","","","Validate the given bytes are a DNS name if they are viewed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify the end-entity certificate <code>end_entity</code> is valid, …","","","","Verify a signature allegedly by the given client …","Verify a signature allegedly by the given client …","Verify a signature allegedly by the given client …","Verify a signature allegedly by the given client …","Update the verifier to validate client certificates …","Update the verifier to validate client certificates …","A packaged-together certificate chain, matching <code>SigningKey</code> …","Errors while signing","A thing that can sign a message.","An abstract signing key.","What kind of key we have.","Parse <code>der</code> as any ECDSA key type, returning the first which …","Parse <code>der</code> as any EdDSA key type, returning the first which …","Parse <code>der</code> as any supported key encoding/type, returning …","","","","","The certificate chain.","Choose a <code>SignatureScheme</code> from those offered.","","","The end-entity certificate.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The certified key.","Make a new CertifiedKey, with the given chain and key.","An optional OCSP response from the certificate issuer, …","Reveals which scheme will be used when you call <code>sign()</code>.","An optional collection of SCTs from CT logs, proving the …","Signs <code>message</code> using the selected scheme.","The set of schemes we support for signatures and that are …","","","","","","","","","TLS1.2","TLS1.3"],"i":[0,0,0,33,49,49,35,0,4,36,35,23,21,21,33,33,33,23,4,33,23,24,0,0,0,34,0,33,34,33,33,34,34,33,33,34,49,35,0,19,44,0,0,34,34,33,0,0,0,0,0,0,0,0,36,13,13,13,33,33,4,33,33,0,21,0,21,21,21,21,21,21,36,16,16,16,16,16,36,16,36,21,21,21,22,4,34,34,0,23,33,103,103,103,103,103,4,4,34,4,35,33,21,4,20,0,35,34,34,34,21,21,21,21,21,21,21,21,33,21,33,4,4,21,33,33,20,20,4,4,20,20,24,20,20,21,20,21,0,4,23,24,4,21,20,0,24,21,0,0,22,34,21,34,21,20,20,21,20,33,20,21,21,21,0,22,34,4,33,33,22,4,22,22,0,22,33,20,22,23,23,22,21,21,21,21,23,24,0,24,0,4,0,4,4,0,0,33,21,21,36,16,16,16,16,16,16,16,0,33,21,21,21,21,21,21,23,0,15,15,15,15,13,13,21,21,21,21,21,21,21,21,21,19,44,0,0,22,34,34,21,34,0,21,21,22,22,0,0,0,22,0,21,21,0,0,0,0,0,22,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,13,13,13,0,38,0,22,22,38,0,22,21,20,22,21,20,33,23,103,33,34,35,13,15,16,36,33,23,33,20,33,21,21,21,21,33,20,24,24,20,24,33,24,20,4,24,33,0,0,0,0,0,21,103,103,1,1,1,1,11,2,13,15,16,11,75,52,40,46,17,71,72,60,211,18,1,48,19,44,4,20,21,22,23,24,54,57,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,49,38,50,11,75,52,40,46,17,71,72,60,211,18,1,48,19,44,4,20,21,22,23,24,54,57,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,49,38,50,17,0,0,18,1,19,4,20,21,22,23,24,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,38,18,1,19,4,20,21,22,23,24,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,38,2,46,17,40,44,54,57,40,44,40,44,1,25,33,34,35,13,15,16,36,2,46,17,48,19,4,20,21,22,23,24,33,34,35,13,15,16,36,37,2,49,38,50,48,33,34,35,13,15,16,36,37,2,49,50,46,40,44,46,52,54,57,46,17,60,18,1,48,19,44,4,4,20,21,22,23,24,54,57,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,49,38,50,11,75,52,40,46,17,71,72,60,211,18,1,48,19,44,44,44,4,4,4,4,4,4,4,20,21,22,23,24,24,54,57,25,26,29,30,31,32,33,33,33,34,34,35,35,13,13,15,15,16,16,36,36,37,2,49,38,38,38,50,18,57,57,13,15,16,33,34,35,36,2,38,0,11,75,52,40,46,17,71,72,60,211,18,1,48,19,44,4,20,21,22,23,24,54,57,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,49,38,50,1,11,46,0,1,212,71,72,0,60,11,72,211,54,57,2,11,48,48,40,44,11,75,54,57,25,33,34,35,13,15,16,36,2,40,44,40,44,46,1,25,103,103,103,11,0,11,0,46,25,54,57,18,38,48,18,1,19,4,20,21,22,23,24,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,38,4,11,75,52,40,46,17,71,72,60,211,18,1,48,19,44,4,20,21,22,23,24,54,57,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,49,38,50,11,75,52,40,46,17,71,72,60,211,18,1,48,19,44,4,20,21,22,23,24,54,57,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,49,38,50,11,75,52,40,46,17,71,72,60,211,18,1,48,19,44,4,20,21,22,23,24,54,57,25,26,29,30,31,32,33,34,35,13,15,16,36,37,2,49,38,50,38,0,38,50,11,11,212,212,71,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,52,54,57,40,44,52,54,40,44,213,214,213,214,0,0,0,0,0,0,0,0,0,0,92,92,92,92,92,92,92,92,92,92,0,0,0,0,0,0,0,96,98,0,0,98,0,0,0,0,0,96,96,0,0,0,0,0,0,0,83,93,94,105,104,95,64,215,102,100,93,94,84,87,83,96,97,98,99,105,104,95,64,215,102,100,93,94,84,87,83,96,97,98,99,83,95,99,83,84,87,83,96,97,98,84,87,83,96,97,98,83,97,64,64,97,64,83,83,96,98,98,95,90,64,100,100,93,94,84,87,83,96,97,98,99,105,104,95,64,215,102,100,93,94,84,87,83,96,97,98,99,88,98,97,108,102,105,104,95,64,215,102,100,93,94,84,87,83,96,97,98,99,64,83,108,102,83,105,104,64,102,108,102,90,90,88,83,99,108,102,108,102,97,90,90,108,102,97,108,102,84,87,83,96,97,98,100,105,104,95,64,215,102,100,93,94,84,87,83,96,97,98,98,99,105,104,95,64,215,102,100,93,94,84,87,83,96,97,98,99,105,104,95,64,215,102,100,93,94,84,87,83,96,97,98,99,105,90,105,0,0,90,90,90,90,95,0,0,0,0,216,0,0,0,0,0,0,0,0,0,0,0,113,113,113,113,113,113,113,113,113,113,113,113,0,0,0,0,114,115,116,117,114,115,116,117,114,115,116,117,114,115,116,117,114,116,117,114,115,116,117,116,114,115,116,117,114,115,116,117,114,115,116,117,114,115,116,117,117,114,115,116,117,117,114,115,116,117,114,114,115,116,117,114,115,116,117,114,115,116,117,114,115,116,117,114,115,116,117,0,119,119,119,119,119,119,119,119,119,119,0,0,0,217,0,218,218,218,76,76,218,120,76,218,120,120,120,219,120,76,120,76,218,120,219,219,76,76,218,120,76,0,0,219,120,219,219,76,76,76,120,76,218,120,76,218,120,76,218,120,0,76,220,0,0,123,0,122,121,122,123,121,122,123,121,122,123,121,122,123,121,121,122,123,122,121,121,122,121,122,123,121,122,123,121,122,123,122,125,133,133,0,125,0,125,125,125,0,125,0,125,128,128,128,129,0,128,128,0,125,125,125,135,135,125,0,103,103,103,103,103,130,128,0,125,0,0,132,125,0,129,127,125,127,0,135,0,125,129,138,125,0,125,136,136,125,134,134,125,125,128,128,128,128,125,131,131,125,127,127,127,127,127,125,133,125,125,0,125,125,125,125,125,125,125,125,125,125,133,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,137,137,125,125,130,126,103,126,103,126,126,125,126,103,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,126,126,126,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,127,128,128,129,129,130,130,131,131,125,125,132,132,126,126,103,103,133,133,134,134,135,135,136,136,137,137,138,138,125,126,103,127,128,129,130,131,132,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,126,126,126,126,126,126,126,126,126,103,126,103,126,103,126,126,126,126,126,126,126,126,126,126,126,126,126,126,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,127,128,129,130,131,125,132,126,103,133,134,135,136,137,138,0,0,0,0,139,139,139,139,139,139,139,139,139,139,139,173,160,0,179,0,0,0,0,179,0,0,179,0,165,179,159,0,157,179,179,0,0,179,0,179,0,0,0,157,163,160,160,0,160,160,171,0,0,157,159,157,159,176,179,179,159,157,179,0,0,0,179,0,0,179,151,0,157,159,163,0,179,179,157,179,0,0,0,179,146,0,158,157,159,0,0,157,0,0,157,159,160,0,159,158,0,0,0,0,179,179,0,179,0,0,157,159,0,0,157,159,157,173,159,165,157,157,159,163,157,159,157,159,151,146,157,159,163,165,171,173,176,179,0,177,140,140,140,141,142,143,144,77,221,155,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,172,173,174,175,176,177,178,179,145,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,172,173,174,175,176,177,178,179,145,145,145,146,172,166,172,147,164,162,147,147,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,160,77,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,160,77,162,147,140,174,140,169,167,170,222,222,147,149,162,147,148,149,152,141,153,154,142,155,143,156,146,144,157,159,147,163,164,162,165,166,140,167,168,169,170,171,77,172,173,174,175,176,177,178,145,140,148,149,160,148,156,147,164,162,174,166,177,222,222,147,174,177,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,172,173,174,175,176,177,178,179,145,148,148,149,150,151,152,141,141,153,154,142,142,155,143,143,156,146,144,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,77,172,173,174,175,176,177,178,179,145,221,147,222,222,174,165,164,147,162,145,140,140,222,162,162,147,177,147,166,147,162,147,222,222,147,164,162,165,166,147,174,223,147,164,162,147,157,159,163,165,173,176,147,153,222,222,147,164,166,177,223,147,164,166,155,154,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,172,173,174,175,176,177,178,179,145,178,149,164,162,149,177,175,159,159,159,165,157,167,148,153,154,155,166,140,169,175,177,178,151,177,154,178,170,150,152,153,145,147,168,169,149,147,162,148,149,152,141,153,154,142,155,143,156,146,144,157,159,147,163,164,162,165,166,140,167,168,169,170,171,77,172,173,174,175,176,177,178,145,145,156,147,164,162,147,172,175,177,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,160,77,221,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,172,173,174,175,176,177,178,179,145,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,172,173,174,175,176,177,178,179,145,150,152,145,148,149,150,151,152,141,153,154,142,155,143,156,146,144,157,158,159,147,163,164,162,165,166,140,160,167,168,169,170,171,77,172,173,174,175,176,177,178,179,145,171,148,185,185,0,185,185,186,186,110,0,0,0,186,0,0,186,186,186,183,185,110,112,112,184,186,183,185,110,112,184,186,184,184,110,112,110,112,185,185,110,185,110,112,184,186,183,185,110,112,112,184,186,185,183,185,110,112,184,186,110,112,184,185,183,110,112,184,110,110,112,183,183,185,110,112,184,184,186,183,185,110,112,184,186,183,110,112,183,185,110,112,184,186,183,110,112,184,224,224,0,0,0,0,0,0,189,189,189,188,101,107,187,189,188,101,107,187,189,189,189,107,187,107,187,189,188,101,107,189,189,101,107,187,189,188,101,107,187,189,188,188,101,107,187,189,189,188,189,101,188,189,188,189,189,189,189,101,107,187,188,101,107,187,189,188,101,107,187,189,188,101,107,187,189,188,189,0,0,124,191,124,191,191,124,191,124,191,124,191,124,191,124,191,124,191,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,194,195,80,182,196,204,197,198,201,109,199,200,194,195,203,63,192,193,182,182,196,81,80,202,204,197,198,201,109,199,200,194,195,203,63,192,193,182,196,81,80,202,197,198,201,80,225,199,200,80,195,89,89,198,89,197,198,201,193,182,81,80,182,81,80,73,192,202,63,63,63,73,73,182,182,89,63,182,196,81,80,204,197,198,201,109,199,200,194,195,203,63,192,193,182,196,81,80,202,225,199,200,182,80,204,197,198,201,109,199,200,194,195,203,63,192,193,182,196,81,80,202,193,80,73,80,80,197,198,200,194,63,89,89,197,198,201,204,225,199,200,203,192,63,63,82,194,80,80,195,63,80,63,195,89,89,225,199,200,80,182,81,80,204,197,198,201,109,109,199,200,194,195,203,63,192,193,182,182,196,81,80,202,182,204,197,198,201,109,199,200,194,195,203,63,192,193,182,196,81,80,202,204,197,198,201,109,199,200,194,195,203,63,192,193,182,196,81,80,202,89,197,198,201,89,89,89,89,197,198,0,0,0,0,207,0,0,0,106,208,106,208,106,207,106,106,106,208,208,106,208,106,208,106,106,106,209,106,209,0,106,208,106,208,106,208,106,208,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[5,[3,4]]]],[[1,[6,[-1]]],[[3,[7,7]]],[[9,[[6,[8]]]]]],[[1,-1],3,10],[[1,-1],3,10],[11,[[12,[[6,[8]]]]]],[2,[[6,[8]]]],[13,[[12,[14]]]],[15,[[12,[14]]]],[16,[[12,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,17],[[12,[17]]]],0,0,[18,18],[1,1],[19,19],[4,4],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[[[26,[-1,-2]]],[[26,[-1,-2]]],[27,28],27],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[13,13],[15,15],[16,16],[36,36],[37,37],[2,2],[38,38],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[2,2],39],0,0,[[[40,[-1]],-2],[[5,[[3,[7,7]],41]]],[],[42,43]],[[44,-1],[[5,[[3,[7,7]],41]]],[42,43]],0,0,[[[40,[-1]]],[],[]],[44],[[[40,[-1]]],[],[]],[44],[[],1],[[25,[45,[8]]],3],[[33,[45,[8]]],3],[[34,[45,[8]]],3],[[35,[45,[8]]],3],[[13,[45,[8]]],3],[[15,[45,[8]]],3],[[16,[45,[8]]],3],[[36,[45,[8]]],3],[[2,[45,[8]]],3],[[46,46],47],[[17,17],47],[[48,48],47],[[19,19],47],[[4,4],47],[[20,20],47],[[21,21],47],[[22,22],47],[[23,23],47],[[24,24],47],[[33,33],47],[[34,34],47],[[35,35],47],[[13,13],47],[[15,15],47],[[16,16],47],[[36,36],47],[[37,37],47],[[2,2],47],[[49,49],47],[[38,38],47],[[50,50],47],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],0,[[[40,[-1]],-2,[6,[8]],[12,[[6,[8]]]]],[[5,[-2,4]]],[],[[51,[[6,[8]]]]]],[[44,-1,[6,[8]],[12,[[6,[8]]]]],[[5,[-1,4]]],[[51,[[6,[8]]]]]],0,[52,[[53,[3]]]],[[[54,[-1,-2]]],[[53,[3]]],[55,56],[42,43]],[[[57,[-1,-2]]],[[53,[3]]],[55,56],[42,43]],[[46,58],59],[[17,58],59],[[60,58],59],[[18,58],59],[[1,58],59],[[48,58],59],[[19,58],59],[[44,58],59],[[4,58],59],[[4,58],59],[[20,58],59],[[21,58],59],[[22,58],59],[[23,58],59],[[24,58],59],[[[54,[-1,-2]],58],59,[61,62],[61,42,43,62]],[[[57,[-1,-2]],58],59,[61,62],[61,42,43,62]],[[25,58],59],[[[26,[-1,-2]],58],59,28,61],[[29,58],59],[[30,58],59],[[31,58],59],[[32,58],59],[[33,58],59],[[34,58],59],[[35,58],59],[[13,58],59],[[15,58],59],[[16,58],59],[[36,58],59],[[37,58],59],[[2,58],59],[[49,58],59],[[38,58],59],[[50,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[63,44],[64,44],[21,4],[20,4],[23,4],[-1,-1,[]],[22,4],[24,4],[65,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[66,24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,33],[23,33],[-1,-1,[]],[8,34],[-1,-1,[]],[8,35],[-1,-1,[]],[67,13],[-1,-1,[]],[67,15],[-1,-1,[]],[-1,-1,[]],[67,16],[-1,-1,[]],[8,36],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,38],[46,38],[-1,-1,[]],[-1,-1,[]],[[-1,-2,[12,[-3]]],18,[[68,[[45,[8]]]]],[[68,[[45,[8]]]]],[[68,[[45,[8]]]]]],[[[57,[-1,-2]]],-2,[55,56],[42,43]],[[[57,[-1,-2]]],-2,[55,56],[42,43]],[13,67],[15,67],[16,67],[33,8],[34,8],[35,8],[36,8],[[2,-1],3,69],[38,70],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,47],[11,47],0,0,[1,7],[[-1,14,[6,[8]],[6,[8]]],3,[]],[[71,14,[6,[8]],[6,[8]]],3],[[72,14,[6,[8]],[6,[8]]],3],0,0,[11,[[12,[38]]]],[[],72],[[],[[5,[[74,[73]],4]]]],[[-1,-2],[[54,[-1,-2]]],[55,56],[42,43]],[[-1,-2],[[57,[-1,-2]]],[55,56],[42,43]],[[2,2],[[12,[39]]]],[11,[[12,[[6,[2]]]]]],[48,47],[48,7],[[[40,[-1]]],[[5,[48,4]]],[]],[44,[[5,[48,4]]]],[11,[[12,[13]]]],[[75,[6,[8]]],[[53,[7]]]],[[[54,[-1,-2]],[6,[8]]],[[53,[7]]],[55,56],[42,43]],[[[57,[-1,-2]],[6,[8]]],[[53,[7]]],[55,56],[42,43]],[76,[[5,[25,20]]]],[76,[[5,[33,20]]]],[76,[[5,[34,20]]]],[76,[[5,[35,20]]]],[76,[[5,[13,20]]]],[76,[[5,[15,20]]]],[76,[[5,[16,20]]]],[76,[[5,[36,20]]]],[76,[[5,[2,20]]]],[[[40,[-1]],42],[[5,[7,41]]],[]],[[44,42],[[5,[7,41]]]],[[[40,[-1]]],75,[]],[44,75],[[46,[6,[16]]],[[45,[16]]]],0,0,0,0,0,[11,3],0,[[11,[12,[7]]],3],0,0,[25,[[6,[8]]]],0,0,[18,77],[38,15],[48,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,78,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[[38,36],47],0,[38,50],0,[11,47],[11,47],[[-1,14],47,[]],[[-1,14],47,[]],[[71,14],47],[[[26,[80,81]],[74,[82]]],80],[[[26,[83,84]],[6,[85]],86],[[26,[83,87]]]],[[[26,[-1,29]],[6,[38]]],[[26,[-1,30]]],28],[[[26,[83,84]],[45,[2]],37],[[5,[83,4]]]],[[[26,[83,87]],[45,[2]],37],[[5,[83,4]]]],[[[26,[83,87]],[74,[88]]],83],[[[26,[83,84]],[74,[88]]],83],[[[26,[80,32]],[74,[89]]],[[26,[80,81]]]],[[[26,[83,32]],[74,[90]]],[[26,[83,87]]]],[[[26,[-1,30]],[6,[60]]],[[26,[-1,31]]],28],[[[26,[80,32]]],[[26,[80,81]]]],[[[26,[83,87]]],83],[[[26,[83,84]]],83],[[[26,[-1,31]],[6,[50]]],[[5,[[26,[-1,32]],4]]],28],[[[26,[83,32]],-1],[[26,[83,84]]],[[68,[[74,[1]]]]]],[[[26,[-1,29]]],[[26,[-1,30]]],28],[[[26,[-1,30]]],[[26,[-1,31]]],28],[[[26,[-1,31]]],[[5,[[26,[-1,32]],4]]],28],[[[26,[-1,29]]],[[26,[-1,32]]],28],[[[26,[83,84]],[45,[2]],37],[[5,[83,4]]]],[[[26,[83,87]],[45,[2]],37],[[5,[83,4]]]],[[[26,[80,81]],[45,[2]],37],[[5,[80,4]]]],[[[26,[80,81]],[45,[2]],37,[45,[8]],[45,[8]]],[[5,[80,4]]]],[[52,[6,[8]]],[[53,[7]]]],[[[54,[-1,-2]],[6,[8]]],[[53,[7]]],[55,56],[42,43]],[[[57,[-1,-2]],[6,[8]]],[[53,[7]]],[55,56],[42,43]],[[[40,[-1]],43],[[5,[7,41]]],[]],[[44,43],[[5,[7,41]]]],[[52,[6,[91]]],[[53,[7]]]],[[[54,[-1,-2]],[6,[91]]],[[53,[7]]],[55,56],[42,43]],[[[40,[-1]]],52,[]],[44,52],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[92,58],59],[-1,-1,[]],[-1,-2,[],[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],93],[[],94],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[26,[83,29]]]],[95,7],0,0,[84,84],[87,87],[83,83],[96,96],[97,97],[98,98],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[83,99],[[],97],[64],[64],[[],97],[64,[[12,[95]]]],0,0,[[96,96],47],[[98,98],47],[[-1,-2],47,[],[]],[95,[[53,[3]]]],[[90,58],59],[[64,58],59],[[100,58],59],[[100,58],59],[[93,58],59],[[94,58],59],[[84,58],59],[[87,58],59],[[83,58],59],[[96,58],59],[[97,58],59],[[98,58],59],[[99,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,47,[]],[[98,-1],3,69],[7,97],[[-1,98,101],3,[]],[[102,98,101],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,47],0,[[-1,98],[[12,[103]]],[]],[[102,98],[[12,[103]]]],0,[[-1,[12,[104]]],105,[[68,[[74,[1]]]]]],[[[6,[85]],86],104],[[[74,[83]],98],[[5,[64,4]]]],[7,102],[[-1,98],3,[]],[[102,98],3],[-1,47,[]],[-1,47,[]],[[-1,[6,[[6,[8]]]],[6,[16]]],[[12,[[74,[106]]]]],[]],0,[[99,[74,[90]]],3],[[-1,98,103],3,[]],[[102,98,103],3],[[-1,98,107],3,[]],[[102,98,107],3],[[[74,[108]]],97],[-1,[[45,[16]]],[]],[-1,[[45,[16]]],[]],[[-1,98],[[12,[101]]],[]],[[102,98],[[12,[101]]]],[[97,96],97],[[-1,98],[[12,[107]]],[]],[[102,98],[[12,[107]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,78,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[14,[[5,[98]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[[],[[45,[16]]]],[[-1,2,[6,[2]],98,10,[6,[8]],86],[[5,[94,4]]],[]],[[105,2,[6,[2]],98,10,[6,[8]],86],[[5,[94,4]]]],[[109,1,[6,[2]],86],[[5,[3,4]]]],[[109,98],[[5,[3,4]]]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[95,[6,[8]]],[[53,[7]]]],0,0,0,0,[[-1,110,111],[[5,[112,4]]],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[113,[45,[8]]],3],[[113,58],59],[-1,-1,[]],[-1,-2,[],[]],0,[76,[[5,[113,20]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[114,114],[115,115],[116,116],[117,117],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],114],[[],116],[[],117],[[114,[45,[8]]],3],[[115,[45,[8]]],3],[[116,[45,[8]]],3],[[117,[45,[8]]],3],[[[6,[8]],[45,[8]]],3],[[114,114],47],[[115,115],47],[[116,116],47],[[117,117],47],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[114,58],59],[[115,58],59],[[116,58],59],[[117,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[118,[0]]],117],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[117,[[45,[8]]]],[-1,114,[[68,[[45,[8]]]]]],[[[45,[8]]],115],[[[45,[8]]],116],[[[45,[8]]],117],[76,[[5,[114,20]]]],[76,114],[76,[[5,[115,20]]]],[76,[[5,[116,20]]]],[76,[[5,[117,20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[119,[45,[8]]],3],[[119,58],59],[-1,-1,[]],[-1,-2,[],[]],[76,[[5,[119,20]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],0,0,0,0,0,0,0,0,[76,47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[120,120],[[-1,-2],3,[],[]],[[-1,[45,[8]]],3,[]],[[120,[45,[8]]],3],[[76,14],[[5,[3,20]]]],[[120,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[45,[8]]],[]],[-1,[[45,[8]]],[]],[[[6,[8]]],76],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,7],[[67,[6,[8]]],3],[[111,[6,[8]]],3],[76,[[5,[-1,20]]],[]],[76,[[5,[120,20]]]],[[[6,[8]]],[[5,[-1,20]]],[]],[[[6,[8]]],[[5,[-1,20]]],[]],[76,[[6,[8]]]],[[76,7],[[5,[76,20]]]],[[76,7],[[12,[[6,[8]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],0,[76,7],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],121],[[122,58],59],[[123,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[121,47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[121,124],[[5,[[12,[122]],4]]]],[[121,42],[[53,[7]]]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[125,[[12,[14]]]],[126,[[12,[14]]]],[103,[[12,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[127,127],[128,128],[129,129],[130,130],[131,131],[125,125],[132,132],[126,126],[103,103],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[127,[45,[8]]],3],[[128,[45,[8]]],3],[[129,[45,[8]]],3],[[130,[45,[8]]],3],[[131,[45,[8]]],3],[[125,[45,[8]]],3],[[132,[45,[8]]],3],[[126,[45,[8]]],3],[[103,[45,[8]]],3],[[133,[45,[8]]],3],[[134,[45,[8]]],3],[[135,[45,[8]]],3],[[136,[45,[8]]],3],[[137,[45,[8]]],3],[[138,[45,[8]]],3],[[127,127],47],[[128,128],47],[[129,129],47],[[130,130],47],[[131,131],47],[[125,125],47],[[132,132],47],[[126,126],47],[[103,103],47],[[133,133],47],[[134,134],47],[[135,135],47],[[136,136],47],[[137,137],47],[[138,138],47],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[-1,-2],47,[],[]],[[127,58],59],[[128,58],59],[[129,58],59],[[130,58],59],[[131,58],59],[[125,58],59],[[132,58],59],[[126,58],59],[[103,58],59],[[133,58],59],[[134,58],59],[[135,58],59],[[136,58],59],[[137,58],59],[[138,58],59],[8,127],[-1,-1,[]],[8,128],[-1,-1,[]],[8,129],[-1,-1,[]],[-1,-1,[]],[8,130],[8,131],[-1,-1,[]],[67,125],[-1,-1,[]],[-1,-1,[]],[8,132],[67,126],[-1,-1,[]],[-1,-1,[]],[67,103],[8,133],[-1,-1,[]],[-1,-1,[]],[8,134],[8,135],[-1,-1,[]],[-1,-1,[]],[8,136],[-1,-1,[]],[8,137],[-1,-1,[]],[8,138],[125,67],[126,67],[103,67],[127,8],[128,8],[129,8],[130,8],[131,8],[132,8],[133,8],[134,8],[135,8],[136,8],[137,8],[138,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,[[5,[127,20]]]],[76,[[5,[128,20]]]],[76,[[5,[129,20]]]],[76,[[5,[130,20]]]],[76,[[5,[131,20]]]],[76,[[5,[125,20]]]],[76,[[5,[132,20]]]],[76,[[5,[126,20]]]],[76,[[5,[103,20]]]],[76,[[5,[133,20]]]],[76,[[5,[134,20]]]],[76,[[5,[135,20]]]],[76,[[5,[136,20]]]],[76,[[5,[137,20]]]],[76,[[5,[138,20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],139],[[139,112],[[0,[10]]]],[[139,35,13,[6,[8]]],[[0,[10]]]],[-1,-1,[]],[-1,-2,[],[]],[[139,[12,[7]]],[[5,[3,4]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[140,47],[140,47],[140,47],[141,[[6,[8]]]],[142,[[6,[8]]]],[143,[[6,[8]]]],[144,[[6,[8]]]],[77,[[6,[8]]]],[-1,[[12,[[6,[8]]]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[8]]],145],[[],145],[[],146],0,0,0,[147,47],0,0,0,0,[148,148],[149,149],[150,150],[151,151],[152,152],[141,141],[153,153],[154,154],[142,142],[155,155],[143,143],[156,156],[146,146],[144,144],[157,157],[158,158],[159,159],[160,160],[77,77],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,0,0,[140,161],0,0,0,[-1,47,[]],[-1,47,[]],[147,47],[[],149],[162,47],[147,47],[[148,[45,[8]]],3],[[149,[45,[8]]],3],[[152,[45,[8]]],3],[[141,[45,[8]]],3],[[153,[45,[8]]],3],[[154,[45,[8]]],3],[[142,[45,[8]]],3],[[155,[45,[8]]],3],[[143,[45,[8]]],3],[[156,[45,[8]]],3],[[146,[45,[8]]],3],[[144,[45,[8]]],3],[[157,[45,[8]]],3],[[159,[45,[8]]],3],[[147,[45,[8]]],3],[[163,[45,[8]]],3],[[164,[45,[8]]],3],[[162,[45,[8]]],3],[[165,[45,[8]]],3],[[166,[45,[8]]],3],[[140,[45,[8]]],3],[[167,[45,[8]]],3],[[168,[45,[8]]],3],[[169,[45,[8]]],3],[[170,[45,[8]]],3],[[171,[45,[8]]],3],[[77,[45,[8]]],3],[[172,[45,[8]]],3],[[173,[45,[8]]],3],[[174,[45,[8]]],3],[[175,[45,[8]]],3],[[176,[45,[8]]],3],[[177,[45,[8]]],3],[[178,[45,[8]]],3],[[145,[45,[8]]],3],0,[[148,148],47],[[149,149],47],[[160,160],47],[[-1,-2],47,[],[]],0,0,0,0,0,0,0,[[-1,125],[[12,[159]]],[]],[[-1,125],[[12,[159]]],[]],[[147,125],[[12,[157]]]],[[174,125],[[12,[173]]]],[[177,125],[[12,[176]]]],[[148,58],59],[[149,58],59],[[150,58],59],[[151,58],59],[[152,58],59],[[141,58],59],[[153,58],59],[[154,58],59],[[142,58],59],[[155,58],59],[[143,58],59],[[156,58],59],[[146,58],59],[[144,58],59],[[157,58],59],[[158,58],59],[[159,58],59],[[147,58],59],[[163,58],59],[[164,58],59],[[162,58],59],[[165,58],59],[[166,58],59],[[140,58],59],[[160,58],59],[[167,58],59],[[168,58],59],[[169,58],59],[[170,58],59],[[171,58],59],[[77,58],59],[[172,58],59],[[173,58],59],[[174,58],59],[[175,58],59],[[176,58],59],[[177,58],59],[[178,58],59],[[179,58],59],[[145,58],59],[[[180,[8]]],148],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[45,[8]]],141],[-1,-1,[]],[-1,-1,[]],[[[45,[8]]],142],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[45,[8]]],143],[-1,-1,[]],[-1,-1,[]],[[[45,[8]]],144],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[45,[8]]],77],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[6,[[6,[8]]]]],-1,[]],[147,[[12,[[45,[141]]]]]],[-1,[[12,[[6,[8]]]]],[]],[-1,[[12,[[6,[8]]]]],[]],[174,[[12,[[6,[77]]]]]],[165,[[12,[[45,[8]]]]]],[164,[[12,[116]]]],[147,[[12,[[6,[133]]]]]],[162,[[12,[[6,[133]]]]]],[145,[[45,[8]]]],[140,[[45,[8]]]],[140,[[12,[[6,[144]]]]]],[-1,[[6,[159]]],[]],[162,[[6,[159]]]],[162,[[12,[153]]]],[147,[[12,[[6,[153]]]]]],[177,[[12,[181]]]],[147,[[12,[[6,[103]]]]]],[166,[[12,[[45,[8]]]]]],[147,[[12,[155]]]],[162,[[12,[67]]]],[147,[[12,[[6,[136]]]]]],[-1,[[12,[[45,[8]]]]],[]],[-1,[[12,[[45,[8]]]]],[]],[147,[[12,[[45,[8]]]]]],[164,[[12,[103]]]],[162,[[12,[[6,[144]]]]]],[165,[[12,[[6,[144]]]]]],[166,[[12,[[6,[144]]]]]],[147,[[12,[[6,[16]]]]]],[174,[[12,[[6,[16]]]]]],[-1,[[12,[0]]],[]],[147,[[12,[[6,[152]]]]]],[164,[[12,[13]]]],[162,[[12,[13]]]],[147,[[12,[157]]]],[157,125],[159,125],[163,125],[165,125],[173,125],[176,125],[147,[[12,[[6,[13]]]]]],0,[-1,47,[]],[-1,47,[]],[147,47],[164,47],[166,47],[177,47],[-1,47,[]],[147,47],[164,47],[166,47],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[178,[[45,[8]]]],[149,47],0,0,[149,7],0,0,[[[6,[[6,[8]]]]],159],[[],159],[[[45,[8]]],159],[[[45,[8]]],165],0,0,[[],[[5,[148,0]]]],[[103,[6,[8]]],153],[[[45,[8]],181],154],[[154,[45,[8]]],155],[2,166],[[[45,[166]]],140],[[103,[6,[8]]],169],[[181,[45,[8]]],175],[[181,181,[45,[8]],[45,[8]]],177],[[[45,[8]]],178],[182,151],0,0,0,0,0,0,0,0,[[147,136],47],0,0,[[],[[5,[149,0]]]],0,0,[76,[[5,[148,20]]]],[76,[[5,[149,20]]]],[76,[[5,[152,20]]]],[76,[[5,[141,20]]]],[76,[[5,[153,20]]]],[76,[[5,[154,20]]]],[76,[[5,[142,20]]]],[76,[[5,[155,20]]]],[76,[[5,[143,20]]]],[76,[[5,[156,20]]]],[76,[[5,[146,20]]]],[76,[[5,[144,20]]]],[76,[[5,[157,20]]]],[76,[[5,[159,20]]]],[76,[[5,[147,20]]]],[76,[[5,[163,20]]]],[76,[[5,[164,20]]]],[76,[[5,[162,20]]]],[76,[[5,[165,20]]]],[76,[[5,[166,20]]]],[76,[[5,[140,20]]]],[76,[[5,[167,20]]]],[76,[[5,[168,20]]]],[76,[[5,[169,20]]]],[76,[[5,[170,20]]]],[76,[[5,[171,20]]]],[76,[[5,[77,20]]]],[76,[[5,[172,20]]]],[76,[[5,[173,20]]]],[76,[[5,[174,20]]]],[76,[[5,[175,20]]]],[76,[[5,[176,20]]]],[76,[[5,[177,20]]]],[76,[[5,[178,20]]]],[76,[[5,[145,20]]]],[[76,13],[[5,[145,20]]]],0,0,0,0,[[147,-1],3,[[68,[[45,[8]]]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[45,[[6,[8]]]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],0,0,0,[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[[171,160],[[12,[170]]]],[[148,[6,[8]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[112,183],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[130,33],184],[[],184],[110,110],[112,112],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[185,35],[[185,[45,[8]]],3],[110,[[45,[8]]]],[[185,58],59],[[110,58],59],[[112,58],59],[[184,58],59],[[186,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[184,112],[-1,-1,[]],[-1,-1,[]],[145,185],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[110,112],[112,110],[[184,34],47],[[35,13,114],[[5,[185,20]]]],0,0,0,0,[76,[[5,[110,186]]]],[-1,-2,[],[]],[-1,-2,[],[]],[183,110],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[112,[[5,[184]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],0,0,0,[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[107,107],[187,187],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[[188,[-1]]],[],[]],[101],[107],[[189,[45,[8]]],3],0,[[101,58],59],[[107,58],59],[[187,58],59],[[189,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[188,[-1]]],47,56],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[189,47],[[[188,[-1]],-2],[[12,[[188,[-3]]]]],[],190,[]],0,[101,181],0,0,[[[188,[101]]],181],[76,[[5,[189,20]]]],[189,3],0,0,[101,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[191,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],124],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[192,[[5,[[12,[193]],4]]]],[[194,14,106],[[5,[3,4]]]],[195,[[12,[[0,[10]]]]]],0,[182,14],[[],196],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[197,[[74,[89]]]],[198,[[74,[89]]]],[[],[[74,[89]]]],[[],[[26,[80,29]]]],[-1,47,[]],[199,47],[200,47],0,[195,[[6,[15]]]],[-1,47,[]],[-1,47,[]],[198,47],[-1,[[6,[77]]],[]],[197,[[6,[77]]]],[198,[[6,[77]]]],[201,[[6,[77]]]],[193,195],[182,182],[81,81],[80,80],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,[6,[8]]],[[12,[[45,[8]]]]],[]],[[],192],[[],202],[63],[63],[63,[[12,[203]]]],[-1,47,[]],[[-1,[6,[8]]],[[12,[[45,[8]]]]],[]],[[182,182],47],[[-1,-2],47,[],[]],[[89,58],59],[[63,58],59],[[182,58],59],[[196,58],59],[[81,58],59],[[80,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,[6,[8]]],[[12,[[45,[8]]]]],[]],[[199,[6,[8]]],[[12,[[45,[8]]]]]],[[200,[6,[8]]],[[12,[[45,[8]]]]]],[[182,-1],3,69],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[193,[74,[80]]],[[5,[63,4]]]],0,[-1,181,[]],0,0,[1,197],[1,198],[7,[[74,[200]]]],[[],194],[[[74,[80]]],[[5,[63,4]]]],[-1,47,[]],[-1,47,[]],[197,47],[198,47],[201,47],[204,[[5,[205,24]]]],[[-1,[45,[8]],[45,[8]]],47,[]],[[199,[45,[8]],[45,[8]]],47],[[200,[45,[8]],[45,[8]]],47],[[203,[6,[8]]],[[53,[7]]]],[[192,42],[[5,[7,41]]]],[63,[[12,[[6,[8]]]]]],[63,3],[[-1,195],[[12,[[74,[106]]]]],[]],[[194,195],[[12,[[74,[106]]]]]],0,0,[195,[[12,[14]]]],[63,[[12,[14]]]],0,[[63,[6,[8]]],3],[195,[[6,[16]]]],[-1,[[45,[16]]],[]],[-1,[[45,[16]]],[]],[[-1,[6,[8]]],[[12,[[45,[8]]]]],[]],[[199,[6,[8]]],[[12,[[45,[8]]]]]],[[200,[6,[8]]],[[12,[[45,[8]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[2,[[5,[109]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[78,[[5,[182]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[6,[8]]],[[5,[182,100]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[-1,79,[]],[[-1,2,[6,[2]],86],[[5,[196,4]]],[]],[[197,2,[6,[2]],86],[[5,[196,4]]]],[[198,2,[6,[2]],86],[[5,[196,4]]]],[[201,2,[6,[2]],86],[[5,[196,4]]]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[-1,[6,[8]],2,25],[[5,[93,4]]],[]],[[197,-1],[[5,[197,24]]],206],[[198,-1],[[5,[198,24]]],206],0,0,0,0,[-1,36,[]],[37,[[5,[[74,[207]],208]]]],[37,[[5,[[74,[207]],208]]]],[37,[[5,[[74,[207]],208]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,[6,[16]]],[[12,[[210,[209]]]]],[]],[106,106],[[-1,-2],3,[],[]],[106,[[5,[2,208]]]],[[208,58],59],[[208,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[45,[2]],[74,[207]]],106],0,[-1,16,[]],0,[[-1,[6,[8]]],[[5,[[45,[8]],4]]],[]],[[],[[6,[16]]]],[-1,-2,[],[]],[-1,78,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,79,[]],[-1,79,[]],0,0],"c":[690,1275,1276],"p":[[3,"RootCertStore",0],[3,"Certificate",0],[15,"tuple"],[4,"Error",0],[4,"Result",3403],[15,"slice"],[15,"usize"],[15,"u8"],[8,"AsRef",3404],[8,"Iterator",3405],[3,"CommonState",0],[4,"Option",3406],[4,"ProtocolVersion",0],[15,"str"],[4,"CipherSuite",0],[4,"SignatureScheme",0],[3,"Tls13CipherSuite",0],[3,"OwnedTrustAnchor",0],[4,"Side",0],[4,"InvalidMessage",0],[4,"PeerMisbehaved",0],[4,"PeerIncompatible",0],[4,"CertificateError",0],[4,"CertRevocationListError",0],[3,"DigitallySignedStruct",0],[3,"ConfigBuilder",0],[8,"Clone",3407],[8,"ConfigSide",0],[3,"WantsCipherSuites",0],[3,"WantsKxGroups",0],[3,"WantsVersions",0],[3,"WantsVerifier",0],[4,"AlertDescription",0],[4,"HandshakeType",0],[4,"ContentType",0],[4,"SignatureAlgorithm",0],[3,"PrivateKey",0],[4,"SupportedCipherSuite",0],[4,"Ordering",3408],[3,"ConnectionCommon",0],[3,"Error",3409],[8,"Read",3410],[8,"Write",3410],[4,"Connection",0],[3,"Vec",3411],[3,"Tls12CipherSuite",0],[15,"bool"],[3,"IoState",0],[4,"BulkAlgorithm",0],[3,"SupportedProtocolVersion",0],[8,"AsMut",3404],[3,"Writer",0],[6,"Result",3409],[3,"Stream",0],[8,"DerefMut",3412],[8,"Deref",3412],[3,"StreamOwned",0],[3,"Formatter",3413],[6,"Result",3413],[3,"SupportedKxGroup",0],[8,"Debug",3413],[8,"Sized",3414],[3,"ServerConnection",3110],[3,"ClientConnection",1312],[3,"SystemTimeError",3415],[4,"Error",3416],[15,"u16"],[8,"Into",3404],[8,"Hasher",3417],[3,"Algorithm",3418],[3,"NoKeyLog",0],[3,"KeyLogFile",0],[8,"ProducesTickets",3110],[3,"Arc",3419],[3,"Reader",0],[3,"Reader",1659],[3,"DistinguishedName",2168],[3,"String",3420],[3,"TypeId",3421],[3,"ServerConfig",3110],[3,"WantsServerCert",3110],[8,"ResolvesServerCert",3110],[3,"ClientConfig",1312],[3,"WantsTransparencyPolicyOrClientCert",1312],[3,"Log",3422],[3,"SystemTime",3415],[3,"WantsClientCert",1312],[8,"ResolvesClientCert",1312],[8,"ClientCertVerifier",3110],[8,"ServerCertVerifier",1312],[3,"IoSlice",3410],[3,"CipherSuiteCommon",1292],[3,"HandshakeSignatureValid",1312],[3,"ServerCertVerified",1312],[3,"WriteEarlyData",1312],[4,"Tls12Resumption",1312],[3,"Resumption",1312],[4,"ServerName",1312],[3,"DangerousClientConfig",1312],[3,"InvalidDnsNameError",1312],[3,"Tls13ClientSessionValue",3005],[3,"ClientSessionMemoryCache",1312],[4,"NamedGroup",1747],[3,"CertificateTransparencyPolicy",1312],[3,"WebPkiVerifier",1312],[3,"CertifiedKey",3363],[3,"Tls12ClientSessionValue",3005],[8,"ClientSessionStore",1312],[3,"ParsedCertificate",3110],[3,"OpaqueMessage",2907],[15,"u64"],[3,"PlainMessage",2907],[3,"AlertMessagePayload",1560],[3,"Payload",1573],[3,"PayloadU24",1573],[3,"PayloadU16",1573],[3,"PayloadU8",1573],[3,"Okm",3423],[3,"ChangeCipherSpecPayload",1648],[3,"u24",1659],[3,"MessageDeframer",1712],[3,"Deframed",1712],[4,"DeframerError",1712],[3,"RecordLayer",3082],[4,"ExtensionType",1747],[4,"NamedCurve",1747],[4,"HashAlgorithm",1747],[4,"ClientCertificateType",1747],[4,"Compression",1747],[4,"AlertLevel",1747],[4,"HeartbeatMessageType",1747],[4,"ServerNameType",1747],[4,"ECPointFormat",1747],[4,"HeartbeatMode",1747],[4,"ECCurveType",1747],[4,"PSKKeyExchangeMode",1747],[4,"KeyUpdateRequest",1747],[4,"CertificateStatusType",1747],[3,"MessageFragmenter",2153],[3,"CertificatePayloadTLS13",2168],[3,"ProtocolName",2168],[3,"PresharedKeyBinder",2168],[3,"ResponderId",2168],[3,"Sct",2168],[3,"HandshakeMessagePayload",2168],[4,"CertificateStatusRequest",2168],[3,"ClientHelloPayload",2168],[3,"Random",2168],[3,"SessionId",2168],[3,"UnknownExtension",2168],[4,"ServerNamePayload",2168],[3,"ServerName",2168],[3,"KeyShareEntry",2168],[3,"PresharedKeyIdentity",2168],[3,"PresharedKeyOffer",2168],[3,"OCSPCertificateStatusRequest",2168],[4,"ClientExtension",2168],[4,"ClientSessionTicket",2168],[4,"ServerExtension",2168],[4,"KeyExchangeAlgorithm",2168],[6,"CertificatePayload",2168],[3,"ServerHelloPayload",2168],[4,"HelloRetryExtension",2168],[3,"HelloRetryRequest",2168],[4,"CertificateExtension",2168],[3,"CertificateEntry",2168],[3,"ECParameters",2168],[3,"ClientECDHParams",2168],[3,"ServerECDHParams",2168],[3,"ECDHEServerKeyExchange",2168],[4,"ServerKeyExchangePayload",2168],[3,"CertificateRequestPayload",2168],[4,"CertReqExtension",2168],[3,"CertificateRequestPayloadTLS13",2168],[3,"NewSessionTicketPayload",2168],[4,"NewSessionTicketExtension",2168],[3,"NewSessionTicketPayloadTLS13",2168],[3,"CertificateStatus",2168],[4,"HandshakePayload",2168],[15,"array"],[15,"u32"],[3,"DnsName",3110],[3,"BorrowedPlainMessage",2907],[3,"Message",2907],[4,"MessagePayload",2907],[4,"MessageError",2907],[3,"ClientSessionCommon",3005],[3,"Retrieved",3005],[3,"ServerSessionValue",3005],[8,"FnOnce",3424],[3,"Decrypted",3082],[3,"Acceptor",3110],[3,"Accepted",3110],[3,"ResolvesServerCertUsingSni",3110],[3,"ClientHello",3110],[3,"ClientCertVerified",3110],[3,"AllowAnyAuthenticatedClient",3110],[3,"AllowAnyAnonymousOrAuthenticatedClient",3110],[3,"NoServerSessionStorage",3110],[3,"ServerSessionMemoryCache",3110],[3,"NoClientAuth",3110],[3,"ServerConnectionData",3110],[3,"ReadEarlyData",3110],[3,"UnparsedCertRevocationList",3110],[3,"OwnedCertRevocationList",3425],[8,"IntoIterator",3426],[8,"SigningKey",3363],[3,"SignError",3363],[8,"Signer",3363],[3,"Box",3427],[3,"Ticketer",0],[8,"KeyLog",0],[13,"InappropriateMessage",1288],[13,"InappropriateHandshakeMessage",1288],[3,"ClientConnectionData",1312],[8,"MessageDecrypter",1548],[8,"TlsListElement",1659],[4,"ListLength",1659],[8,"Codec",1659],[13,"U24",1711],[8,"ConvertProtocolNameList",2168],[8,"HasServerExtensions",2168],[8,"ConvertServerNameList",2168],[13,"Handshake",3003],[8,"StoresServerSessions",3110]]},\
"rustls_pemfile":{"doc":"rustls-pemfile","t":"NNENNNLLFFFLLLLFFFFLLL","n":["Crl","ECKey","Item","PKCS8Key","RSAKey","X509Certificate","borrow","borrow_mut","certs","crls","ec_private_keys","eq","fmt","from","into","pkcs8_private_keys","read_all","read_one","rsa_private_keys","try_from","try_into","type_id"],"q":[[0,"rustls_pemfile"],[22,"std::io"],[23,"alloc::vec"],[24,"std::io::error"],[25,"core::result"],[26,"core::fmt"],[27,"core::fmt"],[28,"core::any"]],"d":["A Certificate Revocation List; as specified in RFC5280","A Sec1-encoded plaintext private key; as specified in …","The contents of a single recognised block in a PEM file.","A DER-encoded plaintext private key; as specified in …","A DER-encoded plaintext RSA private key; as specified in …","A DER-encoded x509 certificate.","","","Extract all the certificates from <code>rd</code>, and return a vec of …","Extract all the certificate revocation lists (CRLs) from <code>rd</code>…","Extract all SEC1-encoded EC private keys from <code>rd</code>, and …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Extract all PKCS8-encoded private keys from <code>rd</code>, and return …","Extract and return all PEM sections by reading <code>rd</code>.","Extract and decode the next PEM section from <code>rd</code>.","Extract all RSA private keys from <code>rd</code>, and return a vec of …","","",""],"i":[6,6,0,6,6,6,6,6,0,0,0,6,6,6,6,0,0,0,0,6,6,6],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[5,[[3,[[3,[2]]]],4]]]],[1,[[5,[[3,[[3,[2]]]],4]]]],[1,[[5,[[3,[[3,[2]]]],4]]]],[[6,6],7],[[6,8],9],[-1,-1,[]],[-1,-2,[],[]],[1,[[5,[[3,[[3,[2]]]],4]]]],[1,[[5,[[3,[6]],4]]]],[1,[[5,[[10,[6]],4]]]],[1,[[5,[[3,[[3,[2]]]],4]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,11,[]]],"c":[],"p":[[8,"BufRead",22],[15,"u8"],[3,"Vec",23],[3,"Error",24],[4,"Result",25],[4,"Item",0],[15,"bool"],[3,"Formatter",26],[6,"Result",26],[4,"Option",27],[3,"TypeId",28]]},\
"rustversion":{"doc":"github crates-io docs-rs","t":"XXXXXOXXXX","n":["all","any","attr","before","beta","cfg","nightly","not","since","stable"],"q":[[0,"rustversion"]],"d":["","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0],"c":[],"p":[]},\
"ryu":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLALLLFF","n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":[[0,"ryu"],[15,"ryu::raw"],[17,"core::result"],[18,"core::any"]],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[[6,7],8],[[9,7],8]],"c":[],"p":[[3,"Buffer",0],[15,"str"],[8,"Float",0],[4,"Result",17],[3,"TypeId",18],[15,"f32"],[15,"u8"],[15,"usize"],[15,"f64"]]},\
"salsa20":{"doc":"Implementation of the Salsa family of stream ciphers.","t":"GGGGGDGGGGDLLLLCLLLLLFLLLLLLLLLLLLLLLL","n":["Key","Nonce","Salsa12","Salsa20","Salsa8","SalsaCore","XNonce","XSalsa12","XSalsa20","XSalsa8","XSalsaCore","borrow","borrow","borrow_mut","borrow_mut","cipher","from","from","from_raw_state","get_block_pos","get_block_pos","hsalsa","into","into","new","new","process_with_backend","process_with_backend","remaining_blocks","remaining_blocks","set_block_pos","set_block_pos","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"salsa20"],[38,"typenum::marker_traits"],[39,"typenum::generated::consts"],[40,"generic_array"],[41,"typenum::generated::consts"],[42,"core::option"],[43,"core::result"],[44,"core::any"]],"d":["Key type used by all Salsa variants and <code>XSalsa20</code>.","Nonce type used by all Salsa variants.","Salsa20/12 stream cipher (reduced-round variant of Salsa20 …","Salsa20/20 stream cipher (20 rounds; <strong>recommended</strong>)","Salsa20/8 stream cipher (reduced-round variant of Salsa20 …","The Salsa20 core function.","Nonce type used by <code>XSalsa20</code>.","XSalsa12 stream cipher (reduced-round variant of <code>XSalsa20</code> …","XSalsa20 is a Salsa20 variant with an extended 192-bit …","XSalsa8 stream cipher (reduced-round variant of <code>XSalsa20</code> …","The XSalsa core function.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create new Salsa core from raw state.","","","The HSalsa20 function defined in the paper “Extending …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,5,3,5,3,0,5,3,3,5,3,0,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],[[[2,[1]]],[[3,[-1]]],4],[[[5,[-1]]],6,4],[[[3,[-1]]],6,4],[[7,[10,[8,9]]],[[10,[8,11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[7,12],[[5,[-1]]],4],[[7,13],[[3,[-1]]],4],[[[5,[-1]],-2],14,4,15],[[[3,[-1]],-2],14,4,15],[[[5,[-1]]],[[17,[16]]],4],[[[3,[-1]]],[[17,[16]]],4],[[[5,[-1]],6],14,4],[[[3,[-1]],6],14,4],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]]],"c":[],"p":[[15,"u32"],[15,"array"],[3,"SalsaCore",0],[8,"Unsigned",38],[3,"XSalsaCore",0],[15,"u64"],[6,"Key",0],[15,"u8"],[6,"U16",39],[3,"GenericArray",40],[6,"U32",39],[6,"XNonce",0],[6,"Nonce",0],[15,"tuple"],[8,"StreamClosure",41],[15,"usize"],[4,"Option",42],[4,"Result",43],[3,"TypeId",44]]},\
"scrypt":{"doc":"This crate implements the Scrypt key derivation function …","t":"RDSSSSDLLLLLLLLLLLALLLLLLLLLLCLLFLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ALG_ID","Params","RECOMMENDED_LEN","RECOMMENDED_LOG_N","RECOMMENDED_P","RECOMMENDED_R","Scrypt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","equivalent","errors","fmt","fmt","from","from","hash_password_customized","into","into","log_n","new","p","password_hash","r","recommended","scrypt","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","verify_password","InvalidOutputLen","InvalidParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","into","into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"scrypt"],[43,"scrypt::errors"],[75,"core::fmt"],[76,"core::fmt"],[77,"core::option"],[78,"password_hash::value"],[79,"password_hash"],[80,"password_hash::errors"],[81,"password_hash::salt"],[82,"core::convert"],[83,"core::result"],[84,"password_hash::errors"],[85,"alloc::string"]],"d":["Algorithm identifier","The Scrypt parameter values.","Recommended Scrypt parameter <code>Key length</code>.","Recommended log₂ of the Scrypt parameter <code>N</code>: CPU/memory …","Recommended Scrypt parameter <code>p</code>: parallelism.","Recommended Scrypt parameter <code>r</code>: block size.","scrypt type for use with <code>PasswordHasher</code>.","","","","","","","","","","","","Errors for <code>scrypt</code> operations.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","log₂ of the Scrypt parameter <code>N</code>, the work factor.","Create a new instance of <code>Params</code>.","<code>p</code> parameter: parallelization.","","<code>r</code> parameter: resource usage.","Recommended values sufficient for most use-cases","The scrypt key derivation function.","","","","","","","","","","","<code>scrypt()</code> error","<code>ScryptParams</code> error","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,1,1,1,1,0,1,2,1,2,1,2,1,2,1,2,2,0,1,2,1,2,2,1,2,1,1,1,0,1,1,0,1,2,1,1,2,1,2,1,2,2,0,0,20,18,20,18,20,18,20,18,20,18,20,18,20,20,18,18,20,18,20,18,20,18,20,18,20,18,20,18,20,18],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],1],[[2,2],4],[[-1,-2],4,[],[]],0,[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[[2,[8,[7]],[10,[9]],[10,[11]],1,-1],[[13,[12]]],[[15,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[1,7],[[7,16,16,17],[[19,[1,18]]]],[1,16],0,[1,16],[[],1],[[[8,[7]],[8,[7]],1,[8,[7]]],[[19,[3,20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[12,[[19,[1,21]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[-1,[8,[7]],12],[[19,[3,21]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[18,18],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[20,20],4],[[18,18],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[20,5],6],[[20,5],6],[[18,5],6],[[18,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,22,[]],[-1,22,[]]],"c":[],"p":[[3,"Params",0],[3,"Scrypt",0],[15,"tuple"],[15,"bool"],[3,"Formatter",75],[6,"Result",75],[15,"u8"],[15,"slice"],[3,"Ident",76],[4,"Option",77],[6,"Decimal",78],[3,"PasswordHash",79],[6,"Result",80],[3,"Salt",81],[8,"Into",82],[15,"u32"],[15,"usize"],[3,"InvalidParams",43],[4,"Result",83],[3,"InvalidOutputLen",43],[4,"Error",80],[3,"TypeId",84],[3,"String",85]]},\
"sct":{"doc":"SCT.rs: SCT verification library","t":"ENDNNNNLLLLLLMLLLLLMLLMMMLLLLLLLLMF","n":["Error","InvalidSignature","Log","MalformedSct","TimestampInFuture","UnknownLog","UnsupportedSctVersion","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","description","eq","fmt","fmt","from","from","id","into","into","key","max_merge_delay","operated_by","should_be_fatal","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","url","verify_sct"],"q":[[0,"sct"],[35,"core::fmt"],[36,"core::fmt"],[37,"core::any"]],"d":["How sct.rs reports errors.","The SCT contained an invalid signature.","Describes a CT log","The SCT was somehow misencoded, truncated or otherwise …","The SCT was signed in the future.  Clock skew?","The SCT was refers to an unknown log.","The SCT had a version that this library does not handle.","","","","","","","The operator’s name/description of the log. This field …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Key hash, which is SHA256 applied to the SPKI encoding.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Public key usable for verifying certificates. TODO: fixme …","The log’s maximum merge delay. This field is not used by …","Which entity operates the log. This field is not used by …","Applies a suggested policy for error handling:","","","","","","","","The certificate submission url. This field is not used by …","Verifies that the SCT <code>sct</code> (a <code>SignedCertificateTimestamp</code> …"],"i":[0,1,0,1,1,1,1,4,1,4,1,1,1,4,1,4,1,4,1,4,4,1,4,4,4,1,1,4,1,4,1,4,1,4,0],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],0,[[1,1],3],[[4,5],6],[[1,5],6],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[1,3],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],0,[[[10,[9]],[10,[9]],11,[10,[4]]],[[7,[12,1]]]]],"c":[],"p":[[4,"Error",0],[15,"tuple"],[15,"bool"],[3,"Log",0],[3,"Formatter",35],[6,"Result",35],[4,"Result",36],[3,"TypeId",37],[15,"u8"],[15,"slice"],[15,"u64"],[15,"usize"]]},\
"sec1":{"doc":"RustCrypto: SEC1 Elliptic Curve Cryptography Formats","t":"NNIEDICNENNNGNLLLLLLLLLLLLLLALLLLCLLLLLLLLLLLLLLLLLLLKLLLLMAMMLLLLLLLKLLLLLLLLLLLLLLLDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNQEDNNIENNQQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMM","n":["Asn1","Crypto","DecodeEcPrivateKey","EcParameters","EcPrivateKey","EncodeEcPrivateKey","EncodedPoint","Err","Error","NamedCurve","Ok","PointEncoding","Result","Version","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_decode","can_decode","clone","clone","clone","clone_into","clone_into","clone_into","consts","decode","decode","decode_value","decode_value","der","encode","encode","encode_value","encode_value","encoded_len","encoded_len","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from_sec1_der","into","into","into","named_curve","parameters","point","private_key","public_key","read_sec1_der_file","read_sec1_der_file","tag","tag","to_owned","to_owned","to_owned","to_sec1_der","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_len","value_len","write_sec1_der_file","write_sec1_der_file","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Compact","Compact","Compressed","CompressedEvenY","CompressedOddY","CompressedPointSize","Coordinates","EncodedPoint","Identity","Identity","ModulusSize","Tag","Uncompressed","Uncompressed","UncompressedPointSize","UntaggedPointSize","as_bytes","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compress","conditional_select","coordinates","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_affine_coordinates","from_bytes","from_str","from_u8","from_untagged_bytes","hash","identity","into","into","into","is_compact","is_compact","is_compressed","is_compressed","is_identity","is_identity","len","message_len","partial_cmp","tag","tag","to_bytes","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","x","y","zeroize","x","x","x","y","y_is_odd"],"q":[[0,"sec1"],[85,"sec1::consts"],[3475,"sec1::point"],[3565,"sec1::point::Coordinates"],[3570,"der::tag"],[3571,"der::error"],[3572,"core::result"],[3573,"der::reader"],[3574,"der::header"],[3575,"der::error"],[3576,"der::length"],[3577,"core::fmt"],[3578,"core::fmt"],[3579,"core::option"],[3580,"std::path"],[3581,"core::convert"],[3582,"der::document"],[3583,"alloc::string"],[3584,"core::any"],[3585,"typenum::marker_traits"],[3586,"typenum::marker_traits"],[3587,"typenum::marker_traits"],[3588,"typenum::int"],[3589,"typenum::marker_traits"],[3590,"typenum::array"],[3591,"subtle"],[3592,"core::default"],[3593,"core::cmp"],[3594,"alloc::boxed"]],"d":["ASN.1 DER-related errors.","Cryptographic errors.","Parse an [<code>EcPrivateKey</code>] from a SEC1-encoded document.","Elliptic curve parameters as described in RFC5480 Section …","SEC1 elliptic curve private key.","Serialize a [<code>EcPrivateKey</code>] to a SEC1 encoded document.","","Contains the error value","Error type","Elliptic curve named by a particular OID.","Contains the success value","Errors relating to the <code>Elliptic-Curve-Point-to-Octet-String</code>…","Result type with <code>sec1</code> crate’s <code>Error</code> type.","Version errors","","","","","","","","","","","","","","","Type aliases for many constants.","","","","","","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","","","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Deserialize SEC1 private key from ASN.1 DER-encoded data …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the <code>namedCurve</code> OID.","Elliptic curve parameters.","Support for the SEC1 <code>Elliptic-Curve-Point-to-Octet-String</code> …","Private key data.","Public key data, optionally available if version is V2.","Load SEC1 private key from an ASN.1 DER-encoded file on …","Load SEC1 private key from an ASN.1 DER-encoded file on …","","","","","","Serialize a <code>SecretDocument</code> containing a SEC1-encoded …","","","","","","","","","","","","","","Write ASN.1 DER-encoded SEC1 private key to the given path.","Write ASN.1 DER-encoded SEC1 private key to the given path.","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compact curve point","Compact point (<code>0x05</code>)","Compressed curve point","Compressed point with even y-coordinate (<code>0x02</code>)","Compressed point with odd y-coordinate (<code>0x03</code>)","Size of a compressed point for the given elliptic curve …","Enum representing the coordinates of either compressed or …","SEC1 encoded curve point.","Identity point (a.k.a. point at infinity)","Identity point (<code>0x00</code>)","Trait for supported modulus sizes which precomputes the …","Tag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …","Uncompressed curve point","Uncompressed point (<code>0x04</code>)","Size of an uncompressed point for the given elliptic curve …","Size of an untagged point for given elliptic curve, i.e. …","Get byte slice containing the serialized <code>EncodedPoint</code>.","","","","","","","","","","","","","","","Compress this <code>EncodedPoint</code>, returning a new <code>EncodedPoint</code>.","","Get the <code>Coordinates</code> for this <code>EncodedPoint</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Encode an elliptic curve point from big endian serialized …","Decode elliptic curve point (compressed or uncompressed) …","","Parse a tag value from a byte","Decode elliptic curve point from raw uncompressed …","","Return <code>EncodedPoint</code> representing the additive identity …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this <code>EncodedPoint</code> compact?","Is this point compact?","Is this <code>EncodedPoint</code> compressed?","Is this point compressed?","Is this <code>EncodedPoint</code> the additive identity? (a.k.a. point …","Is this point the identity point?","Get the length of the encoded point in bytes","Compute the expected total message length for a message …","","Get the SEC1 tag for this <code>EncodedPoint</code>","Get the tag octet needed to encode this set of <code>Coordinates</code>","Get boxed byte slice containing the serialized <code>EncodedPoint</code>","","","","","","","","","","","","","","","","Get the x-coordinate for this <code>EncodedPoint</code>.","Get the y-coordinate for this <code>EncodedPoint</code>.","","x-coordinate","x-coordinate","x-coordinate","y-coordinate","Is the y-coordinate odd?"],"i":[3,3,0,0,0,0,0,19,0,4,19,3,0,3,3,4,5,3,4,5,4,5,3,4,5,3,4,5,0,4,5,4,5,0,4,5,4,5,4,5,3,4,3,4,3,3,4,5,3,3,4,4,5,58,3,4,5,4,5,0,5,5,58,58,4,5,3,4,5,59,3,3,4,5,5,3,4,5,3,4,5,4,5,59,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,28,30,30,28,28,30,28,28,30,30,28,30,26,28,30,26,28,30,26,28,30,26,28,30,26,28,30,26,26,28,30,26,28,30,26,28,30,26,28,30,26,28,30,26,28,30,26,28,28,30,30,26,26,26,28,28,30,30,26,26,26,26,26,26,26,28,28,30,30,26,28,30,28,30,26,26,26,26,26,26,26,26,26,28,30,26,26,26,26,26,26,26,26,26,28,30,26,28,30,28,30,26,28,30,26,28,30,26,48,49,48,49,49,46,0,0,48,49,0,0,48,49,46,46,45,45,45,48,49,45,48,49,45,48,49,45,48,49,45,45,45,45,45,45,48,49,45,48,49,45,45,45,45,48,49,45,48,49,45,45,45,49,45,45,45,45,48,49,45,49,45,49,45,49,45,49,45,45,48,45,45,48,49,45,45,45,48,49,49,45,48,49,45,48,49,45,45,45,60,61,62,62,61],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[1,2],[3,3],[4,4],[5,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[-1,[[8,[-2,7]]],9,[]],[-1,[[8,[-2,7]]],9,[]],[[-1,10],[[11,[4]]],9],[[-1,10],[[11,[5]]],9],0,[[-1,-2],[[8,[6,7]]],[],12],[[-1,-2],[[8,[6,7]]],[],12],[[4,-1],[[11,[6]]],12],[[5,-1],[[11,[6]]],12],[-1,[[8,[13,7]]],[]],[-1,[[8,[13,7]]],[]],[[3,3],2],[[4,4],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[3,14],15],[[3,14],15],[[4,14],15],[[5,14],15],[7,3],[-1,-1,[]],[-1,-1,[]],[16,4],[-1,-1,[]],[[[18,[17]]],[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[20,[16]]]],0,0,0,0,[-1,[[19,[-2]]],[[22,[21]]],[]],[-1,[[19,[-2]]],[[22,[21]]],[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[19,[23]]],[]],[-1,24,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[[[18,[17]]],[[19,[5]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[4,[[11,[13]]]],[5,[[11,[13]]]],[[-1,-2],[[19,[6]]],[],[[22,[21]]]],[[-1,-2],[[19,[6]]],[],[[22,[21]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[26,-1],[],27],[[28,-1],[],29],[[30,28]],[[30,30]],[[28,28]],[[28,30]],[[30,-1],[],29],[[28,28]],[[28,30]],[[30,28]],[[30,30]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[30,30],[26,26],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[28,28],31],[[30,30],31],[[26,26],31],[[],28],[[],30],[[],26],[[26,-1],[],[27,32]],[[28,28],2],[[30,30],2],[[26,26],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[28,14],[[8,[6,33]]]],[[30,14],[[8,[6,33]]]],[[26,14],[[8,[6,33]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[28,-1],6,34],[[30,-1],6,34],[[26,-1],6,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[28,28],28],[[28,30],30],[[30,30],30],[[30,28],30],[[26,[35,[-1]]],[],[36,32]],[[26,26]],[[26,[37,[-1]]],[],[36,32]],[[28,30],28],[[28,28],28],[[30,28],28],[[30,30],30],[[26,26]],[[26,[37,[-1]]],[],[36,32]],[[26,[35,[-1]]],[],[36,32]],[[26,38]],[[26,-1],[],27],[[26,[39,[-1,-2]]],[],[],[]],[26],[[],28],[[],28],[[],30],[[],30],[[],26],[28],[30],[[28,28],[[20,[31]]]],[[30,30],[[20,[31]]]],[[26,26],[[20,[31]]]],[[-1,-2],[],[],[]],[[26,[35,[-1]]],[],[36,32]],[[26,[37,[-1]]],[],[36,32]],[[26,26]],[[26,-1],[],[27,32]],[[26,[37,[-1]]],[],[36,32]],[[26,[35,[-1]]],[],[36,32]],[[26,26]],[[],2],[[],2],[[],40],[[],41],[[],42],[[],43],[[],41],[[],40],[[],43],[[],42],[[],44],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],17],[[],17],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[45,[-1]]],[[18,[17]]],46],[[[45,[-1]]],[[18,[17]]],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1]]],[[45,[-1]]],[46,47]],[[[48,[-1]]],[[48,[-1]]],[47,46]],[49,49],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[45,[-1]],[45,[-1]]],31,46],[[[45,[-1]]],[[45,[-1]]],46],[[[45,[-1]],[45,[-1]],50],[[45,[-1]]],46],[[[45,[-1]]],[[48,[-1]]],46],[[],[[45,[-1]]],[46,51]],[[[45,[-1]],[45,[-1]]],2,46],[[[48,[-1]],[48,[-1]]],2,[52,46]],[[49,49],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[45,[-1]],14],15,46],[[[45,[-1]],14],15,46],[[[45,[-1]],14],15,46],[[[45,[-1]],14],15,46],[[[48,[-1]],14],15,[53,46]],[[49,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[54,[17,-1]],[54,[17,-1]],2],[[45,[-1]]],46],[-1,[[19,[[45,[-2]]]]],[[22,[[18,[17]]]]],46],[55,[[19,[[45,[-1]]]]],46],[17,[[19,[49]]]],[[[54,[17]]],[[45,[-1]]],46],[[[45,[-1]],-2],6,46,34],[[],[[45,[-1]]],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1]]],2,46],[49,2],[[[45,[-1]]],2,46],[49,2],[[[45,[-1]]],2,46],[49,2],[[[45,[-1]]],56,46],[[49,56],56],[[[45,[-1]],[45,[-1]]],[[20,[31]]],46],[[[45,[-1]]],49,46],[[[48,[-1]]],49,46],[[[45,[-1]]],[[57,[[18,[17]]]]],46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,24,[]],[-1,[[8,[-2]]],[],[]],[[[18,[17]]],[[19,[[45,[-1]]]]],46],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[17,[[19,[49]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[[45,[-1]]],[[20,[[54,[17,-1]]]]],46],[[[45,[-1]]],[[20,[[54,[17,-1]]]]],46],[[[45,[-1]]],6,46],0,0,0,0,0],"c":[],"p":[[4,"Tag",3570],[15,"bool"],[4,"Error",0],[4,"EcParameters",0],[3,"EcPrivateKey",0],[15,"tuple"],[3,"Error",3571],[4,"Result",3572],[8,"Reader",3573],[3,"Header",3574],[6,"Result",3571],[8,"Writer",3575],[3,"Length",3576],[3,"Formatter",3577],[6,"Result",3577],[3,"ObjectIdentifier",3578],[15,"u8"],[15,"slice"],[6,"Result",0],[4,"Option",3579],[3,"Path",3580],[8,"AsRef",3581],[3,"SecretDocument",3582],[3,"String",3583],[3,"TypeId",3584],[3,"Z0",85],[8,"Integer",3585],[3,"B0",85],[8,"Bit",3585],[3,"B1",85],[4,"Ordering",3586],[8,"NonZero",3585],[3,"Error",3577],[8,"Hasher",3587],[3,"NInt",3588],[8,"Unsigned",3585],[3,"PInt",3588],[3,"ATerm",3589],[3,"TArr",3589],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[3,"EncodedPoint",3475],[8,"ModulusSize",3475],[8,"Clone",3590],[4,"Coordinates",3475],[4,"Tag",3475],[3,"Choice",3591],[8,"Default",3592],[8,"PartialEq",3586],[8,"Debug",3577],[3,"GenericArray",3593],[15,"str"],[15,"usize"],[3,"Box",3594],[8,"DecodeEcPrivateKey",0],[8,"EncodeEcPrivateKey",0],[13,"Compact",3565],[13,"Compressed",3565],[13,"Uncompressed",3565]]},\
"secp256k1":{"doc":"Rust bindings for Pieter Wuille’s secp256k1 library, …","t":"EDISENSNNDNNNNNNNNDDNNEIDDHCDDDEDIIIEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALKLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLALLLLLLLLLLLLLCOLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLAALLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRDLLLLLLLLLLLLLLLLLLLLLLLFLLLLLCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDHLLLLLLLLLLLLLSSDDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["All","AllPreallocated","Context","DESCRIPTION","Error","Even","FLAGS","IncorrectSignature","InvalidMessage","InvalidParityValue","InvalidParityValue","InvalidPublicKey","InvalidPublicKeySum","InvalidRecoveryId","InvalidSecretKey","InvalidSharedSecret","InvalidSignature","InvalidTweak","KeyPair","Message","NotEnoughMemory","Odd","Parity","PreallocatedContext","PublicKey","PublicKey","SECP256K1","Scalar","Secp256k1","SecretKey","SecretKey","SignOnly","SignOnlyPreallocated","Signing","ThirtyTwoByteHash","Verification","VerifyOnly","VerifyOnlyPreallocated","XOnlyPublicKey","add_exp_tweak","add_tweak","add_tweak","add_xonly_tweak","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_fast_unstable","cmp_fast_unstable","cmp_fast_unstable","combine","combine_keys","constants","ctx","deallocate","deallocate","deallocate","deallocate","deallocate","deallocate","deallocate","default","deserialize","deserialize","deserialize","deserialize","deserialize","display_secret","display_secret","drop","ecdh","ecdsa","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_fast_unstable","eq_fast_unstable","eq_fast_unstable","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","ffi","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hashed_data","from_hashed_data","from_i32","from_keypair","from_keypair","from_keypair","from_raw_all","from_raw_signing_only","from_raw_verification_only","from_seckey_slice","from_seckey_str","from_seckey_str_global","from_secret_key","from_secret_key","from_secret_key_global","from_slice","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_str","from_u8","from_x_only_public_key","gen_new","generate_keypair","generate_keypair","global","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hashes","impl_array_newtype","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_32","keypair","mul_tweak","mul_tweak","negate","negate","new","new","new","new_global","non_secure_erase","non_secure_erase","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","preallocate_signing_size","preallocate_size","preallocate_size_gen","preallocate_verification_size","preallocated_gen_new","preallocated_new","preallocated_signing_only","preallocated_verification_only","public_key","public_key","public_key","rand","randomize","scalar","schnorr","secret_bytes","secret_bytes","secret_key","seeded_randomize","serde","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_uncompressed","sign_ecdsa","sign_ecdsa","sign_ecdsa_grind_r","sign_ecdsa_low_r","sign_ecdsa_with_noncedata","sign_schnorr","sign_schnorr","sign_schnorr_no_aux_rand","sign_schnorr_with_aux_rand","sign_schnorr_with_rng","signing_only","source","to_i32","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_u8","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tweak_add_check","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verification_only","verify_ecdsa","verify_schnorr","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x_only_public_key","x_only_public_key","x_only_public_key","COMPACT_SIGNATURE_SIZE","CURVE_ORDER","FIELD_SIZE","GENERATOR_X","GENERATOR_Y","KEY_PAIR_SIZE","MAX_SIGNATURE_SIZE","MESSAGE_SIZE","ONE","PUBLIC_KEY_SIZE","SCHNORR_PUBLIC_KEY_SIZE","SCHNORR_SIGNATURE_SIZE","SECRET_KEY_SIZE","UNCOMPRESSED_PUBLIC_KEY_SIZE","ZERO","SharedSecret","as_ref","borrow","borrow","borrow_mut","clone","clone_into","cmp","deserialize","display_secret","eq","equivalent","fmt","from","from_bytes","from_slice","from_str","hash","into","new","non_secure_erase","partial_cmp","secret_bytes","serialize","shared_secret_point","to_owned","try_from","try_into","type_id","vzip","SerializedSignature","Signature","as_c_ptr","as_mut_c_ptr","as_mut_ptr","as_ptr","borrow","borrow_mut","clone","clone_into","cmp","cmp_fast_unstable","deserialize","eq","eq_fast_unstable","equivalent","fmt","fmt","from","from","from_compact","from_der","from_der_lax","from_str","hash","into","normalize_s","partial_cmp","serialize","serialize_compact","serialize_der","serialized_signature","to_owned","to_string","try_from","try_into","type_id","verify","vzip","IntoIter","SerializedSignature","as_ref","as_slice","borrow","borrow","borrow_mut","borrow_mut","capacity","clone","clone","clone_into","clone_into","deref","eq","equivalent","fmt","fmt","fmt","from","from","from_signature","into","into","into_iter","into_iter","into_iter","is_empty","len","next","next_back","nth","size_hint","to_owned","to_owned","to_signature","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GlobalContext","SECP256K1","borrow","borrow_mut","clone","clone_into","deref","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","MAX","ONE","OutOfRangeError","Scalar","ZERO","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_be_bytes","from_le_bytes","hash","index","into","into","non_secure_erase","partial_cmp","random","random_custom","to_be_bytes","to_le_bytes","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Signature","as_c_ptr","as_mut_c_ptr","as_ref","borrow","borrow_mut","clone","clone_into","cmp","deserialize","eq","equivalent","fmt","fmt","fmt","from","from_slice","from_str","hash","index","into","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","verify","vzip"],"q":[[0,"secp256k1"],[459,"secp256k1::constants"],[474,"secp256k1::ecdh"],[504,"secp256k1::ecdsa"],[543,"secp256k1::ecdsa::serialized_signature"],[588,"secp256k1::global"],[603,"secp256k1::scalar"],[650,"secp256k1::schnorr"],[680,"core::result"],[681,"secp256k1_sys"],[682,"secp256k1_sys"],[683,"secp256k1_sys"],[684,"serde::de"],[685,"core::fmt"],[686,"core::fmt"],[687,"rand::rng"],[688,"core::marker"],[689,"core::hash"],[690,"core::option"],[691,"secp256k1_sys::types"],[692,"serde::ser"],[693,"rand_core"],[694,"core::error"],[695,"alloc::string"],[696,"core::any"],[697,"secp256k1_sys"]],"d":["Represents the set of all capabilities.","Represents the set of all capabilities (preallocated …","A trait for all kinds of contexts that lets you define the …","A constant description of the context.","The main error type for this library.","Even parity.","Flags for the ffi.","Signature failed verification.","Bad sized message (“messages” are actually fixed-sized …","Error returned when conversion from an integer to <code>Parity</code> …","The only valid parity values are 0 or 1.","Bad public key.","Bad set of public keys.","Bad recovery id.","Bad secret key.","Bad shared secret.","Bad signature.","Tried to add/multiply by an invalid tweak.","Opaque data structure that holds a keypair consisting of a …","A (hashed) message input to an ECDSA signature.","Didn’t pass enough memory to context creation with …","Odd parity.","Represents the parity passed between FFI function calls.","Trait marking that a particular context object internally …","A Secp256k1 public key, used for verification of …","A Secp256k1 public key, used for verification of …","A global static context to avoid repeatedly creating …","","The secp256k1 engine, used to execute all signature …","Secret 256-bit key used as <code>x</code> in an ECDSA signature.","Secret 256-bit key used as <code>x</code> in an ECDSA signature.","Represents the set of capabilities needed for signing.","Represents the set of capabilities needed for signing …","Marker trait for indicating that an instance of <code>Secp256k1</code> …","Trait describing something that promises to be a 32-byte …","Marker trait for indicating that an instance of <code>Secp256k1</code> …","Represents the set of capabilities needed for verification.","Represents the set of capabilities needed for verification …","An x-only public key, used for verification of schnorr …","Tweaks a <code>PublicKey</code> by adding <code>tweak * G</code> modulo the curve …","Tweaks a <code>SecretKey</code> by adding <code>tweak</code> modulo the curve order.","Tweaks an <code>XOnlyPublicKey</code> by adding the generator …","Tweaks a keypair by first converting the public key to an …","","Obtains a const pointer suitable for use with FFI …","","","","","Obtains a mutable pointer suitable for use with FFI …","","","","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","Gets a reference to the underlying array.","Gets a reference to the underlying array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Like <code>cmp::Cmp</code> but faster and with no guarantees across …","Like <code>cmp::Cmp</code> but faster and with no guarantees across …","Like <code>cmp::Cmp</code> but faster and with no guarantees across …","Adds a second key to this one, returning the sum.","Adds the keys in the provided slice together, returning …","Constants related to the API and the underlying curve.","Getter for the raw pointer to the underlying secp256k1 …","A function to deallocate the memory when the context is …","","","","","","","","","","","","","Formats the explicit byte value of the secret key kept …","Formats the explicit byte value of the secret key kept …","","Support for shared secret computations.","Structs and functionality related to the ECDSA signature …","","","","","","","","This implementation is designed to be constant time to …","","","","","","","","Like <code>cmp::Eq</code> but faster and with no guarantees across …","Like <code>cmp::Eq</code> but faster and with no guarantees across …","Like <code>cmp::Eq</code> but faster and with no guarantees across …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a 32-byte hash directly to a secret key without …","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a 32-byte hash directly to a message without …","","Returns the argument unchanged.","Constructs a <code>SecretKey</code> by hashing <code>data</code> with hash algorithm …","Constructs a <code>Message</code> by hashing <code>data</code> with hash algorithm <code>H</code>.","Constructs a <code>Parity</code> from a signed integer.","Creates a new secret key using data from BIP-340 <code>KeyPair</code>.","Creates a new compressed public key using data from …","Returns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for <code>keypair</code>.","Creates a context from a raw context.","Creates a context from a raw context that can only be used …","Creates a context from a raw context that can only be used …","Creates a <code>KeyPair</code> directly from a secret key slice.","Creates a <code>KeyPair</code> directly from a secret key string.","Creates a <code>KeyPair</code> directly from a secret key string and …","Creates a new public key from a <code>SecretKey</code>.","Creates a <code>KeyPair</code> directly from a Secp256k1 secret key.","Creates a new public key from a <code>SecretKey</code> and the global …","Converts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key.","Creates a public key directly from a slice.","Creates a schnorr public key directly from a slice.","<strong>If you just want to sign an arbitrary message use </strong>…","","","","","Constructs a <code>Parity</code> from a byte.","Creates a <code>PublicKey</code> using the key material from <code>pk</code> …","Lets you create a context in a generic manner …","Generates a random keypair using the global <code>SECP256K1</code> …","Generates a random keypair. Convenience function for …","Module implementing a singleton pattern for a global …","","","","","","","","","","","","","","","Implement methods and traits for types that contain an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the object into a 32-byte array","Returns the <code>KeyPair</code> for this <code>SecretKey</code>.","Tweaks a <code>SecretKey</code> by multiplying by <code>tweak</code> modulo the …","Tweaks a <code>PublicKey</code> by multiplying by <code>tweak</code> modulo the …","Negates the secret key.","Negates the public key.","Creates a new Secp256k1 context with all capabilities.","Generates a new random secret key.","Generates a new random secret key.","Generates a new random secret key using the global …","Attempts to erase the contents of the underlying array.","Attempts to erase the secret within the underlying array.","","","","","","","","","","","","","","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Returns the required memory for a preallocated context …","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Lets you create a context with a preallocated buffer in a …","Creates a new Secp256k1 context with all capabilities.","Creates a new Secp256k1 context that can only be used for …","Creates a new Secp256k1 context that can only be used for …","Returns the <code>PublicKey</code> for this <code>SecretKey</code>.","Returns the <code>PublicKey</code> for this <code>KeyPair</code>.","Returns the <code>PublicKey</code> for this <code>XOnlyPublicKey</code>.","","(Re)randomizes the Secp256k1 context for extra sidechannel …","Provides <code>Scalar</code> and related types.","Support for schnorr signatures.","Returns the secret key as a byte value.","Returns the secret bytes for this key pair.","Returns the <code>SecretKey</code> for this <code>KeyPair</code>.","(Re)randomizes the Secp256k1 context for extra sidechannel …","","","Serializes the key as a byte-encoded pair of values. In …","","","","Serializes the key as a byte-encoded x coordinate value …","","Serializes the key as a byte-encoded pair of values, in …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs an ECDSA signature for <code>msg</code> using the global …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Creates a schnorr signature internally using the …","Constructs an schnorr signature for <code>msg</code> using the global …","Creates a schnorr signature without using any auxiliary …","Creates a schnorr signature using the given auxiliary …","Creates a schnorr signature using the given random number …","Creates a new Secp256k1 context that can only be used for …","","Converts parity into an integer value.","","","","","","","","","","","","","","","","","","","","","Converts parity into an integer (byte) value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that a tweak produced by <code>XOnlyPublicKey::add_tweak</code>…","","","","","","","","","","","","","","","","Creates a new Secp256k1 context that can only be used for …","Checks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …","Verifies a schnorr signature.","","","","","","","","","","","","","","","","Returns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …","Returns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …","Returns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …","The maximum size of a compact signature.","The order of the secp256k1 curve.","The Prime for the secp256k1 field element.","The X coordinate of the generator.","The Y coordinate of the generator.","The size of a key pair.","The maximum size of a signature.","The size (in bytes) of a message.","The value one as big-endian array of bytes.","The size (in bytes) of a serialized public key.","The size of a schnorr public key.","The size of a schnorr signature.","The size (in bytes) of a secret key.","The size (in bytes) of an serialized uncompressed public …","The value zero as an array of bytes.","Enables two parties to create a shared secret without …","","","","","","","","","Formats the explicit byte value of the shared secret kept …","","","","Returns the argument unchanged.","Creates a shared secret from <code>bytes</code> array.","Creates a shared secret from <code>bytes</code> slice.","","","Calls <code>U::from(self)</code>.","Creates a new shared secret from a pubkey and secret key.","Attempts to erase the contents of the underlying array.","","Returns the shared secret as a byte value.","","Creates a shared point from public key and secret key.","","","","","","","An ECDSA signature","","","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw pointer suitable for use with FFI functions","","","","","","Like <code>cmp::Cmp</code> but faster and with no guarantees across …","","","Like <code>cmp::Eq</code> but faster and with no guarantees across …","","","","","Returns the argument unchanged.","Converts a 64-byte compact-encoded byte slice to a …","Converts a DER-encoded byte slice to a signature","Converts a “lax DER”-encoded byte slice to a …","","","Calls <code>U::from(self)</code>.","Normalizes a signature to a “low S” form. In ECDSA, …","","","Serializes the signature in compact format","Serializes the signature in DER format","Implements <code>SerializedSignature</code> and related types.","","","","","","Verifies an ECDSA signature for <code>msg</code> using <code>pk</code> and the …","","Owned iterator over the bytes of <code>SerializedSignature</code>","A DER serialized Signature","","Returns the remaining bytes as a slice.","","","","","Get the capacity of the underlying data buffer.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a SerializedSignature from a Signature. (this DER …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Check if the space is zero.","Get the len of the used data.","","","","","","","Convert the serialized signature into the Signature struct.","","","","","","","","","","Proxy struct for global <code>SECP256K1</code> context.","A global static context to avoid repeatedly creating …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Maximum valid value: <code>curve_order - 1</code>","Scalar representing <code>1</code>","Error returned when the value of scalar is invalid - …","Positive 256-bit integer guaranteed to be less than the …","Scalar representing <code>0</code>","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Tries to deserialize from big endian bytes","Tries to deserialize from little endian bytes","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Attempts to erase the contents of the underlying array.","","Generates a random scalar","Generates a random scalar using supplied RNG","Serializes to big endian bytes","Serializes to little endian bytes","","","","","","","","","","","","Represents a schnorr signature.","","","Gets a reference to the underlying array","","","","","","","","","","","","Returns the argument unchanged.","Creates a <code>Signature</code> directly from a slice.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Verifies a schnorr signature for <code>msg</code> using <code>pk</code> and the …",""],"i":[0,0,0,18,0,9,18,4,4,0,4,4,4,4,4,4,4,4,0,0,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,8,11,7,1,11,8,12,7,1,11,8,12,1,11,8,1,11,8,7,12,9,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,19,20,21,22,23,24,1,11,8,9,25,12,4,1,11,8,1,1,0,2,18,19,20,21,22,23,24,2,7,1,11,8,9,7,11,2,0,0,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,1,11,8,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,0,2,19,20,21,22,23,24,7,1,1,1,11,8,8,8,9,25,25,12,12,12,4,4,2,19,20,21,22,23,24,7,7,7,7,1,1,1,1,11,8,8,8,9,25,12,12,4,4,7,12,9,7,1,8,2,2,2,11,11,11,1,11,1,7,1,8,12,7,1,11,8,9,1,2,0,2,0,19,20,21,22,23,24,1,11,8,9,25,12,4,0,0,7,12,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,36,7,7,1,7,1,2,7,11,11,7,11,19,20,21,22,23,24,1,11,8,9,25,12,4,2,2,2,2,2,2,2,2,7,11,8,0,2,0,0,7,11,11,2,0,7,1,1,11,8,8,9,1,2,7,2,2,2,2,11,2,2,2,2,4,9,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,1,8,25,12,4,9,2,19,20,21,22,23,24,7,1,11,8,9,9,9,25,12,4,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,8,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,2,2,2,2,19,20,21,22,23,24,7,1,11,8,9,25,12,4,7,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,54,54,54,54,54,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,0,0,56,57,56,57,56,57,56,56,57,56,57,56,56,56,56,56,57,56,57,56,56,57,56,56,57,56,56,57,57,57,57,56,57,56,56,56,57,56,57,56,57,56,57,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,3,3,0,0,3,3,59,3,59,3,59,3,59,3,3,59,3,59,3,59,59,3,3,59,3,3,59,3,3,59,3,3,3,3,3,3,3,59,59,3,59,3,59,3,59,3,59,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[2,[-1]],3],[[5,[1,4]]],6],[[7,3],[[5,[7,4]]]],[[8,[2,[-1]],3],[[5,[[10,[8,9]],4]]],6],[[11,[2,[-1]],3],[[5,[11,4]]],6],[7],[1],[11],[8],[12],[7],[1],[11],[8],[12],[1,13],[11,14],[8,15],[1,13],[11,14],[8,15],[7,[[17,[16]]]],[12,[[17,[16]]]],[[9,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-1]]],18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[7,7],[1,1],[11,11],[8,8],[9,9],[25,25],[12,12],[4,4],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[19,19],26],[[20,20],26],[[21,21],26],[[22,22],26],[[23,23],26],[[24,24],26],[[1,1],26],[[11,11],26],[[8,8],26],[[9,9],26],[[25,25],26],[[12,12],26],[[4,4],26],[[1,1],26],[[11,11],26],[[8,8],26],[[1,1],[[5,[1,4]]]],[[[27,[1]]],[[5,[1,4]]]],0,[[[2,[-1]]],[[29,[28]]],18],[[16,30],10],[[16,30],10],[[16,30],10],[[16,30],10],[[16,30],10],[[16,30],10],[[16,30],10],[[],[[2,[24]]]],[-1,[[5,[7]]],31],[-1,[[5,[1]]],31],[-1,[[5,[11]]],31],[-1,[[5,[8]]],31],[-1,[[5,[9]]],31],0,0,[[[2,[-1]]],10,18],0,0,[[[2,[-1]],[2,[-1]]],32,18],[[19,19],32],[[20,20],32],[[21,21],32],[[22,22],32],[[23,23],32],[[24,24],32],[[7,7],32],[[1,1],32],[[11,11],32],[[8,8],32],[[9,9],32],[[25,25],32],[[12,12],32],[[4,4],32],[[1,1],32],[[11,11],32],[[8,8],32],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],0,[[[2,[-1]],33],34,18],[[19,33],34],[[20,33],34],[[21,33],34],[[22,33],34],[[23,33],34],[[24,33],34],[[7,33],34],[[1,33],34],[[1,33],34],[[1,33],34],[[11,33],34],[[8,33],34],[[8,33],34],[[8,33],34],[[9,33],34],[[25,33],34],[[25,33],34],[[12,33],34],[[12,33],34],[[12,33],34],[[4,33],34],[[4,33],[[5,[10,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,7],[-1,7,36],[-1,-1,[]],[11,7],[11,1],[13,1],[-1,-1,[]],[11,1],[-1,-1,[]],[-1,-1,[]],[15,8],[1,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,12,36],[25,4],[-1,-1,[]],[[[27,[16]]],7],[[[27,[16]]],12],[37,[[5,[9,25]]]],[11,7],[11,1],[11,[[10,[8,9]]]],[[[29,[28]]],[[38,[[2,[21]]]]]],[[[29,[28]]],[[38,[[2,[19]]]]]],[[[29,[28]]],[[38,[[2,[20]]]]]],[[[2,[-1]],[27,[16]]],[[5,[11,4]]],39],[[[2,[-1]],40],[[5,[11,4]]],39],[40,[[5,[11,4]]]],[[[2,[-1]],7],1,39],[[[2,[-1]],7],11,39],[7,1],[[[27,[16]]],[[5,[7,4]]]],[[[27,[16]]],[[5,[1,4]]]],[[[27,[16]]],[[5,[8,4]]]],[[[27,[16]]],[[5,[12,4]]]],[40,[[5,[7,4]]]],[40,[[5,[1,4]]]],[40,[[5,[11]]]],[40,[[5,[8,4]]]],[16,[[5,[9,25]]]],[[8,9],1],[[],[[2,[-1]]],18],[-1,[[10,[7,1]]],[41,42]],[[[2,[-1]],-2],[[10,[7,1]]],39,[41,42]],0,[[19,-1],10,43],[[20,-1],10,43],[[21,-1],10,43],[[22,-1],10,43],[[23,-1],10,43],[[24,-1],10,43],[[1,-1],10,43],[[11,-1],10,43],[[8,-1],10,43],[[9,-1],10,43],[[25,-1],10,43],[[12,-1],10,43],[[4,-1],10,43],0,0,[[7,-1],[],[]],[[12,-1],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[16]]],[]],[[7,[2,[-1]]],11,39],[[7,3],[[5,[7,4]]]],[[1,[2,[-1]],3],[[5,[1,4]]],6],[7,7],[[1,[2,[-1]]],1,6],[[],[[2,[24]]]],[-1,7,[41,42]],[[[2,[-1]],-2],11,39,[41,42]],[-1,11,[41,42]],[7,10],[11,10],[[19,19],[[44,[26]]]],[[20,20],[[44,[26]]]],[[21,21],[[44,[26]]]],[[22,22],[[44,[26]]]],[[23,23],[[44,[26]]]],[[24,24],[[44,[26]]]],[[1,1],[[44,[26]]]],[[11,11],[[44,[26]]]],[[8,8],[[44,[26]]]],[[9,9],[[44,[26]]]],[[25,25],[[44,[26]]]],[[12,12],[[44,[26]]]],[[4,4],[[44,[26]]]],[[],30],[[],30],[[],30],[[],30],[[[27,[45]]],[[5,[[2,[-1]],4]]],[18,46]],[[[27,[45]]],[[5,[[2,[21]],4]]]],[[[27,[45]]],[[5,[[2,[19]],4]]]],[[[27,[45]]],[[5,[[2,[20]],4]]]],[[7,[2,[-1]]],1,39],[11,1],[[8,9],1],0,[[[2,[-1]],-2],10,18,[41,42]],0,0,[7,[[17,[16]]]],[11,[[17,[16]]]],[11,7],[[[2,[-1]],[17,[16]]],10,18],0,[[7,-1],5,47],[1,[[17,[16]]]],[[1,-1],5,47],[[11,-1],5,47],[[8,-1],5,47],[8,[[17,[16]]]],[[9,-1],5,47],[1,[[17,[16]]]],[[[2,[-1]],12,7],48,39],[[7,12],48],[[[2,[-1]],12,7,30],48,39],[[[2,[-1]],12,7],48,39],[[[2,[-1]],12,7,[17,[16]]],48,39],[[[2,[-1]],12,11],49,39],[[11,12],49],[[[2,[-1]],12,11],49,39],[[[2,[-1]],12,11,[17,[16]]],49,39],[[[2,[-1]],12,11,-2],49,39,[41,50]],[[],[[2,[22]]]],[4,[[44,[51]]]],[9,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[9,16],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[16,[[5,[9]]]],[-1,[[5,[-2]]],[],[]],[37,[[5,[9]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[8,[2,[-1]],8,9,3],32,6],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[[],[[2,[23]]]],[[[2,[-1]],12,48,1],[[5,[10,4]]],6],[[[2,[-1]],49,12,8],[[5,[10,4]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[7,[2,[-1]]],[[10,[8,9]]],39],[1,[[10,[8,9]]]],[11,[[10,[8,9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[54,[[27,[16]]]],[-1,-2,[],[]],[54,[[27,[16]]]],[-1,-2,[],[]],[54,54],[[-1,-2],10,[],[]],[[54,54],26],[-1,[[5,[54]]],31],0,[[54,54],32],[[-1,-2],32,[],[]],[[54,33],34],[-1,-1,[]],[[[17,[16]]],54],[[[27,[16]]],[[5,[54,4]]]],[40,[[5,[54,4]]]],[[54,-1],10,43],[-1,-2,[],[]],[[1,7],54],[54,10],[[54,54],[[44,[26]]]],[54,[[17,[16]]]],[[54,-1],5,47],[[1,7],[[17,[16]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,53,[]],[-1,-2,[],[]],0,0,[48],[48],[48,55],[48,55],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[[-1,-2],10,[],[]],[[48,48],26],[[48,48],26],[-1,[[5,[48]]],31],[[48,48],32],[[48,48],32],[[-1,-2],32,[],[]],[[48,33],34],[[48,33],34],[55,48],[-1,-1,[]],[[[27,[16]]],[[5,[48,4]]]],[[[27,[16]]],[[5,[48,4]]]],[[[27,[16]]],[[5,[48,4]]]],[40,[[5,[48,4]]]],[[48,-1],10,43],[-1,-2,[],[]],[48,10],[[48,48],[[44,[26]]]],[[48,-1],5,47],[48,[[17,[16]]]],[48,56],0,[-1,-2,[],[]],[-1,52,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,53,[]],[[48,12,1],[[5,[10,4]]]],[-1,-2,[],[]],0,0,[56,[[27,[16]]]],[57,[[27,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,30],[56,56],[57,57],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[56,[[27,[16]]]],[[56,56],32],[[-1,-2],32,[],[]],[[56,33],34],[[56,33],34],[[57,33],34],[-1,-1,[]],[-1,-1,[]],[48,56],[-1,-2,[],[]],[-1,-2,[],[]],[56],[56],[-1,-2,[],[]],[56,32],[56,30],[57,44],[57,44],[[57,30],44],[57,[[10,[30,[44,[30]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[56,[[5,[48,4]]]],[-1,52,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[[-1,-2],10,[],[]],[58],[[58,33],34],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,53,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[59,59],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[3,3],26],[[3,3],32],[[59,59],32],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[3,33],34],[[59,33],34],[[59,33],34],[7,3],[-1,-1,[]],[-1,-1,[]],[[[17,[16]]],[[5,[3,59]]]],[[[17,[16]]],[[5,[3,59]]]],[[59,-1],10,43],[[3,-1],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,10],[[3,3],[[44,[26]]]],[[],3],[-1,3,41],[3,[[17,[16]]]],[3,[[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[49],[49],[49,[[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[[-1,-2],10,[],[]],[[49,49],26],[-1,[[5,[49]]],31],[[49,49],32],[[-1,-2],32,[],[]],[[49,33],34],[[49,33],34],[[49,33],34],[-1,-1,[]],[[[27,[16]]],[[5,[49,4]]]],[40,[[5,[49,4]]]],[[49,-1],10,43],[[49,-1],[],[]],[-1,-2,[],[]],[[49,49],[[44,[26]]]],[[49,-1],5,47],[-1,-2,[],[]],[-1,52,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,53,[]],[[49,12,8],[[5,[10,4]]]],[-1,-2,[],[]]],"c":[53,54,55,56,57,58,508,509],"p":[[3,"PublicKey",0],[3,"Secp256k1",0],[3,"Scalar",603],[4,"Error",0],[4,"Result",680],[8,"Verification",0],[3,"SecretKey",0],[3,"XOnlyPublicKey",0],[4,"Parity",0],[15,"tuple"],[3,"KeyPair",0],[3,"Message",0],[3,"PublicKey",681],[3,"KeyPair",681],[3,"XOnlyPublicKey",681],[15,"u8"],[15,"array"],[8,"Context",0],[3,"SignOnlyPreallocated",0],[3,"VerifyOnlyPreallocated",0],[3,"AllPreallocated",0],[4,"SignOnly",0],[4,"VerifyOnly",0],[4,"All",0],[3,"InvalidParityValue",0],[4,"Ordering",682],[15,"slice"],[3,"Context",681],[3,"NonNull",683],[15,"usize"],[8,"Deserializer",684],[15,"bool"],[3,"Formatter",685],[6,"Result",685],[3,"Error",685],[8,"ThirtyTwoByteHash",0],[15,"i32"],[3,"ManuallyDrop",686],[8,"Signing",0],[15,"str"],[8,"Rng",687],[8,"Sized",688],[8,"Hasher",689],[4,"Option",690],[3,"AlignedType",691],[8,"PreallocatedContext",0],[8,"Serializer",692],[3,"Signature",504],[3,"Signature",650],[8,"CryptoRng",693],[8,"Error",694],[3,"String",695],[3,"TypeId",696],[3,"SharedSecret",474],[3,"Signature",681],[3,"SerializedSignature",543],[3,"IntoIter",543],[3,"GlobalContext",588],[3,"OutOfRangeError",603]]},\
"secp256k1_sys":{"doc":"secp256k1-sys FFI bindings","t":"IDGDGNNNDRRRRRGDDNNNQDKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLFLLLLFFFFFFHFFFFFFFFFFFFFFFFFFFHFFFFFFFFFFFFHHHFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLALLLLDSLLLLGGGGELLLLLLLLGLLLLLLLL","n":["CPtr","Context","EcdhHashFn","KeyPair","NonceFn","None","None","None","PublicKey","SECP256K1_SER_COMPRESSED","SECP256K1_SER_UNCOMPRESSED","SECP256K1_START_NONE","SECP256K1_START_SIGN","SECP256K1_START_VERIFY","SchnorrNonceFn","SchnorrSigExtraParams","Signature","Some","Some","Some","Target","XOnlyPublicKey","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp_fast_unstable","cmp_fast_unstable","cmp_fast_unstable","cmp_fast_unstable","ecdsa_signature_parse_der_lax","eq","eq","eq","eq","eq_fast_unstable","eq_fast_unstable","eq_fast_unstable","eq_fast_unstable","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_array_unchecked","from_array_unchecked","from_array_unchecked","from_array_unchecked","hash","hash","hash","hash","impl_array_newtype","impl_raw_debug","index","index","index","index","into","into","into","into","into","into","new","new","new","new","new","non_secure_erase","non_secure_erase_impl","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rustsecp256k1_v0_8_1_context_create","rustsecp256k1_v0_8_1_context_destroy","rustsecp256k1_v0_8_1_default_error_callback_fn","rustsecp256k1_v0_8_1_default_illegal_callback_fn","secp256k1_context_create","secp256k1_context_destroy","secp256k1_context_no_precomp","secp256k1_context_preallocated_clone","secp256k1_context_preallocated_clone_size","secp256k1_context_preallocated_create","secp256k1_context_preallocated_destroy","secp256k1_context_preallocated_size","secp256k1_context_randomize","secp256k1_ec_pubkey_cmp","secp256k1_ec_pubkey_combine","secp256k1_ec_pubkey_create","secp256k1_ec_pubkey_negate","secp256k1_ec_pubkey_parse","secp256k1_ec_pubkey_serialize","secp256k1_ec_pubkey_tweak_add","secp256k1_ec_pubkey_tweak_mul","secp256k1_ec_seckey_negate","secp256k1_ec_seckey_tweak_add","secp256k1_ec_seckey_tweak_mul","secp256k1_ec_seckey_verify","secp256k1_ecdh","secp256k1_ecdh_hash_function_default","secp256k1_ecdsa_sign","secp256k1_ecdsa_signature_normalize","secp256k1_ecdsa_signature_parse_compact","secp256k1_ecdsa_signature_parse_der","secp256k1_ecdsa_signature_serialize_compact","secp256k1_ecdsa_signature_serialize_der","secp256k1_ecdsa_verify","secp256k1_keypair_create","secp256k1_keypair_pub","secp256k1_keypair_sec","secp256k1_keypair_xonly_pub","secp256k1_keypair_xonly_tweak_add","secp256k1_nonce_function_bip340","secp256k1_nonce_function_default","secp256k1_nonce_function_rfc6979","secp256k1_schnorrsig_sign","secp256k1_schnorrsig_sign_custom","secp256k1_schnorrsig_verify","secp256k1_xonly_pubkey_cmp","secp256k1_xonly_pubkey_from_pubkey","secp256k1_xonly_pubkey_parse","secp256k1_xonly_pubkey_serialize","secp256k1_xonly_pubkey_tweak_add","secp256k1_xonly_pubkey_tweak_add_check","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","types","underlying_bytes","underlying_bytes","underlying_bytes","underlying_bytes","AlignedType","ZERO","borrow","borrow","borrow_mut","borrow_mut","c_char","c_int","c_uchar","c_uint","c_void","clone","clone_into","default","fmt","from","from","into","into","size_t","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","zeroed"],"q":[[0,"secp256k1_sys"],[200,"secp256k1_sys::types"],[228,"core::cmp"],[229,"core::fmt"],[230,"core::fmt"],[231,"core::option"],[232,"core::ptr::non_null"],[233,"core::result"],[234,"core::any"],[235,"core::fmt"]],"d":["A trait for producing pointers that will always be valid …","A Secp256k1 context, containing various precomputed values …","Hash function to use to post-process an ECDH point to get …","","A nonce generation function. Ordinary users of the library …","No value.","No value.","No value.","Library-internal representation of a Secp256k1 public key","Flag for keys to indicate compressed serialization format","Flag for keys to indicate uncompressed serialization format","Flag for context to enable no precomputation","Flag for context to enable signing precomputation","Flag for context to enable verification precomputation","Same as secp256k1_nonce function with the exception of …","Data structure that contains additional arguments for …","Library-internal representation of a Secp256k1 signature","Some value of type <code>T</code>.","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","","","","","Gets a reference to the underlying array","Gets a reference to the underlying array","Gets a reference to the underlying array","Gets a reference to the underlying array","","","","","","","","","","","","","","","","","","","","","","","","","","","Like <code>cmp::Ord</code> but faster and with no guarantees across …","Like <code>cmp::Ord</code> but faster and with no guarantees across …","Like <code>cmp::Ord</code> but faster and with no guarantees across …","Like <code>cmp::Ord</code> but faster and with no guarantees across …","","","","","","Like <code>cmp::Eq</code> but faster and with no guarantees across …","Like <code>cmp::Eq</code> but faster and with no guarantees across …","Like <code>cmp::Eq</code> but faster and with no guarantees across …","Like <code>cmp::Eq</code> but faster and with no guarantees across …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new public key usable for the FFI interface from …","Create a new signature usable for the FFI interface from …","Create a new x-only public key usable for the FFI …","Create a new keypair usable for the FFI interface from raw …","","","","","Implement methods and traits for types that contain an …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new SchnorrSigExtraParams properly initialized.","Creates an “uninitialized” FFI public key which is …","Creates an “uninitialized” FFI signature which is …","Creates an “uninitialized” FFI x-only public key which …","Creates an “uninitialized” FFI keypair which is zeroed …","Attempts to erase the contents of the underlying array.","Does a best attempt at secure erasure using Rust …","","","","","A reimplementation of the C function …","","<strong>This function is an override for the C function, this is </strong>…","<strong>This function is an override for the C function, this is </strong>…","A reimplementation of the C function …","A reimplementation of the C function …","","","","","","","","","","","","","","","","","","","","","Default ECDH hash function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the underlying FFI opaque representation of the …","Returns the underlying FFI opaque representation of the …","Returns the underlying FFI opaque representation of the …","Returns the underlying FFI opaque representation of the …","A type that is as aligned as the biggest alignment for …","A static zeroed out AlignedType for use in static …","","","","","This might not match C’s <code>c_char</code> exactly. The way we use …","","","","Equivalent to C’s <code>void</code> type when used as a pointer.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,25,26,14,0,0,0,0,0,0,0,0,0,25,26,14,27,0,27,1,2,3,4,27,1,2,3,4,1,2,3,4,16,7,1,2,3,4,16,7,1,2,3,4,7,1,2,3,4,7,1,2,3,4,1,2,3,4,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,7,1,2,3,4,16,7,1,2,3,4,1,2,3,4,1,2,3,4,0,0,1,2,3,4,16,7,1,2,3,4,16,1,2,3,4,4,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,2,3,4,16,7,1,2,3,4,16,7,1,2,3,4,16,7,1,2,3,4,0,1,2,3,4,0,23,23,15,23,15,0,0,0,0,0,23,23,23,15,23,15,23,15,0,23,23,15,23,15,23,15,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[],[]],[1],[2],[3],[4],[-1,[],[]],[1],[2],[3],[4],[1,[[6,[5]]]],[2,[[6,[5]]]],[3,[[6,[5]]]],[4,[[6,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[1,1],[2,2],[3,3],[4,4],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],0,[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[7,11],12],[[1,11],12],[[2,11],12],[[3,11],12],[[4,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[6,[5]]],1],[[[6,[5]]],2],[[[6,[5]]],3],[[[6,[5]]],4],[[1,-1],8,13],[[2,-1],8,13],[[3,-1],8,13],[[4,-1],8,13],0,0,[[1,-1],[],[]],[[2,-1],[],[]],[[3,-1],[],[]],[[4,-1],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[14,15],16],[[],1],[[],2],[[],3],[[],4],[4,8],[[-1,-1],8,[]],[[1,1],[[17,[9]]]],[[2,2],[[17,[9]]]],[[3,3],[[17,[9]]]],[[4,4],[[17,[9]]]],[18,[[19,[7]]]],[[[19,[7]]],8],[[20,15],8],[[20,15],8],[18,[[19,[7]]]],[[[19,[7]]],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],0,[1,[[6,[5]]]],[2,[[6,[5]]]],[3,[[6,[5]]]],[4,[[6,[5]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[23,23],[[-1,-2],8,[],[]],[[],23],[[15,11],[[21,[8,24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[],23]],"c":[],"p":[[3,"PublicKey",0],[3,"Signature",0],[3,"XOnlyPublicKey",0],[3,"KeyPair",0],[6,"c_uchar",200],[15,"array"],[3,"Context",0],[15,"tuple"],[4,"Ordering",228],[15,"bool"],[3,"Formatter",229],[6,"Result",229],[8,"Hasher",230],[6,"SchnorrNonceFn",0],[4,"c_void",200],[3,"SchnorrSigExtraParams",0],[4,"Option",231],[6,"c_uint",200],[3,"NonNull",232],[6,"c_char",200],[4,"Result",233],[3,"TypeId",234],[3,"AlignedType",200],[3,"Error",229],[6,"NonceFn",0],[6,"EcdhHashFn",0],[8,"CPtr",0]]},\
"serde":{"doc":"Serde","t":"IYIQQQIYQQQQQQQILLLAKKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKOLLAKKKKKKLKKKKKKKKKKKKKKKKLKKKKKKKNNNIIIIQNIIQQQQQINDININNNNNINCNNNENNNQQQIILLLLLLLLKLKKLKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKLLLKLKLLLLLLLLLKLLLLLLKLKLLLKLKLLKLLLLLLLKLLKLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQQQQQQQDQQQQQQQQIIQIQIQIQIQIQIQICLLLLLKKKKKKKKLLLLLLLLLLKKKKKKLLLKKKKKKLLLLLKKKKKLKKKKKKKKKKKKLKKKKKKKKLLLLLL","n":["Deserialize","Deserialize","Deserializer","Error","Error","Ok","Serialize","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[87,"serde::de"],[265,"serde::de::value"],[1531,"serde::ser"],[1642,"core::result"],[1643,"core::iter::traits::collect"],[1644,"core::fmt"],[1645,"core::marker"],[1646,"core::option"],[1647,"core::fmt"],[1648,"core::any"],[1649,"alloc::vec"],[1650,"core::iter::traits::iterator"],[1651,"core::clone"],[1652,"core::fmt"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","Derive macro available if serde is built with …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Derive macro available if serde is built with …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,0,5,11,11,0,0,11,11,11,11,11,11,11,0,11,11,11,0,34,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,11,0,22,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,28,28,28,0,0,0,0,79,28,0,0,5,42,41,40,80,0,28,0,0,28,0,28,28,28,28,28,0,28,0,28,28,28,0,28,28,28,35,6,40,0,0,27,28,27,28,27,28,27,28,38,27,34,35,27,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,38,27,28,6,27,32,32,27,27,28,28,27,28,27,28,79,38,38,38,5,38,80,80,42,42,41,41,41,41,41,41,42,41,80,27,28,28,27,28,27,28,80,27,28,80,38,38,0,40,40,6,27,6,6,6,6,27,6,6,27,6,6,27,6,27,6,6,6,27,6,6,27,6,27,6,27,6,27,6,27,6,27,6,6,27,6,6,6,27,6,6,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,54,54,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,54,43,44,45,46,47,48,49,50,51,54,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,51,51,51,51,51,70,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,44,45,46,47,48,72,0,11,81,82,83,84,85,86,87,0,11,81,82,83,84,85,86,87,0,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,0,77,77,11,11,11,78,81,82,83,84,85,86,87,77,77,77,77,77,77,77,77,77,11,22,11,11,11,81,82,77,77,85,11,11,83,84,86,87,77,77,77,77,11,11,11,11,11,85,77,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,85,77,86,87,77,77,77],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],0,[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],0,[-1,10,[]],[-1,10,[]],0,[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,-2,3,[]],[[],27],[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],5],[-1,[[1,[27]]],5],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[7,-1,[]],[[27,27],10],[[28,28],10],[[-1,30],31,[]],[[27,30],31],[[-1,30],31,[]],[[32,30],31],[[-1,30],[[1,[29,33]]],[]],[[27,30],31],[[28,30],31],[[28,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[9,32],-1,[]],[[28,32],-1,[]],[[28,32],-1,[]],[-1,10,[]],[7,-1,[]],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[[21,[[29,[-2,-3]]]]]]],[],34,34],[[-1,-2,-3],[[1,[[21,[29]]]]],[],35,35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[21,[9]]],[]],[-1,[[21,[9]]],[]],[[-1,[8,[7]],-2],1,[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,9,-2],1,[],6],[-1,37,[]],[-1,37,[]],[-1,[[1,[29]]],[]],[[7,[8,[7]]],-1,[]],[[7,[8,[7]]],-1,[]],0,[-1,[[1,[[29,[-2]]]]],[],34],[[-1,-2],[[1,[29]]],[],35],[[-1,10],[[1,[-2]]],[],38],[[27,10],[[1,[-1]]],[]],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[-1,7],[[1,[-2]]],[],38],[[-1,[39,[12]]],[[1,[-2]]],[],38],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[27,[8,[12]]],[[1,[-1]]],38],[[-1,13],[[1,[-2]]],[],38],[[-1,-2],1,[],40],[[27,-1],1,40],[[-1,14],[[1,[-2]]],[],38],[[-1,15],[[1,[-2]]],[],38],[[27,15],[[1,[-1]]],[]],[[-1,16],[[1,[-2]]],[],38],[[27,16],[[1,[-1]]],[]],[[-1,17],[[1,[-2]]],[],38],[[-1,18],[[1,[-2]]],[],38],[[-1,19],[[1,[-2]]],[],38],[[27,19],[[1,[-1]]],[]],[[-1,20],[[1,[-2]]],[],38],[[-1,-2],1,[],41],[[27,-1],1,41],[[-1,-2],1,[],5],[[27,-1],1,5],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],[[-1,-2],1,[],42],[[27,-1],1,42],[[-1,-2],1,[],5],[[27,-1],1,5],[[-1,7],[[1,[-2]]],[],38],[[27,7],[[1,[-1]]],38],[[-1,36],[[1,[-2]]],[],38],[[-1,24],[[1,[-2]]],[],38],[[27,24],[[1,[-1]]],[]],[[-1,25],[[1,[-2]]],[],38],[[-1,23],[[1,[-2]]],[],38],[[-1,26],[[1,[-2]]],[],38],[[27,26],[[1,[-1]]],[]],[[-1,12],[[1,[-2]]],[],38],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]]],[[43,[-1]]],[]],[[[44,[-1]]],[[44,[-1]]],[]],[[[45,[-1]]],[[45,[-1]]],[]],[[[46,[-1]]],[[46,[-1]]],[]],[[[47,[-1]]],[[47,[-1]]],[]],[[[48,[-1]]],[[48,[-1]]],[]],[[[49,[-1]]],[[49,[-1]]],[]],[[[50,[-1]]],[[50,[-1]]],[]],[[[51,[-1,-2]]],[[51,[-1,-2]]],[52,53],[]],[54,54],[[[55,[-1]]],[[55,[-1]]],[]],[[[56,[-1]]],[[56,[-1]]],[]],[[[57,[-1]]],[[57,[-1]]],[]],[[[58,[-1]]],[[58,[-1]]],[]],[[[59,[-1]]],[[59,[-1]]],[]],[[[60,[-1]]],[[60,[-1]]],[]],[[[61,[-1]]],[[61,[-1]]],[]],[[[62,[-1]]],[[62,[-1]]],[]],[[[63,[-1]]],[[63,[-1]]],[]],[[[64,[-1]]],[[64,[-1]]],[]],[[[65,[-1]]],[[65,[-1]]],[]],[[[66,[-1]]],[[66,[-1]]],[]],[[[67,[-1]]],[[67,[-1]]],[]],[[[68,[-1]]],[[68,[-1]]],[]],[[[69,[-1]]],[[69,[-1]]],[]],[[[70,[-1,-2]]],[[70,[-1,-2]]],53,53],[[[71,[-1]]],[[71,[-1]]],53],[[[72,[-1]]],[[72,[-1]]],53],[[[73,[-1]]],[[73,[-1]]],53],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,54,3],[-1,54,3],[54,7],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],9,-2],1,38,6],[[[44,[-1]],9,-2],1,38,6],[[[45,[-1]],9,-2],1,38,6],[[[46,[-1]],9,-2],1,38,6],[[[47,[-1]],9,-2],1,38,6],[[[48,[-1]],9,-2],1,38,6],[[[49,[-1]],9,-2],1,38,6],[[[50,[-1]],9,-2],1,38,6],[[[51,[-1,-2]],9,-3],1,52,38,6],[[[55,[-1]],9,-2],1,38,6],[[[56,[-1]],9,-2],1,38,6],[[[57,[-1]],9,-2],1,38,6],[[[58,[-1]],9,-2],1,38,6],[[[59,[-1]],9,-2],1,38,6],[[[60,[-1]],9,-2],1,38,6],[[[61,[-1]],9,-2],1,38,6],[[[62,[-1]],9,-2],1,38,6],[[[63,[-1]],9,-2],1,38,6],[[[64,[-1]],9,-2],1,38,6],[[[65,[-1]],9,-2],1,38,6],[[[66,[-1]],9,-2],1,38,6],[[[67,[-1]],9,-2],1,38,6],[[[68,[-1]],9,-2],1,38,6],[[[69,[-1]],9,-2],1,38,6],[[[70,[-1,-2]],9,-3],1,52,38,6],[[[71,[-1]],9,-2],1,42,6],[[[72,[-1]],9,-2],1,41,6],[[[73,[-1]],9,-2],1,40,6],[[[43,[-1]],7,9,-2],1,38,6],[[[44,[-1]],7,9,-2],1,38,6],[[[45,[-1]],7,9,-2],1,38,6],[[[46,[-1]],7,9,-2],1,38,6],[[[47,[-1]],7,9,-2],1,38,6],[[[48,[-1]],7,9,-2],1,38,6],[[[49,[-1]],7,9,-2],1,38,6],[[[50,[-1]],7,9,-2],1,38,6],[[[51,[-1,-2]],7,9,-3],1,52,38,6],[[[55,[-1]],7,9,-2],1,38,6],[[[56,[-1]],7,9,-2],1,38,6],[[[57,[-1]],7,9,-2],1,38,6],[[[58,[-1]],7,9,-2],1,38,6],[[[59,[-1]],7,9,-2],1,38,6],[[[60,[-1]],7,9,-2],1,38,6],[[[61,[-1]],7,9,-2],1,38,6],[[[62,[-1]],7,9,-2],1,38,6],[[[63,[-1]],7,9,-2],1,38,6],[[[64,[-1]],7,9,-2],1,38,6],[[[65,[-1]],7,9,-2],1,38,6],[[[66,[-1]],7,9,-2],1,38,6],[[[67,[-1]],7,9,-2],1,38,6],[[[68,[-1]],7,9,-2],1,38,6],[[[69,[-1]],7,9,-2],1,38,6],[[[70,[-1,-2]],7,9,-3],1,52,38,6],[[[71,[-1]],7,9,-2],1,42,6],[[[72,[-1]],7,9,-2],1,41,6],[[[73,[-1]],7,9,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[51,[-1,-2]]],[[1,[29,-2]]],52,38],[[[70,[-1,-2]]],[[1,[29,-2]]],52,38],[[54,54],10],[[[43,[-1]],30],31,[]],[[[44,[-1]],30],31,[]],[[[45,[-1]],30],31,[]],[[[46,[-1]],30],31,[]],[[[47,[-1]],30],31,[]],[[[48,[-1]],30],31,[]],[[[49,[-1]],30],31,[]],[[[50,[-1]],30],31,[]],[[[51,[-1,-2]],30],31,[52,74],[]],[[54,30],31],[[54,30],31],[[[55,[-1]],30],31,[]],[[[56,[-1]],30],31,[]],[[[57,[-1]],30],31,[]],[[[58,[-1]],30],31,[]],[[[59,[-1]],30],31,[]],[[[60,[-1]],30],31,[]],[[[61,[-1]],30],31,[]],[[[62,[-1]],30],31,[]],[[[63,[-1]],30],31,[]],[[[64,[-1]],30],31,[]],[[[65,[-1]],30],31,[]],[[[66,[-1]],30],31,[]],[[[67,[-1]],30],31,[]],[[[68,[-1]],30],31,[]],[[[69,[-1]],30],31,[]],[[[70,[-1,-2]],30],31,74,[]],[[[71,[-1]],30],31,74],[[[72,[-1]],30],31,74],[[[73,[-1]],30],31,74],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[43,[-1]]],[]],[23,[[44,[-1]]],[]],[7,[[45,[-1]]],[]],[7,[[46,[-1]]],[]],[36,[[47,[-1]]],[]],[[[75,[7]]],[[48,[-1]]],[]],[[[8,[12]]],[[49,[-1]]],[]],[[[8,[12]]],[[50,[-1]]],[]],[-1,[[51,[-1,-2]]],52,[]],[10,[[55,[-1]]],[]],[20,[[56,[-1]]],[]],[17,[[57,[-1]]],[]],[18,[[58,[-1]]],[]],[19,[[59,[-1]]],[]],[16,[[60,[-1]]],[]],[76,[[61,[-1]]],[]],[12,[[62,[-1]]],[]],[25,[[63,[-1]]],[]],[26,[[64,[-1]]],[]],[24,[[65,[-1]]],[]],[9,[[66,[-1]]],[]],[14,[[67,[-1]]],[]],[15,[[68,[-1]]],[]],[13,[[69,[-1]]],[]],[-1,[[70,[-1,-2]]],52,[]],[-1,[[71,[-1]]],[]],[-1,[[72,[-1]]],[]],[-1,[[73,[-1]]],[]],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[70,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3,-4],[[1,[[21,[29]]]]],52,38,35,35],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3],1,52,38,35],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[70,[-1,-2]]],[[21,[9]]],52,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[44,[-1]],-2],[[1,[29]]],38,35],[[[45,[-1]],-2],[[1,[29]]],38,35],[[[46,[-1]],-2],[[1,[29]]],38,35],[[[47,[-1]],-2],[[1,[29]]],38,35],[[[48,[-1]],-2],[[1,[29]]],38,35],[[[72,[-1]],-2],[[1,[29]]],41,35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],[-1,-2,3,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[-1,-1,[]],[-1,-2,[],[]],[-1,10,[]],[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,-2,-3],[[1,[29]]],[],[22,4],[22,4]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,7],[[1,[29]]],[]],[[-1,7],[[1,[29]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]]],"c":[],"p":[[4,"Result",1642],[8,"IntoIterator",1643],[8,"Display",1644],[8,"Sized",1645],[8,"Deserializer",0],[8,"Visitor",87],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[8,"Serializer",0],[15,"u8"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option",1646],[8,"Serialize",0],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[3,"IgnoredAny",87],[4,"Unexpected",87],[15,"tuple"],[3,"Formatter",1644],[6,"Result",1644],[8,"Expected",87],[3,"Error",1644],[8,"Deserialize",0],[8,"DeserializeSeed",87],[3,"String",1647],[3,"TypeId",1648],[8,"Error",87],[3,"Vec",1649],[8,"EnumAccess",87],[8,"MapAccess",87],[8,"SeqAccess",87],[3,"UnitDeserializer",265],[3,"U32Deserializer",265],[3,"StrDeserializer",265],[3,"BorrowedStrDeserializer",265],[3,"StringDeserializer",265],[3,"CowStrDeserializer",265],[3,"BytesDeserializer",265],[3,"BorrowedBytesDeserializer",265],[3,"MapDeserializer",265],[8,"Iterator",1650],[8,"Clone",1651],[3,"Error",265],[3,"BoolDeserializer",265],[3,"I8Deserializer",265],[3,"I16Deserializer",265],[3,"I32Deserializer",265],[3,"I64Deserializer",265],[3,"I128Deserializer",265],[3,"IsizeDeserializer",265],[3,"U8Deserializer",265],[3,"U16Deserializer",265],[3,"U64Deserializer",265],[3,"U128Deserializer",265],[3,"UsizeDeserializer",265],[3,"F32Deserializer",265],[3,"F64Deserializer",265],[3,"CharDeserializer",265],[3,"SeqDeserializer",265],[3,"SeqAccessDeserializer",265],[3,"MapAccessDeserializer",265],[3,"EnumAccessDeserializer",265],[8,"Debug",1644],[4,"Cow",1652],[15,"isize"],[3,"Impossible",1531],[8,"Error",1531],[8,"IntoDeserializer",87],[8,"VariantAccess",87],[8,"SerializeSeq",1531],[8,"SerializeTuple",1531],[8,"SerializeTupleStruct",1531],[8,"SerializeTupleVariant",1531],[8,"SerializeMap",1531],[8,"SerializeStruct",1531],[8,"SerializeStructVariant",1531]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":"YY","n":["Deserialize","Serialize"],"q":[[0,"serde_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"serde_json":{"doc":"Serde JSON","t":"NNDNDDNDNNNGDDNELLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLFLLLLLLLLLLLLLLLLLOALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFFFFFFLLLLLLLLLLLLLLLLLLADDIDDDLLLLLLLLLLLFLFLFLLLLLLLLLLLLLLLLLLLENNNDNNGNLLLLLLLLLLLLLLLLLLLLLEDDDDDNDNDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNEDNINDNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNICNDNNDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLL","n":["Array","Bool","Deserializer","Err","Error","Map","Null","Number","Number","Object","Ok","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_from","clone_into","clone_into","collect_str","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_deserializer","into_iter","into_iter","into_iter","into_iter","invalid_type","json","map","next","ser","serialize","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","into","into","into","into_iter","new","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Err","Error","Io","Ok","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","equivalent","fmt","from","into","io_error_kind","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_byte_array","write_char_escape","write_f32","write_f64","write_i128","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u128","write_u16","write_u32","write_u64","write_u8","Array","Bool","Index","Map","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_number","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"serde_json"],[307,"serde_json::de"],[348,"serde_json::error"],[378,"serde_json::map"],[515,"serde_json::ser"],[611,"serde_json::value"],[785,"alloc::string"],[786,"std::io"],[787,"core::marker"],[788,"core::fmt"],[789,"core::result"],[790,"serde::de"],[791,"serde::de"],[792,"core::fmt"],[793,"core::convert"],[794,"alloc::vec"],[795,"core::option"],[796,"alloc::borrow"],[797,"std::io"],[798,"core::cmp"],[799,"serde::de"],[800,"serde::ser"],[801,"core::any"],[802,"std::io::error"],[803,"core::ops::function"],[804,"core::ops::function"]],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","Contains the error value","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","Parses a JSON string as bytes. Note that this function …","","","","","","Parses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a newtype struct as the underlying value.","","","Parses a <code>null</code> as a None, and any other values as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert <code>Number</code> to <code>Value::Number</code>.","","","","","Convert boolean to <code>Value::Bool</code>.","Convert a slice to <code>Value::Array</code>.","","Convert a <code>Vec</code> to <code>Value::Array</code>.","","Convert 32-bit floating point number to <code>Value::Number</code>, or …","","","Convert string slice to <code>Value::String</code>.","Convert <code>String</code> to <code>Value::String</code>.","","","Convert <code>()</code> to <code>Value::Null</code>.","Convert map (with string keys) to <code>Value::Object</code>.","Convert copy-on-write string to <code>Value::String</code>.","","Returns the argument unchanged.","Convert 64-bit floating point number to <code>Value::Number</code>, or …","","Create a <code>Value::Object</code> by collecting an iterator of …","Create a <code>Value::Array</code> by collecting an iterator of array …","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","Serialize a Rust data structure into JSON data.","","","","","","","","","","","","","","Serialize newtypes without an object wrapper.","","","","","","","","","","","","","","","","","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from an I/O stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","Contains the error value","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The kind reported by the underlying standard library I/O …","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as <code>\\\\r</code>…","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it human …","An escaped quote <code>&quot;</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written to","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes the representation of a byte array. Formatters can …","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a string.","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is a Number, returns the associated <code>Number</code>. …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","",""],"i":[2,2,0,6,0,0,2,0,2,2,6,0,0,0,2,0,14,51,11,3,5,2,14,51,11,3,5,2,3,2,3,3,2,5,11,11,0,3,2,3,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,0,3,11,11,3,2,2,14,51,11,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,0,0,0,2,0,3,2,3,2,14,51,11,3,5,2,2,2,51,3,3,3,11,0,0,51,0,3,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,3,2,0,11,2,0,0,0,0,0,0,14,51,11,3,5,2,14,51,11,3,5,2,14,51,11,3,5,2,0,0,0,0,0,0,0,59,60,61,59,60,61,51,14,59,60,61,0,14,0,14,0,14,59,60,61,14,14,51,59,60,61,59,60,61,59,60,61,59,60,61,0,62,62,6,0,62,6,0,62,62,62,11,62,62,11,62,62,62,62,62,11,11,11,11,11,11,62,62,62,62,0,0,0,0,0,0,64,0,64,0,0,0,64,3,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,3,3,3,64,67,66,68,69,71,70,72,73,3,66,3,3,66,3,67,66,64,67,66,68,69,71,70,72,73,68,69,71,70,72,73,66,3,3,3,64,67,66,3,3,68,69,71,70,72,73,3,68,69,71,70,72,73,68,69,71,70,72,73,64,64,3,66,3,3,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,3,3,3,78,78,78,0,0,78,0,78,0,78,78,0,78,78,8,76,8,76,8,76,8,76,8,76,8,78,77,76,78,77,76,77,76,77,76,76,8,76,8,76,8,76,8,8,76,8,77,76,78,77,76,78,77,76,5,5,76,5,77,76,0,0,0,0,0,0,78,77,76,78,77,76,78,77,76,5,76,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,2,0,0,2,0,2,2,0,2,0,2,2,2,2,36,2,36,2,2,2,2,2,2,36,79,36,79,36,36,36,79,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,79,36,36,36,36,36,36,36,36,36,36,36,36,36,0,2,2,36,79,36,2,2,2,36,2,36,2,2,2,2,2,36,2,2,36,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,2,36,36,0,79,36,79,36,79,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],[[3,[1,2]]]],[2,2],[[[3,[1,2]],[3,[1,2]]],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,10]],[-1,11,10],[-1,11,10],0,[[],[[3,[1,2]]]],[[],2],[-1,[[12,[[3,[1,2]]]]],13],[-1,[[12,[2]]],13],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],19,-2],6,15,16],[[2,19,-1],[[12,[11]]],16],[[2,19,-1],[[12,[11]]],16],[[[14,[-1]],17,19,-2],6,15,16],[[2,17,19,-1],[[12,[11]]],16],[[2,17,19,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[3,[1,2]],[3,[1,2]]],20],[[2,21],20],[[2,22],20],[[2,23],20],[[2,1],20],[[2,24],20],[[2,25],20],[[2,22],20],[[2,20],20],[[2,2],20],[[2,19],20],[[2,21],20],[[2,26],20],[[2,19],20],[[2,23],20],[[2,27],20],[[2,21],20],[[2,23],20],[[2,28],20],[[2,29],20],[[2,24],20],[[2,17],20],[[2,28],20],[[2,30],20],[[2,25],20],[[2,20],20],[[2,30],20],[[2,31],20],[[2,17],20],[[2,31],20],[[2,26],20],[[2,29],20],[[2,27],20],[[2,26],20],[[2,31],20],[[2,20],20],[[2,28],20],[[2,27],20],[[2,25],20],[[2,29],20],[[2,30],20],[[2,22],20],[[2,19],20],[[2,24],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],0,[[[3,[1,2]],-1],4,32],[[11,33],34],[[11,33],34],[[[3,[1,2]],33],[[12,[4,35]]]],[[2,33],34],[[2,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[36,2],[29,2],[19,2],[31,2],[26,2],[20,2],[[[18,[-1]]],2,[37,[38,[2]]]],[24,2],[[[39,[-1]]],2,[[38,[2]]]],[22,2],[30,2],[25,2],[[[40,[-1]]],2,[[38,[2]]]],[17,2],[1,2],[28,2],[27,2],[4,2],[[[3,[1,2]]],2],[[[41,[17]]],2],[23,2],[-1,-1,[]],[21,2],[-1,[[3,[1,2]]],32],[-1,2,32],[-1,2,32],[-1,[[6,[-2]]],42,43],[[[18,[24]]],[[6,[-1]]],44],[17,[[6,[-1]]],44],[17,[[12,[2,11]]]],[2,[[12,[-1,11]]],43],[[[3,[1,2]],-1],2,[9,45,46,47]],[[2,-1],2,48],[[[3,[1,2]],-1],2,[9,45,46,47]],[[2,-1],2,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2],[2],[-1,-2,[],[]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[49,50],11],0,0,[[[51,[-1,-2]]],[[40,[[6,[-2]]]]],15,44],0,[[[3,[1,2]],-1],12,52],[[2,-1],12,52],[[[5,[-1,-2]],20],[[6,[4]]],7,8],[[[5,[-1,-2]],[18,[24]]],[[6,[4]]],7,8],[[[5,[-1,-2]],53],[[6,[4]]],7,8],[[[5,[-1,-2]],30],[[6,[4]]],7,8],[[[5,[-1,-2]],21],[[6,[4]]],7,8],[[[5,[-1,-2]],54],[[6,[4]]],7,8],[[[5,[-1,-2]],27],[[6,[4]]],7,8],[[[5,[-1,-2]],29],[[6,[4]]],7,8],[[[5,[-1,-2]],23],[[6,[4]]],7,8],[[[5,[-1,-2]],26],[[6,[4]]],7,8],[[[5,[-1,-2]],[40,[19]]],6,7,8],[[[5,[-1,-2]],17,-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]],17,28,17,-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],[40,[19]]],6,7,8],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,19],6,7,8],[[[5,[-1,-2]],17,28,17,19],6,7,8],[[[5,[-1,-2]],19],6,7,8],[[[5,[-1,-2]],17,19],6,7,8],[[[5,[-1,-2]],17,28,17,19],6,7,8],[[[5,[-1,-2]],56],[[6,[4]]],7,8],[[[5,[-1,-2]],22],[[6,[4]]],7,8],[[[5,[-1,-2]],28],[[6,[4]]],7,8],[[[5,[-1,-2]],25],[[6,[4]]],7,8],[[[5,[-1,-2]],24],[[6,[4]]],7,8],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,28,17],[[6,[4]]],7,8],[11,[[40,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,55]],[-1,1,[]],[-1,1,[]],[-1,[[6,[1]]],[9,55]],[-1,[[12,[2,11]]],55],[-1,[[6,[[39,[24]]]]],[9,55]],[-1,[[6,[[39,[24]]]]],[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]]],19,15,44],[[[14,[-1]]],[[6,[4]]],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2]]],42,43],[-1,[[14,[[59,[-1]]]]],42],[[[18,[24]]],[[6,[-1]]],44],[[[18,[24]]],[[14,[60]]]],[17,[[6,[-1]]],44],[17,[[14,[61]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[51,[-1,-2]]],15,44],[-1,[[14,[-1]]],15],[-1,[[51,[-1,-2]]],15,44],[-1,[[59,[-1]]],42],[[[18,[24]]],60],[17,61],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,62],[62,62],[[-1,-2],4,[],[]],[11,19],[[62,62],20],[[-1,-2],20,[],[]],[[62,33],34],[-1,-1,[]],[-1,-2,[],[]],[11,[[40,[63]]]],[11,20],[11,20],[11,20],[11,20],[11,19],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[64,-1],64,65],[[[3,[1,2]],[3,[1,2]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],4],[[[3,[1,2]],-1],20,[9,45,46,47]],[[[3,[1,2]],-1],64,[[38,[1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[1,2]],-1],[[40,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],-1],[[40,[[4,[1,2]]]]],[9,45,46,47]],[[[3,[1,2]],-1],[[40,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],1,2],[[40,[2]]]],[[67,2],2],[[66,2],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,2],[[[3,[1,2]]],20],[[[3,[1,2]]],68],[[[3,[1,2]]],69],[64,1],[67,1],[66,1],[[[3,[1,2]]],70],[[[3,[1,2]]],19],[68,19],[69,19],[71,19],[70,19],[72,19],[73,19],[[],[[3,[1,2]]]],[68,40],[69,40],[71,40],[70,40],[72,40],[73,40],[68,40],[69,40],[71,40],[70,40],[72,40],[73,40],[[64,2],2],[[64,-1],2,65],[[[3,[1,2]],-1],[[40,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],-1],[[40,[[4,[1,2]]]]],[9,45,46,47]],[[[3,[1,2]],-1],4,74],[68,[[4,[19,[40,[19]]]]]],[69,[[4,[19,[40,[19]]]]]],[71,[[4,[19,[40,[19]]]]]],[70,[[4,[19,[40,[19]]]]]],[72,[[4,[19,[40,[19]]]]]],[73,[[4,[19,[40,[19]]]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[[3,[1,2]]],72],[[[3,[1,2]]],73],[19,[[3,[1,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[76,-1,20],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[76,-1,20],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[76,76],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],76],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[77,33],34],[[76,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1,-2]]],-1,7,8],[-1,[[5,[-1]]],7],[[],76],[-1,[[5,[-1,76]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,55]],[-1,[[6,[1]]],[9,55]],[-1,[[6,[[39,[24]]]]],[9,55]],[-1,[[6,[[39,[24]]]]],[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[-1,-2],[[5,[-1,-2]]],7,8],[[[18,[24]]],76],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[-1,-2,[18,[24]]],[[75,[4]]],[],[9,7]],[[-1,-2,78],[[75,[4]]],[],[9,7]],[[-1,-2,30],[[75,[4]]],[],[9,7]],[[-1,-2,21],[[75,[4]]],[],[9,7]],[[-1,-2,54],[[75,[4]]],[],[9,7]],[[-1,-2,27],[[75,[4]]],[],[9,7]],[[-1,-2,29],[[75,[4]]],[],[9,7]],[[-1,-2,23],[[75,[4]]],[],[9,7]],[[-1,-2,26],[[75,[4]]],[],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,56],[[75,[4]]],[],[9,7]],[[-1,-2,22],[[75,[4]]],[],[9,7]],[[-1,-2,28],[[75,[4]]],[],[9,7]],[[-1,-2,25],[[75,[4]]],[],[9,7]],[[-1,-2,24],[[75,[4]]],[],[9,7]],0,0,0,0,0,0,0,0,0,0,0,[2,[[40,[[39,[2]]]]]],[2,[[40,[[39,[2]]]]]],[2,[[40,[20]]]],[2,[[40,[21]]]],[36,[[40,[21]]]],[2,[[40,[23]]]],[36,[[40,[23]]]],[2,[[40,[4]]]],[2,[[40,[36]]]],[2,[[40,[[3,[1,2]]]]]],[2,[[40,[[3,[1,2]]]]]],[2,[[40,[17]]]],[2,[[40,[25]]]],[36,[[40,[25]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],4,[],[]],[[79,-1],[[6,[2]]],[9,10]],[-1,[[12,[36]]],13],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,-1],12,16],[[36,17,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,17,[18,[17]],-1],12,16],[[36,19,-1],12,16],[[36,19,-1],12,16],[[36,17,19,-1],12,16],[[36,17,19,-1],12,16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],[[12,[11]]],16],[[36,-1],12,16],[[36,-1],12,16],[[36,17,-1],12,16],[[36,17,-1],12,16],[[36,36],20],[[-1,-2],20,[],[]],[[36,33],34],[[36,33],34],[-1,-1,[]],[28,36],[23,36],[-1,-1,[]],[26,36],[24,36],[19,36],[29,36],[27,36],[22,36],[25,36],[31,36],[21,[[40,[36]]]],[17,[[12,[36]]]],[2,[[12,[-1,11]]],43],[[2,-1],[[40,[2]]],48],[[2,-1],[[40,[2]]],48],[[36,-1],4,80],[-1,-2,[],[]],[-1,-2,[],[]],[2,20],[2,20],[2,20],[36,20],[2,20],[36,20],[2,20],[2,20],[2,20],[2,20],[2,20],[36,20],[[2,17],[[40,[2]]]],[[2,17],[[40,[2]]]],[[36,-1],12,52],[[79,20],[[6,[2]]]],[[79,[18,[24]]],[[6,[2]]]],[[79,53],[[6,[2]]]],[[79,30],[[6,[2]]]],[[79,21],[[6,[2]]]],[[79,54],[[6,[2]]]],[[79,27],[[6,[2]]]],[[79,29],[[6,[2]]]],[[79,23],[[6,[2]]]],[[79,26],[[6,[2]]]],[[79,[40,[19]]],6],[[79,17,-1],[[6,[2]]],[9,55]],[[79,17,28,17,-1],[[6,[2]]],[9,55]],[79,[[6,[2]]]],[[79,[40,[19]]],6],[[79,-1],[[6,[2]]],[9,55]],[[79,17],[[6,[2]]]],[[79,17,19],6],[[79,17,28,17,19],6],[[79,19],6],[[79,17,19],6],[[79,17,28,17,19],6],[[79,56],[[6,[2]]]],[[79,22],[[6,[2]]]],[[79,28],[[6,[2]]]],[[79,25],[[6,[2]]]],[[79,24],[[6,[2]]]],[79,[[6,[2]]]],[[79,17],[[6,[2]]]],[[79,17,28,17],[[6,[2]]]],[2,2],[-1,-2,[],[]],[-1,1,[]],[-1,[[12,[2,11]]],55],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]]],"c":[],"p":[[3,"String",785],[4,"Value",0],[3,"Map",0],[15,"tuple"],[3,"Serializer",0],[6,"Result",0],[8,"Write",786],[8,"Formatter",515],[8,"Sized",787],[8,"Display",788],[3,"Error",0],[4,"Result",789],[8,"Deserializer",790],[3,"Deserializer",0],[8,"Read",307],[8,"Visitor",790],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[15,"f64"],[15,"u16"],[15,"i64"],[15,"u8"],[15,"u64"],[15,"i8"],[15,"i16"],[15,"u32"],[15,"i32"],[15,"f32"],[15,"isize"],[8,"IntoIterator",791],[3,"Formatter",788],[6,"Result",788],[3,"Error",788],[3,"Number",611],[8,"Clone",792],[8,"Into",793],[3,"Vec",794],[4,"Option",795],[4,"Cow",796],[8,"Read",786],[8,"DeserializeOwned",790],[8,"Deserialize",790],[8,"Ord",797],[8,"Eq",797],[8,"Hash",798],[8,"Index",611],[4,"Unexpected",790],[8,"Expected",790],[3,"StreamDeserializer",0],[8,"Serializer",799],[15,"char"],[15,"i128"],[8,"Serialize",799],[15,"u128"],[8,"Error",800],[3,"TypeId",801],[3,"IoRead",307],[3,"SliceRead",307],[3,"StrRead",307],[4,"Category",348],[4,"ErrorKind",802],[4,"Entry",378],[8,"FnOnce",803],[3,"OccupiedEntry",378],[3,"VacantEntry",378],[3,"Iter",378],[3,"IterMut",378],[3,"Keys",378],[3,"IntoIter",378],[3,"Values",378],[3,"ValuesMut",378],[8,"FnMut",803],[6,"Result",802],[3,"PrettyFormatter",515],[3,"CompactFormatter",515],[4,"CharEscape",515],[3,"Serializer",611],[8,"Hasher",798]]},\
"serde_urlencoded":{"doc":"<code>x-www-form-urlencoded</code> meets Serde","t":"DDLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLDDLLLLLLLLLLLFFFLLLLLLLNEDDDDDDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Deserializer","Serializer","borrow","borrow","borrow_mut","borrow_mut","de","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","from","from","from_bytes","from_reader","from_str","into","into","ser","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Deserializer","Error","borrow","borrow_mut","clone","clone_into","custom","custom","description","eq","fmt","fmt","from","from_bytes","from_reader","from_str","into","new","to_owned","to_string","try_from","try_into","type_id","Custom","Error","MapSerializer","SeqSerializer","Serializer","StructSerializer","StructVariantSerializer","TupleSerializer","TupleStructSerializer","TupleVariantSerializer","Utf8","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","custom","description","end","end","end","end","end","end","end","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","new","serialize_element","serialize_element","serialize_entry","serialize_field","serialize_field","serialize_field","serialize_field","serialize_key","serialize_value","source","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"serde_urlencoded"],[79,"serde_urlencoded::de"],[102,"serde_urlencoded::ser"],[199,"core::result"],[200,"serde::de"],[201,"serde::de"],[202,"serde::de"],[203,"core::option"],[204,"core::marker"],[205,"serde::ser"],[206,"alloc::string"],[207,"core::any"],[208,"core::fmt"],[209,"core::fmt"],[210,"core::fmt"]],"d":["A deserializer for the <code>application/x-www-form-urlencoded</code> …","A serializer for the <code>application/x-www-form-urlencoded</code> …","","","","","Deserialization support for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a <code>application/x-www-form-urlencoded</code> value …","Convenience function that reads all bytes from <code>reader</code> and …","Deserializes a <code>application/x-www-form-urlencoded</code> value …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialization support for the …","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Serializes a map, given length is ignored.","Serializes the inner value, ignoring the newtype name.","Returns an error.","Returns <code>Ok</code>.","Serialize a sequence, given length (if any) is ignored.","Serializes the given value.","Returns an error.","Serializes a struct, given length is ignored.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns <code>Ok</code>.","Returns <code>Ok</code>.","Returns an error.","Serializes a value into a <code>application/x-www-form-urlencoded</code>…","","","","","","","A deserializer for the <code>application/x-www-form-urlencoded</code> …","A minimal representation of all possible errors that can …","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>application/x-www-form-urlencoded</code> value …","Convenience function that reads all bytes from <code>reader</code> and …","Deserializes a <code>application/x-www-form-urlencoded</code> value …","Calls <code>U::from(self)</code>.","Returns a new <code>Deserializer</code>.","","","","","","","Errors returned during serializing to …","Map serializer.","Sequence serializer.","A serializer for the <code>application/x-www-form-urlencoded</code> …","Struct serializer.","Struct variant serializer.","Tuple serializer.","Tuple struct serializer.","Tuple variant serializer.","","","","","","","","","","","","","","","","","","The lower-level cause of this error, in the case of a <code>Utf8</code> …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new <code>Serializer</code>.","","","","","","","","","","The lower-level source of this error, in the case of a <code>Utf8</code>…","","Serializes a value into a <code>application/x-www-form-urlencoded</code>…","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,12,1,12,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,0,0,0,1,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,12,1,12,1,12,0,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,8,1,8,8,8,8,8,14,0,0,0,0,0,0,0,0,0,14,37,38,39,40,41,42,43,14,37,38,39,40,41,42,43,14,14,14,14,14,14,37,38,39,40,41,42,43,14,14,14,14,37,38,39,40,41,42,43,14,37,38,39,40,41,42,43,14,12,37,38,41,39,40,42,43,41,41,14,14,0,14,37,38,39,40,41,42,43,14,37,38,39,40,41,42,43,14,37,38,39,40,41,42,43,14],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,4,[5,[4]],-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,4,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,4,[5,[4]],-1],2,3],[[1,6,-1],2,3],[[1,4,6,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,-1],2,3],[[1,4,-1],2,3],[-1,-1,[]],[-1,-1,[]],[[[5,[7]]],[[2,[-1,8]]],9],[-1,[[2,[-2,8]]],10,11],[4,[[2,[-1,8]]],9],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[12,[-1]],13],[[2,[14]]],15],[[[12,[-1]],[5,[7]]],[[2,[14]]],15],[[[12,[-1]],16],[[2,[14]]],15],[[[12,[-1]],17],[[2,[14]]],15],[[[12,[-1]],18],[[2,[14]]],15],[[[12,[-1]],19],[[2,[14]]],15],[[[12,[-1]],20],[[2,[14]]],15],[[[12,[-1]],21],[[2,[14]]],15],[[[12,[-1]],22],[[2,[14]]],15],[[[12,[-1]],[23,[6]]],[[2,[14]]],15],[[[12,[-1]],4,-2],[[2,[14]]],15,[24,25]],[[[12,[-1]],4,26,4,-2],[[2,[14]]],15,[24,25]],[[[12,[-1]]],[[2,[14]]],15],[[[12,[-1]],[23,[6]]],[[2,[14]]],15],[[[12,[-1]],-2],[[2,[14]]],15,[24,25]],[[[12,[-1]],4],[[2,[14]]],15],[[[12,[-1]],4,6],[[2,[14]]],15],[[[12,[-1]],4,26,4,6],[[2,[14]]],15],[[[12,[-1]],6],[[2,[14]]],15],[[[12,[-1]],4,6],[[2,[14]]],15],[[[12,[-1]],4,26,4,6],[[2,[14]]],15],[[[12,[-1]],27],[[2,[14]]],15],[[[12,[-1]],26],[[2,[14]]],15],[[[12,[-1]],28],[[2,[14]]],15],[[[12,[-1]],7],[[2,[14]]],15],[[[12,[-1]]],[[2,[14]]],15],[[[12,[-1]],4],[[2,[14]]],15],[[[12,[-1]],4,26,4],[[2,[14]]],15],[-1,[[2,[29,14]]],25],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[8,8],[[-1,-2],31,[],[]],[-1,8,32],[-1,8,32],[8,4],[[8,8],13],[[8,33],[[2,[31,34]]]],[[8,33],[[2,[31,34]]]],[-1,-1,[]],[[[5,[7]]],[[2,[-1,8]]],9],[-1,[[2,[-2,8]]],10,11],[4,[[2,[-1,8]]],9],[-1,-2,[],[]],[35,1],[-1,-2,[],[]],[-1,29,[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,30,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,[[23,[36]]]],[14,14],[[-1,-2],31,[],[]],[-1,14,32],[14,4],[[[37,[-1]]],[[2,[14]]],15],[[[38,[-1]]],[[2,[14]]],15],[[[39,[-1]]],[[2,[14]]],15],[[[40,[-1]]],[[2,[14]]],15],[[[41,[-1]]],[[2,[14]]],15],[[[42,[-1]]],[[2,[14]]],15],[[[43,[-1]]],[[2,[14]]],15],[[14,14],13],[[-1,-2],13,[],[]],[[14,33],44],[[14,33],44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1]]],[[12,[-1]]],15],[[[37,[-1]],-2],[[2,[31,14]]],15,[24,25]],[[[38,[-1]],-2],[[2,[31,14]]],15,[24,25]],[[[41,[-1]],-2,-3],[[2,[31,14]]],15,[24,25],[24,25]],[[[39,[-1]],-2],[[2,[31,14]]],15,[24,25]],[[[40,[-1]],-2],[[2,[31,14]]],15,[24,25]],[[[42,[-1]],4,-2],[[2,[31,14]]],15,[24,25]],[[[43,[-1]],4,-2],[[2,[31,14]]],15,[24,25]],[[[41,[-1]],-2],[[2,[31,14]]],15,[24,25]],[[[41,[-1]],-2],[[2,[31,14]]],15,[24,25]],[14,[[23,[36]]]],[-1,-2,[],[]],[-1,[[2,[29,14]]],25],[-1,29,[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]]],"c":[],"p":[[3,"Deserializer",0],[4,"Result",199],[8,"Visitor",200],[15,"str"],[15,"slice"],[15,"usize"],[15,"u8"],[3,"Error",79],[8,"Deserialize",200],[8,"Read",201],[8,"DeserializeOwned",200],[3,"Serializer",0],[15,"bool"],[4,"Error",102],[8,"Target",202],[15,"char"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option",203],[8,"Sized",204],[8,"Serialize",205],[15,"u32"],[15,"u16"],[15,"u64"],[3,"String",206],[3,"TypeId",207],[15,"tuple"],[8,"Display",208],[3,"Formatter",208],[3,"Error",208],[3,"Parse",202],[8,"Error",209],[3,"SeqSerializer",102],[3,"TupleSerializer",102],[3,"TupleStructSerializer",102],[3,"TupleVariantSerializer",102],[3,"MapSerializer",102],[3,"StructSerializer",102],[3,"StructVariantSerializer",102],[6,"Result",208],[3,"Serializer",202]]},\
"sha1":{"doc":"Pure Rust implementation of the SHA-1 cryptographic hash …","t":"IGDLLKLLLCKKLKKKLLLKKKKLLLLLKLL","n":["Digest","Sha1","Sha1Core","borrow","borrow_mut","chain_update","clone","clone_into","default","digest","digest","finalize","finalize_fixed_core","finalize_into","finalize_into_reset","finalize_reset","fmt","from","into","new","new_with_prefix","output_size","reset","reset","to_owned","try_from","try_into","type_id","update","update_blocks","write_alg_name"],"q":[[0,"sha1"],[31,"core::convert"],[32,"generic_array"],[33,"digest::core_api"],[34,"crypto_common"],[35,"digest"],[36,"core::fmt"],[37,"core::fmt"],[38,"core::any"],[39,"crypto_common"]],"d":["Convenience wrapper trait covering functionality of …","SHA-1 hasher state.","Core SHA-1 hasher state.","","","Process input data in a chained manner.","","","","","Compute hash of <code>data</code>.","Retrieve result and consume hasher instance.","","Write result into provided array and consume the hasher …","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new hasher instance.","Create new hasher instance which has processed the …","Get output size of the hasher","Reset hasher instance to its initial state.","","","","","","Process data, updating the internal state.","",""],"i":[0,0,0,4,4,17,4,4,4,0,17,17,4,17,17,17,4,4,4,17,17,17,17,4,4,4,4,4,17,4,4],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],-1,[],[[3,[[2,[1]]]]]],[4,4],[[-1,-2],5,[],[]],[[],4],0,[-1,[[6,[1]]],[[3,[[2,[1]]]]]],[-1,[[6,[1]]],[]],[[4,[7,[4]],[8,[4]]],5],[[-1,[6,[1]]],5,[]],[[-1,[6,[1]]],5,9],[-1,[[6,[1]]],9],[[4,10],11],[-1,-1,[]],[-1,-2,[],[]],[[],-1,[]],[-1,-2,[[3,[[2,[1]]]]],[]],[[],12],[-1,5,13],[4,5],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[[-1,-2],5,[],[[3,[[2,[1]]]]]],[[4,[2,[[16,[4]]]]],5],[10,11]],"c":[],"p":[[15,"u8"],[15,"slice"],[8,"AsRef",31],[3,"Sha1Core",0],[15,"tuple"],[3,"GenericArray",32],[6,"Buffer",33],[6,"Output",34],[8,"FixedOutputReset",35],[3,"Formatter",36],[6,"Result",36],[15,"usize"],[8,"Reset",34],[4,"Result",37],[3,"TypeId",38],[6,"Block",34],[8,"Digest",0]]},\
"sha2":{"doc":"An implementation of the SHA-2 cryptographic hash …","t":"IGGDGGDGGLLLLKLLLLCKKKKKLLLLLLLLKLLKKKLLLLLLLLKLLLL","n":["Digest","Sha224","Sha256","Sha256VarCore","Sha384","Sha512","Sha512VarCore","Sha512_224","Sha512_256","borrow","borrow","borrow_mut","borrow_mut","chain_update","clone","clone","clone_into","clone_into","digest","digest","finalize","finalize_into","finalize_into_reset","finalize_reset","finalize_variable_core","finalize_variable_core","fmt","fmt","from","from","into","into","new","new","new","new_with_prefix","output_size","reset","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update_blocks","update_blocks","write_alg_name","write_alg_name"],"q":[[0,"sha2"],[51,"core::convert"],[52,"generic_array"],[53,"digest"],[54,"digest::core_api"],[55,"crypto_common"],[56,"core::fmt"],[57,"core::fmt"],[58,"crypto_common"],[59,"crypto_common"]],"d":["Convenience wrapper trait covering functionality of …","SHA-224 hasher.","SHA-256 hasher.","Core block-level SHA-256 hasher with variable output size.","SHA-384 hasher.","SHA-512 hasher.","Core block-level SHA-512 hasher with variable output size.","SHA-512/224 hasher.","SHA-512/256 hasher.","","","","","Process input data in a chained manner.","","","","","","Compute hash of <code>data</code>.","Retrieve result and consume hasher instance.","Write result into provided array and consume the hasher …","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new hasher instance.","","","Create new hasher instance which has processed the …","Get output size of the hasher","Reset hasher instance to its initial state.","","","","","","","","","Process data, updating the internal state.","","","",""],"i":[0,0,0,0,0,0,0,0,0,4,5,4,5,19,4,5,4,5,0,19,19,19,19,19,4,5,4,5,4,5,4,5,19,4,5,19,19,19,4,5,4,5,4,5,4,5,19,4,5,4,5],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],-1,[],[[3,[[2,[1]]]]]],[4,4],[5,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[-1,[[7,[1]]],[[3,[[2,[1]]]]]],[-1,[[7,[1]]],[]],[[-1,[7,[1]]],6,[]],[[-1,[7,[1]]],6,8],[-1,[[7,[1]]],8],[[4,[9,[4]],[10,[4]]],6],[[5,[9,[5]],[10,[5]]],6],[[4,11],12],[[5,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],-1,[]],[13,[[15,[4,14]]]],[13,[[15,[5,14]]]],[-1,-2,[[3,[[2,[1]]]]],[]],[[],13],[-1,6,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[[-1,-2],6,[],[[3,[[2,[1]]]]]],[[4,[2,[[18,[4]]]]],6],[[5,[2,[[18,[5]]]]],6],[11,12],[11,12]],"c":[],"p":[[15,"u8"],[15,"slice"],[8,"AsRef",51],[3,"Sha256VarCore",0],[3,"Sha512VarCore",0],[15,"tuple"],[3,"GenericArray",52],[8,"FixedOutputReset",53],[6,"Buffer",54],[6,"Output",55],[3,"Formatter",56],[6,"Result",56],[15,"usize"],[3,"InvalidOutputSize",53],[4,"Result",57],[8,"Reset",55],[3,"TypeId",58],[6,"Block",55],[8,"Digest",0]]},\
"signature":{"doc":"RustCrypto: Digital Signature Algorithms","t":"QIINDIINIIIQGIIIIQQLLLCLLLLLLLALLCLLLLLLLLLLLLLLLLLLKKKKKLKKKIIIKKK","n":["Digest","DigestSigner","DigestVerifier","Err","Error","Keypair","KeypairRef","Ok","PrehashSignature","RandomizedDigestSigner","RandomizedSigner","Repr","Result","SignatureEncoding","Signer","SignerMut","Verifier","VerifyingKey","VerifyingKey","borrow","borrow_mut","default","digest","encoded_len","encoded_len","fmt","fmt","from","from","from_source","hazmat","into","new","rand_core","sign","sign","sign","sign","sign_digest","sign_digest","sign_digest_with_rng","sign_digest_with_rng","sign_with_rng","sign_with_rng","source","to_bytes","to_bytes","to_string","to_vec","to_vec","try_from","try_into","try_sign","try_sign","try_sign_digest","try_sign_digest_with_rng","try_sign_with_rng","type_id","verify","verify_digest","verifying_key","PrehashSigner","PrehashVerifier","RandomizedPrehashSigner","sign_prehash","sign_prehash_with_rng","verify_prehash"],"q":[[0,"signature"],[61,"signature::hazmat"],[67,"core::fmt"],[68,"core::fmt"],[69,"alloc::boxed"],[70,"core::convert"],[71,"rand_core"],[72,"core::option"],[73,"alloc::string"],[74,"alloc::vec"],[75,"core::result"],[76,"core::any"]],"d":["Preferred <code>Digest</code> algorithm to use when computing this …","Sign the given prehashed message <code>Digest</code> using <code>Self</code>.","Verify the provided signature for the given prehashed …","Contains the error value","Signature errors.","Signing keypair with an associated verifying key.","Signing keypair with an associated verifying key.","Contains the success value","Marker trait for <code>Signature</code> types computable as …","Combination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with …","Sign the given message using the provided external …","Byte representation of a signature.","Result type.","Support for decoding/encoding signatures as bytes.","Sign the provided message bytestring using <code>Self</code> (e.g. a …","Sign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …","Verify the provided message bytestring using <code>Self</code> (e.g. a …","Verifying key type for this keypair.","Verifying key type for this keypair.","","","","","Get the length of this signature when encoded.","Get the length of this signature when encoded.","","","","Returns the argument unchanged.","Create a new error with an associated source.","Hazardous Materials: low-level APIs which can be insecure …","Calls <code>U::from(self)</code>.","Create a new error with no associated source","","Sign the given message and return a digital signature","Sign the given message and return a digital signature","Sign the given message, update the state, and return a …","Sign the given message, update the state, and return a …","Sign the given prehashed message <code>Digest</code>, returning a …","Sign the given prehashed message <code>Digest</code>, returning a …","Sign the given prehashed message <code>Digest</code>, returning a …","Sign the given prehashed message <code>Digest</code>, returning a …","Sign the given message and return a digital signature","Sign the given message and return a digital signature","","Encode signature as its byte representation.","Encode signature as its byte representation.","","Encode signature as a byte vector.","Encode signature as a byte vector.","","","Attempt to sign the given message, returning a digital …","Attempt to sign the given message, updating the state, and …","Attempt to sign the given prehashed message <code>Digest</code>, …","Attempt to sign the given prehashed message <code>Digest</code>, …","Attempt to sign the given message, returning a digital …","","Use <code>Self</code> to verify that the provided signature for a given …","Verify the signature against the given <code>Digest</code> output.","Get the verifying key which can verify signatures produced …","Sign the provided message prehash, returning a digital …","Verify the provided message prehash using <code>Self</code> (e.g. a …","Sign the provided message prehash using the provided …","Attempt to sign the given message digest, returning a …","Attempt to sign the given message digest, returning a …","Use <code>Self</code> to verify that the provided signature for a given …"],"i":[17,0,0,18,0,0,0,18,0,0,0,19,0,0,0,0,0,20,21,1,1,1,0,19,19,1,1,1,1,1,0,1,1,0,22,22,23,23,24,24,25,25,26,26,1,19,19,1,19,19,1,1,22,23,24,25,26,1,27,28,20,0,0,0,29,30,31],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],0,[-1,2,[]],[-1,2,[]],[[1,3],4],[[1,3],4],[[[6,[5]]],1],[-1,-1,[]],[-1,1,[[7,[[6,[5]]]]]],0,[-1,-2,[],[]],[[],1],0,[[-1,[9,[8]]],-2,[],[]],[[-1,[9,[8]]],-2,[],[]],[[-1,[9,[8]]],-2,[],[]],[[-1,[9,[8]]],-2,[],[]],[[-1,-2],-3,[],[],[]],[[-1,-2],-3,[],[],[]],[[-1,-2,-3],-4,[],10,[],[]],[[-1,-2,-3],-4,[],10,[],[]],[[-1,-2,[9,[8]]],-3,[],10,[]],[[-1,-2,[9,[8]]],-3,[],10,[]],[1,[[11,[5]]]],[-1,[],[]],[-1,[],[]],[-1,12,[]],[-1,[[13,[8]]],[]],[-1,[[13,[8]]],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[-1,[9,[8]]],[[14,[-2,1]]],[],[]],[[-1,[9,[8]]],[[14,[-2,1]]],[],[]],[[-1,-2],[[14,[-3,1]]],[],[],[]],[[-1,-2,-3],[[14,[-4,1]]],[],10,[],[]],[[-1,-2,[9,[8]]],[[14,[-3,1]]],[],10,[]],[-1,15,[]],[[-1,[9,[8]],-2],[[14,[16,1]]],[],[]],[[-1,-2,-3],[[14,[16,1]]],[],[],[]],[-1,[],[]],0,0,0,[[-1,[9,[8]]],[[14,[-2,1]]],[],[]],[[-1,-2,[9,[8]]],[[14,[-3,1]]],[],10,[]],[[-1,[9,[8]],-2],[[14,[16,1]]],[],[]]],"c":[],"p":[[3,"Error",0],[15,"usize"],[3,"Formatter",67],[6,"Result",67],[8,"Error",68],[3,"Box",69],[8,"Into",70],[15,"u8"],[15,"slice"],[8,"CryptoRngCore",71],[4,"Option",72],[3,"String",73],[3,"Vec",74],[4,"Result",75],[3,"TypeId",76],[15,"tuple"],[8,"PrehashSignature",0],[6,"Result",0],[8,"SignatureEncoding",0],[8,"Keypair",0],[8,"KeypairRef",0],[8,"Signer",0],[8,"SignerMut",0],[8,"DigestSigner",0],[8,"RandomizedDigestSigner",0],[8,"RandomizedSigner",0],[8,"Verifier",0],[8,"DigestVerifier",0],[8,"PrehashSigner",61],[8,"RandomizedPrehashSigner",61],[8,"PrehashVerifier",61]]},\
"slab":{"doc":"Pre-allocated storage for a uniform data type.","t":"DDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Drain","IntoIter","Iter","IterMut","Slab","VacantEntry","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","compact","contains","default","drain","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","get","get2_mut","get2_unchecked_mut","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","insert","insert","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","key","key_of","len","len","len","len","len","new","next","next","next","next","next_back","next_back","next_back","next_back","remove","reserve","reserve_exact","retain","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_remove","type_id","type_id","type_id","type_id","type_id","type_id","vacant_entry","vacant_key","with_capacity"],"q":[[0,"slab"],[117,"core::clone"],[118,"core::ops::function"],[119,"core::fmt"],[120,"core::fmt"],[121,"core::option"],[122,"core::result"],[123,"core::any"]],"d":["A draining iterator for <code>Slab</code>","A consuming iterator over the values stored in a <code>Slab</code>","An iterator over the values stored in the <code>Slab</code>","A mutable iterator over the values stored in the <code>Slab</code>","Pre-allocated storage for a uniform data type","A handle to a vacant entry in a <code>Slab</code>.","","","","","","","","","","","","","Return the number of values the slab can store without …","Clear the slab of all values.","","","","","","Reduce the capacity as much as possible, changing the key …","Return <code>true</code> if a value is associated with the given key.","","Return a draining iterator that removes all elements from …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a reference to the value associated with the given …","Return two mutable references to the values associated …","Return two mutable references to the values associated …","Return a mutable reference to the value associated with …","Return a reference to the value associated with the given …","Return a mutable reference to the value associated with …","","","Insert a value in the slab, returning key assigned to the …","Insert a value in the entry, returning a mutable reference …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Return <code>true</code> if there are no values stored in the slab.","Return an iterator over the slab.","Return an iterator that allows modifying each value.","Return the key associated with this entry.","Get the key for an element in the slab.","Return the number of stored values.","","","","","Construct a new, empty <code>Slab</code>.","","","","","","","","","Remove and return the value associated with the given key.","Reserve capacity for at least <code>additional</code> more values to be …","Reserve the minimum capacity required to store exactly …","Retain only the elements specified by the predicate.","Shrink the capacity of the slab as much as possible …","","","","","","","","","","","","","","","","","","","Tries to remove the value associated with the given key, …","","","","","","","Return a handle to a vacant entry allowing for further …","Returns the key of the next vacant entry.","Construct a new, empty <code>Slab</code> with the specified capacity."],"i":[0,0,0,0,0,0,1,12,5,13,8,14,1,12,5,13,8,14,1,1,1,5,1,1,5,1,1,1,1,1,12,5,13,8,14,1,12,5,13,8,14,1,1,1,1,1,1,1,1,1,1,14,1,12,5,13,8,14,1,1,1,12,5,13,8,1,1,1,14,1,1,12,5,13,8,1,12,5,13,8,12,5,13,8,1,1,1,1,1,12,5,13,8,1,5,1,12,5,13,8,14,1,12,5,13,8,14,1,1,12,5,13,8,14,1,1,1],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],2,[]],[[[1,[-1]]],3,[]],[[[1,[-1]]],[[1,[-1]]],4],[[[5,[-1]]],[[5,[-1]]],[]],[[[1,[-1]],[1,[-1]]],3,4],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[1,[-1]],-2],3,[],6],[[[1,[-1]],2],7,[]],[[],[[1,[-1]]],[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[1,[-1]],9],10,11],[[[12,[-1]],9],10,11],[[[5,[-1]],9],10,11],[[[13,[-1]],9],10,11],[[[8,[-1]],9],10,[]],[[[14,[-1]],9],10,11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-2]]],15,[]],[[[1,[-1]],2],[[16,[-1]]],[]],[[[1,[-1]],2,2],[[16,[[3,[-1,-1]]]]],[]],[[[1,[-1]],2,2],[[3,[-1,-1]]],[]],[[[1,[-1]],2],[[16,[-1]]],[]],[[[1,[-1]],2],-1,[]],[[[1,[-1]],2],-1,[]],[[[1,[-1]],2],-1,[]],[[[1,[-1]],2],-1,[]],[[[1,[-1]],-1],2,[]],[[[14,[-1]],-1],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[13,[-1]]],[]],[[[1,[-1]]],[[5,[-1]]],[]],[[[1,[-1]]],[[12,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],7,[]],[[[1,[-1]]],[[5,[-1]]],[]],[[[1,[-1]]],[[13,[-1]]],[]],[[[14,[-1]]],2,[]],[[[1,[-1]],-1],2,[]],[[[1,[-1]]],2,[]],[[[12,[-1]]],2,[]],[[[5,[-1]]],2,[]],[[[13,[-1]]],2,[]],[[[8,[-1]]],2,[]],[[],[[1,[-1]]],[]],[[[12,[-1]]],16,[]],[[[5,[-1]]],16,[]],[[[13,[-1]]],16,[]],[[[8,[-1]]],16,[]],[[[12,[-1]]],16,[]],[[[5,[-1]]],16,[]],[[[13,[-1]]],16,[]],[[[8,[-1]]],16,[]],[[[1,[-1]],2],-1,[]],[[[1,[-1]],2],3,[]],[[[1,[-1]],2],3,[]],[[[1,[-1]],-2],3,[],6],[[[1,[-1]]],3,[]],[[[12,[-1]]],[[3,[2,[16,[2]]]]],[]],[[[5,[-1]]],[[3,[2,[16,[2]]]]],[]],[[[13,[-1]]],[[3,[2,[16,[2]]]]],[]],[[[8,[-1]]],[[3,[2,[16,[2]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[[1,[-1]],2],[[16,[-1]]],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[[1,[-1]]],[[14,[-1]]],[]],[[[1,[-1]]],2,[]],[2,[[1,[-1]]],[]]],"c":[],"p":[[3,"Slab",0],[15,"usize"],[15,"tuple"],[8,"Clone",117],[3,"Iter",0],[8,"FnMut",118],[15,"bool"],[3,"Drain",0],[3,"Formatter",119],[6,"Result",119],[8,"Debug",119],[3,"IntoIter",0],[3,"IterMut",0],[3,"VacantEntry",0],[8,"IntoIterator",120],[4,"Option",121],[4,"Result",122],[3,"TypeId",123]]},\
"socket2":{"doc":"Utilities for creating and using sockets.","t":"NSDSSSSNEDDDDSDSSDDDSDDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Address","DGRAM","Domain","ICMPV4","ICMPV6","IPV4","IPV6","Index","InterfaceIndexOrAddress","MaybeUninitSlice","MsgHdr","MsgHdrMut","Protocol","RAW","RecvFlags","SEQPACKET","STREAM","SockAddr","SockRef","Socket","TCP","TcpKeepalive","Type","UDP","UNIX","accept","accept_raw","as_abstract_namespace","as_fd","as_pathname","as_ptr","as_raw_fd","as_socket","as_socket_ipv4","as_socket_ipv6","as_storage","as_unix","bind","bind_device_by_index","bind_device_by_index_v4","bind_device_by_index_v6","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","connect","connect_timeout","deref","deref","deref_mut","device_index","device_index_v4","device_index_v6","domain","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","family","flags","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_address","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_fd","hash","header_included","into","into","into","into","into","into","into","into","into","into","into","into","into_raw_fd","is_end_of_record","is_ipv4","is_ipv6","is_out_of_band","is_truncated","is_unix","is_unnamed","join_multicast_v4","join_multicast_v4_n","join_multicast_v6","join_ssm_v4","keepalive","keepalive_interval","keepalive_retries","keepalive_time","leave_multicast_v4","leave_multicast_v4_n","leave_multicast_v6","leave_ssm_v4","len","linger","listen","local_addr","mss","multicast_hops_v6","multicast_if_v4","multicast_if_v6","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","new","new","new","new","new","new","new_raw","nodelay","nonblocking","only_v6","out_of_band_inline","pair","pair_raw","peek","peek_from","peek_sender","peer_addr","read","read","read_timeout","read_vectored","read_vectored","recv","recv_buffer_size","recv_from","recv_from_vectored","recv_from_vectored_with_flags","recv_from_with_flags","recv_out_of_band","recv_tclass_v6","recv_tos","recv_vectored","recv_vectored_with_flags","recv_with_flags","recvmsg","reuse_address","reuse_port","send","send_buffer_size","send_out_of_band","send_to","send_to_vectored","send_to_vectored_with_flags","send_to_with_flags","send_vectored","send_vectored_with_flags","send_with_flags","sendfile","sendmsg","set_broadcast","set_cloexec","set_header_included","set_keepalive","set_length","set_linger","set_mss","set_multicast_hops_v6","set_multicast_if_v4","set_multicast_if_v6","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_nonblocking","set_nosigpipe","set_only_v6","set_out_of_band_inline","set_read_timeout","set_recv_buffer_size","set_recv_tclass_v6","set_recv_tos","set_reuse_address","set_reuse_port","set_send_buffer_size","set_tclass_v6","set_tcp_keepalive","set_tos","set_ttl","set_unicast_hops_v6","set_write_timeout","shutdown","take_error","tclass_v6","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","tos","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_init","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttl","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicast_hops_v6","unix","with_addr","with_addr","with_buffers","with_buffers","with_control","with_control","with_flags","with_interval","with_retries","with_time","write","write","write_timeout","write_vectored","write_vectored"],"q":[[0,"socket2"],[333,"std::io::error"],[334,"core::option"],[335,"std::os::fd::owned"],[336,"std::path"],[337,"libc::unix::bsd"],[338,"libc::unix"],[339,"core::net::socket_addr"],[340,"core::net::socket_addr"],[341,"std::os::unix::net::addr"],[342,"core::num::nonzero"],[343,"core::time"],[344,"core::mem::maybe_uninit"],[345,"libc::unix::bsd"],[346,"core::fmt"],[347,"std::net::tcp"],[348,"std::net::udp"],[349,"std::os::unix::net::stream"],[350,"std::net::tcp"],[351,"std::os::fd::owned"],[352,"core::net::ip_addr"],[353,"core::net::ip_addr"],[354,"std::io"],[355,"std::net"],[356,"std::io::error"],[357,"core::ops::function"],[358,"core::any"],[359,"core::convert"]],"d":["An address assigned to an interface.","Type corresponding to <code>SOCK_DGRAM</code>.","Specification of the communication domain for a socket.","Protocol corresponding to <code>ICMPv4</code>.","Protocol corresponding to <code>ICMPv6</code>.","Domain for IPv4 communication, corresponding to <code>AF_INET</code>.","Domain for IPv6 communication, corresponding to <code>AF_INET6</code>.","An interface index.","A local interface specified by its index or an address …","A version of <code>IoSliceMut</code> that allows the buffer to be …","Configuration of a <code>sendmsg(2)</code> system call.","Configuration of a <code>recvmsg(2)</code> system call.","Protocol specification used for creating sockets via …","Type corresponding to <code>SOCK_RAW</code>.","Flags for incoming messages.","Type corresponding to <code>SOCK_SEQPACKET</code>.","Type corresponding to <code>SOCK_STREAM</code>.","The address of a socket.","A reference to a <code>Socket</code> that can be used to configure …","Owned wrapper around a system socket.","Protocol corresponding to <code>TCP</code>.","Configures a socket’s TCP keepalive parameters.","Specification of communication semantics on a socket.","Protocol corresponding to <code>UDP</code>.","Domain for Unix socket communication, corresponding to …","Accept a new incoming connection from this listener.","Accept a new incoming connection from this listener.","Returns this address as a slice of bytes representing an …","","Returns this address as a <code>Path</code> reference if it is an …","Returns a raw pointer to the address.","","Returns this address as a <code>SocketAddr</code> if it is in the …","Returns this address as a <code>SocketAddrV4</code> if it is in the …","Returns this address as a <code>SocketAddrV6</code> if it is in the …","Retuns the address as the storage.","Returns this address as Unix <code>SocketAddr</code> if it is an <code>AF_UNIX</code>…","Binds this socket to the specified address.","This method is deprecated, use …","Sets the value for <code>IP_BOUND_IF</code> option on this socket.","Sets the value for <code>IPV6_BOUND_IF</code> option on this socket.","","","","","","","","","","","","","","","","","","","","","","","","","Get the value of the <code>SO_BROADCAST</code> option for this socket.","","","","","","","","","","","","","Initiate a connection on this socket to the specified …","Initiate a connection on this socket to the specified …","","","","This method is deprecated, use …","Gets the value for <code>IP_BOUND_IF</code> option on this socket, i.e. …","Gets the value for <code>IPV6_BOUND_IF</code> option on this socket, …","Returns this address’s <code>Domain</code>.","","","","","","","","","","","Returns this address’s family.","Returns the flags of the message.","","","","","","","","","","","","","","","Returns the correct domain for <code>address</code>.","","","","","","","","Returns the argument unchanged.","The caller must ensure <code>S</code> is actually a socket.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Get the value of the <code>IP_HDRINCL</code> option on this socket.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check if the message terminates a record.","Returns true if this address is in the <code>AF_INET</code> (IPv4) …","Returns true if this address is in the <code>AF_INET6</code> (IPv6) …","Check if the message contains out-of-band data.","Check if the message contains a truncated datagram.","Returns true if this address is of a unix socket (for …","Returns true if this address is an unnamed address from …","Join a multicast group using <code>IP_ADD_MEMBERSHIP</code> option on …","Join a multicast group using <code>IP_ADD_MEMBERSHIP</code> option on …","Join a multicast group using <code>IPV6_ADD_MEMBERSHIP</code> option on …","Join a multicast SSM channel using <code>IP_ADD_SOURCE_MEMBERSHIP</code>…","Get the value of the <code>SO_KEEPALIVE</code> option on this socket.","Get the value of the <code>TCP_KEEPINTVL</code> option on this socket.","Get the value of the <code>TCP_KEEPCNT</code> option on this socket.","Get the value of the <code>TCP_KEEPIDLE</code> option on this socket.","Leave a multicast group using <code>IP_DROP_MEMBERSHIP</code> option on …","Leave a multicast group using <code>IP_DROP_MEMBERSHIP</code> option on …","Leave a multicast group using <code>IPV6_DROP_MEMBERSHIP</code> option …","Leave a multicast group using <code>IP_DROP_SOURCE_MEMBERSHIP</code> …","Returns the size of this address in bytes.","Get the value of the <code>SO_LINGER</code> option on this socket.","Mark a socket as ready to accept incoming connection …","Returns the socket address of the local half of this …","Gets the value of the <code>TCP_MAXSEG</code> option on this socket.","Get the value of the <code>IPV6_MULTICAST_HOPS</code> option for this …","Get the value of the <code>IP_MULTICAST_IF</code> option for this …","Get the value of the <code>IPV6_MULTICAST_IF</code> option for this …","Get the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Get the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Get the value of the <code>IP_MULTICAST_TTL</code> option for this …","Creates a new socket and sets common flags.","Creates a new <code>MaybeUninitSlice</code> wrapping a byte slice.","Create a new <code>MsgHdr</code> with all empty/zero fields.","Create a new <code>MsgHdrMut</code> with all empty/zero fields.","Create a <code>SockAddr</code> from the underlying storage and its …","Returns a new, empty set of TCP keepalive parameters.","Creates a new socket ready to be configured.","Get the value of the <code>TCP_NODELAY</code> option on this socket.","Returns true if this socket is set to nonblocking mode, …","Get the value of the <code>IPV6_V6ONLY</code> option for this socket.","Get value for the <code>SO_OOBINLINE</code> option on this socket.","Creates a pair of sockets which are connected to each …","Creates a pair of sockets which are connected to each …","Receives data on the socket from the remote adress to …","Receives data from the socket, without removing it from …","Retrieve the sender for the data at the head of the …","Returns the socket address of the remote peer of this …","","","Get value for the <code>SO_RCVTIMEO</code> option on this socket.","","","Receives data on the socket from the remote address to …","Get value for the <code>SO_RCVBUF</code> option on this socket.","Receives data from the socket. On success, returns the …","Receives data from the socket. Returns the amount of bytes …","Identical to <code>recv_from_vectored</code> but allows for …","Identical to <code>recv_from</code> but allows for specification of …","Receives out-of-band (OOB) data on the socket from the …","Get the value of the <code>IPV6_RECVTCLASS</code> option for this …","Get the value of the <code>IP_RECVTOS</code> option for this socket.","Receives data on the socket from the remote address to …","Identical to <code>recv_vectored</code> but allows for specification of …","Identical to <code>recv</code> but allows for specification of …","Receive a message from a socket using a message structure.","Get the value of the <code>SO_REUSEADDR</code> option on this socket.","Get the value of the <code>SO_REUSEPORT</code> option on this socket.","Sends data on the socket to a connected peer.","Get the value of the <code>SO_SNDBUF</code> option on this socket.","Sends out-of-band (OOB) data on the socket to connected …","Sends data on the socket to the given address. On success, …","Send data to a peer listening on <code>addr</code>. Returns the amount …","Identical to <code>send_to_vectored</code> but allows for specification …","Identical to <code>send_to</code> but allows for specification of …","Send data to the connected peer. Returns the amount of …","Identical to <code>send_vectored</code> but allows for specification of …","Identical to <code>send</code> but allows for specification of …","Copies data between a <code>file</code> and this socket using the …","Send a message on a socket using a message structure.","Set the value of the <code>SO_BROADCAST</code> option for this socket.","Sets <code>CLOEXEC</code> on the socket.","Set the value of the <code>IP_HDRINCL</code> option on this socket.","Set value for the <code>SO_KEEPALIVE</code> option on this socket.","Set the length of the address.","Set value for the <code>SO_LINGER</code> option on this socket.","Sets the value of the <code>TCP_MAXSEG</code> option on this socket.","Set the value of the <code>IPV6_MULTICAST_HOPS</code> option for this …","Set the value of the <code>IP_MULTICAST_IF</code> option for this …","Set the value of the <code>IPV6_MULTICAST_IF</code> option for this …","Set the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Set the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Set the value of the <code>IP_MULTICAST_TTL</code> option for this …","Set the value of the <code>TCP_NODELAY</code> option on this socket.","Moves this socket into or out of nonblocking mode.","Sets <code>SO_NOSIGPIPE</code> on the socket.","Set the value for the <code>IPV6_V6ONLY</code> option on this socket.","Set value for the <code>SO_OOBINLINE</code> option on this socket.","Set value for the <code>SO_RCVTIMEO</code> option on this socket.","Set value for the <code>SO_RCVBUF</code> option on this socket.","Set the value of the <code>IPV6_RECVTCLASS</code> option for this …","Set the value of the <code>IP_RECVTOS</code> option for this socket.","Set value for the <code>SO_REUSEADDR</code> option on this socket.","Set value for the <code>SO_REUSEPORT</code> option on this socket.","Set value for the <code>SO_SNDBUF</code> option on this socket.","Set the value of the <code>IPV6_TCLASS</code> option for this socket.","Set parameters configuring TCP keepalive probes for this …","Set the value of the <code>IP_TOS</code> option for this socket.","Set the value of the <code>IP_TTL</code> option for this socket.","Set the value for the <code>IPV6_UNICAST_HOPS</code> option on this …","Set value for the <code>SO_SNDTIMEO</code> option on this socket.","Shuts down the read, write, or both halves of this …","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>IPV6_TCLASS</code> option for this socket.","","","","","","","Get the value of the <code>IP_TOS</code> option for this socket.","Creates a new independently owned handle to the underlying …","","","","","","","","","","","","","Initialise a <code>SockAddr</code> by calling the function <code>init</code>.","","","","","","","","","","","","","Get the value of the <code>IP_TTL</code> option for this socket.","Returns the <code>Type</code> of this socket by checking the <code>SO_TYPE</code> …","","","","","","","","","","","","","Get the value of the <code>IPV6_UNICAST_HOPS</code> option for this …","Constructs a <code>SockAddr</code> with the family <code>AF_UNIX</code> and the …","Set the address (name) of the message.","Set the mutable address (name) of the message.","Set the buffer(s) of the message.","Set the mutable buffer(s) of the message.","Set the control buffer of the message.","Set the mutable control buffer of the message.","Set the flags of the message.","Set the value of the <code>TCP_KEEPINTVL</code> option. On Windows, …","Set the value of the <code>TCP_KEEPCNT</code> option.","Set the amount of time after which TCP keepalive probes …","","","Get value for the <code>SO_SNDTIMEO</code> option on this socket.","",""],"i":[33,20,0,21,21,19,19,33,0,0,0,0,0,20,0,20,20,0,0,0,21,0,0,21,19,1,1,2,1,2,2,1,2,2,2,2,2,1,1,1,1,1,25,26,32,29,2,33,19,20,21,22,23,1,25,26,32,29,2,33,19,20,21,22,23,1,2,19,20,21,22,23,2,19,20,21,22,23,1,1,25,26,26,1,1,1,2,2,19,20,21,22,2,19,20,21,22,2,29,1,1,1,25,26,32,29,2,33,19,20,21,22,23,19,1,1,1,1,1,1,1,1,25,25,26,32,29,2,2,2,2,33,19,19,20,20,21,21,22,23,1,2,1,1,25,26,32,29,2,33,19,20,21,22,23,1,22,2,2,22,22,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,26,32,29,2,23,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,19,20,21,22,23,1,1,1,25,26,32,29,2,33,19,20,21,22,23,2,1,25,26,32,29,2,33,19,20,21,22,23,1,1,1,25,26,32,29,2,33,19,20,21,22,23,1,2,32,29,32,29,32,29,32,23,23,23,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[[3,[1,2]]]]]],[1,[[4,[[3,[1,2]]]]]],[2,[[7,[[6,[5]]]]]],[1,8],[2,[[7,[9]]]],[2,10],[1,11],[2,[[7,[12]]]],[2,[[7,[13]]]],[2,[[7,[14]]]],[2,15],[2,[[7,[16]]]],[[1,2],[[4,[3]]]],[[1,[7,[17]]],[[4,[3]]]],[[1,[7,[17]]],[[4,[3]]]],[[1,[7,[17]]],[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[18]]]],[2,2],[19,19],[20,20],[21,21],[22,22],[23,23],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,2],[[4,[3]]]],[[1,2,24],[[4,[3]]]],[25],[26,[[6,[[27,[5]]]]]],[26,[[6,[[27,[5]]]]]],[1,[[4,[[7,[17]]]]]],[1,[[4,[[7,[17]]]]]],[1,[[4,[[7,[17]]]]]],[2,19],[[2,2],18],[[19,19],18],[[20,20],18],[[21,21],18],[[22,22],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[2,28],[29,22],[1,[[4,[3]]]],[1,[[4,[3]]]],[[1,30],31],[[25,30],31],[[26,30],31],[[32,30],31],[[29,30],31],[[2,30],31],[[33,30],31],[[19,30],31],[[20,30],31],[[21,30],31],[[22,30],31],[[23,30],31],[12,19],[34,1],[35,1],[36,1],[37,1],[38,1],[39,1],[40,1],[-1,-1,[]],[-1,25,41],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,2],[13,2],[-1,-1,[]],[12,2],[-1,-1,[]],[-1,-1,[]],[11,19],[-1,-1,[]],[11,20],[-1,-1,[]],[11,21],[-1,-1,[]],[-1,-1,[]],[11,1],[[2,-1],3,42],[1,[[4,[18]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,11],[22,18],[2,18],[2,18],[22,18],[22,18],[2,18],[2,18],[[1,43,43],[[4,[3]]]],[[1,43,33],[[4,[3]]]],[[1,44,45],[[4,[3]]]],[[1,43,43,43],[[4,[3]]]],[1,[[4,[18]]]],[1,[[4,[24]]]],[1,[[4,[45]]]],[1,[[4,[24]]]],[[1,43,43],[[4,[3]]]],[[1,43,33],[[4,[3]]]],[[1,44,45],[[4,[3]]]],[[1,43,43,43],[[4,[3]]]],[2,46],[1,[[4,[[7,[24]]]]]],[[1,11],[[4,[3]]]],[1,[[4,[2]]]],[1,[[4,[45]]]],[1,[[4,[45]]]],[1,[[4,[43]]]],[1,[[4,[45]]]],[1,[[4,[18]]]],[1,[[4,[18]]]],[1,[[4,[45]]]],[[19,20,[7,[21]]],[[4,[1]]]],[[[6,[[27,[5]]]]],26],[[],32],[[],29],[[15,46],2],[[],23],[[19,20,[7,[21]]],[[4,[1]]]],[1,[[4,[18]]]],[1,[[4,[18]]]],[1,[[4,[18]]]],[1,[[4,[18]]]],[[19,20,[7,[21]]],[[4,[[3,[1,1]]]]]],[[19,20,[7,[21]]],[[4,[[3,[1,1]]]]]],[[1,[6,[[27,[5]]]]],[[4,[47]]]],[[1,[6,[[27,[5]]]]],[[4,[[3,[47,2]]]]]],[1,[[4,[2]]]],[1,[[4,[2]]]],[[1,[6,[5]]],[[4,[47]]]],[[1,[6,[5]]],[[4,[47]]]],[1,[[4,[[7,[24]]]]]],[[1,[6,[48]]],[[4,[47]]]],[[1,[6,[48]]],[[4,[47]]]],[[1,[6,[[27,[5]]]]],[[4,[47]]]],[1,[[4,[47]]]],[[1,[6,[[27,[5]]]]],[[4,[[3,[47,2]]]]]],[[1,[6,[26]]],[[4,[[3,[47,22,2]]]]]],[[1,[6,[26]],11],[[4,[[3,[47,22,2]]]]]],[[1,[6,[[27,[5]]]],11],[[4,[[3,[47,2]]]]]],[[1,[6,[[27,[5]]]]],[[4,[47]]]],[1,[[4,[18]]]],[1,[[4,[18]]]],[[1,[6,[26]]],[[4,[[3,[47,22]]]]]],[[1,[6,[26]],11],[[4,[[3,[47,22]]]]]],[[1,[6,[[27,[5]]]],11],[[4,[47]]]],[[1,29,11],[[4,[47]]]],[1,[[4,[18]]]],[1,[[4,[18]]]],[[1,[6,[5]]],[[4,[47]]]],[1,[[4,[47]]]],[[1,[6,[5]]],[[4,[47]]]],[[1,[6,[5]],2],[[4,[47]]]],[[1,[6,[49]],2],[[4,[47]]]],[[1,[6,[49]],2,11],[[4,[47]]]],[[1,[6,[5]],2,11],[[4,[47]]]],[[1,[6,[49]]],[[4,[47]]]],[[1,[6,[49]],11],[[4,[47]]]],[[1,[6,[5]],11],[[4,[47]]]],[[1,-1,47,[7,[50]]],[[4,[47]]],51],[[1,32,11],[[4,[47]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[2,46],3],[[1,[7,[24]]],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,43],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,[7,[24]]],[[4,[3]]]],[[1,47],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,18],[[4,[3]]]],[[1,47],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,23],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,45],[[4,[3]]]],[[1,[7,[24]]],[[4,[3]]]],[[1,52],[[4,[3]]]],[1,[[4,[[7,[53]]]]]],[1,[[4,[45]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[45]]]],[1,[[4,[1]]]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[4,[[3,[-2,2]]]]],55,[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[-1,[[54,[-2]]],[],[]],[1,[[4,[45]]]],[1,[[4,[20]]]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[1,[[4,[45]]]],[-1,[[4,[2]]],[[57,[9]]]],[[32,2],32],[[29,2],29],[[32,[6,[49]]],32],[[29,[6,[26]]],29],[[32,[6,[5]]],32],[[29,[6,[[27,[5]]]]],29],[[32,11],32],[[23,24],23],[[23,45],23],[[23,24],23],[[1,[6,[5]]],[[4,[47]]]],[[1,[6,[5]]],[[4,[47]]]],[1,[[4,[[7,[24]]]]]],[[1,[6,[49]]],[[4,[47]]]],[[1,[6,[49]]],[[4,[47]]]]],"c":[38,83],"p":[[3,"Socket",0],[3,"SockAddr",0],[15,"tuple"],[6,"Result",333],[15,"u8"],[15,"slice"],[4,"Option",334],[3,"BorrowedFd",335],[3,"Path",336],[3,"sockaddr",337],[6,"c_int",338],[4,"SocketAddr",339],[3,"SocketAddrV4",339],[3,"SocketAddrV6",339],[3,"sockaddr_storage",340],[3,"SocketAddr",341],[3,"NonZeroU32",342],[15,"bool"],[3,"Domain",0],[3,"Type",0],[3,"Protocol",0],[3,"RecvFlags",0],[3,"TcpKeepalive",0],[3,"Duration",343],[3,"SockRef",0],[3,"MaybeUninitSlice",0],[19,"MaybeUninit",344],[6,"sa_family_t",337],[3,"MsgHdrMut",0],[3,"Formatter",345],[6,"Result",345],[3,"MsgHdr",0],[4,"InterfaceIndexOrAddress",0],[3,"OwnedFd",335],[3,"UnixDatagram",346],[3,"TcpStream",347],[3,"UdpSocket",348],[3,"UnixStream",349],[3,"TcpListener",347],[3,"UnixListener",350],[8,"AsFd",335],[8,"Hasher",351],[3,"Ipv4Addr",352],[3,"Ipv6Addr",352],[15,"u32"],[6,"socklen_t",337],[15,"usize"],[3,"IoSliceMut",353],[3,"IoSlice",353],[3,"NonZeroUsize",342],[8,"AsRawFd",354],[4,"Shutdown",355],[3,"Error",333],[4,"Result",356],[8,"FnOnce",357],[3,"TypeId",358],[8,"AsRef",359]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":"GCCAASDLLLLLLLLLLLLLLLLLLLLLLLLLLDIDLLLLLLLLKLLLLLLLL","n":["Once","RelaxStrategy","Spin","once","relax","INIT","Once","as_mut_ptr","borrow","borrow_mut","call_once","default","drop","fmt","from","from","from","get","get_mut","get_mut_unchecked","get_unchecked","initialized","into","into_inner_unchecked","is_completed","new","poll","try_call_once","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"spin"],[5,"spin::once"],[33,"spin::relax"],[53,"core::ops::function"],[54,"core::fmt"],[55,"core::fmt"],[56,"core::result"],[57,"core::any"]],"d":["A primitive that provides lazy one-time initialization. …","","","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","Retrieve a pointer to the inner data.","","","Performs an initialization routine once and only once. The …","","","","","Returns the argument unchanged.","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Returns a mutable reference to the inner value","Returns a reference to the inner value on the unchecked …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Returns a the inner value if the <code>Once</code> has been initialized.","Checks whether the value has been initialized.","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","This method is similar to <code>call_once</code>, but allows the given …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU that …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform the relaxing operation during a period of …","","","","","","","",""],"i":[0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,13,14,13,14,13,14,13,14,2,13,14,13,14,13,14,13,14],"f":[0,0,0,0,0,0,0,[[[1,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]],-3],-1,[],2,3],[[],[[1,[-1,-2]]],[],[]],[[[1,[-1,-2]]],4,[],[]],[[[1,[-1,-2]],5],6,7,[]],[-1,[[1,[-1,-2]]],[],[]],[-1,-1,[]],[8,-1,[]],[[[1,[-1,-2]]],[[9,[-1]]],[],[]],[[[1,[-1,-2]]],[[9,[-1]]],[],[]],[[[1,[-1,-2]]],-1,[],[]],[[[1,[-1,-2]]],-1,[],[]],[-1,[[1,[-1,-2]]],[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],-1,[],[]],[[[1,[-1,-2]]],10,[],[]],[[],[[1,[-1,-2]]],[],[]],[[[1,[-1,-2]]],[[9,[-1]]],[],2],[[[1,[-1,-2]],-3],[[11,[-1,-4]]],[],2,3,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[1,[-1,-2]]],[[9,[-1]]],[],[]],[-1,12,[]],[[[1,[-1,-2]]],-1,[],2],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],4],[[],4],[[],4],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]]],"c":[],"p":[[3,"Once",5],[8,"RelaxStrategy",33],[8,"FnOnce",53],[15,"tuple"],[3,"Formatter",54],[6,"Result",54],[8,"Debug",54],[15,"never"],[4,"Option",55],[15,"bool"],[4,"Result",56],[3,"TypeId",57],[3,"Spin",33],[3,"Loop",33]]},\
"spki":{"doc":"RustCrypto: X.509 Subject Public Key Info (SPKI)","t":"SDGGGNNIIDIIINENSDNNQQGSIIDGGMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLMMMMLLLLMMMMLLLLLLLLLLLLLKMMMLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["ALGORITHM_IDENTIFIER","AlgorithmIdentifier","AlgorithmIdentifierOwned","AlgorithmIdentifierRef","AlgorithmIdentifierWithOid","AlgorithmParametersMissing","Asn1","AssociatedAlgorithmIdentifier","DecodePublicKey","Document","DynAssociatedAlgorithmIdentifier","DynSignatureAlgorithmIdentifier","EncodePublicKey","Err","Error","KeyMalformed","MAX_SIZE","ObjectIdentifier","OidUnknown","Ok","Params","Params","Result","SIGNATURE_ALGORITHM_IDENTIFIER","SignatureAlgorithmIdentifier","SignatureBitStringEncoding","SubjectPublicKeyInfo","SubjectPublicKeyInfoOwned","SubjectPublicKeyInfoRef","algorithm","algorithm","algorithm","algorithm_identifier","arc","arcs","as_bytes","as_bytes","as_ref","as_ref","assert_algorithm_oid","assert_oids","assert_oids","assert_parameters_oid","assert_parameters_oid","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_decode","can_decode","can_decode","can_decode","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","decode","decode","decode","decode","decode_msg","decode_value","decode_value","decode_value","der","der_cmp","der_cmp","der_cmp","encode","encode","encode","encode","encode_msg","encode_value","encode_value","encode_value","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arcs","from_bytes","from_public_key_der","from_public_key_der","from_str","hash","into","into","into","into","into","into_secret","into_vec","len","len","new","new_unwrap","oid","oid","oid","oid","oids","oids","owned_to_ref","owned_to_ref","parameters","parameters","parameters","parameters","parameters_any","parameters_any","parameters_oid","parameters_oid","parent","partial_cmp","partial_cmp","push_arc","read_der_file","read_public_key_der_file","read_public_key_der_file","ref_to_owned","ref_to_owned","signature_algorithm_identifier","subject_public_key","subject_public_key","subject_public_key","tag","tag","tag","tag","to_bitstring","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_key_der","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value_cmp","value_cmp","value_cmp","value_len","value_len","value_len","write_der_file","write_public_key_der_file","write_public_key_der_file","oid"],"q":[[0,"spki"],[210,"spki::Error"],[211,"core::option"],[212,"const_oid::arcs"],[213,"der::asn1::any"],[214,"der::tag"],[215,"core::clone"],[216,"core::cmp"],[217,"core::cmp"],[218,"core::result"],[219,"der::reader"],[220,"der::decode"],[221,"der::header"],[222,"der::error"],[223,"der::encode"],[224,"der::writer"],[225,"der::length"],[226,"core::cmp"],[227,"core::fmt"],[228,"core::iter::traits::collect"],[229,"core::hash"],[230,"der::document"],[231,"alloc::alloc"],[232,"alloc::vec"],[233,"core::cmp"],[234,"core::convert"],[235,"der::asn1::bit_string::allocating"],[236,"alloc::string"],[237,"der::tag"],[238,"der::ord"],[239,"der::ord"]],"d":["<code>AlgorithmIdentifier</code> for this structure.","X.509 <code>AlgorithmIdentifier</code> as defined in RFC 5280 Section …","<code>AlgorithmIdentifier</code> reference which has <code>Any</code> parameters.","<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.","<code>AlgorithmIdentifier</code> with <code>ObjectIdentifier</code> parameters.","Algorithm parameters are missing.","ASN.1 DER-related errors.","Returns <code>AlgorithmIdentifier</code> associated with the structure.","Parse a public key object from an encoded SPKI document.","ASN.1 DER-encoded document.","Returns <code>AlgorithmIdentifier</code> associated with the structure.","Returns <code>AlgorithmIdentifier</code> associated with the signature …","Serialize a public key object to a SPKI-encoded document.","Contains the error value","Error type","Malformed cryptographic key contained in a SPKI document.","Maximum size of a BER/DER-encoded OID in bytes.","Object identifier (OID).","Unknown algorithm OID.","Contains the success value","Algorithm parameters.","Algorithm parameters.","Result type with <code>spki</code> crate’s <code>Error</code> type.","<code>AlgorithmIdentifier</code> for the corresponding singature system.","Returns <code>AlgorithmIdentifier</code> associated with the signature …","Returns the <code>BitString</code> encoding of the signature.","X.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …","<code>SubjectPublicKeyInfo</code> with <code>Any</code> algorithm parameters, and …","<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …","X.509 <code>AlgorithmIdentifier</code> for the public key type","X.509 <code>AlgorithmIdentifier</code> for the public key type","X.509 <code>AlgorithmIdentifier</code> for the public key type","<code>AlgorithmIdentifier</code> for this structure.","Return the arc with the given index, if it exists.","Iterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…","Get the BER/DER serialization of this OID as bytes.","Get the ASN.1 DER-encoded bytes of this document.","","","Assert the <code>algorithm</code> OID is an expected value.","Assert the values of the <code>algorithm</code> and <code>parameters</code> OIDs.","Assert the values of the <code>algorithm</code> and <code>parameters</code> OIDs.","Assert <code>parameters</code> is an OID and has the expected value.","Assert <code>parameters</code> is an OID and has the expected value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to decode the inner ASN.1 DER message contained in this","","","","","","","","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","Encode this value as ASN.1 DER using the provided <code>Writer</code>.","","Encode the provided type as ASN.1 DER, storing the …","","","","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","Compute the length of this value in bytes when encoded as …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse an OID from a slice of <code>Arc</code> values (i.e. integers).","Parse an OID from from its BER/DER encoding.","Deserialize object from ASN.1 DER-encoded …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to a <code>SecretDocument</code>.","Convert to an ASN.1 DER-encoded byte vector.","Get the length of this <code>ObjectIdentifier</code> in arcs.","Get the length of the encoded ASN.1 DER in bytes.","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","Parse an <code>ObjectIdentifier</code> from the dot-delimited string …","Algorithm OID, i.e. the <code>algorithm</code> field in the …","Algorithm OID, i.e. the <code>algorithm</code> field in the …","Algorithm OID, i.e. the <code>algorithm</code> field in the …","Algorithm OID, i.e. the <code>algorithm</code> field in the …","Convert to a pair of <code>ObjectIdentifier</code>s.","Convert to a pair of <code>ObjectIdentifier</code>s.","","","Algorithm <code>parameters</code>.","Algorithm <code>parameters</code>.","Algorithm <code>parameters</code>.","Algorithm <code>parameters</code>.","Get the <code>parameters</code> field as an <code>AnyRef</code>.","Get the <code>parameters</code> field as an <code>AnyRef</code>.","Get the <code>parameters</code> field as an <code>ObjectIdentifier</code>.","Get the <code>parameters</code> field as an <code>ObjectIdentifier</code>.","Get the parent OID of this one (if applicable).","","","Push an additional arc onto this OID, returning the child …","Read ASN.1 DER document from a file.","Load public key object from an ASN.1 DER-encoded file on …","Load public key object from an ASN.1 DER-encoded file on …","","","<code>AlgorithmIdentifier</code> for the corresponding singature system.","Public key data","Public key data","Public key data","","","","","<code>BitString</code> encoding for this signature.","","","","","","Serialize a <code>Document</code> containing a SPKI-encoded public key.","","","Return an ASN.1 DER-encoded byte vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write ASN.1 DER document to a file.","Write ASN.1 DER-encoded public key to the given path","Write ASN.1 DER-encoded public key to the given path","Unrecognized OID value found in e.g. a SPKI …"],"i":[55,0,0,0,0,18,18,0,0,0,0,0,0,2,0,18,3,0,18,2,55,56,0,56,0,0,0,0,0,48,44,19,57,3,3,3,10,3,10,11,12,11,12,11,3,11,18,19,10,3,11,18,19,10,3,11,19,10,3,11,18,19,10,3,11,18,19,10,3,11,3,11,19,10,10,3,11,19,0,3,11,19,3,11,19,10,10,3,11,19,3,11,19,10,3,11,18,19,10,3,11,18,19,10,3,3,11,18,18,19,10,3,3,11,18,18,19,10,3,3,58,10,3,3,3,11,18,19,10,10,10,3,10,3,3,12,59,1,11,12,11,1,44,12,59,1,11,12,11,12,11,3,3,11,3,10,58,58,12,48,60,48,44,19,3,11,19,10,61,3,11,18,19,10,62,3,18,10,3,3,3,11,11,18,19,19,10,10,10,10,10,3,11,18,19,10,3,11,18,19,10,3,11,19,3,11,19,10,62,62,63],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[2,[1]]],[]],[[3,4],[[6,[5]]]],[3,7],[3,[[9,[8]]]],[10,[[9,[8]]]],[3,[[9,[8]]]],[10,[[9,[8]]]],[[[11,[-1]],3],[[2,[3]]],[]],[[12,3,3],[[2,[13]]]],[[[11,[14]],3,3],[[2,[13]]]],[[12,3],[[2,[3]]]],[[[11,[14]],3],[[2,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,16],[15,16],[15,16],[15,16],[3,3],[[[11,[-1]]],[[11,[-1]]],17],[18,18],[[[19,[-1,-2]]],[[19,[-1,-2]]],17,17],[10,10],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[3,3],20],[[[11,[-1]],[11,[-1]]],20,21],[-1,[[23,[-2,22]]],24,[]],[-1,[[23,[-2,22]]],24,[]],[-1,[[23,[-2,22]]],24,[]],[-1,[[23,[10,22]]],24],[10,[[23,[-1,22]]],25],[[-1,26],[[23,[3,22]]],24],[[-1,26],[[27,[[11,[-2]]]]],24,28],[[-1,26],[[27,[[19,[-2,-3]]]]],24,[28,29],25],0,[[-1,-2],[[23,[20,22]]],[],[]],[[-1,-2],[[23,[20,22]]],[],[]],[[-1,-2],[[23,[20,22]]],[],[]],[[-1,-2],[[23,[13,22]]],[],30],[[-1,-2],[[23,[13,22]]],[],30],[[-1,-2],[[23,[13,22]]],[],30],[[10,-1],[[23,[13,22]]],30],[-1,[[23,[10,22]]],29],[[3,-1],[[23,[13,22]]],30],[[[11,[-1]],-2],[[27,[13]]],29,30],[[[19,[-1,-2]],-3],[[27,[13]]],[28,29],29,30],[-1,[[23,[31,22]]],[]],[-1,[[23,[31,22]]],[]],[-1,[[23,[31,22]]],[]],[10,[[23,[31,22]]]],[[3,3],16],[[[11,[-1]],[11,[-1]]],16,32],[[18,18],16],[[[19,[-1,-2]],[19,[-1,-2]]],16,32,32],[[10,10],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[3,33],[[23,[13,34]]]],[[3,33],[[23,[13,34]]]],[[[11,[-1]],33],35,36],[[18,33],35],[[18,33],35],[[[19,[-1,-2]],33],35,36,36],[[10,33],[[23,[13,34]]]],[-1,-1,[]],[3,3],[-1,-1,[]],[22,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[23,[3,37]]],38],[[[9,[8]]],[[23,[3,37]]]],[[[9,[8]]],[[2,[-1]]],[]],[[[9,[8]]],[[23,[-1,18]]],[]],[39,[[23,[3,37]]]],[[3,-1],13,40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,41],[10,[[43,[8,42]]]],[3,4],[10,31],[39,[[23,[3,37]]]],[39,3],0,0,0,0,[12,[[27,[[13,[3,[6,[3]]]]]]]],[[[11,[14]]],[[27,[[13,[3,[6,[3]]]]]]]],[1],[44],0,0,0,0,[12,[[2,[14]]]],[[[11,[14]]],[[2,[14]]]],[12,[[2,[3]]]],[[[11,[14]]],[[2,[3]]]],[3,[[6,[3]]]],[[3,3],[[6,[20]]]],[[[11,[-1]],[11,[-1]]],[[6,[20]]],45],[[3,5],[[23,[3,37]]]],[-1,[[23,[10,22]]],[[47,[46]]]],[-1,[[2,[-2]]],[[47,[46]]],[]],[-1,[[2,[-2]]],[[47,[46]]],[]],[12],[48],[-1,[[2,[1]]],[]],0,0,0,[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,[[27,[49]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[10]]],[]],[-1,50,[]],[-1,50,[]],[10,[[43,[8,42]]]],[14,[[23,[3,22]]]],[-1,[[23,[-2]]],[],[]],[[[9,[8]]],[[23,[3,37]]]],[-1,[[23,[-2]]],[],[]],[[[9,[8]]],[[2,[[11,[-1]]]]],[28,29]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[[9,[8]]],[[2,[[19,[-1,-2]]]]],[28,29],[25,29,51]],[-1,[[23,[-2]]],[],[]],[[[19,[-1,-2]]],[[2,[10]]],[28,29],[25,29,51]],[[[19,[-1,-2]]],[[2,[10]]],[28,29],[25,29,51]],[[[43,[8,42]]],[[23,[10,22]]]],[[[9,[8]]],[[23,[10,22]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[[-1,-2],[[23,[20,22]]],[],[]],[[[11,[-1]],[11,[-1]]],[[27,[20]]],53],[[[19,[-1,-2]],[19,[-1,-2]]],[[27,[20]]],[28,53,29],54],[3,[[23,[31,22]]]],[[[11,[-1]]],[[27,[31]]],29],[[[19,[-1,-2]]],[[27,[31]]],[28,29],29],[[10,-1],[[23,[13,22]]],[[47,[46]]]],[[-1,-2],[[2,[13]]],[],[[47,[46]]]],[[-1,-2],[[2,[13]]],[],[[47,[46]]]],0],"c":[],"p":[[6,"AlgorithmIdentifierOwned",0],[6,"Result",0],[3,"ObjectIdentifier",0],[15,"usize"],[15,"u32"],[4,"Option",211],[3,"Arcs",212],[15,"u8"],[15,"slice"],[3,"Document",0],[3,"AlgorithmIdentifier",0],[6,"AlgorithmIdentifierRef",0],[15,"tuple"],[3,"AnyRef",213],[4,"Tag",214],[15,"bool"],[8,"Clone",215],[4,"Error",0],[3,"SubjectPublicKeyInfo",0],[4,"Ordering",216],[8,"Ord",216],[3,"Error",217],[4,"Result",218],[8,"Reader",219],[8,"Decode",220],[3,"Header",221],[6,"Result",217],[8,"Choice",222],[8,"Encode",223],[8,"Writer",224],[3,"Length",225],[8,"PartialEq",216],[3,"Formatter",226],[3,"Error",226],[6,"Result",226],[8,"Debug",226],[4,"Error",227],[8,"IntoIterator",228],[15,"str"],[8,"Hasher",229],[3,"SecretDocument",230],[3,"Global",231],[3,"Vec",232],[6,"SubjectPublicKeyInfoOwned",0],[8,"PartialOrd",216],[3,"Path",233],[8,"AsRef",234],[6,"SubjectPublicKeyInfoRef",0],[3,"BitString",235],[3,"String",236],[8,"FixedTag",214],[3,"TypeId",237],[8,"DerOrd",238],[8,"ValueOrd",238],[8,"AssociatedAlgorithmIdentifier",0],[8,"SignatureAlgorithmIdentifier",0],[8,"DynAssociatedAlgorithmIdentifier",0],[8,"DecodePublicKey",0],[6,"AlgorithmIdentifierWithOid",0],[8,"DynSignatureAlgorithmIdentifier",0],[8,"SignatureBitStringEncoding",0],[8,"EncodePublicKey",0],[13,"OidUnknown",210]]},\
"subtle":{"doc":"subtle   ","t":"DIIIIIDLLLLLLLLLLLLLLKKLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Choice","ConditionallyNegatable","ConditionallySelectable","ConstantTimeEq","ConstantTimeGreater","ConstantTimeLess","CtOption","and_then","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","conditional_assign","conditional_negate","conditional_select","conditional_select","conditional_select","conditional_swap","ct_eq","ct_eq","ct_eq","ct_gt","ct_lt","ct_ne","expect","fmt","fmt","from","from","from","into","into","is_none","is_some","map","new","not","or_else","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","unwrap_or","unwrap_or_else","unwrap_u8"],"q":[[0,"subtle"],[56,"core::default"],[57,"core::ops::function"],[58,"core::clone"],[59,"core::fmt"],[60,"core::fmt"],[61,"core::any"]],"d":["The <code>Choice</code> struct represents a choice for use in …","A type which can be conditionally negated in constant time.","A type which can be conditionally selected in constant …","An <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.","A type which can be compared in some manner and be …","A type which can be compared in some manner and be …","The <code>CtOption&lt;T&gt;</code> type represents an optional value similar …","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","","","","","","","","","","","","","Conditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.","Negate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …","Select <code>a</code> or <code>b</code> according to <code>choice</code>.","","","Conditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …","Determine if two items are equal.","","Two <code>CtOption&lt;T&gt;</code>s are equal if they are both <code>Some</code> and their …","Determine whether <code>self &gt; other</code>.","Determine whether <code>self &lt; other</code>.","Determine if two items are NOT equal.","Returns the contained value, consuming the <code>self</code> value.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a true <code>Choice</code> if this value is <code>None</code>.","Returns a true <code>Choice</code> if this value is <code>Some</code>.","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","This method is used to construct a new <code>CtOption&lt;T&gt;</code> and …","","Returns <code>self</code> if it contains a value, and otherwise returns …","","","","","","","This returns the underlying value but panics if it is not …","This returns the underlying value if it is <code>Some</code> or the …","This returns the underlying value if it is <code>Some</code> or the …","Unwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>."],"i":[0,0,0,0,0,0,0,1,5,5,5,5,5,5,5,1,5,1,5,1,3,16,3,5,1,3,8,5,1,17,18,8,1,5,1,5,5,1,5,1,1,1,1,1,5,1,5,1,5,1,5,1,1,1,1,5],"f":[0,0,0,0,0,0,0,[[[1,[-1]],-2],[[1,[-3]]],[2,3],4,[]],[[5,5],5],[[5,5],6],[[5,5],5],[[5,5],6],[[5,5],5],[[5,5],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[[[1,[-1]]],[[1,[-1]]],7],[[-1,-1,5],6,[]],[[-1,5],6,[]],[[-1,-1,5],-1,[]],[[5,5,5],5],[[[1,[-1]],[1,[-1]],5],[[1,[-1]]],3],[[-1,-1,5],6,[]],[[-1,-1],5,[]],[[5,5],5],[[[1,[-1]],[1,[-1]]],5,8],[[-1,-1],5,[]],[[-1,-1],5,[]],[[-1,-1],5,[]],[[[1,[-1]],9],-1,[]],[[5,10],11],[[[1,[-1]],10],11,12],[-1,-1,[]],[13,5],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],5,[]],[[[1,[-1]]],5,[]],[[[1,[-1]],-2],[[1,[-3]]],[2,3],4,[]],[[-1,5],[[1,[-1]]],[]],[5,5],[[[1,[-1]],-2],[[1,[-1]]],3,4],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[[[1,[-1]]],-1,[]],[[[1,[-1]],-1],-1,3],[[[1,[-1]],-2],-1,3,4],[5,13]],"c":[],"p":[[3,"CtOption",0],[8,"Default",56],[8,"ConditionallySelectable",0],[8,"FnOnce",57],[3,"Choice",0],[15,"tuple"],[8,"Clone",58],[8,"ConstantTimeEq",0],[15,"str"],[3,"Formatter",59],[6,"Result",59],[8,"Debug",59],[15,"u8"],[4,"Result",60],[3,"TypeId",61],[8,"ConditionallyNegatable",0],[8,"ConstantTimeGreater",0],[8,"ConstantTimeLess",0]]},\
"system_configuration":{"doc":"SystemConfiguration bindings","t":"BAAAABDDDGLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNDEDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSNSSSSSEDDDDSNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLL","n":["core_foundation","dynamic_store","network_configuration","network_reachability","preferences","sys","SCDynamicStore","SCDynamicStoreBuilder","SCDynamicStoreCallBackContext","SCDynamicStoreCallBackT","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","callback_context","callout","clone","clone_into","create_run_loop_source","drop","eq","equivalent","from","from","from","from_mut_void","from_void","get","get_keys","get_proxies","info","into","into","into","new","remove","session_keys","set","set_notification_keys","set_raw","to_owned","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","Bluetooth","Bond","Bridge","Ethernet","FireWire","IEEE80211","IPSec","IPv4","IrDA","L2TP","Modem","PPP","PPTP","SCNetworkInterface","SCNetworkInterfaceType","SCNetworkService","SCNetworkSet","Serial","SixToFour","VLAN","WWAN","as_CFTypeRef","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bsd_name","clone","clone","clone","clone_into","clone_into","clone_into","display_name","drop","drop","drop","enabled","eq","eq","eq","equivalent","equivalent","equivalent","fmt","from","from","from","from","from_cfstring","from_mut_void","from_mut_void","from_mut_void","from_void","from_void","from_void","get_interfaces","get_services","id","interface_type","interface_type_string","into","into","into","into","network_interface","new","service_order","to_owned","to_owned","to_owned","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","wrap_under_get_rule","CONNECTION_ON_DEMAND","CONNECTION_ON_TRAFFIC","CONNECTION_REQUIRED","FailedToDetermineReachability","INTERVENTION_REQUIRED","IS_DIRECT","IS_LOCAL_ADDRESS","IS_WWAN","REACHABLE","ReachabilityError","ReachabilityFlags","SCNetworkReachability","SchedulingError","SetCallbackError","TRANSIENT_CONNECTION","UnrecognizedFlags","UnschedulingError","all","as_CFTypeRef","as_concrete_TypeRef","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","drop","empty","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_addr_pair","from_bits","from_bits_truncate","from_bits_unchecked","from_host","from_iter","from_mut_void","from_void","hash","insert","intersection","intersects","into","into","into","into","into","into","is_all","is_empty","not","partial_cmp","reachability","remove","schedule_with_runloop","set","set_callback","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_string","to_string","to_string","to_void","to_void","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unschedule_from_runloop","wrap_under_create_rule","wrap_under_get_rule","SCPreferences","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow_mut","clone","clone_into","default","drop","eq","equivalent","from","from_mut_void","from_void","group","into","new","to_owned","to_void","to_void","try_from","try_into","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule"],"q":[[0,"system_configuration"],[6,"system_configuration::dynamic_store"],[60,"system_configuration::network_configuration"],[167,"system_configuration::network_reachability"],[301,"system_configuration::preferences"],[327,"core_foundation_sys::base"],[328,"system_configuration_sys::dynamic_store"],[329,"core_foundation::runloop"],[330,"core::ffi"],[331,"core_foundation::base"],[332,"core_foundation::base"],[333,"core::option"],[334,"core_foundation::string"],[335,"core::convert"],[336,"core_foundation::array"],[337,"core_foundation::base"],[338,"core_foundation::propertylist"],[339,"core::result"],[340,"core::any"],[341,"core_foundation_sys::base"],[342,"system_configuration_sys::network_configuration"],[343,"core::fmt"],[344,"core::cmp"],[345,"core::iter::traits::collect"],[346,"core::net::socket_addr"],[347,"core::ffi::c_str"],[348,"core::hash"],[349,"core_foundation::runloop"],[350,"core::ops::function"],[351,"core::marker"],[352,"core::marker"],[353,"system_configuration_sys::preferences"],[354,"core_foundation::base"]],"d":["CoreFoundation wrappers","Bindings to <code>SCDynamicStore</code>.","Bindings for <code>SCNetworkConfiguration</code>.","Bindings for <code>SCNetworkReachability</code>","Bindings to <code>SCPreferences</code>.","Low-level SystemConfiguration bindings","Access to the key-value pairs in the dynamic store of a …","Builder for <code>SCDynamicStore</code> sessions.","Struct describing the callback happening when a watched …","Signature for callback functions getting called when a …","","","","","","","","","Create the dynamic store session.","Set a callback context (callback function and data to pass …","The callback function that will be called when a watched …","","","Creates a run loop source object that can be added to the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","If the given key exists in the store, the associated value …","Returns the keys that represent the current dynamic store …","Returns the key-value pairs that represent the current …","The argument passed to each <code>callout</code> call. Can be used to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new builder. <code>name</code> is used as the name parameter …","Removes the value of the specified key from the dynamic …","Set wether or not the created <code>SCDynamicStore</code> should have …","Sets the value of the given key. Overwrites existing …","Specifies a set of keys and key patterns that should be …","Sets the value of the given key. Overwrites existing …","","","","","","","","","","","","","","","","Bluetooth interface.","Ethernet bond interface.","Bridge interface.","Ethernet interface.","FireWire interface.","IEEE80211 interface.","IPSec interface.","IPv4 interface.","IrDA interface.","L2TP interface.","Modem interface.","PPP interface.","PPTP interface.","Represents a network interface.","Represents the possible network interface types.","Represents a network service.","Represents a complete network configuration for a …","Serial interface.","A 6to4 interface.","VLAN interface.","WWAN interface.","","","","","","","","","","","","","","","Returns the <em>BSD</em> name for the interface, such as <code>en0</code>.","","","","","","","Returns the localized display name for the interface.","","","","Returns true if the network service is currently enabled","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Tries to construct a type by matching it to string …","","","","","","","Retrieve all current network interfaces","Returns an array of all network services","Returns the service identifier.","Get type of the network interface, if the type is …","Returns the raw interface type identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the network interface backing this network …","Constructs a new set of network services from the …","Returns an list of network service identifiers, ordered by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The specified node name or address can be reached using …","The specified node name or address can be reached using …","The specified node name or address can be reached using …","<code>SCNetworkReachabilityGetFlags</code> call failed.","The specified node name or address can be reached using …","Network traffic to the specified node name or address will …","The specified node name or address is one that is …","The specified node name or address can be reached via a …","The specified node name or address can be reached using …","Failure to determine reachability","Rustier interface for <code>SCNetworkReachabilityFlags</code>.","A network address or host for which the connectivity can …","Failure to schedule a reachability callback on a runloop.","Failure to set a callback for changes in reachability.","The specified node name or address can be reached via a …","<code>SCNetworkReachabilityGetFlags</code> call returned unrecognized …","Failure to unschedule a reachability callback on a runloop.","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct a SCNetworkReachability struct with a local and …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Construct a Reachability from either a hostname or a …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Return a flag indicating whether the specified network …","Removes the specified flags in-place.","Schedule callback with runloop.","Inserts or removes the specified flags depending on the …","Sets callback that is run whenever network connectivity …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Unschedule from run loop.","","","The handle to an open preferences session for accessing …","","","","","","","Initiates access to the default system preferences using …","","","","Returns the argument unchanged.","","","Initiates access to the given (<code>prefs_id</code>) group of …","Calls <code>U::from(self)</code>.","Initiates access to the per-system set of configuration …","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,5,4,1,5,4,1,4,4,5,1,1,1,1,1,1,5,4,1,1,1,1,1,1,5,5,4,1,4,1,4,1,1,1,1,1,1,5,4,1,5,4,1,5,4,1,1,1,1,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,30,30,30,30,24,25,26,24,25,26,24,30,25,26,24,30,25,26,24,24,25,26,24,25,26,24,24,25,26,25,24,25,26,24,25,26,30,24,30,25,26,30,24,25,26,24,25,26,0,25,25,24,24,24,30,25,26,25,26,26,24,25,26,24,24,25,25,26,26,24,30,25,26,24,30,25,26,24,24,30,25,25,26,26,24,25,26,24,25,26,34,34,34,40,34,34,34,34,34,0,0,0,0,0,34,40,0,34,35,35,34,34,34,34,34,34,34,40,41,42,43,34,35,40,41,42,43,34,35,34,35,34,35,34,34,34,34,35,34,34,35,34,35,34,40,41,41,42,42,43,43,34,34,34,34,34,40,41,42,43,34,35,35,35,34,34,34,35,34,35,35,34,34,34,34,40,41,42,43,34,35,34,34,34,34,35,34,35,34,35,34,34,34,34,35,41,42,43,35,35,34,40,41,42,43,34,35,40,41,42,43,34,35,40,41,42,43,34,35,35,34,35,35,35,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33],"f":[0,0,0,0,0,0,0,0,0,0,[1,2],[1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],1,[]],[[[4,[-1]],[5,[-2]]],[[4,[-2]]],[],[]],0,[1,1],[[-1,-2],6,[],[]],[1,7],[1,6],[[1,1],8],[[-1,-2],8,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[10,[-1]]],[]],[9,[[11,[-1]]],[]],[[1,-1],[[13,[12]]],[[15,[14]]]],[[1,-1],[[13,[[16,[14]]]]],[[15,[14]]]],[1,[[13,[[18,[14,17]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[6]]],[[15,[14]]]],[[1,-1],8,[[15,[14]]]],[[[4,[-1]],8],[[4,[-1]]],[]],[[1,-1,-2],8,[[15,[14]]],19],[[1,[16,[-1]],[16,[-2]]],8,[],[]],[[1,-1,12],8,[[15,[14]]]],[-1,-2,[],[]],[1,20],[1,20],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[],23],[3,1],[3,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[24,2],[25,2],[26,2],[24,27],[25,28],[26,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,[[13,[14]]]],[24,24],[25,25],[26,26],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[24,[[13,[14]]]],[24,6],[25,6],[26,6],[25,8],[[24,24],8],[[25,25],8],[[26,26],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[30,31],32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,[[13,[30]]]],[9,[[10,[-1]]],[]],[9,[[10,[-1]]],[]],[9,[[10,[-1]]],[]],[9,[[11,[-1]]],[]],[9,[[11,[-1]]],[]],[9,[[11,[-1]]],[]],[[],[[16,[24]]]],[33,[[16,[25]]]],[25,[[13,[14]]]],[24,[[13,[30]]]],[24,[[13,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,[[13,[24]]]],[33,26],[26,[[16,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,20],[24,20],[25,20],[25,20],[26,20],[26,20],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[[],23],[-1,22,[]],[-1,22,[]],[[],23],[-1,22,[]],[-1,22,[]],[[],23],[27,24],[28,25],[29,26],[27,24],[28,25],[29,26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],34],[35,2],[35,36],[[34,34],34],[[34,34],6],[[34,34],34],[[34,34],6],[34,37],[[34,34],34],[[34,34],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[35,35],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[34,34],38],[34,34],[[34,34],8],[[34,34],34],[35,6],[[],34],[[34,34],8],[[35,35],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[34,-1],6,39],[[40,31],32],[[41,31],32],[[41,31],32],[[42,31],32],[[42,31],32],[[43,31],32],[[43,31],32],[[34,31],32],[[34,31],32],[[34,31],32],[[34,31],32],[[34,31],32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[44,35],[[44,44],35],[37,[[13,[34]]]],[37,34],[37,34],[45,[[13,[35]]]],[-1,34,39],[9,[[10,[-1]]],[]],[9,[[11,[-1]]],[]],[[34,-1],6,46],[[34,34],6],[[34,34],34],[[34,34],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,8],[34,8],[34,34],[[34,34],[[13,[38]]]],[35,[[21,[34,40]]]],[[34,34],6],[[35,47,48],[[21,[6,41]]]],[[34,34,8],6],[[35,-1],[[21,[6,43]]],[49,50,51]],[[34,34],34],[[34,34],6],[[34,34],34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[35,20],[35,20],[[34,34],6],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[],23],[-1,22,[]],[[34,34],34],[[35,47,48],[[21,[6,42]]]],[36,35],[36,35],0,[33,2],[33,53],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],6,[],[]],[14,33],[33,6],[[33,33],8],[[-1,-2],8,[],[]],[-1,-1,[]],[9,[[10,[-1]]],[]],[9,[[11,[-1]]],[]],[[14,14],33],[-1,-2,[],[]],[[[13,[54]],14,[13,[14]]],33],[-1,-2,[],[]],[33,20],[33,20],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[[],23],[-1,22,[]],[53,33],[53,33]],"c":[],"p":[[3,"SCDynamicStore",6],[6,"CFTypeRef",327],[6,"SCDynamicStoreRef",328],[3,"SCDynamicStoreBuilder",6],[3,"SCDynamicStoreCallBackContext",6],[15,"tuple"],[3,"CFRunLoopSource",329],[15,"bool"],[4,"c_void",330],[3,"ItemMutRef",331],[3,"ItemRef",331],[3,"CFPropertyList",332],[4,"Option",333],[3,"CFString",334],[8,"Into",335],[3,"CFArray",336],[3,"CFType",331],[3,"CFDictionary",337],[8,"CFPropertyListSubClass",332],[6,"c_void",338],[4,"Result",339],[3,"TypeId",340],[6,"CFTypeID",327],[3,"SCNetworkInterface",60],[3,"SCNetworkService",60],[3,"SCNetworkSet",60],[6,"SCNetworkInterfaceRef",341],[6,"SCNetworkServiceRef",341],[6,"SCNetworkSetRef",341],[4,"SCNetworkInterfaceType",60],[3,"Formatter",342],[6,"Result",342],[3,"SCPreferences",301],[3,"ReachabilityFlags",167],[3,"SCNetworkReachability",167],[6,"SCNetworkReachabilityRef",343],[15,"u32"],[4,"Ordering",344],[8,"IntoIterator",345],[4,"ReachabilityError",167],[3,"SchedulingError",167],[3,"UnschedulingError",167],[3,"SetCallbackError",167],[4,"SocketAddr",346],[3,"CStr",347],[8,"Hasher",348],[3,"CFRunLoop",329],[6,"CFStringRef",349],[8,"Fn",350],[8,"Sync",351],[8,"Send",351],[3,"String",352],[6,"SCPreferencesRef",353],[3,"CFAllocator",331]]},\
"system_configuration_sys":{"doc":"Low level bindings to the Apple SystemConfiguration …","t":"CGAACAAAANFFGDFFFFFFFFFGFFFFFNDLLLLMLLMLLHMMLLLLLLMFFFFFGGGGGGNFFFFFFGFFFFGFFGDFFFFFFGFFGFFFGFFFFFFFFFFFFFFFFFFFGFFFFFFFFFGFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFGFFFFFNGGGGGGGLLMLMLHHHRRRRRHHHHHHHHHHHHHHHHHHMMLLLMNGDFFFGFFGFFFFNGGLLMLMLRRRRRRRRRRMMLLLMGGNFFGFDFFFFFFFGGFFFFFFFFNGLLMLMLMMLLLMHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["core_foundation_sys","dispatch_queue_t","dynamic_store","dynamic_store_copy_specific","libc","network_configuration","network_reachability","preferences","schema_definitions","None","SCDynamicStoreAddTemporaryValue","SCDynamicStoreAddValue","SCDynamicStoreCallBack","SCDynamicStoreContext","SCDynamicStoreCopyKeyList","SCDynamicStoreCopyMultiple","SCDynamicStoreCopyNotifiedKeys","SCDynamicStoreCopyValue","SCDynamicStoreCreate","SCDynamicStoreCreateRunLoopSource","SCDynamicStoreCreateWithOptions","SCDynamicStoreGetTypeID","SCDynamicStoreNotifyValue","SCDynamicStoreRef","SCDynamicStoreRemoveValue","SCDynamicStoreSetDispatchQueue","SCDynamicStoreSetMultiple","SCDynamicStoreSetNotificationKeys","SCDynamicStoreSetValue","Some","__SCDynamicStore","borrow","borrow","borrow_mut","borrow_mut","copyDescription","from","from","info","into","into","kSCDynamicStoreUseSessionKeys","release","retain","try_from","try_from","try_into","try_into","type_id","type_id","version","SCDynamicStoreCopyComputerName","SCDynamicStoreCopyConsoleUser","SCDynamicStoreCopyLocalHostName","SCDynamicStoreCopyLocation","SCDynamicStoreCopyProxies","UInt32","__darwin_gid_t","__darwin_uid_t","__uint32_t","gid_t","uid_t","None","SCBondInterfaceCopyAll","SCBondInterfaceCopyAvailableMemberInterfaces","SCBondInterfaceCopyStatus","SCBondInterfaceCreate","SCBondInterfaceGetMemberInterfaces","SCBondInterfaceGetOptions","SCBondInterfaceRef","SCBondInterfaceRemove","SCBondInterfaceSetLocalizedDisplayName","SCBondInterfaceSetMemberInterfaces","SCBondInterfaceSetOptions","SCBondStatusRef","SCNetworkCheckReachabilityByAddress","SCNetworkCheckReachabilityByName","SCNetworkConnectionCallBack","SCNetworkConnectionContext","SCNetworkConnectionCopyExtendedStatus","SCNetworkConnectionCopyServiceID","SCNetworkConnectionCopyStatistics","SCNetworkConnectionCopyUserOptions","SCNetworkConnectionCopyUserPreferences","SCNetworkConnectionCreateWithServiceID","SCNetworkConnectionFlags","SCNetworkConnectionGetStatus","SCNetworkConnectionGetTypeID","SCNetworkConnectionRef","SCNetworkConnectionScheduleWithRunLoop","SCNetworkConnectionSetDispatchQueue","SCNetworkConnectionStart","SCNetworkConnectionStatus","SCNetworkConnectionStop","SCNetworkConnectionUnscheduleFromRunLoop","SCNetworkInterfaceCopyAll","SCNetworkInterfaceCopyMTU","SCNetworkInterfaceCopyMediaOptions","SCNetworkInterfaceCopyMediaSubTypeOptions","SCNetworkInterfaceCopyMediaSubTypes","SCNetworkInterfaceCreateWithInterface","SCNetworkInterfaceForceConfigurationRefresh","SCNetworkInterfaceGetBSDName","SCNetworkInterfaceGetConfiguration","SCNetworkInterfaceGetExtendedConfiguration","SCNetworkInterfaceGetHardwareAddressString","SCNetworkInterfaceGetInterface","SCNetworkInterfaceGetInterfaceType","SCNetworkInterfaceGetLocalizedDisplayName","SCNetworkInterfaceGetSupportedInterfaceTypes","SCNetworkInterfaceGetSupportedProtocolTypes","SCNetworkInterfaceGetTypeID","SCNetworkInterfaceRef","SCNetworkInterfaceRefreshConfiguration","SCNetworkInterfaceSetConfiguration","SCNetworkInterfaceSetExtendedConfiguration","SCNetworkInterfaceSetMTU","SCNetworkInterfaceSetMediaOptions","SCNetworkProtocolGetConfiguration","SCNetworkProtocolGetEnabled","SCNetworkProtocolGetProtocolType","SCNetworkProtocolGetTypeID","SCNetworkProtocolRef","SCNetworkProtocolSetConfiguration","SCNetworkProtocolSetEnabled","SCNetworkServiceAddProtocolType","SCNetworkServiceCopy","SCNetworkServiceCopyAll","SCNetworkServiceCopyProtocol","SCNetworkServiceCopyProtocols","SCNetworkServiceCreate","SCNetworkServiceEstablishDefaultConfiguration","SCNetworkServiceGetEnabled","SCNetworkServiceGetInterface","SCNetworkServiceGetName","SCNetworkServiceGetServiceID","SCNetworkServiceGetTypeID","SCNetworkServiceRef","SCNetworkServiceRemove","SCNetworkServiceRemoveProtocolType","SCNetworkServiceSetEnabled","SCNetworkServiceSetName","SCNetworkSetAddService","SCNetworkSetContainsInterface","SCNetworkSetCopy","SCNetworkSetCopyAll","SCNetworkSetCopyCurrent","SCNetworkSetCopyServices","SCNetworkSetCreate","SCNetworkSetGetName","SCNetworkSetGetServiceOrder","SCNetworkSetGetSetID","SCNetworkSetGetTypeID","SCNetworkSetRef","SCNetworkSetRemove","SCNetworkSetRemoveService","SCNetworkSetSetCurrent","SCNetworkSetSetName","SCNetworkSetSetServiceOrder","Some","__SCBondStatus","__SCNetworkConnection","__SCNetworkInterface","__SCNetworkProtocol","__SCNetworkService","__SCNetworkSet","_bindgen_ty_286","borrow","borrow_mut","copyDescription","from","info","into","kSCBondStatusDeviceAggregationStatus","kSCBondStatusDeviceCollecting","kSCBondStatusDeviceDistributing","kSCBondStatusLinkInvalid","kSCBondStatusNoPartner","kSCBondStatusNotInActiveGroup","kSCBondStatusOK","kSCBondStatusUnknown","kSCNetworkInterfaceIPv4","kSCNetworkInterfaceType6to4","kSCNetworkInterfaceTypeBluetooth","kSCNetworkInterfaceTypeBond","kSCNetworkInterfaceTypeBridge","kSCNetworkInterfaceTypeEthernet","kSCNetworkInterfaceTypeFireWire","kSCNetworkInterfaceTypeIEEE80211","kSCNetworkInterfaceTypeIPSec","kSCNetworkInterfaceTypeIPv4","kSCNetworkInterfaceTypeIrDA","kSCNetworkInterfaceTypeL2TP","kSCNetworkInterfaceTypeModem","kSCNetworkInterfaceTypePPP","kSCNetworkInterfaceTypePPTP","kSCNetworkInterfaceTypeSerial","kSCNetworkInterfaceTypeVLAN","kSCNetworkInterfaceTypeWWAN","release","retain","try_from","try_into","type_id","version","None","SCNetworkReachabilityCallBack","SCNetworkReachabilityContext","SCNetworkReachabilityCreateWithAddress","SCNetworkReachabilityCreateWithAddressPair","SCNetworkReachabilityCreateWithName","SCNetworkReachabilityFlags","SCNetworkReachabilityGetFlags","SCNetworkReachabilityGetTypeID","SCNetworkReachabilityRef","SCNetworkReachabilityScheduleWithRunLoop","SCNetworkReachabilitySetCallback","SCNetworkReachabilitySetDispatchQueue","SCNetworkReachabilityUnscheduleFromRunLoop","Some","__SCNetworkReachability","_bindgen_ty_64","borrow","borrow_mut","copyDescription","from","info","into","kSCNetworkReachabilityFlagsConnectionAutomatic","kSCNetworkReachabilityFlagsConnectionOnDemand","kSCNetworkReachabilityFlagsConnectionOnTraffic","kSCNetworkReachabilityFlagsConnectionRequired","kSCNetworkReachabilityFlagsInterventionRequired","kSCNetworkReachabilityFlagsIsDirect","kSCNetworkReachabilityFlagsIsLocalAddress","kSCNetworkReachabilityFlagsIsWWAN","kSCNetworkReachabilityFlagsReachable","kSCNetworkReachabilityFlagsTransientConnection","release","retain","try_from","try_into","type_id","version","AuthorizationOpaqueRef","AuthorizationRef","None","SCPreferencesAddValue","SCPreferencesApplyChanges","SCPreferencesCallBack","SCPreferencesCommitChanges","SCPreferencesContext","SCPreferencesCopyKeyList","SCPreferencesCreate","SCPreferencesCreateWithAuthorization","SCPreferencesGetSignature","SCPreferencesGetTypeID","SCPreferencesGetValue","SCPreferencesLock","SCPreferencesNotification","SCPreferencesRef","SCPreferencesRemoveValue","SCPreferencesScheduleWithRunLoop","SCPreferencesSetCallback","SCPreferencesSetDispatchQueue","SCPreferencesSetValue","SCPreferencesSynchronize","SCPreferencesUnlock","SCPreferencesUnscheduleFromRunLoop","Some","__SCPreferences","borrow","borrow_mut","copyDescription","from","info","into","release","retain","try_from","try_into","type_id","version","kSCCompAnyRegex","kSCCompGlobal","kSCCompHostNames","kSCCompInterface","kSCCompNetwork","kSCCompService","kSCCompSystem","kSCCompUsers","kSCDynamicStoreDomainFile","kSCDynamicStoreDomainPlugin","kSCDynamicStoreDomainPrefs","kSCDynamicStoreDomainSetup","kSCDynamicStoreDomainState","kSCDynamicStorePropNetInterfaces","kSCDynamicStorePropNetPrimaryInterface","kSCDynamicStorePropNetPrimaryService","kSCDynamicStorePropNetServiceIDs","kSCDynamicStorePropSetupCurrentSet","kSCDynamicStorePropSetupLastUpdated","kSCEntNet6to4","kSCEntNetAirPort","kSCEntNetDHCP","kSCEntNetDNS","kSCEntNetEthernet","kSCEntNetFireWire","kSCEntNetIPSec","kSCEntNetIPv4","kSCEntNetIPv6","kSCEntNetInterface","kSCEntNetL2TP","kSCEntNetLink","kSCEntNetModem","kSCEntNetPPP","kSCEntNetPPPSerial","kSCEntNetPPPoE","kSCEntNetPPTP","kSCEntNetProxies","kSCEntNetSMB","kSCEntUsersConsoleUser","kSCPrefCurrentSet","kSCPrefNetworkServices","kSCPrefSets","kSCPrefSystem","kSCPropInterfaceName","kSCPropMACAddress","kSCPropNet6to4Relay","kSCPropNetAirPortAllowNetCreation","kSCPropNetAirPortAuthPassword","kSCPropNetAirPortAuthPasswordEncryption","kSCPropNetAirPortJoinMode","kSCPropNetAirPortPowerEnabled","kSCPropNetAirPortPreferredNetwork","kSCPropNetAirPortSavePasswords","kSCPropNetDNSDomainName","kSCPropNetDNSOptions","kSCPropNetDNSSearchDomains","kSCPropNetDNSSearchOrder","kSCPropNetDNSServerAddresses","kSCPropNetDNSServerPort","kSCPropNetDNSServerTimeout","kSCPropNetDNSSortList","kSCPropNetDNSSupplementalMatchDomains","kSCPropNetDNSSupplementalMatchOrders","kSCPropNetEthernetMTU","kSCPropNetEthernetMediaOptions","kSCPropNetEthernetMediaSubType","kSCPropNetIPSecAuthenticationMethod","kSCPropNetIPSecConnectTime","kSCPropNetIPSecLocalCertificate","kSCPropNetIPSecLocalIdentifier","kSCPropNetIPSecLocalIdentifierType","kSCPropNetIPSecRemoteAddress","kSCPropNetIPSecSharedSecret","kSCPropNetIPSecSharedSecretEncryption","kSCPropNetIPSecStatus","kSCPropNetIPSecXAuthEnabled","kSCPropNetIPSecXAuthName","kSCPropNetIPSecXAuthPassword","kSCPropNetIPSecXAuthPasswordEncryption","kSCPropNetIPv4Addresses","kSCPropNetIPv4BroadcastAddresses","kSCPropNetIPv4ConfigMethod","kSCPropNetIPv4DHCPClientID","kSCPropNetIPv4DestAddresses","kSCPropNetIPv4Router","kSCPropNetIPv4SubnetMasks","kSCPropNetIPv6Addresses","kSCPropNetIPv6ConfigMethod","kSCPropNetIPv6DestAddresses","kSCPropNetIPv6Flags","kSCPropNetIPv6PrefixLength","kSCPropNetIPv6Router","kSCPropNetInterfaceDeviceName","kSCPropNetInterfaceHardware","kSCPropNetInterfaceSubType","kSCPropNetInterfaceSupportsModemOnHold","kSCPropNetInterfaceType","kSCPropNetInterfaces","kSCPropNetL2TPIPSecSharedSecret","kSCPropNetL2TPIPSecSharedSecretEncryption","kSCPropNetL2TPTransport","kSCPropNetLinkActive","kSCPropNetLinkDetaching","kSCPropNetLocalHostName","kSCPropNetModemAccessPointName","kSCPropNetModemConnectSpeed","kSCPropNetModemConnectionPersonality","kSCPropNetModemConnectionScript","kSCPropNetModemDataCompression","kSCPropNetModemDeviceContextID","kSCPropNetModemDeviceModel","kSCPropNetModemDeviceVendor","kSCPropNetModemDialMode","kSCPropNetModemErrorCorrection","kSCPropNetModemHoldCallWaitingAudibleAlert","kSCPropNetModemHoldDisconnectOnAnswer","kSCPropNetModemHoldEnabled","kSCPropNetModemHoldReminder","kSCPropNetModemHoldReminderTime","kSCPropNetModemNote","kSCPropNetModemPulseDial","kSCPropNetModemSpeaker","kSCPropNetModemSpeed","kSCPropNetOverridePrimary","kSCPropNetPPPACSPEnabled","kSCPropNetPPPAuthEAPPlugins","kSCPropNetPPPAuthName","kSCPropNetPPPAuthPassword","kSCPropNetPPPAuthPasswordEncryption","kSCPropNetPPPAuthPrompt","kSCPropNetPPPAuthProtocol","kSCPropNetPPPCCPEnabled","kSCPropNetPPPCCPMPPE128Enabled","kSCPropNetPPPCCPMPPE40Enabled","kSCPropNetPPPCommAlternateRemoteAddress","kSCPropNetPPPCommConnectDelay","kSCPropNetPPPCommDisplayTerminalWindow","kSCPropNetPPPCommRedialCount","kSCPropNetPPPCommRedialEnabled","kSCPropNetPPPCommRedialInterval","kSCPropNetPPPCommRemoteAddress","kSCPropNetPPPCommTerminalScript","kSCPropNetPPPCommUseTerminalScript","kSCPropNetPPPConnectTime","kSCPropNetPPPDeviceLastCause","kSCPropNetPPPDialOnDemand","kSCPropNetPPPDisconnectOnFastUserSwitch","kSCPropNetPPPDisconnectOnIdle","kSCPropNetPPPDisconnectOnIdleTimer","kSCPropNetPPPDisconnectOnLogout","kSCPropNetPPPDisconnectOnSleep","kSCPropNetPPPDisconnectTime","kSCPropNetPPPIPCPCompressionVJ","kSCPropNetPPPIPCPUsePeerDNS","kSCPropNetPPPIdleReminder","kSCPropNetPPPIdleReminderTimer","kSCPropNetPPPLCPCompressionACField","kSCPropNetPPPLCPCompressionPField","kSCPropNetPPPLCPEchoEnabled","kSCPropNetPPPLCPEchoFailure","kSCPropNetPPPLCPEchoInterval","kSCPropNetPPPLCPMRU","kSCPropNetPPPLCPMTU","kSCPropNetPPPLCPReceiveACCM","kSCPropNetPPPLCPTransmitACCM","kSCPropNetPPPLastCause","kSCPropNetPPPLogfile","kSCPropNetPPPOverridePrimary","kSCPropNetPPPPlugins","kSCPropNetPPPRetryConnectTime","kSCPropNetPPPSessionTimer","kSCPropNetPPPStatus","kSCPropNetPPPUseSessionTimer","kSCPropNetPPPVerboseLogging","kSCPropNetProxiesExceptionsList","kSCPropNetProxiesExcludeSimpleHostnames","kSCPropNetProxiesFTPEnable","kSCPropNetProxiesFTPPassive","kSCPropNetProxiesFTPPort","kSCPropNetProxiesFTPProxy","kSCPropNetProxiesGopherEnable","kSCPropNetProxiesGopherPort","kSCPropNetProxiesGopherProxy","kSCPropNetProxiesHTTPEnable","kSCPropNetProxiesHTTPPort","kSCPropNetProxiesHTTPProxy","kSCPropNetProxiesHTTPSEnable","kSCPropNetProxiesHTTPSPort","kSCPropNetProxiesHTTPSProxy","kSCPropNetProxiesProxyAutoConfigEnable","kSCPropNetProxiesProxyAutoConfigJavaScript","kSCPropNetProxiesProxyAutoConfigURLString","kSCPropNetProxiesProxyAutoDiscoveryEnable","kSCPropNetProxiesRTSPEnable","kSCPropNetProxiesRTSPPort","kSCPropNetProxiesRTSPProxy","kSCPropNetProxiesSOCKSEnable","kSCPropNetProxiesSOCKSPort","kSCPropNetProxiesSOCKSProxy","kSCPropNetSMBNetBIOSName","kSCPropNetSMBNetBIOSNodeType","kSCPropNetSMBNetBIOSScope","kSCPropNetSMBWINSAddresses","kSCPropNetSMBWorkgroup","kSCPropNetServiceOrder","kSCPropSystemComputerName","kSCPropSystemComputerNameEncoding","kSCPropUserDefinedName","kSCPropUsersConsoleUserGID","kSCPropUsersConsoleUserName","kSCPropUsersConsoleUserUID","kSCPropVersion","kSCResvInactive","kSCResvLink","kSCValNetAirPortAuthPasswordEncryptionKeychain","kSCValNetAirPortJoinModeAutomatic","kSCValNetAirPortJoinModePreferred","kSCValNetAirPortJoinModeRanked","kSCValNetAirPortJoinModeRecent","kSCValNetAirPortJoinModeStrongest","kSCValNetIPSecAuthenticationMethodCertificate","kSCValNetIPSecAuthenticationMethodHybrid","kSCValNetIPSecAuthenticationMethodSharedSecret","kSCValNetIPSecLocalIdentifierTypeKeyID","kSCValNetIPSecSharedSecretEncryptionKeychain","kSCValNetIPSecXAuthPasswordEncryptionKeychain","kSCValNetIPSecXAuthPasswordEncryptionPrompt","kSCValNetIPv4ConfigMethodAutomatic","kSCValNetIPv4ConfigMethodBOOTP","kSCValNetIPv4ConfigMethodDHCP","kSCValNetIPv4ConfigMethodINFORM","kSCValNetIPv4ConfigMethodLinkLocal","kSCValNetIPv4ConfigMethodManual","kSCValNetIPv4ConfigMethodPPP","kSCValNetIPv6ConfigMethod6to4","kSCValNetIPv6ConfigMethodAutomatic","kSCValNetIPv6ConfigMethodLinkLocal","kSCValNetIPv6ConfigMethodManual","kSCValNetIPv6ConfigMethodRouterAdvertisement","kSCValNetInterfaceSubTypeL2TP","kSCValNetInterfaceSubTypePPPSerial","kSCValNetInterfaceSubTypePPPoE","kSCValNetInterfaceSubTypePPTP","kSCValNetInterfaceType6to4","kSCValNetInterfaceTypeEthernet","kSCValNetInterfaceTypeFireWire","kSCValNetInterfaceTypeIPSec","kSCValNetInterfaceTypePPP","kSCValNetL2TPIPSecSharedSecretEncryptionKeychain","kSCValNetL2TPTransportIP","kSCValNetL2TPTransportIPSec","kSCValNetModemDialModeIgnoreDialTone","kSCValNetModemDialModeManual","kSCValNetModemDialModeWaitForDialTone","kSCValNetPPPAuthPasswordEncryptionKeychain","kSCValNetPPPAuthPasswordEncryptionToken","kSCValNetPPPAuthPromptAfter","kSCValNetPPPAuthPromptBefore","kSCValNetPPPAuthProtocolCHAP","kSCValNetPPPAuthProtocolEAP","kSCValNetPPPAuthProtocolMSCHAP1","kSCValNetPPPAuthProtocolMSCHAP2","kSCValNetPPPAuthProtocolPAP","kSCValNetSMBNetBIOSNodeTypeBroadcast","kSCValNetSMBNetBIOSNodeTypeHybrid","kSCValNetSMBNetBIOSNodeTypeMixed","kSCValNetSMBNetBIOSNodeTypePeer"],"q":[[0,"system_configuration_sys"],[9,"system_configuration_sys::dynamic_store"],[51,"system_configuration_sys::dynamic_store_copy_specific"],[62,"system_configuration_sys::network_configuration"],[205,"system_configuration_sys::network_reachability"],[244,"system_configuration_sys::preferences"],[283,"system_configuration_sys::schema_definitions"],[550,"core::result"],[551,"core::any"]],"d":["","This is a temporary solution.","","","","","","","","No value.","","","","","","","","","","","","","","","","","","","","Some value of type <code>T</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","No value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Some value of type <code>T</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","No value.","","","","","","","","","","","","","","Some value of type <code>T</code>.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","No value.","","","","","","","","","","","","","","","","","","","","","","","Some value of type <code>T</code>.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codei":[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,4,5,4,5,5,4,5,5,4,5,0,5,5,4,5,4,5,4,5,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],0,[-1,-2,[],[]],0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[4,"Result",550],[3,"TypeId",551],[6,"SCDynamicStoreCallBack",9],[3,"__SCDynamicStore",9],[3,"SCDynamicStoreContext",9],[6,"SCNetworkConnectionCallBack",62],[3,"SCNetworkConnectionContext",62],[6,"SCNetworkReachabilityCallBack",205],[3,"SCNetworkReachabilityContext",205],[6,"SCPreferencesCallBack",244],[3,"SCPreferencesContext",244]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":[[0,"thiserror"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"thiserror_impl":{"doc":"","t":"Y","n":["Error"],"q":[[0,"thiserror_impl"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"thread_priority":{"doc":"Thread priority. A library for changing thread’s …","t":"NENSSNNNNNNDDIEDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLFLFLFLFLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANRRNENNENDIGELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLFLLLLLLLLLLLMFLLFFFFLLLLLLLLLLLLLLLL","n":["Crossplatform","Error","Ffi","MAX","MIN","Max","Min","OS","Os","Priority","PriorityNotInRange","Thread","ThreadBuilder","ThreadBuilderExt","ThreadPriority","ThreadPriorityOsValue","ThreadPriorityValue","ThreadScopeExt","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","current","default","default","default","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_posix","hash","hash","hash","hash","hash","id","into","into","into","into","into","into","into","max_value_for_policy","min_value_for_policy","name","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","policy","priority","priority","set_for_current","spawn","spawn","spawn_careless","spawn_careless","spawn_scoped","spawn_scoped","spawn_scoped_careless","spawn_scoped_careless","spawn_scoped_with_priority","spawn_with_priority","spawn_with_priority","stack_size","to_allowed_value_for_policy","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_posix","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unix","Fifo","NICENESS_MAX","NICENESS_MIN","Normal","NormalThreadSchedulePolicy","Other","Realtime","RealtimeThreadSchedulePolicy","RoundRobin","ScheduleParams","ThreadExt","ThreadId","ThreadSchedulePolicy","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","get_current_thread_priority","get_native_id","get_priority","get_schedule_policy","get_schedule_policy_param","get_thread_priority","hash","hash","hash","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","sched_priority","set_current_thread_priority","set_priority","set_priority_and_policy","set_thread_priority_and_policy","thread_native_id","thread_schedule_policy","thread_schedule_policy_param","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"thread_priority"],[142,"thread_priority::unix"],[232,"core::cmp"],[233,"core::result"],[234,"core::fmt"],[235,"core::fmt"],[236,"libc::unix"],[237,"alloc::string"],[238,"core::convert"],[239,"core::option"],[240,"std::thread"],[241,"core::ops::function"],[242,"core::marker"],[243,"std::io::error"],[244,"std::thread::scoped"],[245,"std::thread::scoped"]],"d":["Holds a platform-independent priority value. Usually used …","A error type","FFI failure.","The maximum value for a thread priority.","The minimum value for a thread priority.","Holds a value representing the maximum possible priority. …","Holds a value representing the minimum possible priority.","Target OS’ error type. In most systems it is an integer …","Holds an operating system specific value. If it is not …","A value which describes why it is impossible to use such a …","Indicates that the priority isn’t in range and it should …","Represents an OS thread.","A copy of the <code>std::thread::Builder</code> builder allowing to set …","Adds thread building functions using the priority.","Thread priority enumeration.","Platform-specific thread priority value.","Platform-independent thread priority value. Should be in …","Adds scoped thread building functions using the priority.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get current thread.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets priority value from POSIX value. In order to …","","","","","","Thread’s ID (or handle).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the maximum allowed value for using with the …","Returns the minimum allowed value for using with the …","Names the thread-to-be. Currently the name is used for …","","","","","","The thread’s unix scheduling policy.","The thread’s custom priority.","Thread’s priority.","Sets current thread’s priority to this value.","Spawns a thread with the specified priority.","Spawns a new thread by taking ownership of the <code>Builder</code>, …","Spawns a thread with the specified priority. This is …","Spawns a new thread by taking ownership of the <code>Builder</code>, …","Spawns a scoped thread with the specified priority.","Spawns a new scoped thread by taking ownership of the …","Spawns a scoped thread with the specified priority. This …","Spawns a new scoped thread by taking ownership of the …","Spawn a scoped thread with set priority. The passed …","Spawn a thread with set priority. The passed functor <code>f</code> is …","Spawn a scoped thread with set priority. The passed …","Sets the size of the stack (in bytes) for the new thread.","Checks that the passed priority value is within the range …","","","","","","","Converts the priority stored to a posix number. POSIX …","","","","","","","","","","","","","","","","","","","","","This module defines the unix thread control.","A first-in, first-out policy","The maximum value possible for niceness. Threads with this …","The minimum value possible for niceness. Threads with this …","Normal thread schedule policies.","Normal (non-realtime) schedule policies For these schedule …","The standard round-robin time-sharing policy, also …","Realtime thread schedule policies.","The following “real-time” policies are also supported, …","A round-robin policy","Proxy structure to maintain compatibility between glibc …","A helper trait for other threads to implement to be able …","An alias type for a thread id.","Thread schedule policy definition.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get current thread’s priority value.","Returns native unix thread id. For more info read …","Gets the current thread’s priority. For more info read …","Gets the current thread’s schedule policy. For more info …","Returns current thread’s schedule policy and parameters. …","Get the thread’s priority value.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Copy of <code>sched_priority</code> from <code>libc::sched_param</code>","Set current thread’s priority. In order to properly map …","Sets the current thread’s priority. For more info see …","Sets current thread’s schedule policy. For more info …","Sets thread’s priority and schedule policy","Returns current thread id, which is the current OS’s …","Returns policy parameters (schedule policy and other …","Returns policy parameters (schedule policy and other …","","","","","","","","","","","","","","","",""],"i":[4,0,1,2,2,4,4,1,4,1,1,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,3,4,5,6,5,2,3,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,4,1,2,3,4,6,5,1,2,2,3,4,5,6,4,4,6,2,3,4,5,6,6,6,5,4,0,6,0,6,0,6,0,6,32,32,33,6,4,1,2,3,4,5,6,4,1,2,2,3,4,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,29,0,0,16,0,30,16,0,29,0,0,0,0,13,29,30,16,13,29,30,16,13,29,30,16,13,29,30,16,13,29,30,16,13,29,30,16,13,29,30,16,13,29,30,16,13,29,30,16,0,34,34,34,34,0,29,30,16,13,29,30,16,13,29,30,16,13,0,34,34,0,0,0,0,13,29,30,16,13,29,30,16,13,29,30,16,13,29,30,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[],[[9,[5,1]]]],[[],2],[[],3],[[],6],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[5,5],10],[[6,6],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[1,11],12],[[2,11],12],[[3,11],12],[[4,11],12],[[5,11],12],[[6,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,4],[[1,-1],7,14],[[2,-1],7,14],[[3,-1],7,14],[[4,-1],7,14],[[6,-1],7,14],0,[-1,-2,[],[]],[-1,-2,[],[]],[2,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,[[9,[17,1]]]],[16,[[9,[17,1]]]],[[6,-1],6,[[19,[18]]]],[[2,2],[[20,[8]]]],[[3,3],[[20,[8]]]],[[4,4],[[20,[8]]]],[[5,5],[[20,[8]]]],[[6,6],[[20,[8]]]],[[6,-1],6,[[19,[16]]]],[[6,-1],6,[[19,[4]]]],0,[4,[[9,[7,1]]]],[[4,-1],[[21,[-2]]],[22,23],23],[[6,-1],[[24,[[21,[-2]]]]],[22,23],23],[[4,-1],[[21,[-2]]],[22,23],23],[[6,-1],[[24,[[21,[-2]]]]],[22,23],23],[[25,4,-1],[[24,[[26,[-2]]]]],[22,23],23],[[6,25,-1],[[24,[[26,[-2]]]]],[22,23],23],[[25,4,-1],[[24,[[26,[-2]]]]],[22,23],23],[[6,25,-1],[[24,[[26,[-2]]]]],[22,23],23],[[-1,25,4,-2],[[24,[[26,[-3]]]]],[],[22,23],23],[[-1,4,-2],[[24,[[21,[-3]]]]],[],[22,23],23],[[-1,4,-2],[[26,[-3]]],[],[22,23],23],[[6,-1],6,[[19,[27]]]],[[17,16],[[9,[17,1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,16],[[9,[17,1]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[15,[[9,[2]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[15,[[9,[4]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[29,29],[30,30],[16,16],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[13,13],8],[[29,29],8],[[30,30],8],[[16,16],8],[[13,13],10],[[29,29],10],[[30,30],10],[[16,16],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[13,11],12],[[29,11],12],[[30,11],12],[[16,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[9,[4,1]]]],[-1,31,[]],[-1,[[9,[4,1]]],[]],[-1,[[9,[16,1]]],[]],[-1,[[9,[[7,[16,13]],1]]],[]],[31,[[9,[4,1]]]],[[29,-1],7,14],[[30,-1],7,14],[[16,-1],7,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[13,13],[[20,[8]]]],[[29,29],[[20,[8]]]],[[30,30],[[20,[8]]]],[[16,16],[[20,[8]]]],0,[4,[[9,[7,1]]]],[[-1,4],[[9,[7,1]]],[]],[[-1,16,4],[[9,[7,1]]],[]],[[31,4,16],[[9,[7,1]]]],[[],31],[[],[[9,[16,1]]]],[31,[[9,[[7,[16,13]],1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]]],"c":[],"p":[[4,"Error",0],[3,"ThreadPriorityValue",0],[3,"ThreadPriorityOsValue",0],[4,"ThreadPriority",0],[3,"Thread",0],[3,"ThreadBuilder",0],[15,"tuple"],[4,"Ordering",232],[4,"Result",233],[15,"bool"],[3,"Formatter",234],[6,"Result",234],[3,"ScheduleParams",142],[8,"Hasher",235],[15,"u8"],[4,"ThreadSchedulePolicy",142],[6,"c_int",236],[3,"String",237],[8,"Into",238],[4,"Option",239],[3,"JoinHandle",240],[8,"FnOnce",241],[8,"Send",242],[6,"Result",243],[3,"Scope",244],[3,"ScopedJoinHandle",244],[15,"usize"],[3,"TypeId",245],[4,"RealtimeThreadSchedulePolicy",142],[4,"NormalThreadSchedulePolicy",142],[6,"ThreadId",142],[8,"ThreadBuilderExt",0],[8,"ThreadScopeExt",0],[8,"ThreadExt",142]]},\
"tinyvec":{"doc":"<code>tinyvec</code> provides 100% safe vec-like data structures.","t":"IDDDDSNNNNNNQDDEEEDDLLLOOLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Array","ArrayVec","ArrayVecDrain","ArrayVecIterator","ArrayVecSplice","CAPACITY","Heap","Heap","Heap","Inline","Inline","Inline","Item","SliceVec","SliceVecDrain","TinyVec","TinyVecDrain","TinyVecIterator","TinyVecSplice","TryFromSliceError","append","append","append","array_vec","array_vec","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","clear","clear","clear","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","drain","drain","drain_to_vec","drain_to_vec_and_reserve","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend_from_slice","extend_from_slice","extend_from_slice","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array_empty","from_array_len","from_array_len","from_iter","from_iter","from_slice_len","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_heap","is_inline","last","last","last","last","len","len","len","len","len","move_to_the_heap","move_to_the_heap_and_reserve","new","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop","push","push","push","remove","remove","remove","reserve","reserve_exact","resize","resize","resize","resize_with","resize_with","resize_with","retain","retain","retain","set_len","set_len","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","splice","splice","split_off","split_off","split_off","swap_remove","swap_remove","swap_remove","tiny_vec","tiny_vec","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","truncate","truncate","truncate","try_append","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_array_len","try_from_array_len","try_from_slice_len","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity"],"q":[[0,"tinyvec"],[353,"core::default"],[354,"core::clone"],[355,"core::cmp"],[356,"core::cmp"],[357,"alloc::vec"],[358,"core::iter::traits::iterator"],[359,"core::cmp"],[360,"core::fmt"],[361,"core::fmt"],[362,"core::convert"],[363,"core::hash"],[364,"core::hash"],[365,"core::option"],[366,"core::iter::traits::double_ended"],[367,"core::cmp"],[368,"alloc::string"],[369,"core::result"],[370,"core::any"]],"d":["A trait for types that are an array.","An array-backed, vector-like data structure.","Draining iterator for <code>ArrayVec</code>","Iterator for consuming an <code>ArrayVec</code> and returning owned …","Splicing iterator for <code>ArrayVec</code> See <code>ArrayVec::splice</code>","The number of slots in the thing.","","","","","","","The type of the items in the thing.","A slice-backed vector-like data structure.","Draining iterator for <code>SliceVec</code>","A vector that starts inline, but can automatically move to …","Draining iterator for <code>TinyVecDrain</code>","Iterator for consuming an <code>TinyVec</code> and returning owned …","Splicing iterator for <code>TinyVec</code> See <code>TinyVec::splice</code>","The error type returned when a conversion from a slice to …","Move all values from <code>other</code> into this vec.","","Move all values from <code>other</code> into this vec.","Helper to make an <code>ArrayVec</code>.","Helper to make an <code>ArrayVec</code>.","","","","A <code>*mut</code> pointer to the backing array.","A <code>*mut</code> pointer to the backing slice.","A mutable pointer to the backing array.","Performs a <code>deref_mut</code>, into unique slice form.","Performs a <code>deref_mut</code>, into unique slice form.","Helper for getting the mut slice.","A <code>*const</code> pointer to the backing array.","A <code>*const</code> pointer to the backing slice.","A const pointer to the backing array.","","","","Gives a shared slice over the whole thing.","Performs a <code>deref</code>, into shared slice form.","Returns the remaining items of this iterator as a slice.","Performs a <code>deref</code>, into shared slice form.","Helper for getting the shared slice.","Returns the remaining items of this iterator as a slice.","Gives a unique slice over the whole thing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The capacity of the <code>ArrayVec</code>.","The capacity of the <code>SliceVec</code>.","The capacity of the <code>TinyVec</code>.","Truncates the <code>ArrayVec</code> down to length 0.","Truncates the <code>SliceVec</code> down to length 0.","Removes all elements from the vec.","","","","","","","","","","","","","","","Create a default-initialized instance of ourself, similar …","","","","","","","","","","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Drains all elements to a Vec","Drains all elements to a Vec, but reserves additional space","","","","","","","","","","","","","","","Clone each element of the slice into this <code>ArrayVec</code>.","","Clone each element of the slice into this vec.","Fill the vector until its capacity has been reached.","Fill the vector until its capacity has been reached.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","The output has a length equal to the full array.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>AsRef::as_mut</code> then uses the full slice as the …","Returns the argument unchanged.","Uses the full slice as the initial length.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Wraps up an array as a new empty <code>ArrayVec</code>.","Wraps up an array and uses the given length as the initial …","Wraps up an array and uses the given length as the initial …","","","Wraps up a slice and uses the given length as the initial …","","","","","","","","","","Inserts an item at the position given, moving all …","Inserts an item at the position given, moving all …","Inserts an item at the position given, moving all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner array of the <code>ArrayVec</code>.","","","","","","","","","","","","","","","Checks if the length is 0.","Checks if the length is 0.","If the vec is empty.","Returns whether elements are on heap","Returns whether elements are on stack","","","","","The length of the <code>ArrayVec</code> (in elements).","","The length of the <code>SliceVec</code> (in elements).","The length of the vec (in elements).","","Moves the content of the TinyVec to the heap, if it’s …","If TinyVec is inline, moves the content of it to the heap. …","Makes a new, empty <code>ArrayVec</code>.","Makes a new, empty vec.","","","","","","","","","","","","","","","","","","","","","Remove and return the last element of the vec, if there is …","Remove and return the last element of the vec, if there is …","Remove and return the last element of the vec, if there is …","Place an element onto the end of the vec.","Place an element onto the end of the vec.","Place an element onto the end of the vec.","Removes the item at <code>index</code>, shifting all others down by one …","Removes the item at <code>index</code>, shifting all others down by one …","Removes the item at <code>index</code>, shifting all others down by one …","Reserves additional space. Moves to the heap if array can…","Reserves additional space. Moves to the heap if array can…","As <code>resize_with</code> and it clones the value as the closure.","As <code>resize_with</code> and it clones the value as the closure.","Resize the vec to the new length.","Resize the vec to the new length.","Resize the vec to the new length.","Resize the vec to the new length.","Walk the vec and keep only the elements that pass the …","Walk the vec and keep only the elements that pass the …","Walk the vec and keep only the elements that pass the …","Forces the length of the vector to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector as much as possible. It …","","","","","","","Creates a splicing iterator that removes the specified …","Creates a splicing iterator that removes the specified …","Splits the collection at the point given.","Splits the collection at the point given.","Splits the collection at the point given.","Remove an element, swapping the end of the vec into its …","Remove an element, swapping the end of the vec into its …","Remove an element, swapping the end of the vec into its …","Helper to make a <code>TinyVec</code>.","Helper to make a <code>TinyVec</code>.","","","","","","","","Reduces the vec’s length to the given value.","Reduces the vec’s length to the given value.","Reduces the vec’s length to the given value.","Move all values from <code>other</code> into this vec. If appending …","","The output has a length equal to that of the slice, with …","","","","","","","","","","","Wraps an array, using the given length as the starting …","Wraps an array, using the given length as the starting …","Wraps a slice, using the given length as the starting …","Tries to insert an item at the position given, moving all …","","","","","","","","","","","","Tries to place an element onto the end of the vec. Returns …","","","","","","","","","","","","Makes a new TinyVec with <em>at least</em> the given capacity."],"i":[0,0,0,0,0,3,6,15,9,6,15,9,3,0,0,0,0,0,0,0,1,4,6,0,0,1,4,6,1,4,6,1,4,6,1,4,6,1,4,6,3,1,8,4,6,9,3,1,1,20,8,16,4,4,18,6,6,15,22,9,12,1,1,20,8,16,4,4,18,6,6,15,22,9,12,1,4,6,1,4,6,1,6,12,1,6,1,6,12,1,4,6,8,15,9,3,1,4,6,1,4,6,1,4,6,1,4,6,1,1,20,18,22,1,1,1,4,4,6,6,6,1,4,6,1,4,6,1,4,1,1,1,1,1,1,1,1,1,8,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,9,12,12,16,15,1,1,20,8,16,4,4,4,18,6,6,6,6,6,6,15,22,9,12,1,1,6,1,6,4,1,4,6,1,4,6,1,4,6,1,4,6,1,20,8,16,4,18,6,15,22,9,12,1,1,1,1,20,8,16,4,18,6,6,6,15,22,9,1,4,6,6,6,8,16,15,9,1,20,4,6,22,6,6,1,6,20,8,16,18,15,22,9,20,8,16,15,22,9,8,16,15,9,1,4,6,1,4,6,1,4,6,1,4,6,6,6,1,4,6,1,4,6,1,4,6,1,4,6,20,8,16,15,22,9,1,6,1,4,6,1,4,6,0,0,1,6,12,1,4,6,12,1,4,6,1,1,1,20,8,16,4,18,6,15,22,9,12,1,6,4,1,1,20,8,16,4,18,6,15,22,9,12,1,1,20,8,16,4,18,6,15,22,9,12,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[[4,[-1]],[4,[-1]]],2,5],[[[6,[-1]],[6,[-1]]],2,3],0,0,[[[1,[-1]]],7,3],[[[4,[-1]]],[[7,[-1]]],[]],[[[6,[-1]]],7,3],[[[1,[-1]]],[],3],[[[4,[-1]]],[],[]],[[[6,[-1]]],[],3],[[[1,[-1]]],7,3],[[[4,[-1]]],[[7,[-1]]],[]],[[[6,[-1]]],7,3],[[[1,[-1]]],[],3],[[[4,[-1]]],[],[]],[[[6,[-1]]],[],3],[[[1,[-1]]],7,3],[[[4,[-1]]],[[7,[-1]]],[]],[[[6,[-1]]],7,3],[-1,7,[]],[[[1,[-1]]],7,3],[[[8,[-1]]],7,3],[[[4,[-1]]],[[7,[-1]]],[]],[[[6,[-1]]],7,3],[[[9,[-1]]],7,3],[-1,7,[]],[[[1,[-1]]],7,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],[[7,[-1]]],[]],[-1,-2,[],[]],[[[6,[-1]]],7,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],7,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],[[7,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],7,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],10,3],[[[4,[-1]]],10,[]],[[[6,[-1]]],10,3],[[[1,[-1]]],2,3],[[[4,[-1]]],2,5],[[[6,[-1]]],2,3],[[[1,[-1]]],[[1,[-1]]],[3,11]],[[[6,[-1]]],[[6,[-1]]],[3,11]],[12,12],[[[1,[-1]],[1,[-1]]],2,[3,11]],[[[6,[-1]],[6,[-1]]],2,[3,11]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[1,[-1]],[1,[-1]]],13,3],[[[4,[-1]],[4,[-1]]],13,14],[[[6,[-1]],[6,[-1]]],13,3],[[[8,[-1]]],10,3],[[[15,[-1]]],10,3],[[[9,[-1]]],10,3],[[],-1,[]],[[],[[1,[-1]]],3],[[],[[4,[-1]]],[]],[[],[[6,[-1]]],3],[[[1,[-1]]],[],3],[[[4,[-1]]],[],[]],[[[6,[-1]]],[],3],[[[1,[-1]]],[],3],[[[4,[-1]]],[],[]],[[[6,[-1]]],[],3],[[[1,[-1]],-2],16,3,[[17,[10]]]],[[[4,[-1]],-2],[[18,[-1]]],5,[[17,[10]]]],[[[6,[-1]],-2],[[15,[-1]]],3,[[17,[10]]]],[[[1,[-1]]],19,3],[[[1,[-1]],10],19,3],[[[20,[-1,-2]]],2,3,21],[[[18,[-1]]],2,5],[[[22,[-1,-2]]],2,3,21],[[[1,[-1]],-1],23,3],[[[1,[-1]],[1,[-1]]],23,3],[[[1,[-1]],7],23,3],[[[4,[-1]],[4,[-1]]],23,24],[[[4,[-1]],[7,[-1]]],23,24],[[[6,[-1]],7],23,3],[[[6,[-1]],-1],23,3],[[[6,[-1]],[6,[-1]]],23,3],[[[1,[-1]],-2],2,3,25],[[[4,[-1]],-2],2,[],25],[[[6,[-1]],-2],2,3,25],[[[1,[-1]],7],2,3],[[[4,[-1]],[7,[-1]]],2,11],[[[6,[-1]],7],2,3],[[[1,[-1]],-2],[],3,25],[[[4,[-1]],-2],[],[],25],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[1,[-1]],26],27,3],[[[8,[-1]],26],27,3],[[[4,[-1]],26],27,28],[[[4,[-1]],26],27,29],[[[4,[-1]],26],27,30],[[[4,[-1]],26],27,31],[[[4,[-1]],26],27,32],[[[4,[-1]],26],27,33],[[[4,[-1]],26],27,34],[[[4,[-1]],26],27,35],[[[4,[-1]],26],27,36],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[6,[-1]],26],27,3],[[[9,[-1]],26],27,3],[[12,26],27],[[12,26],27],[[[16,[-1]],-2],2,5,37],[[[15,[-1]],-2],2,3,37],[-1,-1,[]],[-1,[[1,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-2,[[4,[-1]]],[],[[38,[[7,[-1]]]]]],[-1,-1,[]],[[[7,[-1]]],[[4,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[39,-1,[]],[[[7,[-1]]],[[6,[-2]]],[11,5],3],[-1,[[6,[-1]]],3],[[[7,[-1]]],[[6,[-2]]],[11,5],3],[[[1,[-1]]],[[6,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-1]]],[]],[[-1,10],[[1,[-1]]],3],[[-1,10],[[6,[-1]]],3],[-1,[[1,[-2]]],25,3],[-1,[[6,[-2]]],25,3],[[[7,[-1]],10],[[4,[-1]]],[]],[[[1,[-1]],-2],2,3,40],[[[4,[-1]],-2],2,41,40],[[[6,[-1]],-2],2,3,40],[[[1,[-1]],-2],[],3,[[42,[7]]]],[[[4,[-1]],-2],[],[],[[42,[[7,[-1]]]]]],[[[6,[-1]],-2],[],3,[[42,[7]]]],[[[1,[-1]],-2],[],3,[[42,[7]]]],[[[4,[-1]],-2],[],[],[[42,[[7,[-1]]]]]],[[[6,[-1]],-2],[],3,[[42,[7]]]],[[[1,[-1]],10],2,3],[[[4,[-1]],10,-1],2,[]],[[[6,[-1]],10],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],[],3],[[[1,[-1]]],[],3],[[[1,[-1]]],[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],[],[]],[-1,-2,[],[]],[[[6,[-1]]],[],3],[[[6,[-1]]],[],3],[[[6,[-1]]],[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],23,3],[[[4,[-1]]],23,[]],[[[6,[-1]]],23,3],[[[6,[-1]]],23,3],[[[6,[-1]]],23,3],[[[8,[-1]]],43,3],[[[16,[-1]]],43,5],[[[15,[-1]]],43,3],[[[9,[-1]]],43,3],[[[1,[-1]]],10,3],[[[20,[-1,-2]]],10,3,21],[[[4,[-1]]],10,[]],[[[6,[-1]]],10,3],[[[22,[-1,-2]]],10,3,21],[[[6,[-1]]],2,3],[[[6,[-1]],10],2,3],[[],[[1,[-1]]],3],[[],[[6,[-1]]],3],[[[20,[-1,-2]]],43,3,21],[[[8,[-1]]],43,3],[[[16,[-1]]],43,5],[[[18,[-1]]],43,5],[[[15,[-1]]],43,3],[[[22,[-1,-2]]],43,3,21],[[[9,[-1]]],43,3],[[[20,[-1,-2]]],43,3,[21,44]],[[[8,[-1]]],43,3],[[[16,[-1]]],43,5],[[[15,[-1]]],43,3],[[[22,[-1,-2]]],43,3,[21,44]],[[[9,[-1]]],43,3],[[[8,[-1]],10],43,3],[[[16,[-1]],10],43,5],[[[15,[-1]],10],43,3],[[[9,[-1]],10],43,3],[[[1,[-1]],[1,[-1]]],[[43,[13]]],3],[[[4,[-1]],[4,[-1]]],[[43,[13]]],45],[[[6,[-1]],[6,[-1]]],[[43,[13]]],3],[[[1,[-1]]],43,3],[[[4,[-1]]],[[43,[-1]]],5],[[[6,[-1]]],43,3],[[[1,[-1]]],2,3],[[[4,[-1]],-1],2,[]],[[[6,[-1]]],2,3],[[[1,[-1]],10],[],3],[[[4,[-1]],10],-1,5],[[[6,[-1]],10],[],3],[[[6,[-1]],10],2,3],[[[6,[-1]],10],2,3],[[[1,[-1]],10],2,3],[[[4,[-1]],10,-1],2,11],[[[6,[-1]],10],2,3],[[[1,[-1]],10,-2],2,3,37],[[[4,[-1]],10,-2],2,[],37],[[[6,[-1]],10,-2],2,3,37],[[[1,[-1]],-2],2,3,37],[[[4,[-1]],-2],2,5,37],[[[6,[-1]],-2],2,3,37],[[[1,[-1]],10],2,3],[[[4,[-1]],10],2,[]],[[[6,[-1]]],2,3],[[[20,[-1,-2]]],[[2,[10,[43,[10]]]]],3,21],[[[8,[-1]]],[[2,[10,[43,[10]]]]],3],[[[16,[-1]]],[[2,[10,[43,[10]]]]],5],[[[15,[-1]]],[[2,[10,[43,[10]]]]],3],[[[22,[-1,-2]]],[[2,[10,[43,[10]]]]],3,21],[[[9,[-1]]],[[2,[10,[43,[10]]]]],3],[[[1,[-1]],-2,-3],[[20,[-1,46]]],3,[[17,[10]]],25],[[[6,[-1]],-2,-3],[[22,[-1,46]]],3,[[17,[10]]],25],[[[1,[-1]],10],[[1,[-1]]],3],[[[4,[-1]],10],[[4,[-1]]],[]],[[[6,[-1]],10],[[6,[-1]]],3],[[[1,[-1]],10],[],3],[[[4,[-1]],10],-1,5],[[[6,[-1]],10],[],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[[[1,[-1]],10],2,3],[[[4,[-1]],10],2,5],[[[6,[-1]],10],2,3],[[[1,[-1]],[1,[-1]]],[[43,[[1,[-1]]]]],3],[-1,[[48,[-2]]],[],[]],[[[7,[-1]]],[[48,[[1,[-2]]]]],[11,5],3],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[[-1,10],[[48,[[1,[-1]],-1]]],3],[[-1,10],[[48,[[6,[-1]],-1]]],3],[[[7,[-1]],10],[[43,[[4,[-1]]]]],[]],[[[1,[-1]],10],43,3],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[[[1,[-1]]],43,3],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[10,[[6,[-1]]],3]],"c":[],"p":[[3,"ArrayVec",0],[15,"tuple"],[8,"Array",0],[3,"SliceVec",0],[8,"Default",353],[4,"TinyVec",0],[15,"slice"],[3,"ArrayVecIterator",0],[4,"TinyVecIterator",0],[15,"usize"],[8,"Clone",354],[3,"TryFromSliceError",0],[4,"Ordering",355],[8,"Ord",355],[4,"TinyVecDrain",0],[3,"ArrayVecDrain",0],[8,"RangeBounds",356],[3,"SliceVecDrain",0],[3,"Vec",357],[3,"ArrayVecSplice",0],[8,"Iterator",358],[3,"TinyVecSplice",0],[15,"bool"],[8,"PartialEq",355],[8,"IntoIterator",359],[3,"Formatter",360],[6,"Result",360],[8,"Display",360],[8,"Debug",360],[8,"LowerHex",360],[8,"LowerExp",360],[8,"UpperExp",360],[8,"UpperHex",360],[8,"Pointer",360],[8,"Binary",360],[8,"Octal",360],[8,"FnMut",361],[8,"AsMut",362],[15,"never"],[8,"Hasher",363],[8,"Hash",363],[8,"SliceIndex",364],[4,"Option",365],[8,"DoubleEndedIterator",366],[8,"PartialOrd",355],[3,"Fuse",367],[3,"String",368],[4,"Result",369],[3,"TypeId",370]]},\
"tinyvec_macros":{"doc":"","t":"O","n":["impl_mirrored"],"q":[[0,"tinyvec_macros"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"tokio":{"doc":"A runtime for writing reliable network applications …","t":"AAOACAAAOASIIIIIIIIDDDDSSSDCCDDSSSDDDDCCDDDSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLFFFLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLFFLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLLLLLLLLLLLLLLLLLLLGALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNDDNDEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNDDNNSDDDNDDDDDDDDDDDDDDEEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLDDLLLLLFLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNEDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLNNNNNDENEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLFLLLLALLLLLLLLLLLLLLLLLLNNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLFLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFDLLLLLLLLLLLNNCDDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLFFLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["io","net","pin","runtime","spawn","stream","sync","task","task_local","time","ALL","AsyncBufRead","AsyncBufReadExt","AsyncRead","AsyncReadExt","AsyncSeek","AsyncSeekExt","AsyncWrite","AsyncWriteExt","BufReader","BufStream","BufWriter","DuplexStream","EMPTY","ERROR","ERROR","Empty","Error","ErrorKind","Interest","Lines","READABLE","READABLE","READ_CLOSED","ReadBuf","ReadHalf","Ready","Repeat","Result","SeekFrom","Sink","Split","Take","WRITABLE","WRITABLE","WRITE_CLOSED","WriteHalf","add","advance","advance_mut","assume_init","bitand","bitor","bitor","bitor_assign","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","capacity","chain","chain","chunk_mut","clear","clone","clone","clone_into","clone_into","cmp","consume","consume","consume","consume","consume","consume","consume","consume","copy","copy_bidirectional","copy_buf","drop","duplex","empty","eq","eq","equivalent","equivalent","fill_buf","fill_buf","filled","filled_mut","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_ref","get_ref","get_ref","get_ref","get_ref","initialize_unfilled","initialize_unfilled_to","initialized","initialized_mut","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","is_empty","is_error","is_error","is_pair_of","is_pair_of","is_read_closed","is_readable","is_readable","is_writable","is_writable","is_write_closed","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","limit","lines","lines","new","new","new","new","next_line","next_segment","partial_cmp","poll_complete","poll_complete","poll_complete","poll_complete","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_next_line","poll_next_segment","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","put_slice","read","read","read_buf","read_buf","read_exact","read_exact","read_f32","read_f32","read_f32_le","read_f32_le","read_f64","read_f64","read_f64_le","read_f64_le","read_i128","read_i128","read_i128_le","read_i128_le","read_i16","read_i16","read_i16_le","read_i16_le","read_i32","read_i32","read_i32_le","read_i32_le","read_i64","read_i64","read_i64_le","read_i64_le","read_i8","read_i8","read_line","read_line","read_to_end","read_to_end","read_to_string","read_to_string","read_u128","read_u128","read_u128_le","read_u128_le","read_u16","read_u16","read_u16_le","read_u16_le","read_u32","read_u32","read_u32_le","read_u32_le","read_u64","read_u64","read_u64_le","read_u64_le","read_u8","read_u8","read_until","read_until","remaining","remaining_mut","remove","repeat","rewind","rewind","seek","seek","set_filled","set_limit","shutdown","shutdown","sink","split","split","split","start_seek","start_seek","start_seek","start_seek","stream_position","stream_position","sub","take","take","take","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfilled_mut","uninit","unix","unsplit","with_capacity","with_capacity","with_capacity","write","write","write_all","write_all","write_all_buf","write_all_buf","write_buf","write_buf","write_f32","write_f32","write_f32_le","write_f32_le","write_f64","write_f64","write_f64_le","write_f64_le","write_i128","write_i128","write_i128_le","write_i128_le","write_i16","write_i16","write_i16_le","write_i16_le","write_i32","write_i32","write_i32_le","write_i32_le","write_i64","write_i64","write_i64_le","write_i64_le","write_i8","write_i8","write_u128","write_u128","write_u128_le","write_u128_le","write_u16","write_u16","write_u16_le","write_u16_le","write_u32","write_u32","write_u32_le","write_u32_le","write_u64","write_u64","write_u64_le","write_u64_le","write_u8","write_u8","write_vectored","write_vectored","AsyncFd","AsyncFdReadyGuard","AsyncFdReadyMutGuard","TryIoError","as_fd","as_raw_fd","async_io","async_io_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_ready","clear_ready","clear_ready_matching","clear_ready_matching","drop","fmt","fmt","fmt","fmt","from","from","from","from","get_inner","get_inner","get_inner_mut","get_mut","get_mut","get_ref","get_ref","get_ref","into","into","into","into","into_inner","new","poll_read_ready","poll_read_ready_mut","poll_write_ready","poll_write_ready_mut","readable","readable_mut","ready","ready","ready","ready_mut","retain_ready","retain_ready","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_io","try_io","type_id","type_id","type_id","type_id","with_interest","writable","writable_mut","TcpListener","TcpSocket","TcpStream","ToSocketAddrs","UdpSocket","UnixDatagram","UnixListener","UnixStream","accept","accept","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","async_io","async_io","async_io","async_io","bind","bind","bind","bind","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","connect","connect","connect","connect","connect","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_raw_fd","from_std","from_std","from_std","from_std","from_std","from_std","from_std_stream","into","into","into","into","into","into","into","into_raw_fd","into_split","into_split","into_std","into_std","into_std","into_std","into_std","into_std","is_write_vectored","is_write_vectored","join_multicast_v4","join_multicast_v6","leave_multicast_v4","leave_multicast_v6","linger","linger","listen","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","lookup_host","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","new_v4","new_v6","nodelay","nodelay","pair","pair","peek","peek_from","peek_sender","peer_addr","peer_addr","peer_addr","peer_addr","peer_cred","poll_accept","poll_accept","poll_flush","poll_flush","poll_peek","poll_peek_from","poll_peek_sender","poll_read","poll_read","poll_read_ready","poll_read_ready","poll_recv","poll_recv","poll_recv_from","poll_recv_from","poll_recv_ready","poll_recv_ready","poll_send","poll_send","poll_send_ready","poll_send_ready","poll_send_to","poll_send_to","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write_ready","poll_write_ready","poll_write_vectored","poll_write_vectored","readable","readable","readable","readable","ready","ready","ready","ready","recv","recv","recv_buf","recv_buf","recv_buf_from","recv_buf_from","recv_buffer_size","recv_from","recv_from","reuseaddr","reuseport","send","send","send_buffer_size","send_to","send_to","set_broadcast","set_linger","set_linger","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_nodelay","set_recv_buffer_size","set_reuseaddr","set_reuseport","set_send_buffer_size","set_tos","set_tos","set_ttl","set_ttl","set_ttl","shutdown","split","split","take_error","take_error","take_error","take_error","take_error","take_error","tcp","tos","tos","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_io","try_io","try_io","try_io","try_peek_from","try_peek_sender","try_read","try_read","try_read_buf","try_read_buf","try_read_vectored","try_read_vectored","try_recv","try_recv","try_recv_buf","try_recv_buf","try_recv_buf_from","try_recv_buf_from","try_recv_from","try_recv_from","try_send","try_send","try_send_to","try_send_to","try_write","try_write","try_write_vectored","try_write_vectored","ttl","ttl","ttl","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbound","unix","writable","writable","writable","writable","OwnedReadHalf","OwnedWriteHalf","ReadHalf","ReuniteError","WriteHalf","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","drop","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","into","into","into","into","into","is_write_vectored","is_write_vectored","local_addr","local_addr","local_addr","local_addr","peek","peek","peer_addr","peer_addr","peer_addr","peer_addr","poll_flush","poll_flush","poll_peek","poll_peek","poll_read","poll_read","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write_vectored","poll_write_vectored","readable","readable","ready","ready","ready","ready","reunite","reunite","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read_buf","try_read_buf","try_read_vectored","try_read_vectored","try_write","try_write","try_write_vectored","try_write_vectored","type_id","type_id","type_id","type_id","type_id","writable","writable","OwnedReadHalf","OwnedWriteHalf","ReadHalf","ReuniteError","SocketAddr","UCred","WriteHalf","as_pathname","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","drop","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","from","from","gid","gid_t","hash","into","into","into","into","into","into","into","is_unnamed","is_write_vectored","is_write_vectored","local_addr","local_addr","local_addr","local_addr","peer_addr","peer_addr","peer_addr","peer_addr","pid","pid_t","pipe","poll_flush","poll_flush","poll_read","poll_read","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write_vectored","poll_write_vectored","readable","readable","ready","ready","ready","ready","reunite","reunite","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read_buf","try_read_buf","try_read_vectored","try_read_vectored","try_write","try_write","try_write_vectored","try_write_vectored","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","uid_t","writable","writable","OpenOptions","Receiver","Sender","as_fd","as_fd","as_raw_fd","as_raw_fd","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","fmt","fmt","fmt","from","from","from","from_file","from_file","from_file_unchecked","from_file_unchecked","into","into","into","is_write_vectored","new","open_receiver","open_sender","poll_flush","poll_read","poll_read_ready","poll_shutdown","poll_write","poll_write_ready","poll_write_vectored","readable","ready","ready","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_read","try_read_buf","try_read_vectored","try_write","try_write_vectored","type_id","type_id","type_id","unchecked","writable","Builder","CurrentThread","EnterGuard","Handle","MultiThread","Runtime","RuntimeFlavor","TryCurrentError","block_on","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","current","drop","enable_all","enable_io","enable_time","enter","enter","eq","equivalent","event_interval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","global_queue_interval","handle","into","into","into","into","into","into","is_missing_context","is_thread_local_destroyed","max_blocking_threads","max_io_events_per_tick","new","new_current_thread","new_multi_thread","on_thread_park","on_thread_start","on_thread_stop","on_thread_unpark","runtime_flavor","shutdown_background","shutdown_timeout","spawn","spawn","spawn_blocking","spawn_blocking","thread_keep_alive","thread_name","thread_name_fn","thread_stack_size","to_owned","to_string","try_current","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","worker_threads","AcquireError","AlreadyInitializedError","Barrier","BarrierWaitResult","Closed","InitializingError","MAX_PERMITS","MappedMutexGuard","Mutex","MutexGuard","NoPermits","Notify","OnceCell","OwnedMappedMutexGuard","OwnedMutexGuard","OwnedRwLockMappedWriteGuard","OwnedRwLockReadGuard","OwnedRwLockWriteGuard","OwnedSemaphorePermit","RwLock","RwLockMappedWriteGuard","RwLockReadGuard","RwLockWriteGuard","Semaphore","SemaphorePermit","SetError","TryAcquireError","TryLockError","acquire","acquire_many","acquire_many_owned","acquire_owned","add_permits","available_permits","blocking_lock","blocking_lock_owned","blocking_read","blocking_write","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","clone","clone","clone_into","clone_into","close","const_new","const_new","const_new","const_new","const_new","const_new_with","const_with_max_readers","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade_map","downgrade_map","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget","forget","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","futures","get","get_mut","get_mut","get_mut","get_or_init","get_or_try_init","initialized","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_mapped","into_mapped","is_already_init_err","is_closed","is_initializing_err","is_leader","lock","lock_owned","map","map","map","map","map","map","map","map","map","map","merge","merge","mpsc","mutex","mutex","new","new","new","new","new","new","new_with","notified","notify_one","notify_waiters","oneshot","read","read_owned","semaphore","set","take","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_acquire","try_acquire_many","try_acquire_many_owned","try_acquire_owned","try_downgrade_map","try_downgrade_map","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock_owned","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_owned","try_write","try_write_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wait","watch","with_max_readers","write","write_owned","Receiver","Sender","blocking_recv","borrow","borrow","borrow_mut","borrow_mut","channel","clone","clone_into","drop","drop","error","fmt","fmt","from","from","into","into","is_empty","is_empty","len","len","new","receiver_count","recv","resubscribe","same_channel","same_channel","send","subscribe","to_owned","try_from","try_from","try_into","try_into","try_recv","type_id","type_id","Closed","Closed","Empty","Lagged","Lagged","RecvError","SendError","TryRecvError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Notified","borrow","borrow_mut","drop","enable","fmt","from","into","into_future","poll","try_from","try_into","type_id","OwnedPermit","Permit","Receiver","Sender","UnboundedReceiver","UnboundedSender","WeakSender","WeakUnboundedSender","blocking_recv","blocking_recv","blocking_send","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","channel","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","close","closed","closed","downgrade","downgrade","drop","drop","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","is_closed","is_closed","max_capacity","poll_recv","poll_recv","recv","recv","recv_many","recv_many","release","reserve","reserve_owned","same_channel","same_channel","send","send","send","send","send_timeout","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_recv","try_recv","try_reserve","try_reserve_owned","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded_channel","upgrade","upgrade","Closed","Closed","Disconnected","Empty","Full","SendError","SendTimeoutError","Timeout","TryRecvError","TrySendError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Receiver","Sender","blocking_recv","borrow","borrow","borrow_mut","borrow_mut","channel","close","closed","drop","drop","error","fmt","fmt","from","from","into","into","into_future","is_closed","poll","poll_closed","send","try_from","try_from","try_into","try_into","try_recv","type_id","type_id","Closed","Empty","RecvError","TryRecvError","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","into","into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Receiver","Ref","Sender","borrow","borrow","borrow","borrow","borrow","borrow_and_update","borrow_mut","borrow_mut","borrow_mut","changed","channel","clone","clone_into","closed","deref","drop","drop","error","fmt","fmt","fmt","from","from","from","has_changed","has_changed","into","into","into","is_closed","mark_changed","new","receiver_count","same_channel","send","send_if_modified","send_modify","send_replace","subscribe","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wait_for","RecvError","SendError","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","from","from","into","into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AbortHandle","JoinError","JoinHandle","JoinSet","LocalEnterGuard","LocalKey","LocalSet","Unconstrained","abort","abort","abort_all","abort_handle","block_in_place","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","detach_all","drop","drop","drop","drop","drop","enter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","futures","get","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_panic","is_cancelled","is_empty","is_finished","is_finished","is_panic","join_next","len","new","new","poll","poll","poll","poll_join_next","run_until","scope","shutdown","spawn","spawn","spawn_blocking","spawn_blocking","spawn_blocking_on","spawn_local","spawn_local","spawn_local","spawn_local_on","spawn_on","sync_scope","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_panic","try_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unconstrained","with","yield_now","TaskLocalFuture","borrow","borrow_mut","drop","fmt","from","into","into_future","poll","try_from","try_into","type_id","Burst","Delay","Duration","Instant","Interval","MissedTickBehavior","Skip","Sleep","Timeout","add","add_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_duration_since","checked_sub","clone","clone","clone_into","clone_into","cmp","deadline","default","duration_since","elapsed","eq","eq","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_std","get_mut","get_ref","hash","interval","interval_at","into","into","into","into","into","into_future","into_future","into_inner","into_std","is_elapsed","missed_tick_behavior","now","partial_cmp","period","poll","poll","poll_tick","reset","reset","reset_after","reset_at","reset_immediately","saturating_duration_since","set_missed_tick_behavior","sleep","sleep_until","sub","sub","sub_assign","tick","timeout","timeout_at","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Elapsed","Error","at_capacity","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","from","from","into","into","invalid","is_at_capacity","is_invalid","is_shutdown","shutdown","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"tokio"],[10,"tokio::io"],[463,"tokio::io::unix"],[535,"tokio::net"],[808,"tokio::net::tcp"],[905,"tokio::net::unix"],[1031,"tokio::net::unix::pipe"],[1091,"tokio::runtime"],[1191,"tokio::sync"],[1586,"tokio::sync::broadcast"],[1625,"tokio::sync::broadcast::error"],[1673,"tokio::sync::futures"],[1686,"tokio::sync::mpsc"],[1811,"tokio::sync::mpsc::error"],[1882,"tokio::sync::oneshot"],[1913,"tokio::sync::oneshot::error"],[1947,"tokio::sync::watch"],[2000,"tokio::sync::watch::error"],[2030,"tokio::task"],[2156,"tokio::task::futures"],[2168,"tokio::time"],[2272,"tokio::time::error"],[2305,"core::marker"],[2306,"bytes::buf::uninit_slice"],[2307,"core::cmp"],[2308,"core::pin"],[2309,"core::marker"],[2310,"std::io::error"],[2311,"core::fmt"],[2312,"core::fmt"],[2313,"alloc::string"],[2314,"core::option"],[2315,"alloc::vec"],[2316,"core::task::wake"],[2317,"core::task::poll"],[2318,"std::io"],[2319,"bytes::buf::buf_mut"],[2320,"std::io"],[2321,"bytes::buf::buf_impl"],[2322,"std::os::fd::owned"],[2323,"std::os::fd::raw"],[2324,"std::os::fd::raw"],[2325,"core::ops::function"],[2326,"std::path"],[2327,"core::convert"],[2328,"std::net::tcp"],[2329,"std::net::tcp"],[2330,"std::os::unix::net::datagram"],[2331,"std::os::unix::net::listener"],[2332,"std::os::unix::net::stream"],[2333,"core::net::ip_addr"],[2334,"core::net::ip_addr"],[2335,"core::iter::traits::iterator"],[2336,"std::net"],[2337,"std::io"],[2338,"std::fs"],[2339,"core::future::future"],[2340,"core::ops::function"],[2341,"core::clone"],[2342,"core::default"],[2343,"core::cmp"],[2344,"std::time"]],"d":["Traits, helpers, and type definitions for asynchronous I/O …","TCP/UDP/Unix bindings for <code>tokio</code>.","Pins a value on the stack.","The Tokio runtime.","","Due to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …","Synchronization primitives for use in asynchronous …","Asynchronous green-threads.","Declares a new task-local key of type <code>tokio::task::LocalKey</code>…","Utilities for tracking time.","Returns a <code>Ready</code> representing readiness for all operations.","Reads bytes asynchronously.","An extension trait which adds utility methods to …","Reads bytes from a source.","Reads bytes from a source.","Seek bytes asynchronously.","An extension trait that adds utility methods to <code>AsyncSeek</code> …","Writes bytes asynchronously.","Writes bytes to a sink.","The <code>BufReader</code> struct adds buffering to any reader.","Wraps a type that is <code>AsyncWrite</code> and <code>AsyncRead</code>, and buffers …","Wraps a writer and buffers its output.","A bidirectional pipe to read and write bytes in memory.","Returns the empty <code>Ready</code> set.","Interest in error events.","Returns a <code>Ready</code> representing error readiness.","An async reader which is always at EOF.","","","Readiness event interest.","Reads lines from an <code>AsyncBufRead</code>.","Interest in all readable events.","Returns a <code>Ready</code> representing readable readiness.","Returns a <code>Ready</code> representing read closed readiness.","A wrapper around a byte buffer that is incrementally …","The readable half of a value returned from <code>split</code>.","Describes the readiness state of an I/O resources.","An async reader which yields one byte over and over and …","","","An async writer which will move data into the void.","Splitter for the <code>split</code> method.","Stream for the <code>take</code> method.","Interest in all writable events.","Returns a <code>Ready</code> representing writable readiness.","Returns a <code>Ready</code> representing write closed readiness.","The writable half of a value returned from <code>split</code>.","Add together two <code>Interest</code> values.","Advances the size of the filled region of the buffer.","","Asserts that the first <code>n</code> unfilled bytes of the buffer are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the internally buffered data.","Returns a reference to the internally buffered data.","Returns the total capacity of the buffer.","Creates a new <code>AsyncRead</code> instance that chains this stream …","Creates a new <code>AsyncRead</code> instance that chains this stream …","","Clears the buffer, resetting the filled region to empty.","","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","Tells this buffer that <code>amt</code> bytes have been consumed from …","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","","","Asynchronously copies the entire contents of a reader into …","Copies data in both directions between <code>a</code> and <code>b</code>.","Asynchronously copies the entire contents of a reader into …","","Create a new pair of <code>DuplexStream</code>s that act like a pair of …","Creates a new empty async reader.","","","","","Returns the contents of the internal buffer, filling it …","Returns the contents of the internal buffer, filling it …","Returns a shared reference to the filled portion of the …","Returns a mutable reference to the filled portion of the …","Flushes this output stream, ensuring that all …","Flushes this output stream, ensuring that all …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a mutable reference to the underlying reader.","Obtains a mutable reference to the underlying reader.","Gets a mutable reference to the underlying writer.","Gets a mutable reference to the underlying I/O object.","Gets a mutable reference to the underlying reader.","Gets a pinned mutable reference to the underlying reader.","Gets a pinned mutable reference to the underlying writer.","Gets a pinned mutable reference to the underlying I/O …","Gets a pinned mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Obtains a reference to the underlying reader.","Gets a reference to the underlying writer.","Gets a reference to the underlying I/O object.","Gets a reference to the underlying reader.","Returns a mutable reference to the unfilled part of the …","Returns a mutable reference to the first <code>n</code> bytes of the …","Returns a shared reference to the initialized portion of …","Returns a mutable reference to the initialized portion of …","Returns a mutable reference to the entire buffer, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Take</code>, returning the wrapped reader.","Unwraps this <code>Lines&lt;R&gt;</code>, returning the underlying reader.","Consumes this <code>BufWriter</code>, returning the underlying writer.","Consumes this <code>BufStream</code>, returning the underlying I/O …","Consumes this <code>BufReader</code>, returning the underlying reader.","Returns true if <code>Ready</code> is the empty set.","Returns true if the value includes error interest.","Returns <code>true</code> if the value includes error <code>readiness</code>.","Checks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …","Checks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …","Returns <code>true</code> if the value includes read-closed <code>readiness</code>.","Returns true if the value includes readable interest.","Returns <code>true</code> if the value includes <code>readable</code>.","Returns true if the value includes writable interest.","Returns <code>true</code> if the value includes writable <code>readiness</code>.","Returns <code>true</code> if the value includes write-closed <code>readiness</code>.","Determines if this writer has an efficient …","Determines if this writer has an efficient …","","","","","","Returns the remaining number of bytes that can be read …","Returns a stream over the lines of this reader. This …","Returns a stream over the lines of this reader. This …","Creates a new <code>ReadBuf</code> from a fully initialized buffer.","Creates a new <code>BufWriter</code> with a default buffer capacity. …","Wraps a type in both <code>BufWriter</code> and <code>BufReader</code>.","Creates a new <code>BufReader</code> with a default buffer capacity. …","Returns the next line in the stream.","Returns the next segment in the stream.","","Waits for a seek operation to complete.","","","","Attempts to return the contents of the internal buffer, …","","","","","","Attempts to flush the object, ensuring that any buffered …","","","","","","","Polls for the next line in the stream.","Polls for the next segment in the stream.","Attempts to read from the <code>AsyncRead</code> into <code>buf</code>.","","","","","","","","","Initiates or attempts to shut down this writer, returning …","","","","","","","Attempt to write bytes from <code>buf</code> into the object.","","","","","","","Like <code>poll_write</code>, except that it writes from a slice of …","Like <code>poll_write</code>, except that it writes from a slice of …","","","","","","Appends data to the buffer, advancing the written position …","Pulls some bytes from this source into the specified …","Pulls some bytes from this source into the specified …","Pulls some bytes from this source into the specified …","Pulls some bytes from this source into the specified …","Reads the exact number of bytes required to fill <code>buf</code>.","Reads the exact number of bytes required to fill <code>buf</code>.","Reads an 32-bit floating point type in big-endian order …","Reads an 32-bit floating point type in big-endian order …","Reads an 32-bit floating point type in little-endian order …","Reads an 32-bit floating point type in little-endian order …","Reads an 64-bit floating point type in big-endian order …","Reads an 64-bit floating point type in big-endian order …","Reads an 64-bit floating point type in little-endian order …","Reads an 64-bit floating point type in little-endian order …","Reads an signed 128-bit integer in big-endian order from …","Reads an signed 128-bit integer in big-endian order from …","Reads an signed 128-bit integer in little-endian order …","Reads an signed 128-bit integer in little-endian order …","Reads a signed 16-bit integer in big-endian order from the …","Reads a signed 16-bit integer in big-endian order from the …","Reads a signed 16-bit integer in little-endian order from …","Reads a signed 16-bit integer in little-endian order from …","Reads a signed 32-bit integer in big-endian order from the …","Reads a signed 32-bit integer in big-endian order from the …","Reads a signed 32-bit integer in little-endian order from …","Reads a signed 32-bit integer in little-endian order from …","Reads an signed 64-bit integer in big-endian order from the","Reads an signed 64-bit integer in big-endian order from the","Reads an signed 64-bit integer in little-endian order from …","Reads an signed 64-bit integer in little-endian order from …","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads all bytes until a newline (the 0xA byte) is reached, …","Reads all bytes until a newline (the 0xA byte) is reached, …","Reads all bytes until EOF in this source, placing them …","Reads all bytes until EOF in this source, placing them …","Reads all bytes until EOF in this source, appending them …","Reads all bytes until EOF in this source, appending them …","Reads an unsigned 128-bit integer in big-endian order from …","Reads an unsigned 128-bit integer in big-endian order from …","Reads an unsigned 128-bit integer in little-endian order …","Reads an unsigned 128-bit integer in little-endian order …","Reads an unsigned 16-bit integer in big-endian order from …","Reads an unsigned 16-bit integer in big-endian order from …","Reads an unsigned 16-bit integer in little-endian order …","Reads an unsigned 16-bit integer in little-endian order …","Reads an unsigned 32-bit integer in big-endian order from …","Reads an unsigned 32-bit integer in big-endian order from …","Reads an unsigned 32-bit integer in little-endian order …","Reads an unsigned 32-bit integer in little-endian order …","Reads an unsigned 64-bit integer in big-endian order from …","Reads an unsigned 64-bit integer in big-endian order from …","Reads an unsigned 64-bit integer in little-endian order …","Reads an unsigned 64-bit integer in little-endian order …","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …","Reads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …","Returns the number of bytes at the end of the slice that …","","Remove <code>Interest</code> from <code>self</code>.","Creates an instance of an async reader that infinitely …","Creates a future which will rewind to the beginning of the …","Creates a future which will rewind to the beginning of the …","Creates a future which will seek an IO object, and then …","Creates a future which will seek an IO object, and then …","Sets the size of the filled region of the buffer.","Sets the number of bytes that can be read before this …","Shuts down the output stream, ensuring that the value can …","Shuts down the output stream, ensuring that the value can …","Creates an instance of an async writer which will …","Splits a single value implementing <code>AsyncRead + AsyncWrite</code> …","Returns a stream of the contents of this reader split on …","Returns a stream of the contents of this reader split on …","Attempts to seek to an offset, in bytes, in a stream.","","","","Creates a future which will return the current seek …","Creates a future which will return the current seek …","","Returns a new <code>ReadBuf</code> comprised of the unfilled section up …","Creates an adaptor which reads at most <code>limit</code> bytes from it.","Creates an adaptor which reads at most <code>limit</code> bytes from it.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the unfilled part of the …","Creates a new <code>ReadBuf</code> from a fully uninitialized buffer.","Asynchronous IO structures specific to Unix-like operating …","Reunites with a previously split <code>WriteHalf</code>.","Creates a new <code>BufWriter</code> with the specified buffer capacity.","Creates a <code>BufStream</code> with the specified <code>BufReader</code> capacity …","Creates a new <code>BufReader</code> with the specified buffer capacity.","Writes a buffer into this writer, returning how many bytes …","Writes a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write an entire buffer into this writer.","Attempts to write an entire buffer into this writer.","Attempts to write an entire buffer into this writer.","Writes a buffer into this writer, advancing the buffer’s …","Writes a buffer into this writer, advancing the buffer’s …","Writes an 32-bit floating point type in big-endian order …","Writes an 32-bit floating point type in big-endian order …","Writes an 32-bit floating point type in little-endian …","Writes an 32-bit floating point type in little-endian …","Writes an 64-bit floating point type in big-endian order …","Writes an 64-bit floating point type in big-endian order …","Writes an 64-bit floating point type in little-endian …","Writes an 64-bit floating point type in little-endian …","Writes an signed 128-bit integer in big-endian order to the","Writes an signed 128-bit integer in big-endian order to the","Writes an signed 128-bit integer in little-endian order to …","Writes an signed 128-bit integer in little-endian order to …","Writes a signed 16-bit integer in big-endian order to the …","Writes a signed 16-bit integer in big-endian order to the …","Writes a signed 16-bit integer in little-endian order to …","Writes a signed 16-bit integer in little-endian order to …","Writes a signed 32-bit integer in big-endian order to the …","Writes a signed 32-bit integer in big-endian order to the …","Writes a signed 32-bit integer in little-endian order to …","Writes a signed 32-bit integer in little-endian order to …","Writes an signed 64-bit integer in big-endian order to the …","Writes an signed 64-bit integer in big-endian order to the …","Writes an signed 64-bit integer in little-endian order to …","Writes an signed 64-bit integer in little-endian order to …","Writes a signed 8-bit integer to the underlying writer.","Writes a signed 8-bit integer to the underlying writer.","Writes an unsigned 128-bit integer in big-endian order to …","Writes an unsigned 128-bit integer in big-endian order to …","Writes an unsigned 128-bit integer in little-endian order …","Writes an unsigned 128-bit integer in little-endian order …","Writes an unsigned 16-bit integer in big-endian order to …","Writes an unsigned 16-bit integer in big-endian order to …","Writes an unsigned 16-bit integer in little-endian order …","Writes an unsigned 16-bit integer in little-endian order …","Writes an unsigned 32-bit integer in big-endian order to …","Writes an unsigned 32-bit integer in big-endian order to …","Writes an unsigned 32-bit integer in little-endian order …","Writes an unsigned 32-bit integer in little-endian order …","Writes an unsigned 64-bit integer in big-endian order to …","Writes an unsigned 64-bit integer in big-endian order to …","Writes an unsigned 64-bit integer in little-endian order …","Writes an unsigned 64-bit integer in little-endian order …","Writes an unsigned 8-bit integer to the underlying writer.","Writes an unsigned 8-bit integer to the underlying writer.","Like <code>write</code>, except that it writes from a slice of buffers.","Like <code>write</code>, except that it writes from a slice of buffers.","Associates an IO object backed by a Unix file descriptor …","Represents an IO-ready event detected on a particular file …","Represents an IO-ready event detected on a particular file …","The error type returned by <code>try_io</code>.","","","Reads or writes from the file descriptor using a …","Reads or writes from the file descriptor using a …","","","","","","","","","Indicates to tokio that the file descriptor is no longer …","Indicates to tokio that the file descriptor is no longer …","Indicates to tokio that the file descriptor no longer has …","Indicates to tokio that the file descriptor no longer has …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a shared reference to the backing object of the …","Returns a shared reference to the backing object of the …","Returns a mutable reference to the backing object of the …","Returns a mutable reference to the backing object of this …","Returns a mutable reference to the inner <code>AsyncFd</code>.","Returns a shared reference to the backing object of this …","Returns a shared reference to the inner <code>AsyncFd</code>.","Returns a shared reference to the inner <code>AsyncFd</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deregisters this file descriptor and returns ownership of …","Creates an <code>AsyncFd</code> backed by (and taking ownership of) an …","Polls for read readiness.","Polls for read readiness.","Polls for write readiness.","Polls for write readiness.","Waits for the file descriptor to become readable, …","Waits for the file descriptor to become readable, …","Waits for any of the requested ready states, returning a …","Get the <code>Ready</code> value associated with this guard.","Get the <code>Ready</code> value associated with this guard.","Waits for any of the requested ready states, returning a …","This method should be invoked when you intentionally want …","This method should be invoked when you intentionally want …","","","","","","","","","Performs the provided IO operation.","Performs the provided IO operation.","","","","","Creates an <code>AsyncFd</code> backed by (and taking ownership of) an …","Waits for the file descriptor to become writable, …","Waits for the file descriptor to become writable, …","A TCP socket server, listening for connections.","A TCP socket that has not yet been converted to a <code>TcpStream</code>…","A TCP stream between a local and a remote socket.","Converts or resolves without blocking to one or more …","A UDP socket.","An I/O object representing a Unix datagram socket.","A Unix socket which can accept connections from other Unix …","A structure representing a connected Unix socket.","Accepts a new incoming connection from this listener.","Accepts a new incoming connection to this listener.","","","","","","","","","","","","","","","Reads or writes from the socket using a user-provided IO …","Reads or writes from the socket using a user-provided IO …","Reads or writes from the socket using a user-provided IO …","Reads or writes from the socket using a user-provided IO …","Creates a new TcpListener, which will be bound to the …","Binds the socket to the given address.","This function will create a new UDP socket and attempt to …","Creates a new <code>UnixDatagram</code> bound to the specified path.","Creates a new <code>UnixListener</code> bound to the specified path.","","","","","","","","","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","Establishes a TCP connection with a peer at the specified …","Opens a TCP connection to a remote host.","Connects the UDP socket setting the default destination …","Connects the socket to the specified address.","Connects to the socket named by <code>path</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>RawFd</code> to a <code>TcpSocket</code>.","Creates new <code>TcpListener</code> from a <code>std::net::TcpListener</code>.","Creates new <code>TcpStream</code> from a <code>std::net::TcpStream</code>.","Creates new <code>UdpSocket</code> from a previously bound …","Creates new <code>UnixDatagram</code> from a …","Creates new <code>UnixListener</code> from a …","Creates new <code>UnixStream</code> from a …","Converts a <code>std::net::TcpStream</code> into a <code>TcpSocket</code>. The …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Splits a <code>TcpStream</code> into a read half and a write half, …","Splits a <code>UnixStream</code> into a read half and a write half, …","Turns a <code>tokio::net::TcpListener</code> into a …","Turns a <code>tokio::net::TcpStream</code> into a <code>std::net::TcpStream</code>.","Turns a <code>tokio::net::UdpSocket</code> into a <code>std::net::UdpSocket</code>.","Turns a <code>tokio::net::UnixDatagram</code> into a …","Turns a <code>tokio::net::UnixListener</code> into a …","Turns a <code>tokio::net::UnixStream</code> into a …","","","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Reads the linger duration for this socket by getting the …","Reads the linger duration for this socket by getting the …","Converts the socket into a <code>TcpListener</code>.","Returns the local address that this listener is bound to.","Gets the local address of this socket.","Returns the local address that this stream is bound to.","Returns the local address that this socket is bound to.","Returns the local address that this socket is bound to.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","Performs a DNS resolution.","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Creates a new socket configured for IPv4.","Creates a new socket configured for IPv6.","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Creates an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","Receives data on the socket from the remote address to …","Receives data from the socket, without removing it from …","Retrieve the sender of the data at the head of the input …","Returns the remote address that this stream is connected …","Returns the socket address of the remote peer this socket …","Returns the address of this socket’s peer.","Returns the socket address of the remote half of this …","Returns effective credentials of the process which called …","Polls to accept a new incoming connection to this listener.","Polls to accept a new incoming connection to this listener.","","","Attempts to receive data on the socket, without removing …","Receives data from the socket, without removing it from …","Retrieve the sender of the data at the head of the input …","","","Polls for read readiness.","Polls for read readiness.","Attempts to receive a single datagram message on the …","Attempts to receive a single datagram message on the …","Attempts to receive a single datagram on the socket.","Attempts to receive a single datagram on the specified …","Polls for read/receive readiness.","Polls for read/receive readiness.","Attempts to send data on the socket to the remote address …","Attempts to send data on the socket to the remote address …","Polls for write/send readiness.","Polls for write/send readiness.","Attempts to send data on the socket to a given address.","Attempts to send data to the specified address.","","","","","Polls for write readiness.","Polls for write readiness.","","","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Receives a single datagram message on the socket from the …","Receives data from the socket.","Receives a single datagram message on the socket from the …","Receives data from the socket from the address to which it …","Receives a single datagram message on the socket, …","Receives from the socket, advances the buffer’s internal …","Returns the size of the TCP receive buffer for this socket.","Receives a single datagram message on the socket. On …","Receives data from the socket.","Retrieves the value set for <code>SO_REUSEADDR</code> on this socket.","Allows the socket to bind to an in-use port. Only …","Sends data on the socket to the remote address that the …","Sends data on the socket to the socket’s peer.","Returns the size of the TCP send buffer for this socket.","Sends data on the socket to the given address. On success, …","Sends data on the socket to the specified address.","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets the linger duration of this socket by setting the …","Sets the linger duration of this socket by setting the …","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the size of the TCP receive buffer on this socket.","Allows the socket to bind to an in-use address.","Allows the socket to bind to an in-use port. Only …","Sets the size of the TCP send buffer on this socket.","Sets the value for the <code>IP_TOS</code> option on this socket.","Sets the value for the <code>IP_TOS</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Shuts down the read, write, or both halves of this …","Splits a <code>TcpStream</code> into a read half and a write half, …","Splits a <code>UnixStream</code> into a read half and a write half, …","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","TCP utility types.","Gets the value of the <code>IP_TOS</code> option for this socket.","Gets the value of the <code>IP_TOS</code> option for this socket.","Consumes stream, returning the tokio I/O object.","","","Consumes stream, returning the tokio I/O object.","","","Consumes stream, returning the tokio I/O object.","Consumes stream, returning the Tokio I/O object.","","","Consumes stream, returning the tokio I/O object.","","Consumes stream, returning the tokio I/O object.","","","","","","","","Tries to read or write from the socket using a …","Tries to read or write from the socket using a …","Tries to read or write from the socket using a …","Tries to read or write from the socket using a …","Tries to receive data on the socket without removing it …","Try to retrieve the sender of the data at the head of the …","Tries to read data from the stream into the provided …","Try to read data from the stream into the provided buffer, …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to receive a single datagram message on the socket …","Tries to receive a datagram from the peer without waiting.","Tries to receive data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to receive a single datagram message on the socket. …","Tries to receive data from the socket without waiting.","Tries to receive a single datagram message on the socket. …","Tries to receive data from the socket without waiting.","Tries to send data on the socket to the remote address to …","Tries to send a datagram to the peer without waiting.","Tries to send data on the socket to the given address, but …","Tries to send a datagram to the peer without waiting.","Try to write a buffer to the stream, returning how many …","Tries to write a buffer to the stream, returning how many …","Tries to write several buffers to the stream, returning …","Tries to write several buffers to the stream, returning …","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","","","Creates a new <code>UnixDatagram</code> which is not bound to any …","Unix specific network types.","Waits for the socket to become writable.","Waits for the socket to become writable.","Waits for the socket to become writable.","Waits for the socket to become writable.","Owned read half of a <code>TcpStream</code>, created by <code>into_split</code>.","Owned write half of a <code>TcpStream</code>, created by <code>into_split</code>.","Borrowed read half of a <code>TcpStream</code>, created by <code>split</code>.","Error indicating that two halves were not from the same …","Borrowed write half of a <code>TcpStream</code>, created by <code>split</code>.","","","","","","","","","","","","","","","","","","","","","","Destroys the write half, but don’t close the write half …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the local address that this stream is bound to.","Returns the local address that this stream is bound to.","Returns the local address that this stream is bound to.","Returns the local address that this stream is bound to.","Receives data on the socket from the remote address to …","Receives data on the socket from the remote address to …","Returns the remote address that this stream is connected …","Returns the remote address that this stream is connected …","Returns the remote address that this stream is connected …","Returns the remote address that this stream is connected …","","","Attempts to receive data on the socket, without removing …","Attempt to receive data on the socket, without removing …","","","","","","","","","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Attempts to put the two halves of a <code>TcpStream</code> back …","Attempts to put the two halves of a <code>TcpStream</code> back …","","","","","","","","","","","","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to write a buffer to the stream, returning how many …","Tries to write a buffer to the stream, returning how many …","Tries to write several buffers to the stream, returning …","Tries to write several buffers to the stream, returning …","","","","","","Waits for the socket to become writable.","Waits for the socket to become writable.","Owned read half of a <code>UnixStream</code>, created by <code>into_split</code>.","Owned write half of a <code>UnixStream</code>, created by <code>into_split</code>.","Borrowed read half of a <code>UnixStream</code>, created by <code>split</code>.","Error indicating that two halves were not from the same …","An address associated with a Tokio Unix socket.","Credentials of a process.","Borrowed write half of a <code>UnixStream</code>, created by <code>split</code>.","Returns the contents of this address if it is a <code>pathname</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Destroys the write half, but don’t close the write half …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets GID (group ID) of the process.","A type representing user ID.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the address is unnamed.","","","Returns the socket address of the local half of this …","Returns the socket address of the local half of this …","Returns the socket address of the local half of this …","Returns the socket address of the local half of this …","Returns the socket address of the remote half of this …","Returns the socket address of the remote half of this …","Returns the socket address of the remote half of this …","Returns the socket address of the remote half of this …","Gets PID (process ID) of the process.","A type representing group ID.","Unix pipe types.","","","","","","","","","","","Waits for the socket to become readable.","Waits for the socket to become readable.","Wait for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Attempts to put the two halves of a <code>UnixStream</code> back …","Attempts to put the two halves of a <code>UnixStream</code> back …","","","","","","","","","","","","","","","","","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to write a buffer to the stream, returning how many …","Tries to write a buffer to the stream, returning how many …","Tries to write several buffers to the stream, returning …","Tries to write several buffers to the stream, returning …","","","","","","","","Gets UID (user ID) of the process.","A type representing process and process group IDs.","Waits for the socket to become writable.","Waits for the socket to become writable.","Options and flags which can be used to configure how a …","Reading end of a Unix pipe.","Writing end of a Unix pipe.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Sender</code> from a <code>File</code>.","Creates a new <code>Receiver</code> from a <code>File</code>.","Creates a new <code>Sender</code> from a <code>File</code> without checking pipe …","Creates a new <code>Receiver</code> from a <code>File</code> without checking pipe …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a blank new set of options ready for configuration.","Creates a <code>Receiver</code> from a FIFO file with the options …","Creates a <code>Sender</code> from a FIFO file with the options …","","","Polls for read readiness.","","","Polls for write readiness.","","Waits for the pipe to become readable.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","","","","","","","","Tries to read data from the pipe into the provided buffer, …","Tries to read data from the pipe into the provided buffer, …","Tries to read data from the pipe into the provided …","Tries to write a buffer to the pipe, returning how many …","Tries to write several buffers to the pipe, returning how …","","","","Sets the option to skip the check for FIFO file type.","Waits for the pipe to become writable.","Builds Tokio Runtime with custom configuration values.","The flavor that executes all tasks on the current thread.","Runtime context guard.","Handle to the runtime.","The flavor that executes tasks across multiple threads.","The Tokio runtime.","The flavor of a <code>Runtime</code>.","Error returned by <code>try_current</code> when no Runtime has been …","Runs a future to completion on this <code>Handle</code>’s associated …","Runs a future to completion on the Tokio runtime. This is …","","","","","","","","","","","","","Creates the configured <code>Runtime</code>.","","","Returns a <code>Handle</code> view over the currently running <code>Runtime</code>.","","Enables both I/O and time drivers.","Enables the I/O driver.","Enables the time driver.","Enters the runtime context. This allows you to construct …","Enters the runtime context.","","","Sets the number of scheduler ticks after which the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Sets the number of scheduler ticks after which the …","Returns a handle to the runtime’s spawner.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the call failed because there is currently …","Returns true if the call failed because the Tokio context …","Specifies the limit for additional threads spawned by the …","Enables the I/O driver and configures the max number of …","Creates a new runtime instance with default configuration …","Returns a new builder with the current thread scheduler …","Returns a new builder with the multi thread scheduler …","Executes function <code>f</code> just before a thread is parked (goes …","Executes function <code>f</code> after each thread is started but …","Executes function <code>f</code> before each thread stops.","Executes function <code>f</code> just after a thread unparks (starts …","Returns the flavor of the current <code>Runtime</code>.","Shuts down the runtime, without waiting for any spawned …","Shuts down the runtime, waiting for at most <code>duration</code> for …","Spawns a future onto the Tokio runtime.","Spawns a future onto the Tokio runtime.","Runs the provided function on an executor dedicated to …","Runs the provided function on an executor dedicated to …","Sets a custom timeout for a thread in the blocking pool.","Sets name of threads spawned by the <code>Runtime</code>’s thread …","Sets a function used to generate the name of threads …","Sets the stack size (in bytes) for worker threads.","","","Returns a Handle view over the currently running Runtime","","","","","","","","","","","","","","","","","","","Sets the number of worker threads the <code>Runtime</code> will use.","Error returned from the <code>Semaphore::acquire</code> function.","The cell was already initialized when <code>OnceCell::set</code> was …","A barrier enables multiple tasks to synchronize the …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all tasks in …","The semaphore has been closed and cannot issue new permits.","The cell is currently being initialized.","The maximum number of permits which a semaphore can hold. …","A handle to a held <code>Mutex</code> that has had a function applied …","An asynchronous <code>Mutex</code>-like type.","A handle to a held <code>Mutex</code>. The guard can be held across any …","The semaphore has no available permits.","Notifies a single task to wake up.","A thread-safe cell that can be written to only once.","A owned handle to a held <code>Mutex</code> that has had a function …","An owned handle to a held <code>Mutex</code>.","Owned RAII structure used to release the exclusive write …","Owned RAII structure used to release the shared read …","Owned RAII structure used to release the exclusive write …","An owned permit from the semaphore.","An asynchronous reader-writer lock.","RAII structure used to release the exclusive write access …","RAII structure used to release the shared read access of a …","RAII structure used to release the exclusive write access …","Counting semaphore performing asynchronous permit …","A permit from the semaphore.","Errors that can be returned from <code>OnceCell::set</code>.","Error returned from the <code>Semaphore::try_acquire</code> function.","Error returned from the <code>Mutex::try_lock</code>, <code>RwLock::try_read</code> …","Acquires a permit from the semaphore.","Acquires <code>n</code> permits from the semaphore.","Acquires <code>n</code> permits from the semaphore.","Acquires a permit from the semaphore.","Adds <code>n</code> new permits to the semaphore.","Returns the current number of available permits.","Blockingly locks this <code>Mutex</code>. When the lock has been …","Blockingly locks this <code>Mutex</code>. When the lock has been …","Blockingly locks this <code>RwLock</code> with shared read access.","Blockingly locks this <code>RwLock</code> with exclusive write access.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A multi-producer, multi-consumer broadcast queue. Each …","","","","","Closes the semaphore.","Creates a new lock in an unlocked state ready for use.","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Creates a new empty <code>OnceCell</code> instance.","Create a new <code>Notify</code>, initialized without a permit.","Creates a new semaphore with the initial number of permits.","Creates a new <code>OnceCell</code> that contains the provided value.","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …","","","","","","","","","","","","","","","","","","","","","","","Atomically downgrades a write lock into a read lock …","Atomically downgrades a write lock into a read lock …","Makes a new <code>OwnedRwLockReadGuard</code> for a component of the …","Makes a new <code>RwLockReadGuard</code> for a component of the locked …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forgets the permit <strong>without</strong> releasing it back to the …","Forgets the permit <strong>without</strong> releasing it back to the …","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Named future types.","Returns a reference to the value currently stored in the …","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the value currently stored …","Gets the value currently in the <code>OnceCell</code>, or initialize it …","Gets the value currently in the <code>OnceCell</code>, or initialize it …","Returns <code>true</code> if the <code>OnceCell</code> currently contains a value, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the mutex, returning the underlying data.","Consumes the lock, returning the underlying data.","Takes the value from the cell, destroying the cell in the …","Converts this <code>OwnedRwLockWriteGuard</code> into an …","Converts this <code>RwLockWriteGuard</code> into an …","Whether <code>SetError</code> is <code>SetError::AlreadyInitializedError</code>.","Returns true if the semaphore is closed","Whether <code>SetError</code> is <code>SetError::InitializingError</code>","Returns <code>true</code> if this task from wait is the “leader task…","Locks this mutex, causing the current task to yield until …","Locks this mutex, causing the current task to yield until …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>OwnedMappedMutexGuard</code> for a component of the …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>OwnedMappedMutexGuard</code> for a component of the …","Makes a new <code>OwnedRwLockReadGuard</code> for a component of the …","Makes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …","Makes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …","Makes a new <code>RwLockReadGuard</code> for a component of the locked …","Makes a new <code>RwLockMappedWriteGuard</code> for a component of the …","Makes a new <code>RwLockMappedWriteGuard</code> for a component of the …","Merge two <code>SemaphorePermit</code> instances together, consuming …","Merge two <code>OwnedSemaphorePermit</code> instances together, …","A multi-producer, single-consumer queue for sending values …","Returns a reference to the original <code>Mutex</code>.","Returns a reference to the original <code>Arc&lt;Mutex&gt;</code>.","Creates a new lock in an unlocked state ready for use.","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Creates a new empty <code>OnceCell</code> instance.","Creates a new barrier that can block a given number of …","Create a new <code>Notify</code>, initialized without a permit.","Creates a new semaphore with the initial number of permits.","Creates a new <code>OnceCell</code> that contains the provided value, …","Wait for a notification.","Notifies a waiting task.","Notifies all waiting tasks.","A one-shot channel is used for sending a single message …","Locks this <code>RwLock</code> with shared read access, causing the …","Locks this <code>RwLock</code> with shared read access, causing the …","Returns the <code>Semaphore</code> from which this permit was acquired.","Sets the value of the <code>OnceCell</code> to the given value if the …","Takes ownership of the current value, leaving the cell …","","","","","","","","","","","","","","","","","Tries to acquire a permit from the semaphore.","Tries to acquire <code>n</code> permits from the semaphore.","Tries to acquire <code>n</code> permits from the semaphore.","Tries to acquire a permit from the semaphore.","Attempts to make a new <code>OwnedRwLockReadGuard</code> for a …","Attempts to make a new <code>RwLockReadGuard</code> for a component of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire the lock, and returns <code>TryLockError</code> if …","Attempts to acquire the lock, and returns <code>TryLockError</code> if …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>OwnedMappedMutexGuard</code> for a …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>OwnedMappedMutexGuard</code> for a …","Attempts to make a new <code>OwnedRwLockReadGuard</code> for a …","Attempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …","Attempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …","Attempts to make a new <code>RwLockReadGuard</code> for a component of …","Attempts to make a new <code>RwLockMappedWriteGuard</code> for a …","Attempts to make a new <code>RwLockMappedWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","","","","","","","","","Does not resolve until all tasks have rendezvoused here.","A single-producer, multi-consumer channel that only …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …","Locks this <code>RwLock</code> with exclusive write access, causing the …","Locks this <code>RwLock</code> with exclusive write access, causing the …","Receiving-half of the <code>broadcast</code> channel.","Sending-half of the <code>broadcast</code> channel.","Blocking receive to call outside of asynchronous contexts.","","","","","Create a bounded, multi-producer, multi-consumer channel …","","","","","Broadcast error types","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if there are no queued values.","Returns true if there aren’t any messages in the channel …","Returns the number of queued values.","Returns the number of messages that were sent into the …","Creates the sending-half of the <code>broadcast</code> channel.","Returns the number of active receivers","Receives the next value for this receiver.","Re-subscribes to the channel starting from the current …","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Attempts to send a value to all active <code>Receiver</code> handles, …","Creates a new <code>Receiver</code> handle that will receive values …","","","","","","Attempts to return a pending value on this receiver …","","","There are no more active senders implying no further …","There are no more active senders implying no further …","The channel is currently empty. There are still active …","The receiver lagged too far behind. Attempting to receive …","The receiver lagged too far behind and has been forcibly …","An error returned from the <code>recv</code> function on a <code>Receiver</code>.","Error returned by from the <code>send</code> function on a <code>Sender</code>.","An error returned from the <code>try_recv</code> function on a <code>Receiver</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Future returned from <code>Notify::notified()</code>.","","","","Adds this future to the list of futures that are ready to …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Owned permit to send one value into the channel.","Permits to send one value into the channel.","Receives values from the associated <code>Sender</code>.","Sends values to the associated <code>Receiver</code>.","Receive values from the associated <code>UnboundedSender</code>.","Send values to the associated <code>UnboundedReceiver</code>.","A sender that does not prevent the channel from being …","An unbounded sender that does not prevent the channel from …","Blocking receive to call outside of asynchronous contexts.","Blocking receive to call outside of asynchronous contexts.","Blocking send to call outside of asynchronous contexts.","","","","","","","","","","","","","","","","","Returns the current capacity of the channel.","Creates a bounded mpsc channel for communicating between …","","","","","","","","","Closes the receiving half of a channel without dropping it.","Closes the receiving half of a channel, without dropping …","Completes when the receiver has dropped.","Completes when the receiver has dropped.","Converts the <code>Sender</code> to a <code>WeakSender</code> that does not count …","Converts the <code>UnboundedSender</code> to a <code>WeakUnboundedSender</code> that …","","","Channel error types.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the channel has been closed. This happens when …","Checks if the channel has been closed. This happens when …","Returns the maximum buffer capacity of the channel.","Polls to receive the next message on this channel.","Polls to receive the next message on this channel.","Receives the next value for this receiver.","Receives the next value for this receiver.","Receives the next values for this receiver and extends …","Receives the next values for this receiver and extends …","Releases the reserved capacity <em>without</em> sending a message, …","Waits for channel capacity. Once capacity to send one …","Waits for channel capacity, moving the <code>Sender</code> and …","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if senders belong to the same channel.","Sends a value, waiting until there is capacity.","Sends a value using the reserved capacity.","Sends a value using the reserved capacity.","Attempts to send a message on this <code>UnboundedSender</code> without …","Sends a value, waiting until there is capacity, but only …","","","","","","","","","","","","","","","","","","","","","Tries to receive the next value for this receiver.","Tries to receive the next value for this receiver.","Tries to acquire a slot in the channel without waiting for …","Tries to acquire a slot in the channel without waiting for …","Attempts to immediately send a message on this <code>Sender</code>","","","","","","","","","Creates an unbounded mpsc channel for communicating …","Tries to convert a <code>WeakSender</code> into a <code>Sender</code>. This will …","Tries to convert a <code>WeakUnboundedSender</code> into an …","The receive half of the channel was explicitly closed or …","The receive half of the channel was explicitly closed or …","The <strong>channel</strong>’s sending half has become disconnected, and …","This <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …","The data could not be sent on the channel because the …","Error returned by the <code>Sender</code>.","Error returned by <code>Sender::send_timeout</code>].","The data could not be sent on the channel because the …","Error returned by <code>try_recv</code>.","This enumeration is the list of the possible error …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Receives a value from the associated <code>Sender</code>.","Sends a value to the associated <code>Receiver</code>.","Blocking receive to call outside of asynchronous contexts.","","","","","Creates a new one-shot channel for sending single values …","Prevents the associated <code>Sender</code> handle from sending a value.","Waits for the associated <code>Receiver</code> handle to close.","","","Oneshot error types.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the associated <code>Receiver</code> handle has been …","","Checks whether the oneshot channel has been closed, and if …","Attempts to send a value on this channel, returning it …","","","","","Attempts to receive a value.","","","The send half of the channel was dropped without sending a …","The send half of the channel has not yet sent a value.","Error returned by the <code>Future</code> implementation for <code>Receiver</code>.","Error returned by the <code>try_recv</code> function on <code>Receiver</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Receives values from the associated <code>Sender</code>.","Returns a reference to the inner value.","Sends values to the associated <code>Receiver</code>.","","Returns a reference to the most recently sent value.","Returns a reference to the most recently sent value","","","Returns a reference to the most recently sent value and …","","","","Waits for a change notification, then marks the newest …","Creates a new watch channel, returning the “send” and …","","","Completes when all receivers have dropped.","","","","Watch error types.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Checks if this channel contains a message that this …","Indicates if the borrowed value is considered as <em>changed</em> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the channel has been closed. This happens when …","Marks the state as changed.","Creates the sending-half of the <code>watch</code> channel.","Returns the number of receivers that currently exist.","Returns <code>true</code> if receivers belong to the same channel.","Sends a new value via the channel, notifying all receivers.","Modifies the watched value <strong>conditionally</strong> in-place, …","Modifies the watched value <strong>unconditionally</strong> in-place, …","Sends a new value via the channel, notifying all receivers …","Creates a new <code>Receiver</code> connected to this <code>Sender</code>.","","","","","","","","","","","Waits for a value that satisfies the provided condition.","Error produced when receiving a change notification.","Error produced when sending a value fails.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","An owned permission to abort a spawned task, without …","Task failed to execute to completion.","An owned permission to join on a task (await its …","A collection of tasks spawned on a Tokio runtime.","Context guard for LocalSet","A key for task-local data.","A set of tasks which are executed on the same thread.","Future for the <code>unconstrained</code> method.","Abort the task associated with the handle.","Abort the task associated with the handle.","Aborts all tasks on this <code>JoinSet</code>.","Returns a new <code>AbortHandle</code> that can be used to remotely …","Runs the provided blocking function on the current thread …","Runs a future to completion on the provided runtime, …","","","","","","","","","","","","","","","","","","","Removes all tasks from this <code>JoinSet</code> without aborting them.","","","","","","Enters the context of this <code>LocalSet</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Task-related futures.","Returns a copy of the task-local value if the task-local …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Consumes the join error, returning the object with which …","Returns true if the error was caused by the task being …","Returns whether the <code>JoinSet</code> is empty.","Checks if the task associated with this <code>AbortHandle</code> has …","Checks if the task associated with this <code>JoinHandle</code> has …","Returns true if the error was caused by the task panicking.","Waits until one of the tasks in the set completes and …","Returns the number of tasks currently in the <code>JoinSet</code>.","Create a new <code>JoinSet</code>.","Returns a new local task set.","","","","Polls for one of the tasks in the set to complete.","Runs a future to completion on the local set, returning …","Sets a value <code>T</code> as the task-local value for the future <code>F</code>.","Aborts all tasks and waits for them to finish shutting …","Spawns a new asynchronous task, returning a <code>JoinHandle</code> for …","Spawn the provided task on the <code>JoinSet</code>, returning an …","Runs the provided closure on a thread where blocking is …","Spawn the blocking code on the blocking threadpool and …","Spawn the blocking code on the blocking threadpool of the …","Spawns a <code>!Send</code> future on the current <code>LocalSet</code>.","Spawn the provided task on the current <code>LocalSet</code> and store …","Spawns a <code>!Send</code> task onto the local task set.","Spawn the provided task on the provided <code>LocalSet</code> and store …","Spawn the provided task on the provided runtime and store …","Sets a value <code>T</code> as the task-local value for the closure <code>F</code>.","","","","","","","","","","","","","","","","","","Consumes the join error, returning the object with which …","Accesses the current task-local and runs the provided …","","","","","","","","","Turn off cooperative scheduling for a future. The future …","Accesses the current task-local and runs the provided …","Yields execution back to the Tokio runtime.","A future that sets a value <code>T</code> of a task local for the …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Ticks as fast as possible until caught up.","Tick at multiples of <code>period</code> from when <code>tick</code> was called, …","","A measurement of a monotonically nondecreasing clock. …","Interval returned by <code>interval</code> and <code>interval_at</code>.","Defines the behavior of an <code>Interval</code> when it misses a tick.","Skips missed ticks and tick on the next multiple of <code>period</code> …","Future returned by <code>sleep</code> and <code>sleep_until</code>.","Future returned by <code>timeout</code> and <code>timeout_at</code>.","","","","","","","","","","","","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Returns the amount of time elapsed from another instant to …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","","","","","","Returns the instant at which the future will complete.","Returns <code>MissedTickBehavior::Burst</code>.","Returns the amount of time elapsed from another instant to …","Returns the amount of time elapsed since this instant was …","","","","","Time error types.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.","Gets a mutable reference to the underlying value in this …","Gets a reference to the underlying value in this timeout.","","Creates new <code>Interval</code> that yields with interval of <code>period</code>. …","Creates new <code>Interval</code> that yields with interval of <code>period</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes this timeout, returning the underlying value.","Convert the value into a <code>std::time::Instant</code>.","Returns <code>true</code> if <code>Sleep</code> has elapsed.","Returns the <code>MissedTickBehavior</code> strategy currently being …","Returns an instant corresponding to “now”.","","Returns the period of the interval.","","","Polls for the next instant in the interval to be reached.","Resets the interval to complete one period after the …","Resets the <code>Sleep</code> instance to a new deadline.","Resets the interval after the specified <code>std::time::Duration</code>…","Resets the interval to a <code>crate::time::Instant</code> deadline.","Resets the interval immediately.","Returns the amount of time elapsed from another instant to …","Sets the <code>MissedTickBehavior</code> strategy that should be used.","Waits until <code>duration</code> has elapsed.","Waits until <code>deadline</code> is reached.","","","","Completes when the next instant in the interval has been …","Requires a <code>Future</code> to complete before the specified …","Requires a <code>Future</code> to complete before the specified instant …","","","","","","","","","","","","","","","","","","Errors returned by <code>Timeout</code>.","Errors encountered by the timer implementation.","Creates an error representing a timer at capacity.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an error representing a misconfigured timer.","Returns <code>true</code> if the error was caused by the timer being at …","Returns <code>true</code> if the error was caused by the timer being …","Returns <code>true</code> if the error was caused by the timer being …","Creates an error representing a shutdown timer.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,1,5,5,0,0,0,0,0,0,0,0,0,1,5,5,0,1,2,2,2,5,1,5,1,5,2,1,5,29,31,17,25,32,33,18,34,35,6,20,10,2,1,5,29,31,17,25,32,33,18,34,35,6,20,10,6,10,2,197,197,2,2,1,5,1,5,5,19,198,198,17,18,6,20,10,0,0,0,25,0,0,1,5,1,5,198,198,2,2,199,199,2,1,5,29,31,17,25,32,33,18,34,35,6,20,10,2,1,5,29,31,17,25,32,33,18,34,35,6,20,20,20,10,18,35,6,20,10,18,6,20,10,18,35,6,20,10,2,2,2,2,2,2,1,5,29,31,17,25,32,33,18,34,35,6,20,10,18,35,6,20,10,5,1,5,29,31,5,1,5,1,5,5,9,9,31,25,6,20,10,18,198,198,2,6,20,10,35,34,5,42,6,20,10,19,17,18,6,20,10,9,31,25,33,6,20,10,35,34,11,29,17,25,32,18,6,20,10,9,31,25,33,6,20,10,9,31,25,33,6,20,10,9,9,31,25,6,20,10,2,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,198,198,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,198,198,2,2,1,0,200,200,200,200,2,18,199,199,0,0,198,198,42,6,20,10,200,200,5,2,197,197,1,5,2,1,5,29,31,17,25,32,33,18,34,35,6,20,10,2,1,5,29,31,17,25,32,33,18,34,35,6,20,10,2,1,5,29,31,17,25,32,33,18,34,35,6,20,10,2,2,0,29,6,20,10,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,0,0,0,0,58,58,58,58,58,63,64,65,58,63,64,65,63,64,63,64,58,58,63,64,65,58,63,64,65,63,64,64,58,64,58,63,64,58,63,64,65,58,58,58,58,58,58,58,58,58,63,64,58,63,64,58,63,64,65,58,63,64,65,63,64,58,63,64,65,58,58,58,0,0,0,0,0,0,0,0,67,70,67,73,68,74,75,70,71,67,73,68,74,75,70,71,68,74,75,71,67,73,74,75,70,67,73,68,74,75,70,71,67,73,68,74,75,70,71,74,73,68,74,75,71,67,73,68,74,75,70,71,67,73,68,74,75,70,71,73,67,68,74,75,70,71,73,67,73,68,74,75,70,71,73,68,71,67,68,74,75,70,71,68,71,74,74,74,74,73,68,73,67,73,68,74,75,70,71,0,74,74,74,73,73,73,68,75,71,68,74,74,68,74,75,71,71,67,70,68,71,68,74,74,68,71,68,71,74,75,74,75,74,75,74,75,74,75,74,75,68,71,68,71,68,71,68,71,68,74,75,71,68,74,75,71,74,75,74,75,74,75,73,74,75,73,73,74,75,73,74,75,74,73,68,74,74,74,73,68,73,73,73,73,73,74,67,68,74,75,68,71,73,68,74,75,70,71,0,73,74,67,67,73,68,68,74,74,75,75,70,70,71,71,67,73,68,74,75,70,71,68,74,75,71,74,74,68,71,68,71,68,71,74,75,74,75,74,75,74,75,74,75,74,75,68,71,68,71,67,68,74,67,73,68,74,75,70,71,75,0,68,74,75,71,0,0,0,0,0,95,96,85,86,95,96,85,86,100,95,96,85,86,100,86,95,96,85,86,100,100,86,95,96,85,86,100,95,96,85,86,100,96,86,95,96,85,86,95,85,95,96,85,86,96,86,95,85,95,85,96,86,96,86,96,86,95,85,95,96,85,86,85,86,100,95,96,85,86,100,95,96,85,86,100,95,85,95,85,95,85,96,86,96,86,95,96,85,86,100,96,86,0,0,0,0,0,0,0,72,97,98,87,88,72,97,98,87,88,101,93,72,97,98,87,88,101,93,93,93,88,93,93,72,97,98,87,88,101,101,93,88,72,97,98,87,88,101,93,93,0,93,72,97,98,87,88,101,93,72,98,88,97,98,87,88,97,98,87,88,93,0,0,98,88,97,87,98,88,98,88,98,88,97,87,97,98,87,88,87,88,93,101,72,97,98,87,88,101,93,72,97,98,87,88,101,93,97,87,97,87,97,87,98,88,98,88,72,97,98,87,88,101,93,93,0,98,88,0,0,0,106,107,106,107,108,106,107,108,106,107,108,108,108,108,106,107,108,106,107,106,107,106,107,108,106,107,106,108,108,108,106,107,107,106,106,106,106,107,106,107,108,108,106,107,108,106,107,107,107,107,106,106,108,106,107,108,106,0,115,0,0,115,0,0,0,110,112,113,110,114,116,112,115,113,110,114,116,112,115,113,110,110,110,112,113,113,113,110,112,115,115,113,113,110,114,116,116,112,115,113,110,114,116,112,115,113,112,113,110,114,116,112,115,116,116,113,113,112,113,113,113,113,113,113,110,112,112,110,112,110,112,113,113,113,113,110,116,110,113,110,114,116,112,115,113,110,114,116,112,115,113,110,114,116,112,115,113,0,146,0,0,145,146,122,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,122,122,122,127,127,130,130,127,130,133,147,135,128,129,138,139,149,136,145,124,122,123,126,140,141,142,131,132,143,146,127,130,133,147,135,128,129,138,139,149,136,145,124,122,123,126,140,141,142,131,132,143,146,0,133,135,133,135,122,127,130,133,136,122,133,130,127,130,133,136,128,129,138,139,140,141,142,131,132,143,128,129,138,139,141,142,132,143,141,132,141,132,133,128,129,138,139,123,126,140,141,142,131,132,143,133,145,146,133,145,146,127,130,133,147,135,128,128,129,129,138,138,139,139,149,149,136,145,145,124,124,122,123,126,140,140,141,141,142,142,131,131,132,132,143,143,146,146,123,126,127,127,127,130,130,130,133,133,133,147,135,128,129,138,139,149,136,145,124,122,123,126,140,141,142,131,132,143,146,0,133,127,130,133,133,133,133,127,130,133,147,135,128,129,138,139,149,136,145,124,122,123,126,140,141,142,131,132,143,146,127,130,133,141,132,146,122,146,135,127,127,128,129,138,139,140,141,142,131,132,143,123,126,0,128,129,127,130,133,147,136,122,133,136,136,136,0,130,130,126,133,133,133,135,128,129,138,139,149,145,124,140,141,142,131,132,143,146,122,122,122,122,141,132,127,130,133,147,135,128,129,138,139,149,136,145,124,122,123,126,140,141,142,131,132,143,146,127,130,133,147,135,128,129,138,139,149,136,145,124,122,123,126,140,141,142,131,132,143,146,127,127,128,129,138,139,140,141,142,131,132,143,130,130,130,130,127,130,133,147,135,128,129,138,139,149,136,145,124,122,123,126,140,141,142,131,132,143,146,147,0,130,130,130,0,0,152,154,152,154,152,0,154,154,154,152,0,154,152,154,152,154,152,154,152,154,152,154,154,152,152,154,152,154,154,154,154,152,154,152,152,154,152,153,156,156,153,156,0,0,0,155,153,156,155,153,156,153,156,153,156,153,156,153,156,155,155,153,153,156,156,155,153,156,155,153,156,153,156,155,153,156,155,153,156,155,153,156,155,153,156,0,151,151,151,151,151,151,151,151,151,151,151,151,0,0,0,0,0,0,0,0,157,158,159,159,161,164,165,157,162,163,158,159,161,164,165,157,162,163,158,159,0,159,161,162,163,159,161,162,163,157,158,159,162,159,162,164,165,0,159,161,164,165,157,162,163,158,159,161,164,165,157,162,163,158,159,161,164,165,157,162,163,158,159,162,159,157,158,157,158,157,158,165,159,159,159,162,159,164,165,162,159,159,161,162,163,159,161,164,165,157,162,163,158,159,161,164,165,157,162,163,158,157,158,159,159,159,159,161,164,165,157,162,163,158,0,161,163,168,166,167,167,168,0,0,166,0,0,160,168,167,166,160,168,167,166,160,168,167,166,160,168,167,166,160,168,167,166,160,168,167,166,160,160,168,168,167,167,166,166,160,168,168,167,166,160,168,167,166,160,168,167,166,160,168,167,166,160,168,167,166,160,168,167,166,160,168,167,166,0,0,169,171,169,171,169,0,169,171,171,169,0,171,169,171,169,171,169,169,171,169,171,171,171,169,171,169,169,171,169,172,172,0,0,170,172,170,172,170,172,170,172,170,172,170,172,170,170,172,172,170,172,170,172,170,172,170,172,170,172,170,172,170,172,0,0,0,173,173,175,175,174,173,173,175,174,173,0,173,173,175,174,173,175,0,173,175,174,173,175,174,173,174,173,175,174,175,173,175,175,173,175,175,175,175,175,173,173,175,174,173,175,174,173,175,174,173,0,0,177,176,177,176,177,176,177,176,177,177,177,177,176,176,177,176,177,176,177,176,177,176,177,176,177,176,177,176,0,0,0,0,0,0,0,0,178,120,179,120,0,180,178,182,120,181,183,179,180,187,178,182,120,181,183,179,180,187,179,180,179,178,120,181,179,180,180,178,182,182,120,181,183,179,180,178,182,120,181,183,179,180,187,0,183,178,182,120,181,183,179,180,187,120,180,187,182,182,179,178,120,182,179,179,179,180,120,180,187,179,180,183,179,0,179,0,179,179,0,179,180,179,179,183,182,178,182,120,181,183,179,180,187,178,182,120,181,183,179,180,187,182,183,178,182,120,181,183,179,180,187,0,183,0,0,188,188,188,188,188,188,188,188,188,188,188,190,190,0,0,0,0,190,0,0,189,189,189,190,192,193,191,189,190,192,193,191,189,189,189,189,190,189,190,189,191,190,189,189,189,190,189,190,0,189,190,192,193,191,189,189,190,192,193,191,189,193,193,189,0,0,189,190,192,193,191,193,191,193,189,191,192,189,189,192,193,191,192,192,191,192,192,192,189,192,0,0,189,189,189,192,0,0,189,190,189,190,192,193,191,189,190,192,193,191,189,190,192,193,191,0,0,195,195,196,195,196,195,195,196,196,195,195,196,196,195,196,195,196,195,195,195,195,195,195,195,196,195,196,195,196,195,196],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,3],4],[[2,3],4],[[2,3],4],[[5,5],5],[[1,1],1],[[5,5],5],[[1,1],4],[[5,5],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[8,[7]]],9],[[[10,[-1]]],[[8,[7]]],11],[2,3],[[-1,-2],[[0,[-1,-2]]],12,11],[[-1,-2],[[0,[-1,-2]]],12,11],[2,13],[2,4],[1,1],[5,5],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[5,5],14],[[[15,[-1]],3],4,[]],[[-1,3],4,16],[[-1,3],4,16],[[[15,[17]],3],4],[[[15,[[18,[-1]]]],3],4,19],[[[15,[[6,[-1]]]],3],4,[9,19]],[[[15,[[20,[-1]]]],3],4,[11,9]],[[[15,[[10,[-1]]]],3],4,11],[[-1,-2],[[22,[21]]],[11,16,12],[9,16,12]],[[-1,-2],[[24,[[4,[21,21]],23]]],[11,9,16,12],[11,9,16,12]],[[-1,-2],[[22,[21]]],[19,16,12],[9,16,12]],[25,4],[3,[[4,[25,25]]]],[[],17],[[1,1],26],[[5,5],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[2,[[8,[7]]]],[2,[[8,[7]]]],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[[2,27],28],[[1,27],28],[[5,27],28],[[[29,[-1]],27],28,30],[[[31,[-1]],27],28,30],[[17,27],28],[[25,27],28],[[32,27],28],[[33,27],28],[[[18,[-1]],27],28,30],[[[34,[-1]],27],28,30],[[[35,[-1]],27],28,30],[[[6,[-1]],27],28,30],[[[20,[-1]],27],28,30],[[[10,[-1]],27],28,30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[10,[[6,[-1]]]]],[[20,[-1]]],[]],[-1,-1,[]],[[[6,[[10,[-1]]]]],[[20,[-1]]],[]],[-1,-1,[]],[[[18,[-1]]],-1,11],[[[35,[-1]]],-1,[19,16]],[[[6,[-1]]],-1,9],[[[20,[-1]]],-1,[11,9]],[[[10,[-1]]],-1,11],[[[15,[[18,[-1]]]]],[[15,[-1]]],11],[[[15,[[6,[-1]]]]],[[15,[-1]]],9],[[[15,[[20,[-1]]]]],[[15,[-1]]],[11,9]],[[[15,[[10,[-1]]]]],[[15,[-1]]],11],[[[18,[-1]]],-1,11],[[[35,[-1]]],-1,[19,16]],[[[6,[-1]]],-1,9],[[[20,[-1]]],-1,[11,9]],[[[10,[-1]]],-1,11],[2,[[8,[7]]]],[[2,3],[[8,[7]]]],[2,[[8,[7]]]],[2,[[8,[7]]]],[2,[[8,[[36,[7]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[18,[-1]]],-1,11],[[[35,[-1]]],-1,[19,16]],[[[6,[-1]]],-1,9],[[[20,[-1]]],-1,[11,9]],[[[10,[-1]]],-1,11],[5,26],[1,26],[5,26],[[[29,[-1]],[31,[-1]]],26,[]],[[[31,[-1]],[29,[-1]]],26,[]],[5,26],[1,26],[5,26],[1,26],[5,26],[5,26],[-1,26,[]],[-1,26,[]],[[[31,[-1]]],26,9],[25,26],[[[6,[-1]]],26,9],[[[20,[-1]]],26,[11,9]],[[[10,[-1]]],26,[11,9]],[[[18,[-1]]],21,11],[-1,[[35,[-1]]],12],[-1,[[35,[-1]]],12],[[[8,[7]]],2],[-1,[[6,[-1]]],9],[-1,[[20,[-1]]],[11,9]],[-1,[[10,[-1]]],11],[[[35,[-1]]],[[22,[[38,[37]]]]],[19,16]],[[[34,[-1]]],[[22,[[38,[[39,[7]]]]]]],[19,16]],[[5,5],[[38,[14]]]],[[[15,[-1]],40],[[41,[[22,[21]]]]],[]],[[[15,[[6,[-1]]]],40],[[41,[[22,[21]]]]],[9,42]],[[[15,[[20,[-1]]]],40],[[41,[[22,[21]]]]],[11,9,42]],[[[15,[[10,[-1]]]],40],[[41,[[22,[21]]]]],[11,42]],[[[15,[-1]],40],[[41,[[22,[[8,[7]]]]]]],[]],[[[15,[17]],40],[[41,[[22,[[8,[7]]]]]]]],[[[15,[[18,[-1]]]],40],[[41,[[22,[[8,[7]]]]]]],19],[[[15,[[6,[-1]]]],40],[[41,[[22,[[8,[7]]]]]]],[9,19]],[[[15,[[20,[-1]]]],40],[[41,[[22,[[8,[7]]]]]]],[11,9]],[[[15,[[10,[-1]]]],40],[[41,[[22,[[8,[7]]]]]]],11],[[[15,[-1]],40],[[41,[[24,[4,23]]]]],[]],[[[15,[[31,[-1]]]],40],[[41,[[24,[4,23]]]]],9],[[[15,[25]],40],[[41,[[22,[4]]]]]],[[[15,[33]],40],[[41,[[24,[4,23]]]]]],[[[15,[[6,[-1]]]],40],[[41,[[22,[4]]]]],9],[[[15,[[20,[-1]]]],40],[[41,[[22,[4]]]]],[11,9]],[[[15,[[10,[-1]]]],40],[[41,[[22,[4]]]]],[11,9]],[[[15,[[35,[-1]]]],40],[[41,[[22,[[38,[37]]]]]]],19],[[[15,[[34,[-1]]]],40],[[41,[[22,[[38,[[39,[7]]]]]]]]],19],[[[15,[-1]],40,2],[[41,[[22,[4]]]]],[]],[[[15,[[29,[-1]]]],40,2],[[41,[[22,[4]]]]],11],[[[15,[17]],40,2],[[41,[[22,[4]]]]]],[[[15,[25]],40,2],[[41,[[22,[4]]]]]],[[[15,[32]],40,2],[[41,[[22,[4]]]]]],[[[15,[[18,[-1]]]],40,2],[[41,[[24,[4,23]]]]],11],[[[15,[[6,[-1]]]],40,2],[[41,[[22,[4]]]]],[9,11]],[[[15,[[20,[-1]]]],40,2],[[41,[[22,[4]]]]],[11,9]],[[[15,[[10,[-1]]]],40,2],[[41,[[22,[4]]]]],11],[[[15,[-1]],40],[[41,[[24,[4,23]]]]],[]],[[[15,[[31,[-1]]]],40],[[41,[[24,[4,23]]]]],9],[[[15,[25]],40],[[41,[[22,[4]]]]]],[[[15,[33]],40],[[41,[[24,[4,23]]]]]],[[[15,[[6,[-1]]]],40],[[41,[[22,[4]]]]],9],[[[15,[[20,[-1]]]],40],[[41,[[22,[4]]]]],[11,9]],[[[15,[[10,[-1]]]],40],[[41,[[22,[4]]]]],[11,9]],[[[15,[-1]],40,[8,[7]]],[[41,[[24,[3,23]]]]],[]],[[[15,[[31,[-1]]]],40,[8,[7]]],[[41,[[24,[3,23]]]]],9],[[[15,[25]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[[15,[33]],40,[8,[7]]],[[41,[[24,[3,23]]]]]],[[[15,[[6,[-1]]]],40,[8,[7]]],[[41,[[22,[3]]]]],9],[[[15,[[20,[-1]]]],40,[8,[7]]],[[41,[[22,[3]]]]],[11,9]],[[[15,[[10,[-1]]]],40,[8,[7]]],[[41,[[22,[3]]]]],[11,9]],[[[15,[-1]],40,[8,[43]]],[[41,[[24,[3,23]]]]],[]],[[[15,[-1]],40,[8,[43]]],[[41,[[24,[3,23]]]]],[]],[[[15,[[31,[-1]]]],40,[8,[43]]],[[41,[[24,[3,23]]]]],9],[[[15,[25]],40,[8,[43]]],[[41,[[24,[3,23]]]]]],[[[15,[[6,[-1]]]],40,[8,[43]]],[[41,[[22,[3]]]]],9],[[[15,[[20,[-1]]]],40,[8,[43]]],[[41,[[22,[3]]]]],[11,9]],[[[15,[[10,[-1]]]],40,[8,[43]]],[[41,[[22,[3]]]]],[11,9]],[[2,[8,[7]]],4],[[-1,[8,[7]]],[[0,[-1]]],16],[[-1,[8,[7]]],[[0,[-1]]],16],[[-1,-2],[[0,[-1,-2]]],[12,16],44],[[-1,-2],[[0,[-1,-2]]],[12,16],44],[[-1,[8,[7]]],[[0,[-1]]],16],[[-1,[8,[7]]],[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[[-1,37],[[0,[-1]]],16],[[-1,37],[[0,[-1]]],16],[[-1,[39,[7]]],[[0,[-1]]],16],[[-1,[39,[7]]],[[0,[-1]]],16],[[-1,37],[[0,[-1]]],16],[[-1,37],[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[[-1,7,[39,[7]]],[[0,[-1]]],16],[[-1,7,[39,[7]]],[[0,[-1]]],16],[2,3],[2,3],[[1,1],[[38,[1]]]],[7,32],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[[-1,45],[[0,[-1]]],16],[[-1,45],[[0,[-1]]],16],[[2,3],4],[[[18,[-1]],21],4,11],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[[],33],[-1,[[4,[[29,[-1]],[31,[-1]]]]],[11,9]],[[-1,7],[[34,[-1]]],[12,16]],[[-1,7],[[34,[-1]]],[12,16]],[[[15,[-1]],45],[[22,[4]]],[]],[[[15,[[6,[-1]]]],45],[[22,[4]]],[9,42]],[[[15,[[20,[-1]]]],45],[[22,[4]]],[11,9,42]],[[[15,[[10,[-1]]]],45],[[22,[4]]],[11,42]],[-1,[[0,[-1]]],16],[-1,[[0,[-1]]],16],[[5,5],5],[[2,3],2],[[-1,21],[[18,[-1]]],12],[[-1,21],[[18,[-1]]],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[2,[[8,[[36,[7]]]]]],[[[8,[[36,[7]]]]],2],0,[[[29,[-1]],[31,[-1]]],-1,16],[[3,-1],[[6,[-1]]],9],[[3,3,-1],[[20,[-1]]],[11,9]],[[3,-1],[[10,[-1]]],11],[[-1,[8,[7]]],[[0,[-1]]],16],[[-1,[8,[7]]],[[0,[-1]]],16],[[-1,[8,[7]]],[[0,[-1]]],16],[[-1,[8,[7]]],[[0,[-1]]],16],[[-1,-2],[[0,[-1,-2]]],[12,16],47],[[-1,-2],[[0,[-1,-2]]],[12,16],47],[[-1,-2],[[0,[-1,-2]]],[12,16],47],[[-1,-2],[[0,[-1,-2]]],[12,16],47],[[-1,48],[[0,[-1]]],16],[[-1,48],[[0,[-1]]],16],[[-1,48],[[0,[-1]]],16],[[-1,48],[[0,[-1]]],16],[[-1,49],[[0,[-1]]],16],[[-1,49],[[0,[-1]]],16],[[-1,49],[[0,[-1]]],16],[[-1,49],[[0,[-1]]],16],[[-1,50],[[0,[-1]]],16],[[-1,50],[[0,[-1]]],16],[[-1,50],[[0,[-1]]],16],[[-1,50],[[0,[-1]]],16],[[-1,51],[[0,[-1]]],16],[[-1,51],[[0,[-1]]],16],[[-1,51],[[0,[-1]]],16],[[-1,51],[[0,[-1]]],16],[[-1,52],[[0,[-1]]],16],[[-1,52],[[0,[-1]]],16],[[-1,52],[[0,[-1]]],16],[[-1,52],[[0,[-1]]],16],[[-1,53],[[0,[-1]]],16],[[-1,53],[[0,[-1]]],16],[[-1,53],[[0,[-1]]],16],[[-1,53],[[0,[-1]]],16],[[-1,54],[[0,[-1]]],16],[[-1,54],[[0,[-1]]],16],[[-1,55],[[0,[-1]]],16],[[-1,55],[[0,[-1]]],16],[[-1,55],[[0,[-1]]],16],[[-1,55],[[0,[-1]]],16],[[-1,56],[[0,[-1]]],16],[[-1,56],[[0,[-1]]],16],[[-1,56],[[0,[-1]]],16],[[-1,56],[[0,[-1]]],16],[[-1,57],[[0,[-1]]],16],[[-1,57],[[0,[-1]]],16],[[-1,57],[[0,[-1]]],16],[[-1,57],[[0,[-1]]],16],[[-1,21],[[0,[-1]]],16],[[-1,21],[[0,[-1]]],16],[[-1,21],[[0,[-1]]],16],[[-1,21],[[0,[-1]]],16],[[-1,7],[[0,[-1]]],16],[[-1,7],[[0,[-1]]],16],[[-1,[8,[43]]],[[0,[-1]]],16],[[-1,[8,[43]]],[[0,[-1]]],16],0,0,0,0,[[[58,[-1]]],59,60],[[[58,[-1]]],61,60],[[[58,[-1]],1,-2],[[22,[-3]]],60,62,[]],[[[58,[-1]],1,-2],[[22,[-3]]],60,62,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]]],4,60],[[[64,[-1]]],4,60],[[[63,[-1]],5],4,60],[[[64,[-1]],5],4,60],[[[58,[-1]]],4,60],[[[58,[-1]],27],28,[30,60]],[[[63,[-1]],27],28,[30,60]],[[[64,[-1]],27],28,[30,60]],[[65,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[63,[-1]]],-1,60],[[[64,[-1]]],-1,60],[[[64,[-1]]],-1,60],[[[58,[-1]]],-1,60],[[[64,[-1]]],[[58,[-1]]],60],[[[58,[-1]]],-1,60],[[[63,[-1]]],[[58,[-1]]],60],[[[64,[-1]]],[[58,[-1]]],60],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1]]],-1,60],[-1,[[22,[[58,[-1]]]]],[60,60]],[[[58,[-1]],40],[[41,[[22,[[63,[-1]]]]]]],60],[[[58,[-1]],40],[[41,[[22,[[64,[-1]]]]]]],60],[[[58,[-1]],40],[[41,[[22,[[63,[-1]]]]]]],60],[[[58,[-1]],40],[[41,[[22,[[64,[-1]]]]]]],60],[[[58,[-1]]],[[22,[[63,[-1]]]]],60],[[[58,[-1]]],[[22,[[64,[-1]]]]],60],[[[58,[-1]],1],[[22,[[63,[-1]]]]],60],[[[63,[-1]]],5,60],[[[64,[-1]]],5,60],[[[58,[-1]],1],[[22,[[64,[-1]]]]],60],[[[63,[-1]]],4,60],[[[64,[-1]]],4,60],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[63,[-1]],-2],[[24,[[22,[-3]],65]]],60,66,[]],[[[64,[-1]],-2],[[24,[[22,[-3]],65]]],60,66,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[-1,1],[[22,[[58,[-1]]]]],[60,60]],[[[58,[-1]]],[[22,[[63,[-1]]]]],60],[[[58,[-1]]],[[22,[[64,[-1]]]]],60],0,0,0,0,0,0,0,0,[67,[[22,[[4,[68,69]]]]]],[70,[[22,[[4,[71,72]]]]]],[67,59],[73,59],[68,59],[74,59],[75,59],[70,59],[71,59],[67,61],[73,61],[68,61],[74,61],[75,61],[70,61],[71,61],[[68,1,-1],[[22,[-2]]],62,[]],[[74,1,-1],[[22,[-2]]],62,[]],[[75,1,-1],[[22,[-2]]],62,[]],[[71,1,-1],[[22,[-2]]],62,[]],[-1,[[22,[67]]],76],[[73,69],[[22,[4]]]],[-1,[[22,[74]]],76],[-1,[[22,[75]]],[[78,[77]]]],[-1,[[22,[70]]],[[78,[77]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[74,[[22,[26]]]],[[73,69],[[22,[68]]]],[-1,[[22,[68]]],76],[[74,-1],[[22,[4]]],76],[[75,-1],[[22,[4]]],[[78,[77]]]],[-1,[[22,[71]]],[[78,[77]]]],[[67,27],28],[[73,27],28],[[68,27],28],[[74,27],28],[[75,27],28],[[70,27],28],[[71,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[61,73],[79,[[22,[67]]]],[80,[[22,[68]]]],[81,[[22,[74]]]],[82,[[22,[75]]]],[83,[[22,[70]]]],[84,[[22,[71]]]],[80,73],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[73,61],[68,[[4,[85,86]]]],[71,[[4,[87,88]]]],[67,[[22,[79]]]],[68,[[22,[80]]]],[74,[[22,[81]]]],[75,[[22,[82]]]],[70,[[22,[83]]]],[71,[[22,[84]]]],[68,26],[71,26],[[74,89,89],[[22,[4]]]],[[74,90,57],[[22,[4]]]],[[74,89,89],[[22,[4]]]],[[74,90,57],[[22,[4]]]],[73,[[22,[[38,[91]]]]]],[68,[[22,[[38,[91]]]]]],[[73,57],[[22,[67]]]],[67,[[22,[69]]]],[73,[[22,[69]]]],[68,[[22,[69]]]],[74,[[22,[69]]]],[75,[[22,[72]]]],[70,[[22,[72]]]],[71,[[22,[72]]]],[-1,[[22,[[0,[92]]]]],76],[74,[[22,[26]]]],[74,[[22,[26]]]],[74,[[22,[57]]]],[[],[[22,[73]]]],[[],[[22,[73]]]],[73,[[22,[26]]]],[68,[[22,[26]]]],[[],[[22,[[4,[75,75]]]]]],[[],[[22,[[4,[71,71]]]]]],[[68,[8,[7]]],[[22,[3]]]],[[74,[8,[7]]],[[22,[[4,[3,69]]]]]],[74,[[22,[69]]]],[68,[[22,[69]]]],[74,[[22,[69]]]],[75,[[22,[72]]]],[71,[[22,[72]]]],[71,[[22,[93]]]],[[67,40],[[41,[[22,[[4,[68,69]]]]]]]],[[70,40],[[41,[[22,[[4,[71,72]]]]]]]],[[[15,[68]],40],[[41,[[22,[4]]]]]],[[[15,[71]],40],[[41,[[22,[4]]]]]],[[68,40,2],[[41,[[22,[3]]]]]],[[74,40,2],[[41,[[22,[69]]]]]],[[74,40],[[41,[[22,[69]]]]]],[[[15,[68]],40,2],[[41,[[22,[4]]]]]],[[[15,[71]],40,2],[[41,[[22,[4]]]]]],[[68,40],[[41,[[22,[4]]]]]],[[71,40],[[41,[[22,[4]]]]]],[[74,40,2],[[41,[[22,[4]]]]]],[[75,40,2],[[41,[[22,[4]]]]]],[[74,40,2],[[41,[[22,[69]]]]]],[[75,40,2],[[41,[[22,[72]]]]]],[[74,40],[[41,[[22,[4]]]]]],[[75,40],[[41,[[22,[4]]]]]],[[74,40,[8,[7]]],[[41,[[22,[3]]]]]],[[75,40,[8,[7]]],[[41,[[22,[3]]]]]],[[74,40],[[41,[[22,[4]]]]]],[[75,40],[[41,[[22,[4]]]]]],[[74,40,[8,[7]],69],[[41,[[22,[3]]]]]],[[75,40,[8,[7]],-1],[[41,[[22,[3]]]]],[[78,[77]]]],[[[15,[68]],40],[[41,[[22,[4]]]]]],[[[15,[71]],40],[[41,[[22,[4]]]]]],[[[15,[68]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[[15,[71]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[68,40],[[41,[[22,[4]]]]]],[[71,40],[[41,[[22,[4]]]]]],[[[15,[68]],40,[8,[43]]],[[41,[[22,[3]]]]]],[[[15,[71]],40,[8,[43]]],[[41,[[22,[3]]]]]],[68,[[22,[4]]]],[74,[[22,[4]]]],[75,[[22,[4]]]],[71,[[22,[4]]]],[[68,1],[[22,[5]]]],[[74,1],[[22,[5]]]],[[75,1],[[22,[5]]]],[[71,1],[[22,[5]]]],[[74,[8,[7]]],[[22,[3]]]],[[75,[8,[7]]],[[22,[3]]]],[[74,-1],[[22,[3]]],44],[[75,-1],[[22,[3]]],44],[[74,-1],[[22,[[4,[3,69]]]]],44],[[75,-1],[[22,[[4,[3,72]]]]],44],[73,[[22,[57]]]],[[74,[8,[7]]],[[22,[[4,[3,69]]]]]],[[75,[8,[7]]],[[22,[[4,[3,72]]]]]],[73,[[22,[26]]]],[73,[[22,[26]]]],[[74,[8,[7]]],[[22,[3]]]],[[75,[8,[7]]],[[22,[3]]]],[73,[[22,[57]]]],[[74,[8,[7]],-1],[[22,[3]]],76],[[75,[8,[7]],-1],[[22,[3]]],[[78,[77]]]],[[74,26],[[22,[4]]]],[[73,[38,[91]]],[[22,[4]]]],[[68,[38,[91]]],[[22,[4]]]],[[74,26],[[22,[4]]]],[[74,26],[[22,[4]]]],[[74,57],[[22,[4]]]],[[73,26],[[22,[4]]]],[[68,26],[[22,[4]]]],[[73,57],[[22,[4]]]],[[73,26],[[22,[4]]]],[[73,26],[[22,[4]]]],[[73,57],[[22,[4]]]],[[73,57],[[22,[4]]]],[[74,57],[[22,[4]]]],[[67,57],[[22,[4]]]],[[68,57],[[22,[4]]]],[[74,57],[[22,[4]]]],[[75,94],[[22,[4]]]],[68,[[4,[95,96]]]],[71,[[4,[97,98]]]],[73,[[22,[[38,[23]]]]]],[68,[[22,[[38,[23]]]]]],[74,[[22,[[38,[23]]]]]],[75,[[22,[[38,[23]]]]]],[70,[[22,[[38,[23]]]]]],[71,[[22,[[38,[23]]]]]],0,[73,[[22,[57]]]],[74,[[22,[57]]]],[79,[[24,[67]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[80,[[24,[68]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[81,[[24,[74]]]],[82,[[24,[75]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[83,[[22,[70]]]],[-1,[[24,[-2]]],[],[]],[84,[[22,[71]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[68,1,-1],[[22,[-2]]],66,[]],[[74,1,-1],[[22,[-2]]],66,[]],[[75,1,-1],[[22,[-2]]],66,[]],[[71,1,-1],[[22,[-2]]],66,[]],[[74,[8,[7]]],[[22,[[4,[3,69]]]]]],[74,[[22,[69]]]],[[68,[8,[7]]],[[22,[3]]]],[[71,[8,[7]]],[[22,[3]]]],[[68,-1],[[22,[3]]],44],[[71,-1],[[22,[3]]],44],[[68,[8,[99]]],[[22,[3]]]],[[71,[8,[99]]],[[22,[3]]]],[[74,[8,[7]]],[[22,[3]]]],[[75,[8,[7]]],[[22,[3]]]],[[74,-1],[[22,[3]]],44],[[75,-1],[[22,[3]]],44],[[74,-1],[[22,[[4,[3,69]]]]],44],[[75,-1],[[22,[[4,[3,72]]]]],44],[[74,[8,[7]]],[[22,[[4,[3,69]]]]]],[[75,[8,[7]]],[[22,[[4,[3,72]]]]]],[[74,[8,[7]]],[[22,[3]]]],[[75,[8,[7]]],[[22,[3]]]],[[74,[8,[7]],69],[[22,[3]]]],[[75,[8,[7]],-1],[[22,[3]]],[[78,[77]]]],[[68,[8,[7]]],[[22,[3]]]],[[71,[8,[7]]],[[22,[3]]]],[[68,[8,[43]]],[[22,[3]]]],[[71,[8,[43]]],[[22,[3]]]],[67,[[22,[57]]]],[68,[[22,[57]]]],[74,[[22,[57]]]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[],[[22,[75]]]],0,[68,[[22,[4]]]],[74,[[22,[4]]]],[75,[[22,[4]]]],[71,[[22,[4]]]],0,0,0,0,0,[95,68],[96,68],[85,68],[86,68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[86,4],[[95,27],28],[[96,27],28],[[85,27],28],[[86,27],28],[[100,27],28],[[100,27],28],[86,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[96,26],[86,26],[95,[[22,[69]]]],[96,[[22,[69]]]],[85,[[22,[69]]]],[86,[[22,[69]]]],[[95,[8,[7]]],[[22,[3]]]],[[85,[8,[7]]],[[22,[3]]]],[95,[[22,[69]]]],[96,[[22,[69]]]],[85,[[22,[69]]]],[86,[[22,[69]]]],[[[15,[96]],40],[[41,[[22,[4]]]]]],[[[15,[86]],40],[[41,[[22,[4]]]]]],[[95,40,2],[[41,[[22,[3]]]]]],[[85,40,2],[[41,[[22,[3]]]]]],[[[15,[95]],40,2],[[41,[[22,[4]]]]]],[[[15,[85]],40,2],[[41,[[22,[4]]]]]],[[[15,[96]],40],[[41,[[22,[4]]]]]],[[[15,[86]],40],[[41,[[22,[4]]]]]],[[[15,[96]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[[15,[86]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[[15,[96]],40,[8,[43]]],[[41,[[22,[3]]]]]],[[[15,[86]],40,[8,[43]]],[[41,[[22,[3]]]]]],[95,[[22,[4]]]],[85,[[22,[4]]]],[[95,1],[[22,[5]]]],[[96,1],[[22,[5]]]],[[85,1],[[22,[5]]]],[[86,1],[[22,[5]]]],[[85,86],[[24,[68,100]]]],[[86,85],[[24,[68,100]]]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[95,[8,[7]]],[[22,[3]]]],[[85,[8,[7]]],[[22,[3]]]],[[95,-1],[[22,[3]]],44],[[85,-1],[[22,[3]]],44],[[95,[8,[99]]],[[22,[3]]]],[[85,[8,[99]]],[[22,[3]]]],[[96,[8,[7]]],[[22,[3]]]],[[86,[8,[7]]],[[22,[3]]]],[[96,[8,[43]]],[[22,[3]]]],[[86,[8,[43]]],[[22,[3]]]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[96,[[22,[4]]]],[86,[[22,[4]]]],0,0,0,0,0,0,0,[72,[[38,[77]]]],[97,71],[98,71],[87,71],[88,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[93,93],[[-1,-2],4,[],[]],[88,4],[[93,93],26],[[-1,-2],26,[],[]],[[72,27],28],[[97,27],28],[[98,27],28],[[87,27],28],[[88,27],28],[[101,27],28],[[101,27],28],[[93,27],28],[88,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[93,102],0,[[93,-1],4,103],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[72,26],[98,26],[88,26],[97,[[22,[72]]]],[98,[[22,[72]]]],[87,[[22,[72]]]],[88,[[22,[72]]]],[97,[[22,[72]]]],[98,[[22,[72]]]],[87,[[22,[72]]]],[88,[[22,[72]]]],[93,[[38,[104]]]],0,0,[[[15,[98]],40],[[41,[[22,[4]]]]]],[[[15,[88]],40],[[41,[[22,[4]]]]]],[[[15,[97]],40,2],[[41,[[22,[4]]]]]],[[[15,[87]],40,2],[[41,[[22,[4]]]]]],[[[15,[98]],40],[[41,[[22,[4]]]]]],[[[15,[88]],40],[[41,[[22,[4]]]]]],[[[15,[98]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[[15,[88]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[[15,[98]],40,[8,[43]]],[[41,[[22,[3]]]]]],[[[15,[88]],40,[8,[43]]],[[41,[[22,[3]]]]]],[97,[[22,[4]]]],[87,[[22,[4]]]],[[97,1],[[22,[5]]]],[[98,1],[[22,[5]]]],[[87,1],[[22,[5]]]],[[88,1],[[22,[5]]]],[[87,88],[[24,[71,101]]]],[[88,87],[[24,[71,101]]]],[-1,-2,[],[]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[97,[8,[7]]],[[22,[3]]]],[[87,[8,[7]]],[[22,[3]]]],[[97,-1],[[22,[3]]],44],[[87,-1],[[22,[3]]],44],[[97,[8,[99]]],[[22,[3]]]],[[87,[8,[99]]],[[22,[3]]]],[[98,[8,[7]]],[[22,[3]]]],[[88,[8,[7]]],[[22,[3]]]],[[98,[8,[43]]],[[22,[3]]]],[[88,[8,[43]]],[[22,[3]]]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[93,105],0,[98,[[22,[4]]]],[88,[[22,[4]]]],0,0,0,[106,59],[107,59],[106,61],[107,61],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[108,108],[[-1,-2],4,[],[]],[[],108],[[108,27],28],[[106,27],28],[[107,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[109,[[22,[106]]]],[109,[[22,[107]]]],[109,[[22,[106]]]],[109,[[22,[107]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[106,26],[[],108],[[108,-1],[[22,[107]]],[[78,[77]]]],[[108,-1],[[22,[106]]],[[78,[77]]]],[[[15,[106]],40],[[41,[[22,[4]]]]]],[[[15,[107]],40,2],[[41,[[22,[4]]]]]],[[107,40],[[41,[[22,[4]]]]]],[[[15,[106]],40],[[41,[[22,[4]]]]]],[[[15,[106]],40,[8,[7]]],[[41,[[22,[3]]]]]],[[106,40],[[41,[[22,[4]]]]]],[[[15,[106]],40,[8,[43]]],[[41,[[22,[3]]]]]],[107,[[22,[4]]]],[[106,1],[[22,[5]]]],[[107,1],[[22,[5]]]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[107,[8,[7]]],[[22,[3]]]],[[107,-1],[[22,[3]]],44],[[107,[8,[99]]],[[22,[3]]]],[[106,[8,[7]]],[[22,[3]]]],[[106,[8,[43]]],[[22,[3]]]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[108,26],108],[106,[[22,[4]]]],0,0,0,0,0,0,0,0,[[110,-1],[],111],[[112,-1],[],111],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,[[22,[112]]]],[110,110],[[-1,-2],4,[],[]],[[],110],[112,4],[113,113],[113,113],[113,113],[110,114],[112,114],[[115,115],26],[[-1,-2],26,[],[]],[[113,57],113],[[113,27],28],[[110,27],28],[[114,27],28],[[116,27],28],[[116,27],28],[[112,27],28],[[115,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[113,57],113],[112,110],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,26],[116,26],[[113,3],113],[[113,3],113],[[],[[22,[112]]]],[[],113],[[],113],[[113,-1],113,[117,118,119]],[[113,-1],113,[117,118,119]],[[113,-1],113,[117,118,119]],[[113,-1],113,[117,118,119]],[110,115],[112,4],[[112,91],4],[[110,-1],120,[111,118]],[[112,-1],120,[111,118]],[[110,-1],[[120,[-2]]],[66,118],118],[[112,-1],[[120,[-2]]],[66,118],118],[[113,91],113],[[113,-1],113,[[121,[37]]]],[[113,-1],113,[117,118,119]],[[113,3],113],[-1,-2,[],[]],[-1,37,[]],[[],[[24,[110,116]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[113,3],113],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[122,[[24,[123,124]]]],[[122,57],[[24,[123,124]]]],[[[125,[122]],57],[[24,[126,124]]]],[[[125,[122]]],[[24,[126,124]]]],[[122,3],4],[122,3],[[[127,[-1]]],[[128,[-1]]],12],[[[125,[[127,[-1]]]]],[[129,[-1]]],12],[[[130,[-1]]],[[131,[-1]]],12],[[[130,[-1]]],[[132,[-1]]],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[133,[-1]]],[[133,[-1]]],134],[135,135],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[122,4],[-1,[[127,[-1]]],[12,12]],[-1,[[130,[-1]]],[12,12]],[[],[[133,[-1]]],[]],[[],136],[3,122],[-1,[[133,[-1]]],[]],[[-1,57],[[130,[-1]]],[12,12]],[[],[[127,[-1]]],137],[[],[[130,[-1]]],[137,12]],[[],[[133,[-1]]],[]],[[],136],[[[128,[-1]]],[],12],[[[129,[-1]]],[],12],[[[138,[-1]]],[],12],[[[139,[-1,-2]]],[],12,12],[[[140,[-1,-2]]],-2,12,12],[[[141,[-1]]],-1,12],[[[142,[-1,-2]]],-2,12,12],[[[131,[-1]]],-1,12],[[[132,[-1]]],-1,12],[[[143,[-1]]],-1,12],[[[128,[-1]]],[],12],[[[129,[-1]]],[],12],[[[138,[-1]]],[],12],[[[139,[-1,-2]]],[],12,12],[[[141,[-1]]],-1,12],[[[142,[-1,-2]]],-2,12,12],[[[132,[-1]]],-1,12],[[[143,[-1]]],-1,12],[[[141,[-1]]],[[140,[-1]]],12],[[[132,[-1]]],[[131,[-1]]],12],[[[141,[-1]],-2],[[140,[-1,-3]]],12,66,12],[[[132,[-1]],-2],[[131,[-3]]],12,66,12],[[[133,[-1]]],4,[]],[[[128,[-1]]],4,12],[[[129,[-1]]],4,12],[[[138,[-1]]],4,12],[[[139,[-1,-2]]],4,12,12],[123,4],[126,4],[[[140,[-1,-2]]],4,12,12],[[[141,[-1]]],4,12],[[[142,[-1,-2]]],4,12,12],[[[131,[-1]]],4,12],[[[132,[-1]]],4,12],[[[143,[-1]]],4,12],[[[133,[-1]],[133,[-1]]],26,144],[[145,145],26],[[[146,[-1]],[146,[-1]]],26,144],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[[127,[-1]],27],28,[30,12]],[[[130,[-1]],27],28,[30,12]],[[[133,[-1]],27],28,30],[[147,27],28],[[135,27],28],[[[128,[-1]],27],28,[12,148]],[[[128,[-1]],27],28,[12,30]],[[[129,[-1]],27],28,[12,30]],[[[129,[-1]],27],28,[12,148]],[[[138,[-1]],27],28,[12,148]],[[[138,[-1]],27],28,[12,30]],[[[139,[-1,-2]],27],28,12,[12,30]],[[[139,[-1,-2]],27],28,12,[12,148]],[[149,27],28],[[149,27],28],[[136,27],28],[[145,27],28],[[145,27],28],[[124,27],28],[[124,27],28],[[122,27],28],[[123,27],28],[[126,27],28],[[[140,[-1,-2]],27],28,12,[30,12]],[[[140,[-1,-2]],27],28,12,[148,12]],[[[141,[-1]],27],28,[30,12]],[[[141,[-1]],27],28,[148,12]],[[[142,[-1,-2]],27],28,12,[30,12]],[[[142,[-1,-2]],27],28,12,[148,12]],[[[131,[-1]],27],28,[30,12]],[[[131,[-1]],27],28,[148,12]],[[[132,[-1]],27],28,[30,12]],[[[132,[-1]],27],28,[148,12]],[[[143,[-1]],27],28,[148,12]],[[[143,[-1]],27],28,[30,12]],[[[146,[-1]],27],28,30],[[[146,[-1]],27],28,[]],[123,4],[126,4],[-1,[[127,[-1]]],[]],[-1,-1,[]],[150,-1,[]],[-1,[[130,[-1]]],[]],[-1,-1,[]],[150,-1,[]],[150,-1,[]],[-1,[[133,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[133,[-1]]],[[38,[-1]]],[]],[[[127,[-1]]],-1,12],[[[130,[-1]]],-1,12],[[[133,[-1]]],[[38,[-1]]],[]],[[[133,[-1]],-2],-1,[],66],[[[133,[-1]],-2],[[24,[-1,-3]]],[],66,[]],[[[133,[-1]]],26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[127,[-1]]],-1,[12,12]],[[[130,[-1]]],-1,[12,12]],[[[133,[-1]]],[[38,[-1]]],[]],[[[141,[-1]]],[[142,[-1]]],12],[[[132,[-1]]],[[143,[-1]]],12],[[[146,[-1]]],26,[]],[122,26],[[[146,[-1]]],26,[]],[135,26],[[[127,[-1]]],[[128,[-1]]],12],[[[125,[[127,[-1]]]]],[[129,[-1]]],12],[[[128,[-1]],-2],[[138,[-3]]],12,66,12],[[[129,[-1]],-2],[[139,[-1,-3]]],12,66,12],[[[138,[-1]],-2],[[138,[-3]]],12,66,[]],[[[139,[-1,-2]],-3],[[139,[-1,-4]]],12,12,66,[]],[[[140,[-1,-2]],-3],[[140,[-1,-4]]],12,12,66,12],[[[141,[-1]],-2],[[142,[-1,-3]]],12,66,12],[[[142,[-1,-2]],-3],[[142,[-1,-4]]],12,12,66,12],[[[131,[-1]],-2],[[131,[-3]]],12,66,12],[[[132,[-1]],-2],[[143,[-3]]],12,66,12],[[[143,[-1]],-2],[[143,[-3]]],12,66,12],[[123,123],4],[[126,126],4],0,[[[128,[-1]]],[[127,[-1]]],12],[[[129,[-1]]],[[125,[[127,[-1]]]]],12],[-1,[[127,[-1]]],[12,12]],[-1,[[130,[-1]]],[12,12]],[[],[[133,[-1]]],[]],[3,147],[[],136],[3,122],[[[38,[-1]]],[[133,[-1]]],[]],[136,151],[136,4],[136,4],0,[[[130,[-1]]],[[131,[-1]]],12],[[[125,[[130,[-1]]]]],[[140,[-1]]],12],[126,[[125,[122]]]],[[[133,[-1]],-1],[[24,[4,[146,[-1]]]]],[]],[[[133,[-1]]],[[38,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[122,[[24,[123,145]]]],[[122,57],[[24,[123,145]]]],[[[125,[122]],57],[[24,[126,145]]]],[[[125,[122]]],[[24,[126,145]]]],[[[141,[-1]],-2],[[24,[[140,[-1,-3]],[141,[-1]]]]],12,66,12],[[[132,[-1]],-2],[[24,[[131,[-3]],[132,[-1]]]]],12,66,12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[127,[-1]]],[[24,[[128,[-1]],149]]],12],[[[125,[[127,[-1]]]]],[[24,[[129,[-1]],149]]],12],[[[128,[-1]],-2],[[24,[[138,[-3]],[128,[-1]]]]],12,66,12],[[[129,[-1]],-2],[[24,[[139,[-1,-3]],[129,[-1]]]]],12,66,12],[[[138,[-1]],-2],[[24,[[138,[-3]],[138,[-1]]]]],12,66,[]],[[[139,[-1,-2]],-3],[[24,[[139,[-1,-4]],[139,[-1,-2]]]]],12,12,66,[]],[[[140,[-1,-2]],-3],[[24,[[140,[-1,-4]],[140,[-1,-2]]]]],12,12,66,12],[[[141,[-1]],-2],[[24,[[142,[-1,-3]],[141,[-1]]]]],12,66,12],[[[142,[-1,-2]],-3],[[24,[[142,[-1,-4]],[142,[-1,-2]]]]],12,12,66,12],[[[131,[-1]],-2],[[24,[[131,[-3]],[131,[-1]]]]],12,66,12],[[[132,[-1]],-2],[[24,[[143,[-3]],[132,[-1]]]]],12,66,12],[[[143,[-1]],-2],[[24,[[143,[-3]],[143,[-1]]]]],12,66,12],[[[130,[-1]]],[[24,[[131,[-1]],149]]],12],[[[125,[[130,[-1]]]]],[[24,[[140,[-1]],149]]],12],[[[130,[-1]]],[[24,[[132,[-1]],149]]],12],[[[125,[[130,[-1]]]]],[[24,[[141,[-1]],149]]],12],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[147,135],0,[[-1,57],[[130,[-1]]],[12,12]],[[[130,[-1]]],[[132,[-1]]],12],[[[125,[[130,[-1]]]]],[[141,[-1]]],12],0,0,[[[152,[-1]]],[[24,[-1,153]]],134],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[4,[[154,[-1]],[152,[-1]]]]],134],[[[154,[-1]]],[[154,[-1]]],[]],[[-1,-2],4,[],[]],[[[154,[-1]]],4,[]],[[[152,[-1]]],4,[]],0,[[[154,[-1]],27],28,[]],[[[152,[-1]],27],28,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[154,[-1]]],26,[]],[[[152,[-1]]],26,[]],[[[154,[-1]]],3,[]],[[[152,[-1]]],3,[]],[3,[[154,[-1]]],[]],[[[154,[-1]]],3,[]],[[[152,[-1]]],[[24,[-1,153]]],134],[[[152,[-1]]],[[152,[-1]]],134],[[[154,[-1]],[154,[-1]]],26,[]],[[[152,[-1]],[152,[-1]]],26,[]],[[[154,[-1]],-1],[[24,[3,[155,[-1]]]]],[]],[[[154,[-1]]],[[152,[-1]]],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[152,[-1]]],[[24,[-1,156]]],134],[-1,46,[]],[-1,46,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[153,153],[156,156],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[153,153],26],[[156,156],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[[155,[-1]],27],28,[]],[[[155,[-1]],27],28,30],[[153,27],28],[[153,27],28],[[156,27],28],[[156,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[151,4],[[[15,[151]]],26],[[151,27],28],[-1,-1,[]],[-1,-2,[],[]],[-1,[],[]],[[[15,[151]],40],[[41,[4]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],0,0,0,0,0,0,0,0,[[[157,[-1]]],[[38,[-1]]],[]],[[[158,[-1]]],[[38,[-1]]],[]],[[[159,[-1]],-1],[[24,[4,[160,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[159,[-1]]],3,[]],[3,[[4,[[159,[-1]],[157,[-1]]]]],[]],[[[159,[-1]]],[[159,[-1]]],[]],[[[161,[-1]]],[[161,[-1]]],[]],[[[162,[-1]]],[[162,[-1]]],[]],[[[163,[-1]]],[[163,[-1]]],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[157,[-1]]],4,[]],[[[158,[-1]]],4,[]],[[[159,[-1]]],4,[]],[[[162,[-1]]],4,[]],[[[159,[-1]]],[[161,[-1]]],[]],[[[162,[-1]]],[[163,[-1]]],[]],[[[164,[-1]]],4,[]],[[[165,[-1]]],4,[]],0,[[[159,[-1]],27],28,[]],[[[161,[-1]],27],28,[]],[[[164,[-1]],27],28,[]],[[[165,[-1]],27],28,[]],[[[157,[-1]],27],28,[]],[[[162,[-1]],27],28,[]],[[[163,[-1]],27],28,[]],[[[158,[-1]],27],28,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[159,[-1]]],26,[]],[[[162,[-1]]],26,[]],[[[159,[-1]]],3,[]],[[[157,[-1]],40],[[41,[[38,[-1]]]]],[]],[[[158,[-1]],40],[[41,[[38,[-1]]]]],[]],[[[157,[-1]]],[[38,[-1]]],[]],[[[158,[-1]]],[[38,[-1]]],[]],[[[157,[-1]],[39,[-1]],3],3,[]],[[[158,[-1]],[39,[-1]],3],3,[]],[[[165,[-1]]],[[159,[-1]]],[]],[[[159,[-1]]],[[24,[[164,[-1]],[160,[4]]]]],[]],[[[159,[-1]]],[[24,[[165,[-1]],[160,[4]]]]],[]],[[[159,[-1]],[159,[-1]]],26,[]],[[[162,[-1]],[162,[-1]]],26,[]],[[[159,[-1]],-1],[[24,[4,[160,[-1]]]]],[]],[[[164,[-1]],-1],4,[]],[[[165,[-1]],-1],[[159,[-1]]],[]],[[[162,[-1]],-1],[[24,[4,[160,[-1]]]]],[]],[[[159,[-1]],-1,91],[[24,[4,[166,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[157,[-1]]],[[24,[-1,167]]],[]],[[[158,[-1]]],[[24,[-1,167]]],[]],[[[159,[-1]]],[[24,[[164,[-1]],[168,[4]]]]],[]],[[[159,[-1]]],[[24,[[165,[-1]],[168,[[159,[-1]]]]]]],[]],[[[159,[-1]],-1],[[24,[4,[168,[-1]]]]],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[],[[4,[[162,[-1]],[158,[-1]]]]],[]],[[[161,[-1]]],[[38,[[159,[-1]]]]],[]],[[[163,[-1]]],[[38,[[162,[-1]]]]],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[160,[-1]]],[[160,[-1]]],134],[[[168,[-1]]],[[168,[-1]]],134],[167,167],[[[166,[-1]]],[[166,[-1]]],134],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[160,[-1]],[160,[-1]]],26,144],[[[168,[-1]],[168,[-1]]],26,144],[[167,167],26],[[[166,[-1]],[166,[-1]]],26,144],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[[160,[-1]],27],28,[]],[[[160,[-1]],27],28,[]],[[[168,[-1]],27],28,[]],[[[168,[-1]],27],28,[]],[[167,27],28],[[167,27],28],[[[166,[-1]],27],28,[]],[[[166,[-1]],27],28,[]],[-1,-1,[]],[-1,-1,[]],[[[160,[-1]]],[[168,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],0,0,[[[169,[-1]]],[[24,[-1,170]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[4,[[171,[-1]],[169,[-1]]]]],[]],[[[169,[-1]]],4,[]],[[[171,[-1]]],4,[]],[[[171,[-1]]],4,[]],[[[169,[-1]]],4,[]],0,[[[171,[-1]],27],28,30],[[[169,[-1]],27],28,30],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[171,[-1]]],26,[]],[[[15,[[169,[-1]]]],40],41,[]],[[[171,[-1]],40],[[41,[4]]],[]],[[[171,[-1]],-1],[[24,[4,-1]]],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[169,[-1]]],[[24,[-1,172]]],[]],[-1,46,[]],[-1,46,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[170,170],[172,172],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[170,170],26],[[172,172],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[170,27],28],[[170,27],28],[[172,27],28],[[172,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],0,0,0,[-1,-2,[],[]],[[[173,[-1]]],[[174,[-1]]],[]],[[[175,[-1]]],[[174,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[173,[-1]]],[[174,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[173,[-1]]],[[24,[4,176]]],[]],[-1,[[4,[[175,[-1]],[173,[-1]]]]],[]],[[[173,[-1]]],[[173,[-1]]],[]],[[-1,-2],4,[],[]],[[[175,[-1]]],4,[]],[[[174,[-1]]],-1,[]],[[[173,[-1]]],4,[]],[[[175,[-1]]],4,[]],0,[[[173,[-1]],27],28,30],[[[175,[-1]],27],28,30],[[[174,[-1]],27],28,30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[173,[-1]]],[[24,[26,176]]],[]],[[[174,[-1]]],26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[175,[-1]]],26,[]],[[[173,[-1]]],4,[]],[-1,[[175,[-1]]],[]],[[[175,[-1]]],3,[]],[[[173,[-1]],[173,[-1]]],26,[]],[[[175,[-1]],-1],[[24,[4,[177,[-1]]]]],[]],[[[175,[-1]],-2],26,[],66],[[[175,[-1]],-2],4,[],66],[[[175,[-1]],-1],-1,[]],[[[175,[-1]]],[[173,[-1]]],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[[173,[-1]],-2],[[24,[[174,[-1]],176]]],[],62],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[177,[-1]]],[[177,[-1]]],134],[176,176],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[177,[-1]],[177,[-1]]],26,144],[[-1,-2],26,[],[]],[[[177,[-1]],27],28,[]],[[[177,[-1]],27],28,[]],[[176,27],28],[[176,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],0,0,0,0,0,0,0,0,[178,4],[[[120,[-1]]],4,[]],[[[179,[-1]]],4,[]],[[[120,[-1]]],178,[]],[-1,-2,66,[]],[[180,112,-1],[],111],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[179,[-1]]],[]],[[],180],[[[179,[-1]]],4,[]],[178,4],[[[120,[-1]]],4,[]],[181,4],[[[179,[-1]]],4,[]],[180,4],[180,181],[[178,27],28],[[182,27],28],[[182,27],28],[[[120,[-1]],27],28,30],[[181,27],28],[[[183,[-1]],27],28,[]],[[[179,[-1]],27],28,[]],[[180,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[183,[-1]]],-1,184],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[182,[[186,[185]]]],[182,26],[[[179,[-1]]],26,[]],[178,26],[[[120,[-1]]],26,[]],[182,26],[[[179,[-1]]],[[38,[[24,[-1,182]]]]],[]],[[[179,[-1]]],3,[]],[[],[[179,[-1]]],[]],[[],180],[[[15,[[120,[-1]]]],40],41,[]],[[[15,[180]],40],41],[[[15,[[187,[-1]]]],40],41,111],[[[179,[-1]],40],[[41,[[38,[[24,[-1,182]]]]]]],[]],[[180,-1],[],111],[[[183,[-1]],-1,-2],[[188,[-1,-2]]],[],111],[[[179,[-1]]],4,[]],[-1,120,[111,118]],[[[179,[-1]],-2],178,118,[111,118]],[-1,[[120,[-2]]],[66,118],118],[[[179,[-1]],-2],178,118,[66,118]],[[[179,[-1]],-2,110],178,118,[66,118]],[-1,120,111],[[[179,[-1]],-2],178,[],111],[[180,-1],120,111],[[[179,[-1]],-2,180],178,[],111],[[[179,[-1]],-2,110],178,118,[111,118]],[[[183,[-1]],-1,-2],-3,[],66,[]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[182,[[24,[[186,[185]],182]]]],[[[183,[-1]],-2],[[24,[-3,0]]],[],66,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,[[187,[-1]]],[]],[[[183,[-1]],-2],-3,[],66,[]],[[],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[188,[-1,-2]]],4,[],[]],[[[188,[-1,-2]],27],28,30,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[],[]],[[[15,[[188,[-1,-2]]]],40],41,[],111],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],0,0,0,0,0,0,0,0,0,[[189,91],189],[[189,91],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[189,91],[[38,[189]]]],[[189,189],[[38,[91]]]],[[189,91],[[38,[189]]]],[189,189],[190,190],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[189,189],14],[191,189],[[],190],[[189,189],91],[189,91],[[189,189],26],[[190,190],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],0,[[189,27],28],[[190,27],28],[[192,27],28],[[[193,[-1]],27],28,30],[[191,27],28],[-1,-1,[]],[194,189],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[194,189],[[[193,[-1]]],-1,[]],[[[193,[-1]]],-1,[]],[[189,-1],4,103],[91,192],[[189,91],192],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[193,[-1]]],-1,[]],[189,194],[191,26],[192,190],[[],189],[[189,189],[[38,[14]]]],[192,91],[[[15,[[193,[-1]]]],40],41,111],[[[15,[191]],40],41],[[192,40],[[41,[189]]]],[192,4],[[[15,[191]],189],4],[[192,91],4],[[192,189],4],[192,4],[[189,189],91],[[192,190],4],[91,191],[189,191],[[189,91],189],[[189,189],91],[[189,91],4],[192,189],[[91,-1],[[193,[-1]]],111],[[189,-1],[[193,[-1]]],111],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],0,0,[[],195],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[195,195],[[-1,-2],4,[],[]],[[196,196],26],[[-1,-2],26,[],[]],[[195,27],28],[[195,27],28],[[196,27],28],[[196,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],195],[195,26],[195,26],[195,26],[[],195],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,46,[]],[-1,46,[]]],"c":[],"p":[[3,"Interest",10],[3,"ReadBuf",10],[15,"usize"],[15,"tuple"],[3,"Ready",10],[3,"BufWriter",10],[15,"u8"],[15,"slice"],[8,"AsyncWrite",10],[3,"BufReader",10],[8,"AsyncRead",10],[8,"Sized",2305],[3,"UninitSlice",2306],[4,"Ordering",2307],[3,"Pin",2308],[8,"Unpin",2305],[3,"Empty",10],[3,"Take",10],[8,"AsyncBufRead",10],[3,"BufStream",10],[15,"u64"],[6,"Result",2309],[3,"Error",2309],[4,"Result",2310],[3,"DuplexStream",10],[15,"bool"],[3,"Formatter",2311],[6,"Result",2311],[3,"ReadHalf",10],[8,"Debug",2311],[3,"WriteHalf",10],[3,"Repeat",10],[3,"Sink",10],[3,"Split",10],[3,"Lines",10],[19,"MaybeUninit",2312],[3,"String",2313],[4,"Option",2314],[3,"Vec",2315],[3,"Context",2316],[4,"Poll",2317],[8,"AsyncSeek",10],[3,"IoSlice",2318],[8,"BufMut",2319],[4,"SeekFrom",2318],[3,"TypeId",2320],[8,"Buf",2321],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u16"],[15,"u32"],[3,"AsyncFd",463],[3,"BorrowedFd",2322],[8,"AsRawFd",2323],[6,"RawFd",2323],[8,"FnMut",2324],[3,"AsyncFdReadyGuard",463],[3,"AsyncFdReadyMutGuard",463],[3,"TryIoError",463],[8,"FnOnce",2324],[3,"TcpListener",535],[3,"TcpStream",535],[4,"SocketAddr",2325],[3,"UnixListener",535],[3,"UnixStream",535],[3,"SocketAddr",905],[3,"TcpSocket",535],[3,"UdpSocket",535],[3,"UnixDatagram",535],[8,"ToSocketAddrs",535],[3,"Path",2326],[8,"AsRef",2327],[3,"TcpListener",2328],[3,"TcpStream",2328],[3,"UdpSocket",2329],[3,"UnixDatagram",2330],[3,"UnixListener",2331],[3,"UnixStream",2332],[3,"OwnedReadHalf",808],[3,"OwnedWriteHalf",808],[3,"OwnedReadHalf",905],[3,"OwnedWriteHalf",905],[3,"Ipv4Addr",2333],[3,"Ipv6Addr",2333],[3,"Duration",2334],[8,"Iterator",2335],[3,"UCred",905],[4,"Shutdown",2336],[3,"ReadHalf",808],[3,"WriteHalf",808],[3,"ReadHalf",905],[3,"WriteHalf",905],[3,"IoSliceMut",2318],[3,"ReuniteError",808],[3,"ReuniteError",905],[6,"gid_t",905],[8,"Hasher",2337],[6,"pid_t",905],[6,"uid_t",905],[3,"Sender",1031],[3,"Receiver",1031],[3,"OpenOptions",1031],[3,"File",2338],[3,"Handle",1091],[8,"Future",2339],[3,"Runtime",1091],[3,"Builder",1091],[3,"EnterGuard",1091],[4,"RuntimeFlavor",1091],[3,"TryCurrentError",1091],[8,"Fn",2324],[8,"Send",2305],[8,"Sync",2305],[3,"JoinHandle",2030],[8,"Into",2327],[3,"Semaphore",1191],[3,"SemaphorePermit",1191],[3,"AcquireError",1191],[3,"Arc",2340],[3,"OwnedSemaphorePermit",1191],[3,"Mutex",1191],[3,"MutexGuard",1191],[3,"OwnedMutexGuard",1191],[3,"RwLock",1191],[3,"RwLockReadGuard",1191],[3,"RwLockWriteGuard",1191],[3,"OnceCell",1191],[8,"Clone",2341],[3,"BarrierWaitResult",1191],[3,"Notify",1191],[8,"Default",2342],[3,"MappedMutexGuard",1191],[3,"OwnedMappedMutexGuard",1191],[3,"OwnedRwLockReadGuard",1191],[3,"OwnedRwLockWriteGuard",1191],[3,"OwnedRwLockMappedWriteGuard",1191],[3,"RwLockMappedWriteGuard",1191],[8,"PartialEq",2307],[4,"TryAcquireError",1191],[4,"SetError",1191],[3,"Barrier",1191],[8,"Display",2311],[3,"TryLockError",1191],[15,"never"],[3,"Notified",1673],[3,"Receiver",1586],[4,"RecvError",1625],[3,"Sender",1586],[3,"SendError",1625],[4,"TryRecvError",1625],[3,"Receiver",1686],[3,"UnboundedReceiver",1686],[3,"Sender",1686],[3,"SendError",1811],[3,"WeakSender",1686],[3,"UnboundedSender",1686],[3,"WeakUnboundedSender",1686],[3,"Permit",1686],[3,"OwnedPermit",1686],[4,"SendTimeoutError",1811],[4,"TryRecvError",1811],[4,"TrySendError",1811],[3,"Receiver",1882],[3,"RecvError",1913],[3,"Sender",1882],[4,"TryRecvError",1913],[3,"Receiver",1947],[3,"Ref",1947],[3,"Sender",1947],[3,"RecvError",2000],[3,"SendError",2000],[3,"AbortHandle",2030],[3,"JoinSet",2030],[3,"LocalSet",2030],[3,"LocalEnterGuard",2030],[3,"JoinError",2030],[3,"LocalKey",2030],[8,"Copy",2305],[8,"Any",2320],[3,"Box",2343],[3,"Unconstrained",2030],[3,"TaskLocalFuture",2156],[3,"Instant",2168],[4,"MissedTickBehavior",2168],[3,"Sleep",2168],[3,"Interval",2168],[3,"Timeout",2168],[3,"Instant",2344],[3,"Error",2272],[3,"Elapsed",2272],[8,"AsyncReadExt",10],[8,"AsyncBufReadExt",10],[8,"AsyncWriteExt",10],[8,"AsyncSeekExt",10]]},\
"tokio_rustls":{"doc":"Asynchronous TLS/SSL streams for Tokio using Rustls.","t":"DNDDDDNDDDELLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLL","n":["Accept","Client","Connect","FallibleAccept","FallibleConnect","LazyConfigAcceptor","Server","StartHandshake","TlsAcceptor","TlsConnector","TlsStream","accept","accept_with","as_raw_fd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","client_hello","clone","clone","clone_into","clone_into","connect","connect_with","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","into","into","into","into","into","into","into","into","into","into_fallible","into_fallible","into_future","into_future","into_future","into_future","into_future","into_stream","into_stream_with","new","poll","poll","poll","poll","poll","poll_flush","poll_read","poll_shutdown","poll_write","rustls","server","take_io","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","TlsStream","as_raw_fd","borrow","borrow_mut","fmt","from","get_mut","get_ref","into","into_inner","poll_flush","poll_read","poll_shutdown","poll_write","try_from","try_into","type_id","TlsStream","as_raw_fd","borrow","borrow_mut","fmt","from","get_mut","get_ref","into","into_inner","poll_flush","poll_read","poll_shutdown","poll_write","try_from","try_into","type_id"],"q":[[0,"tokio_rustls"],[120,"tokio_rustls::client"],[137,"tokio_rustls::server"],[154,"tokio::io::async_read"],[155,"tokio::io::async_write"],[156,"core::marker"],[157,"core::ops::function"],[158,"std::os::fd::raw"],[159,"std::os::fd::raw"],[160,"rustls::client::client_conn"],[161,"core::fmt"],[162,"core::fmt"],[163,"rustls::server::server_conn"],[164,"rustls::common_state"],[165,"rustls::server::server_conn"],[166,"core::task::wake"],[167,"core::task::poll"],[168,"std::io::error"],[169,"tokio::io::read_buf"],[170,"core::result"],[171,"core::any"],[172,"rustls::client::client_conn"]],"d":["Future returned from <code>TlsAcceptor::accept</code> which will resolve","","Future returned from <code>TlsConnector::connect</code> which will …","Like Accept, but returns <code>IO</code> on failure.","Like Connect, but returns <code>IO</code> on failure.","","","","A wrapper around a <code>rustls::ServerConfig</code>, providing an …","A wrapper around a <code>rustls::ClientConfig</code>, providing an …","Unified TLS stream type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Takes back the client connection. Will return <code>None</code> if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper around an underlying raw stream which implements …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Note: that it does not guarantee the final data to be sent.","","","","A wrapper around an underlying raw stream which implements …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Note: that it does not guarantee the final data to be sent.","","",""],"i":[0,7,0,0,0,0,7,0,0,0,0,1,1,7,29,10,15,2,26,27,12,1,7,29,10,15,2,26,27,12,1,7,0,10,12,1,12,1,12,12,7,29,10,15,2,26,27,12,12,1,1,7,7,7,15,2,7,15,2,7,29,10,15,2,26,27,12,1,7,15,2,29,15,2,26,27,10,10,29,29,15,2,26,27,7,7,7,7,0,0,29,12,1,29,10,15,2,26,27,12,1,7,29,10,15,2,26,27,12,1,7,29,10,15,2,26,27,12,1,7,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,[[1,-1],[[2,[-1]]],[3,4,5]],[[1,-1,-2],[[2,[-1]]],[3,4,5],6],[[[7,[-1]]],8,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[10,[-1]]],11,[3,4,5]],[12,12],[1,1],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,14,-1],[[15,[-1]]],[3,4,5]],[[12,14,-1,-2],[[15,[-1]]],[3,4,5],6],[[[7,[-1]],16],17,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[20,[19]]],12],[-1,-1,[]],[[[20,[21]]],1],[-1,-1,[]],[[[22,[-1]]],[[7,[-1]]],[]],[[[23,[-1]]],[[7,[-1]]],[]],[[[15,[-1]]],[[24,[-1]]],[]],[[[2,[-1]]],[[24,[-1]]],[]],[[[7,[-1]]],[[13,[-1,25]]],[]],[[[15,[-1]]],[[24,[-1]]],[]],[[[2,[-1]]],[[24,[-1]]],[]],[[[7,[-1]]],[[13,[-1,25]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[26,[-1]]],[]],[[[2,[-1]]],[[27,[-1]]],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[10,[-1]],[20,[21]]],[[2,[-1]]],[3,4,5]],[[[10,[-1]],[20,[21]],-2],[[2,[-1]]],[3,4,5],6],[[28,-1],[[29,[-1]]],[3,4,5]],[[[30,[[29,[-1]]]],31],32,[3,4,5]],[[[30,[[15,[-1]]]],31],32,[3,4,5]],[[[30,[[2,[-1]]]],31],32,[3,4,5]],[[[30,[[26,[-1]]]],31],32,[3,4,5]],[[[30,[[27,[-1]]]],31],32,[3,4,5]],[[[30,[[7,[-1]]]],31],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[7,[-1]]]],31,34],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[7,[-1]]]],31],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[7,[-1]]]],31,[36,[35]]],[[32,[[33,[37]]]]],[3,4,5]],0,0,[[[29,[-1]]],[[24,[-1]]],[3,4,5]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,[[[22,[-1]]],8,9],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]],16],17,18],[-1,-1,[]],[[[22,[-1]]],[[13,[-1,40]]],[]],[[[22,[-1]]],[[13,[-1,40]]],[]],[-1,-2,[],[]],[[[22,[-1]]],[[13,[-1,40]]],[]],[[[30,[[22,[-1]]]],31],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[22,[-1]]]],31,34],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[22,[-1]]]],31],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[22,[-1]]]],31,[36,[35]]],[[32,[[33,[37]]]]],[3,4,5]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],0,[[[23,[-1]]],8,9],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]],16],17,18],[-1,-1,[]],[[[23,[-1]]],[[13,[-1,41]]],[]],[[[23,[-1]]],[[13,[-1,41]]],[]],[-1,-2,[],[]],[[[23,[-1]]],[[13,[-1,41]]],[]],[[[30,[[23,[-1]]]],31],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[23,[-1]]]],31,34],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[23,[-1]]]],31],[[32,[[33,[13]]]]],[3,4,5]],[[[30,[[23,[-1]]]],31,[36,[35]]],[[32,[[33,[37]]]]],[3,4,5]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]]],"c":[],"p":[[3,"TlsAcceptor",0],[3,"Accept",0],[8,"AsyncRead",154],[8,"AsyncWrite",155],[8,"Unpin",156],[8,"FnOnce",157],[4,"TlsStream",0],[6,"RawFd",158],[8,"AsRawFd",158],[3,"StartHandshake",0],[3,"ClientHello",159],[3,"TlsConnector",0],[15,"tuple"],[4,"ServerName",160],[3,"Connect",0],[3,"Formatter",161],[6,"Result",161],[8,"Debug",161],[3,"ClientConfig",160],[3,"Arc",162],[3,"ServerConfig",159],[3,"TlsStream",120],[3,"TlsStream",137],[4,"Option",163],[3,"CommonState",164],[3,"FallibleConnect",0],[3,"FallibleAccept",0],[3,"Acceptor",159],[3,"LazyConfigAcceptor",0],[3,"Pin",165],[3,"Context",166],[4,"Poll",167],[6,"Result",168],[3,"ReadBuf",169],[15,"u8"],[15,"slice"],[15,"usize"],[4,"Result",170],[3,"TypeId",171],[3,"ClientConnection",160],[3,"ServerConnection",159]]},\
"tokio_util":{"doc":"Utilities for working with Tokio.","t":"CAAADEDIIQQDDDDNNQCCDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["bytes","codec","either","sync","AnyDelimiterCodec","AnyDelimiterCodecError","BytesCodec","Decoder","Encoder","Error","Error","Framed","FramedParts","FramedRead","FramedWrite","Io","Io","Item","LengthDelimitedCodec","LengthDelimitedCodecError","LinesCodec","LinesCodecError","MaxChunkLengthExceeded","MaxLineLengthExceeded","backpressure_boundary","backpressure_boundary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","codec","codec","codec_mut","codec_pin_mut","decode","decode","decode","decode","decode_eof","decode_eof","decode_eof","decode_eof","decoder","decoder_mut","decoder_pin_mut","default","default","default","encode","encode","encode","encode","encode","encoder","encoder_mut","encoder_pin_mut","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framed","framed","from","from","from","from","from","from","from","from","from","from","from","from_parts","get_mut","get_mut","get_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_ref","get_ref","get_ref","hash","hash","hash","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_parts","io","length_delimited","map_codec","map_decoder","map_encoder","max_length","max_length","new","new","new","new","new","new","new","new_with_max_length","new_with_max_length","partial_cmp","partial_cmp","partial_cmp","poll_close","poll_close","poll_close","poll_flush","poll_flush","poll_flush","poll_next","poll_next","poll_next","poll_ready","poll_ready","poll_ready","read_buf","read_buffer","read_buffer","read_buffer_mut","read_buffer_mut","set_backpressure_boundary","set_backpressure_boundary","start_send","start_send","start_send","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll_next","try_poll_next","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity","write_buf","write_buffer","write_buffer","write_buffer_mut","write_buffer_mut","Builder","LengthDelimitedCodec","LengthDelimitedCodecError","big_endian","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone_into","clone_into","decode","default","default","encode","fmt","fmt","fmt","fmt","from","from","from","into","into","into","length_adjustment","length_field_length","length_field_offset","length_field_type","little_endian","max_frame_length","max_frame_length","native_endian","new","new","new_codec","new_framed","new_read","new_write","num_skip","set_max_frame_length","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Either","Left","Right","borrow","borrow_mut","clone","clone_into","consume","fmt","from","into","into_future","poll","poll_complete","poll_fill_buf","poll_flush","poll_next","poll_read","poll_shutdown","poll_write","start_seek","to_owned","try_from","try_into","try_poll","try_poll_next","type_id","CancellationToken","DropGuard","PollSemaphore","PollSendError","PollSender","ReusableBoxFuture","WaitForCancellationFuture","WaitForCancellationFutureOwned","abort_send","add_permits","as_ref","available_permits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","cancelled","cancelled_owned","child_token","clone","clone","clone","clone_inner","clone_into","clone_into","clone_into","close","close","default","disarm","drop","drop","drop_guard","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_pin","get_ref","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_inner","into_inner","is_cancelled","is_closed","new","new","new","new","poll","poll","poll","poll","poll_acquire","poll_acquire_many","poll_close","poll_flush","poll_next","poll_ready","poll_reserve","send_item","set","start_send","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","try_set","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"tokio_util"],[4,"tokio_util::codec"],[218,"tokio_util::codec::length_delimited"],[275,"tokio_util::either"],[302,"tokio_util::sync"],[430,"core::cmp"],[431,"core::pin"],[432,"bytes::bytes_mut"],[433,"core::option"],[434,"core::result"],[435,"std::io::error"],[436,"alloc::string"],[437,"bytes::bytes"],[438,"core::convert"],[439,"core::fmt"],[440,"core::fmt"],[441,"tokio::io::async_read"],[442,"tokio::io::async_write"],[443,"core::hash"],[444,"core::ops::function"],[445,"alloc::vec"],[446,"core::task::wake"],[447,"core::task::poll"],[448,"futures_sink"],[449,"futures_core::stream"],[450,"core::any"],[451,"std::io::error"],[452,"tokio::io::async_buf_read"],[453,"core::future::future"],[454,"tokio::io::async_seek"],[455,"tokio::io::read_buf"],[456,"std::io"],[457,"core::marker"],[458,"alloc::sync"],[459,"tokio::sync::mpsc::bounded"],[460,"tokio::sync::semaphore"]],"d":["","Adaptors from AsyncRead/AsyncWrite to Stream/Sink","Module defining an Either type.","Synchronization primitives","A simple <code>Decoder</code> and <code>Encoder</code> implementation that splits up …","An error occurred while encoding or decoding a chunk.","A simple <code>Decoder</code> and <code>Encoder</code> implementation that just …","Decoding of frames via buffers.","Trait of helper objects to write out messages as bytes, …","The type of unrecoverable frame decoding errors.","The type of encoding errors.","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying I/O …","<code>FramedParts</code> contains an export of the data of a Framed …","A <code>Stream</code> of messages decoded from an <code>AsyncRead</code>.","A <code>Sink</code> of frames encoded to an <code>AsyncWrite</code>.","An IO error occurred.","An IO error occurred.","The type of decoded frames.","","","A simple <code>Decoder</code> and <code>Encoder</code> implementation that splits up …","An error occurred while encoding or decoding a line.","The maximum chunk length was exceeded.","The maximum line length was exceeded.","Returns backpressure boundary","Returns backpressure boundary","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the underlying codec wrapped by …","The codec","Returns a mutable reference to the underlying codec …","Returns a mutable reference to the underlying codec …","Attempts to decode a frame from the provided buffer of …","","","","A default method available to be called when there are no …","A default method available to be called when there are no …","","","Returns a reference to the underlying decoder.","Returns a mutable reference to the underlying decoder.","Returns a mutable reference to the underlying decoder.","","","","Encodes a frame into the buffer provided.","","","","","Returns a reference to the underlying encoder.","Returns a mutable reference to the underlying encoder.","Returns a mutable reference to the underlying encoder.","","","","","","","","","","","","","","","","","","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns a mutable reference to the underlying I/O stream …","Returns a mutable reference to the underlying I/O stream …","Returns a mutable reference to the underlying I/O stream …","Returns a pinned mutable reference to the underlying I/O …","Returns a pinned mutable reference to the underlying I/O …","Returns a pinned mutable reference to the underlying I/O …","Returns a reference to the underlying I/O stream wrapped by","Returns a reference to the underlying I/O stream wrapped by","Returns a reference to the underlying I/O stream wrapped by","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>FramedWrite</code>, returning its underlying I/O …","Consumes the <code>FramedRead</code>, returning its underlying I/O …","Consumes the <code>Framed</code>, returning its underlying I/O stream.","Consumes the <code>Framed</code>, returning its underlying I/O stream, …","The inner transport used to read bytes to and write bytes …","Frame a stream of bytes based on a length prefix","Maps the codec <code>U</code> to <code>C</code>, preserving the read and write …","Maps the decoder <code>D</code> to <code>C</code>, preserving the read buffer …","Maps the encoder <code>E</code> to <code>C</code>, preserving the write buffer …","Returns the maximum line length when decoding.","Returns the maximum chunk length when decoding.","Creates a new <code>BytesCodec</code> for shipping around raw bytes.","Create a new, default, <code>FramedParts</code>","Returns a <code>LinesCodec</code> for splitting up data into lines.","Returns a <code>AnyDelimiterCodec</code> for splitting up data into …","Creates a new <code>FramedWrite</code> with the given <code>encoder</code>.","Creates a new <code>FramedRead</code> with the given <code>decoder</code>.","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns a <code>LinesCodec</code> with a maximum line length limit.","Returns a <code>AnyDelimiterCodec</code> with a maximum chunk length …","","","","","","","","","","","","","","","","The buffer with read but unprocessed data.","Returns a reference to the read buffer.","Returns a reference to the read buffer.","Returns a mutable reference to the read buffer.","Returns a mutable reference to the read buffer.","Updates backpressure boundary","Updates backpressure boundary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>FramedRead</code> with the given <code>decoder</code> and a …","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","A buffer with unprocessed data which are not written yet.","Returns a reference to the write buffer.","Returns a reference to the write buffer.","Returns a mutable reference to the write buffer.","Returns a mutable reference to the write buffer.","Configure length delimited <code>LengthDelimitedCodec</code>s.","A codec for frames delimited by a frame head specifying …","An error when the number of bytes read is more than max …","Read the length field as a big endian integer","","","","","","","Creates a new length delimited codec builder with default …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Delta between the payload length specified in the header …","Sets the number of bytes used to represent the length field","Sets the number of bytes in the header before the length …","Sets the unsigned integer type used to represent the …","Read the length field as a little endian integer","Sets the max frame length in bytes","Returns the current max frame setting","Read the length field as a native endian integer","Creates a new length delimited codec builder with default …","Creates a new <code>LengthDelimitedCodec</code> with the default …","Create a configured length delimited <code>LengthDelimitedCodec</code>","Create a configured length delimited <code>Framed</code>","Create a configured length delimited <code>FramedRead</code>","Create a configured length delimited <code>FramedWrite</code>","Sets the number of bytes to skip before reading the payload","Updates the max frame setting.","","","","","","","","","","","","","Combines two different futures, streams, or sinks having …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A token which can be used to signal a cancellation request …","A wrapper for cancellation token which automatically …","A wrapper around <code>Semaphore</code> that provides a <code>poll_acquire</code> …","Error returned by the <code>PollSender</code> when the channel is …","A wrapper around <code>mpsc::Sender</code> that can be polled.","A reusable <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + Send + &#39;a&gt;&gt;</code>.","A Future that is resolved once the corresponding …","A Future that is resolved once the corresponding …","Aborts the current in-progress send, if any.","Adds <code>n</code> new permits to the semaphore.","","Returns the current number of available permits.","","","","","","","","","","","","","","","","","Cancel the <code>CancellationToken</code> and all child tokens which …","Returns a <code>Future</code> that gets fulfilled when cancellation is …","Returns a <code>Future</code> that gets fulfilled when cancellation is …","Creates a <code>CancellationToken</code> which will get cancelled …","Creates a clone of the <code>CancellationToken</code> which will get …","","Clones this <code>PollSender</code>.","Obtain a clone of the inner semaphore.","","","","Closes the semaphore.","Closes this sender.","","Returns stored cancellation token and removes this drop …","","","Creates a <code>DropGuard</code> for this token.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a pinned reference to the underlying future.","Gets a reference to the <code>Sender</code> of the underlying channel.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Get back the inner semaphore.","Consumes the stored value, if any.","Returns <code>true</code> if the <code>CancellationToken</code> is cancelled.","Checks whether this sender is been closed.","Creates a new <code>CancellationToken</code> in the non-cancelled state.","Create a new <code>PollSemaphore</code>.","Create a new <code>ReusableBoxFuture&lt;T&gt;</code> containing the provided …","Creates a new <code>PollSender</code>.","Poll the future stored inside this box.","Poll the future stored inside this box.","","","Poll to acquire a permit from the semaphore.","Poll to acquire many permits from the semaphore.","","","","","Attempts to prepare the sender to receive a value.","Sends an item to the channel.","Replace the future currently stored in this box.","","","","","","","","","","","","","","","","","","","","","","","Replace the future currently stored in this box.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,34,31,0,0,0,0,15,17,34,0,0,0,0,17,15,1,3,4,24,5,15,6,17,1,18,3,4,24,5,15,6,17,1,18,3,4,5,6,4,5,6,4,5,6,3,24,3,3,34,4,5,6,34,34,5,6,18,18,18,4,5,6,31,4,4,5,6,1,1,1,4,5,6,4,5,6,4,24,5,15,15,6,17,17,1,18,3,34,34,4,24,5,15,15,6,17,17,1,18,3,3,1,18,3,1,18,3,1,18,3,4,5,6,4,24,5,15,6,17,1,18,3,1,18,3,3,24,0,3,18,1,5,6,4,24,5,6,1,18,3,5,6,4,5,6,1,18,3,1,18,3,1,18,3,1,18,3,24,18,3,18,3,1,3,1,18,3,4,5,6,15,17,4,24,5,15,6,17,1,18,3,4,24,5,15,6,17,1,18,3,1,18,3,4,24,5,15,6,17,1,18,3,18,3,24,1,3,1,3,0,0,0,40,43,40,41,43,40,41,41,40,41,40,41,41,40,41,41,43,43,40,41,43,40,41,43,40,41,40,40,40,40,40,40,41,40,40,41,40,40,40,40,40,41,40,41,43,43,40,41,43,40,41,43,40,41,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,54,56,56,56,58,56,63,62,59,60,64,54,58,56,63,62,59,60,64,54,58,58,58,58,58,56,54,56,58,56,54,56,54,58,62,58,62,58,58,56,63,62,59,60,64,64,54,58,56,63,62,59,60,64,54,63,54,58,56,63,62,59,60,64,54,63,59,60,56,64,58,54,58,56,63,54,63,63,59,60,56,56,54,54,56,54,54,54,63,54,58,56,54,64,58,56,63,62,59,60,64,54,58,56,63,62,59,60,64,54,63,63,58,56,63,62,59,60,64,54],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1,-2]]],2,[],[]],[[[3,[-1,-2]]],2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[4,4],8],[[5,5],8],[[6,6],8],[[[3,[-1,-2]]],-2,[],[]],0,[[[3,[-1,-2]]],-2,[],[]],[[[9,[[3,[-1,-2]]]]],-2,[],[]],[[-1,10],[[12,[11]]],[]],[[4,10],[[12,[[11,[10]],13]]]],[[5,10],[[12,[[11,[14]],15]]]],[[6,10],[[12,[[11,[16]],17]]]],[[-1,10],[[12,[11]]],[]],[[-1,10],[[12,[11]]],[]],[[5,10],[[12,[[11,[14]],15]]]],[[6,10],[[12,[[11,[16]],17]]]],[[[18,[-1,-2]]],-2,[],[]],[[[18,[-1,-2]]],-2,[],[]],[[[9,[[18,[-1,-2]]]]],-2,[],[]],[[],4],[[],5],[[],6],[[-1,-2,10],[[12,[7]]],[],[]],[[4,10,10],[[12,[7,13]]]],[[4,16,10],[[12,[7,13]]]],[[5,-1,10],[[12,[7,15]]],[[20,[19]]]],[[6,-1,10],[[12,[7,17]]],[[20,[19]]]],[[[1,[-1,-2]]],-2,[],[]],[[[1,[-1,-2]]],-2,[],[]],[[[9,[[1,[-1,-2]]]]],-2,[],[]],[[4,4],21],[[5,5],21],[[6,6],21],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[4,22],23],[[[24,[-1,-2]],22],23,25,25],[[5,22],23],[[15,22],23],[[15,22],23],[[6,22],23],[[17,22],23],[[17,22],23],[[[1,[-1,-2]],22],23,25,25],[[[18,[-1,-2]],22],23,25,25],[[[3,[-1,-2]],22],23,25,25],[[-1,-2],[[3,[-2,-1]]],26,[27,28,26]],[[-1,-2],[[3,[-2,-1]]],26,[27,28,26]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,15],[-1,-1,[]],[13,17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[24,[-1,-2]]],[[3,[-1,-2]]],[],[]],[[[1,[-1,-2]]],-1,[],[]],[[[18,[-1,-2]]],-1,[],[]],[[[3,[-1,-2]]],-1,[],[]],[[[9,[[1,[-1,-2]]]]],[[9,[-1]]],[],[]],[[[9,[[18,[-1,-2]]]]],[[9,[-1]]],[],[]],[[[9,[[3,[-1,-2]]]]],[[9,[-1]]],[],[]],[[[1,[-1,-2]]],-1,[],[]],[[[18,[-1,-2]]],-1,[],[]],[[[3,[-1,-2]]],-1,[],[]],[[4,-1],7,29],[[5,-1],7,29],[[6,-1],7,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],-1,[],[]],[[[18,[-1,-2]]],-1,[],[]],[[[3,[-1,-2]]],-1,[],[]],[[[3,[-1,-2]]],[[24,[-1,-2]]],[],[]],0,0,[[[3,[-1,-2]],-3],[[3,[-1,-4]]],[],[],30,[]],[[[18,[-1,-2]],-3],[[18,[-1,-4]]],[],[],30,[]],[[[1,[-1,-2]],-3],[[1,[-1,-4]]],[],[],30,[]],[5,2],[6,2],[[],4],[[-1,-3],[[24,[-1,-3]]],[],[],[[31,[-2]]]],[[],5],[[[33,[32]],[33,[32]]],6],[[-1,-2],[[1,[-1,-2]]],28,[]],[[-1,-2],[[18,[-1,-2]]],27,34],[[-1,-2],[[3,[-1,-2]]],[27,28],[]],[2,5],[[[33,[32]],[33,[32]],2],6],[[4,4],[[11,[8]]]],[[5,5],[[11,[8]]]],[[6,6],[[11,[8]]]],[[[9,[[1,[-1,-3]]]],35],[[36,[[12,[7]]]]],28,[],[[31,[-2]]]],[[[9,[[18,[-2,-3]]]],35],[[36,[[12,[7]]]]],[],[[37,[-1]]],[]],[[[9,[[3,[-1,-3]]]],35],[[36,[[12,[7]]]]],28,[],[[31,[-2]]]],[[[9,[[1,[-1,-3]]]],35],[[36,[[12,[7]]]]],28,[],[[31,[-2]]]],[[[9,[[18,[-2,-3]]]],35],[[36,[[12,[7]]]]],[],[[37,[-1]]],[]],[[[9,[[3,[-1,-3]]]],35],[[36,[[12,[7]]]]],28,[],[[31,[-2]]]],[[[9,[[1,[-1,-2]]]],35],[[36,[11]]],38,[]],[[[9,[[18,[-1,-2]]]],35],[[36,[11]]],27,34],[[[9,[[3,[-1,-2]]]],35],[[36,[11]]],27,34],[[[9,[[1,[-1,-3]]]],35],[[36,[[12,[7]]]]],28,[],[[31,[-2]]]],[[[9,[[18,[-2,-3]]]],35],[[36,[[12,[7]]]]],[],[[37,[-1]]],[]],[[[9,[[3,[-1,-3]]]],35],[[36,[[12,[7]]]]],28,[],[[31,[-2]]]],0,[[[18,[-1,-2]]],10,[],[]],[[[3,[-1,-2]]],10,[],[]],[[[18,[-1,-2]]],10,[],[]],[[[3,[-1,-2]]],10,[],[]],[[[1,[-1,-2]],2],7,[],[]],[[[3,[-1,-2]],2],7,[],[]],[[[9,[[1,[-1,-3]]]],-2],[[12,[7]]],28,[],[[31,[-2]]]],[[[9,[[18,[-2,-3]]]],-1],[[12,[7]]],[],[[37,[-1]]],[]],[[[9,[[3,[-1,-3]]]],-2],[[12,[7]]],28,[],[[31,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[9,[-1]],35],[[36,[[11,[12]]]]],[]],[[[9,[-1]],35],[[36,[[11,[12]]]]],[]],[[[9,[-1]],35],[[36,[[11,[12]]]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[-1,-2,2],[[18,[-1,-2]]],27,34],[[-1,-2,2],[[3,[-1,-2]]],[27,28],[]],0,[[[1,[-1,-2]]],10,[],[]],[[[3,[-1,-2]]],10,[],[]],[[[1,[-1,-2]]],10,[],[]],[[[3,[-1,-2]]],10,[],[]],0,0,0,[40,40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],40],[40,40],[41,41],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[41,10],[[42,[[11,[10]]]]]],[[],40],[[],41],[[41,16,10],[[12,[7,13]]]],[[43,22],23],[[43,22],23],[[40,22],23],[[41,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[40,44],40],[[40,2],40],[[40,2],40],[40,40],[40,40],[[40,2],40],[41,2],[40,40],[[],40],[[],41],[40,41],[[40,-1],[[3,[-1,41]]],[27,28]],[[40,-1],[[18,[-1,41]]],27],[[40,-1],[[1,[-1,41]]],28],[[40,2],40],[[41,2],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1,-2]]],[[45,[-1,-2]]],46,46],[[-1,-2],7,[],[]],[[[9,[[45,[-1,-2]]]],2],7,47,47],[[[45,[-1,-2]],22],23,25,25],[-1,-1,[]],[-1,-2,[],[]],[-1,[],[]],[[[9,[[45,[-1,-2]]]],35],36,48,48],[[[9,[[45,[-1,-2]]]],35],[[36,[[42,[49]]]]],50,50],[[[9,[[45,[-1,-2]]]],35],[[36,[[42,[[51,[32]]]]]]],47,47],[[[9,[[45,[-1,-2]]]],35],[[36,[[42,[7]]]]],28,28],[[[9,[[45,[-1,-2]]]],35],[[36,[11]]],38,38],[[[9,[[45,[-1,-2]]]],35,52],[[36,[[42,[7]]]]],27,27],[[[9,[[45,[-1,-2]]]],35],[[36,[[42,[7]]]]],28,28],[[[9,[[45,[-1,-2]]]],35,[51,[32]]],[[36,[[42,[2]]]]],28,28],[[[9,[[45,[-1,-2]]]],53],[[42,[7]]],50,50],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[9,[-1]],35],36,[]],[[[9,[-1]],35],[[36,[[11,[12]]]]],[]],[-1,39,[]],0,0,0,0,0,0,0,0,[[[54,[-1]]],21,55],[[56,2],7],[56,57],[56,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,7],[58,59],[58,60],[58,58],[58,58],[56,56],[[[54,[-1]]],[[54,[-1]]],[]],[56,[[61,[57]]]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[56,7],[[[54,[-1]]],7,55],[[],58],[62,58],[58,7],[62,7],[58,62],[[58,22],23],[[56,22],23],[[[63,[-1]],22],23,[]],[[62,22],23],[[59,22],23],[[60,22],23],[[[64,[-1]],22],23,[]],[[[64,[-1]],22],23,25],[[[54,[-1]],22],23,25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[63,[-1]]],[[9,[48]]],[]],[[[54,[-1]]],[[11,[[65,[-1]]]]],55],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[56,[[61,[57]]]],[[[64,[-1]]],[[11,[-1]]],[]],[58,21],[[[54,[-1]]],21,55],[[],58],[[[61,[57]]],56],[-1,[[63,[-2]]],[48,55],[]],[[[65,[-1]]],[[54,[-1]]],55],[[[9,[[63,[-1]]]],35],[[36,[-1]]],[]],[[[63,[-1]],35],[[36,[-1]]],[]],[[[9,[59]],35],[[36,[7]]]],[[[9,[60]],35],[[36,[7]]]],[[56,35],[[36,[[11,[66]]]]]],[[56,35,67],[[36,[[11,[66]]]]]],[[[9,[[54,[-1]]]],35],[[36,[[12,[7]]]]],55],[[[9,[[54,[-1]]]],35],[[36,[[12,[7]]]]],55],[[[9,[56]],35],[[36,[[11,[66]]]]]],[[[9,[[54,[-1]]]],35],[[36,[[12,[7]]]]],55],[[[54,[-1]],35],[[36,[[12,[7,[64,[-1]]]]]]],55],[[[54,[-1]],-1],[[12,[7,[64,[-1]]]]],55],[[[63,[-1]],-2],7,[],[48,55]],[[[9,[[54,[-1]]]],-1],[[12,[7]]],55],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[9,[-1]],35],36,[]],[[[63,[-1]],-2],[[12,[7,-2]]],[],[48,55]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]]],"c":[],"p":[[3,"FramedWrite",4],[15,"usize"],[3,"Framed",4],[3,"BytesCodec",4],[3,"LinesCodec",4],[3,"AnyDelimiterCodec",4],[15,"tuple"],[4,"Ordering",430],[3,"Pin",431],[3,"BytesMut",432],[4,"Option",433],[4,"Result",434],[3,"Error",435],[3,"String",436],[4,"LinesCodecError",4],[3,"Bytes",437],[4,"AnyDelimiterCodecError",4],[3,"FramedRead",4],[15,"str"],[8,"AsRef",438],[15,"bool"],[3,"Formatter",439],[6,"Result",439],[3,"FramedParts",4],[8,"Debug",439],[8,"Sized",440],[8,"AsyncRead",441],[8,"AsyncWrite",442],[8,"Hasher",443],[8,"FnOnce",444],[8,"Encoder",4],[15,"u8"],[3,"Vec",445],[8,"Decoder",4],[3,"Context",446],[4,"Poll",447],[8,"Sink",448],[8,"Stream",449],[3,"TypeId",450],[3,"Builder",218],[3,"LengthDelimitedCodec",218],[6,"Result",435],[3,"LengthDelimitedCodecError",218],[15,"isize"],[4,"Either",275],[8,"Clone",451],[8,"AsyncBufRead",452],[8,"Future",453],[15,"u64"],[8,"AsyncSeek",454],[15,"slice"],[3,"ReadBuf",455],[4,"SeekFrom",456],[3,"PollSender",302],[8,"Send",440],[3,"PollSemaphore",302],[3,"Semaphore",457],[3,"CancellationToken",302],[3,"WaitForCancellationFuture",302],[3,"WaitForCancellationFutureOwned",302],[3,"Arc",458],[3,"DropGuard",302],[3,"ReusableBoxFuture",302],[3,"PollSendError",302],[3,"Sender",459],[3,"OwnedSemaphorePermit",457],[15,"u32"]]},\
"tower_service":{"doc":"Definition of the core <code>Service</code> trait to Tower","t":"QQQIKK","n":["Error","Future","Response","Service","call","poll_ready"],"q":[[0,"tower_service"],[6,"core::task::wake"],[7,"core::result"],[8,"core::task::poll"]],"d":["Errors produced by the service.","The future response value.","Responses given by the service.","An asynchronous function from a <code>Request</code> to a <code>Response</code>.","Process the request and return the response asynchronously.","Returns <code>Poll::Ready(Ok(()))</code> when the service is able to …"],"i":[5,5,5,0,5,5],"f":[0,0,0,0,[[-1,-2],[],[],[]],[[-1,1],[[4,[[3,[2]]]]],[]]],"c":[],"p":[[3,"Context",6],[15,"tuple"],[4,"Result",7],[4,"Poll",8],[8,"Service",0]]},\
"tracing":{"doc":"A scoped, structured logging and diagnostics system.","t":"SDSDSIDDDISISLLLLLLLLLLLLLLLLLLLLLOOLALLLLLLLLLLKLOKLLLLLLLOOAKLOLOKLALLLLLLLLLLLLLLLLLLLLLLOOALLLLLLLLLLLLLLLALLLLLLLLKLLLLLKKLKLLLAOOALLLLLOOLLLLLLLLLLLLLLOODDDDLLLLLLFLFFLLLLLFDLLLLLLLLLLLLLLLLLLIDDDDDDIDIKLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDSDRSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDDDDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDILLLLLLLLLLLLLLLLLLLKLKLKLLKLLLLLLLLLLLLLLLLLLLLKLLKLKLLLFFLLLLLLLLLLLLLLLLLF","n":["DEBUG","Dispatch","ERROR","Event","INFO","Instrument","Level","Metadata","Span","Subscriber","TRACE","Value","WARN","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","clone","clone","clone","clone_into","clone_into","clone_into","clone_span","clone_span","cmp","current_span","current_span","debug","debug_span","default","dispatcher","downcast_raw","downcast_ref","downcast_ref","downcast_ref","downcast_ref","downcast_ref","downgrade","drop","drop_span","drop_span","enabled","enabled","enabled","enter","enter","eq","eq","eq","eq","equivalent","equivalent","error","error_span","event","event","event","event","event_enabled","event_enabled","exit","exit","field","fields","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","ge","ge","gt","gt","hash","hash","in_current_span","info","info_span","instrument","instrument","into","into","into","into","is","is","is","is","is","is_event","is_span","le","le","level","level_filters","line","lt","lt","max_level_hint","module_path","name","new","new","new_span","new_span","none","on_register_dispatch","partial_cmp","partial_cmp","record","record","record","record_follows_from","record_follows_from","register_callsite","register_callsite","span","span","span_enabled","subscriber","target","to_owned","to_owned","to_owned","to_string","trace","trace_span","try_close","try_close","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","warn","warn_span","DefaultGuard","Dispatch","SetGlobalDefaultError","WeakDispatch","borrow","borrow_mut","clone","clone_into","fmt","from","get_default","into","set_default","set_global_default","to_owned","try_from","try_into","type_id","upgrade","with_default","Event","borrow","borrow_mut","child_of","dispatch","fields","fmt","from","into","is_contextual","is_root","metadata","new","new_child_of","parent","record","try_from","try_into","type_id","AsField","DebugValue","DisplayValue","Empty","Field","FieldSet","Iter","Value","ValueSet","Visit","as_field","as_field","as_field","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","callsite","clone","clone","clone","clone_into","clone_into","clone_into","contains","debug","display","eq","eq","eq","equivalent","equivalent","equivalent","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","iter","len","len","name","new","next","record","record","record","record","record","record_bool","record_debug","record_error","record_f64","record_i128","record_i64","record_str","record_u128","record_u64","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Instrument","Instrumented","WithDispatch","WithSubscriber","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dispatcher","drop","fmt","fmt","from","from","in_current_span","inner","inner","inner_mut","inner_mut","inner_pin_mut","inner_pin_mut","inner_pin_ref","inner_pin_ref","instrument","into","into","into_future","into_future","into_inner","into_inner","poll","poll","span","span_mut","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_current_subscriber","with_subscriber","DEBUG","ERROR","INFO","LevelFilter","OFF","ParseLevelFilterError","STATIC_MAX_LEVEL","TRACE","WARN","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","current","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_level","from_str","ge","ge","gt","gt","hash","into","into","into_level","le","le","lt","lt","partial_cmp","partial_cmp","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AsId","Attributes","Entered","EnteredSpan","Id","Record","Span","as_id","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_of","child_of","clone","clone_into","contains","contains","current","deref","drop","drop","enter","entered","eq","equivalent","exit","field","fields","fmt","fmt","fmt","fmt","fmt","follows_from","from","from","from","from","from","from_non_zero_u64","from_u64","has_field","hash","id","id","in_scope","into","into","into","into","into","into_non_zero_u64","into_u64","is_contextual","is_disabled","is_empty","is_empty","is_none","is_root","len","metadata","metadata","new","new","new","new_disabled","new_root","new_root","none","or_current","parent","record","record","record","record_all","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","values","with_subscriber","DefaultGuard","Interest","NoSubscriber","SetGlobalDefaultError","Subscriber","always","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_span","current_span","default","downcast_raw","drop","drop_span","enabled","enabled","enter","enter","event","event","event_enabled","exit","exit","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_always","is_never","is_sometimes","max_level_hint","never","new","new_span","new_span","on_register_dispatch","record","record","record_follows_from","record_follows_from","register_callsite","register_callsite","set_default","set_global_default","sometimes","to_owned","to_owned","to_string","try_close","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_default"],"q":[[0,"tracing"],[159,"tracing::dispatcher"],[179,"tracing::event"],[198,"tracing::field"],[322,"tracing::instrument"],[370,"tracing::level_filters"],[426,"tracing::span"],[526,"tracing::subscriber"],[607,"tracing_core::callsite"],[608,"core::cmp"],[609,"tracing_core::span"],[610,"core::any"],[611,"core::option"],[612,"core::any"],[613,"core::fmt"],[614,"core::fmt"],[615,"core::marker"],[616,"core::hash"],[617,"tracing_core::metadata"],[618,"core::ops::function"],[619,"core::ops::function"],[620,"core::clone"],[621,"core::fmt"],[622,"core::marker"],[623,"core::pin"],[624,"core::task::wake"],[625,"core::task::poll"],[626,"core::future::future"],[627,"core::num::nonzero"]],"d":["The “debug” level.","<code>Dispatch</code> trace data to a <code>Subscriber</code>.","The “error” level.","<code>Event</code>s represent single points in time where something …","The “info” level.","Attaches spans to a <code>std::future::Future</code>.","Describes the level of verbosity of a span or event.","Metadata describing a span or event.","A handle representing a span, with the capability to enter …","Trait representing the functions required to collect trace …","The “trace” level.","A field value of an erased type.","The “warn” level.","Returns the string representation of the <code>Level</code>.","","","","","","","","","Returns an opaque <code>Identifier</code> that uniquely identifies the …","","","","","","","Notifies the subscriber that a span ID has been cloned.","Notifies the subscriber that a span ID has been cloned.","","Returns a type representing this subscriber’s view of …","Returns a type representing this subscriber’s view of …","Constructs an event at the debug level.","Constructs a span at the debug level.","Returns the current default dispatcher","Dispatches trace events to <code>Subscriber</code>s.","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","Returns some reference to this <code>[</code>Subscriber…","Returns some reference to this <code>Subscriber</code> value if it is …","Returns some reference to this <code>Subscriber</code> value if it is …","Returns some reference to this <code>Subscriber</code> value if it is …","Returns some reference to the <code>Subscriber</code> this <code>Dispatch</code> …","Creates a <code>WeakDispatch</code> from this <code>Dispatch</code>.","","<strong>This method is deprecated.</strong>","Notifies the subscriber that a span ID has been dropped.","Returns true if a span or event with the specified metadata…","Returns true if a span with the specified metadata would be","Checks whether a span or event is enabled based on the …","Records that a span has been entered.","Records that a span has been can_enter.","","","","","","","Constructs an event at the error level.","Constructs a span at the error level.","Events represent single points in time during the …","Records that an <code>Event</code> has occurred.","Records that an <code>Event</code> has occurred.","Constructs a new <code>Event</code>.","Determine if an <code>Event</code> should be recorded.","Tests whether an event with the specified level and target …","Records that a span has been exited.","Records that a span has been exited.","<code>Span</code> and <code>Event</code> key-value data.","Returns the names of the fields on the described span or …","Returns the name of the source code file where the span …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Instruments this type with the current <code>Span</code>, returning an …","Constructs an event at the info level.","Constructs a span at the info level.","Attach a span to a <code>std::future::Future</code>.","Instruments this type with the provided <code>Span</code>, returning an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Dispatch</code> forwards to a <code>Subscriber</code> of …","Returns true if the callsite kind is <code>Event</code>.","Return true if the callsite kind is <code>Span</code>.","","","Returns the level of verbosity of the described span or …","Trace verbosity level filtering.","Returns the line number in the source code file where the …","","","Returns the highest verbosity level that this <code>Subscriber</code> …","Returns the path to the Rust module where the span …","Returns the name of the span.","Construct new metadata for a span or event, with a name, …","Returns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.","Visit the construction of a new span, returning a new span …","Record the construction of a new span, returning a new ID …","Returns a new <code>Dispatch</code> that discards events and spans.","Invoked when this subscriber becomes a <code>Dispatch</code>.","","","Visits this value with the given <code>Visitor</code>.","Record a set of values on a span.","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this subscriber, returning …","Registers a new callsite with this subscriber, returning …","Spans represent periods of time in which a program was …","Constructs a new span.","Tests whether a span with the specified level and target …","Collects and records trace data.","Returns a string describing the part of the system where …","","","","","Constructs an event at the trace level.","Constructs a span at the trace level.","Notifies the subscriber that a span ID has been dropped, …","Notifies the subscriber that a span ID has been dropped, …","","","","","","","","","","","","","Constructs an event at the warn level.","Constructs a span at the warn level.","A guard that resets the current default dispatcher to the …","<code>Dispatch</code> trace data to a <code>Subscriber</code>.","Returned if setting the global dispatcher fails.","<code>WeakDispatch</code> is a version of <code>Dispatch</code> that holds a …","","","","","","Returns the argument unchanged.","Executes a closure with a reference to this thread’s …","Calls <code>U::from(self)</code>.","Sets the dispatch as the default dispatch for the duration …","Sets this dispatch as the global default for the duration …","","","","","Attempts to upgrade this <code>WeakDispatch</code> to a <code>Dispatch</code>.","Sets this dispatch as the default for the duration of a …","<code>Event</code>s represent single points in time where something …","","","Constructs a new <code>Event</code> with the specified metadata and set …","Constructs a new <code>Event</code> with the specified metadata and set …","Returns an iterator over the set of values on this <code>Event</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if the new event’s parent should be …","Returns true if the new event should be a root.","Returns metadata describing this <code>Event</code>.","Returns a new <code>Event</code> in the current span, with the …","Returns a new <code>Event</code> as a child of the specified span, with …","Returns the new event’s explicitly-specified parent, if …","Visits all the fields on this <code>Event</code> with the specified …","","","","Trait implemented to allow a type to be used as a field …","A <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.","A <code>Value</code> which serializes using <code>fmt::Display</code>.","An empty field.","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…","Describes the fields present on a span.","An iterator over a set of fields.","A field value of an erased type.","A set of fields and values for a span.","Visits typed values.","Attempts to convert <code>&amp;self</code> into a <code>Field</code> with the specified …","","","","","","","","","","","","","","","","","","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","","","","","","","Returns <code>true</code> if <code>self</code> contains the given <code>field</code>.","Wraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be","Wraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …","","","","","","","Returns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns whether or not this <code>FieldSet</code> has fields.","Returns true if this <code>ValueSet</code> contains <em>no</em> values.","Returns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.","Returns the number of fields in this <code>FieldSet</code>.","Returns the number of fields in this <code>ValueSet</code> that would …","Returns a string representing the name of the field.","Constructs a new <code>FieldSet</code> with the given array of field …","","Visits this value with the given <code>Visitor</code>.","Visits all the fields in this <code>ValueSet</code> with the provided …","","","","Visit a boolean value.","Visit a value implementing <code>fmt::Debug</code>.","Records a type implementing <code>Error</code>.","Visit a double-precision floating point value.","Visit a signed 128-bit integer value.","Visit a signed 64-bit integer value.","Visit a string value.","Visit an unsigned 128-bit integer value.","Visit an unsigned 64-bit integer value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attaches spans to a <code>std::future::Future</code>.","A <code>Future</code> that has been instrumented with a <code>tracing</code> <code>Span</code>.","A <code>Future</code> that has been instrumented with a <code>tracing</code> …","Extension trait allowing futures to be instrumented with a …","","","","","","","","","Borrows the <code>Dispatch</code> that is entered when this type is …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Instruments this type with the current <code>Span</code>, returning an …","Borrows the wrapped type.","Borrows the wrapped type.","Mutably borrows the wrapped type.","Mutably borrows the wrapped type.","Get a pinned mutable reference to the wrapped type.","Get a pinned mutable reference to the wrapped type.","Get a pinned reference to the wrapped type.","Get a pinned reference to the wrapped type.","Instruments this type with the provided <code>Span</code>, returning an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes the <code>Instrumented</code>, returning the wrapped type.","Consumes the <code>Instrumented</code>, returning the wrapped type.","","","Borrows the <code>Span</code> that this type is instrumented by.","Mutably borrows the <code>Span</code> that this type is instrumented by.","","","","","","","","","Attaches the current default <code>Subscriber</code> to this type, …","Attaches the provided <code>Subscriber</code> to this type, returning a …","The “debug” level.","The “error” level.","The “info” level.","A filter comparable to a verbosity <code>Level</code>.","The “off” level.","Indicates that a string could not be parsed to a valid …","The statically configured maximum trace level.","The “trace” level.","The “warn” level.","","","","","","","","","","Returns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>LevelFilter</code> that enables spans and events with …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the most verbose <code>Level</code> that this filter accepts, …","","","","","","","","","","","","","","","","","Trait implemented by types which have a span <code>Id</code>.","Attributes provided to a <code>Subscriber</code> describing a new span …","A guard representing a span which has been entered and is …","An owned version of <code>Entered</code>, a guard representing a span …","Identifies a span within the context of a subscriber.","A set of fields recorded by a span.","A handle representing a span, with the capability to enter …","Returns the <code>Id</code> of the span that <code>self</code> corresponds to, or …","","","","","","","","","","","Constructs a new <code>Span</code> as child of the given parent span, …","Returns <code>Attributes</code> describing a new child span of the …","","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …","Returns <code>true</code> if this <code>Record</code> contains a value for the given …","Returns a handle to the span considered by the <code>Subscriber</code> …","","","","Enters this span, returning a guard that will exit the …","Enters this span, consuming it and returning a guard that …","","","Exits this span, returning the underlying <code>Span</code>.","Returns a <code>Field</code> for the field with the given <code>name</code>, if one …","Returns the set of all fields defined by this span’s …","","","","","","Indicates that the span with the given ID has an indirect …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new span ID from the given <code>NonZeroU64</code>.","Constructs a new span ID from the given <code>u64</code>.","Returns true if this <code>Span</code> has a field for the given <code>Field</code> …","","Returns this span’s <code>Id</code>, if it is enabled.","Returns this span’s <code>Id</code>, if it is enabled.","Executes the given function in the context of this span.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the span’s ID as a <code>NonZeroU64</code>.","Returns the span’s ID as a <code>u64</code>.","Returns true if the new span’s parent should be …","Returns <code>true</code> if this span was disabled by the subscriber …","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.","Returns true if this <code>Record</code> contains <em>no</em> values.","Returns <code>true</code> if this span was constructed by <code>Span::none</code> …","Returns true if the new span should be a root.","Returns the number of fields that would be visited from …","Returns this span’s <code>Metadata</code>, if it is enabled.","Returns a reference to the new span’s metadata.","Constructs a new <code>Span</code> with the given metadata and set of …","Returns <code>Attributes</code> describing a new child span of the …","Constructs a new <code>Record</code> from a <code>ValueSet</code>.","Constructs a new disabled span with the given <code>Metadata</code>.","Constructs a new <code>Span</code> as the root of its own trace tree, …","Returns <code>Attributes</code> describing a new span at the root of …","Constructs a new span that is <em>completely disabled</em>.","Returns this span, if it was enabled by the current …","Returns the new span’s explicitly-specified parent, if …","Records that the field described by <code>field</code> has the value …","Records all the fields in this set of <code>Attributes</code> with the …","Records all the fields in this <code>Record</code> with the provided …","Records all the fields in the provided <code>ValueSet</code>.","","","","","","","","","","","","","","","","","Returns a reference to a <code>ValueSet</code> containing any values …","Invokes a function with a reference to this span’s ID …","A guard that resets the current default dispatcher to the …","Indicates a <code>Subscriber</code>’s interest in a particular …","A no-op <code>Subscriber</code>.","Returned if setting the global dispatcher fails.","Trait representing the functions required to collect trace …","Returns an <code>Interest</code> indicating the subscriber is always …","","","","","","","","","","","","","Notifies the subscriber that a span ID has been cloned.","Returns a type representing this subscriber’s view of …","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","","<strong>This method is deprecated.</strong>","Returns true if a span or event with the specified metadata…","","Records that a span has been entered.","","Records that an <code>Event</code> has occurred.","","Determine if an <code>Event</code> should be recorded.","Records that a span has been exited.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the subscriber is always interested in …","Returns <code>true</code> if the subscriber is never interested in …","Returns <code>true</code> if the subscriber is sometimes interested in …","Returns the highest verbosity level that this <code>Subscriber</code> …","Returns an <code>Interest</code> indicating that the subscriber is …","Returns a new <code>NoSubscriber</code>.","Visit the construction of a new span, returning a new span …","","Invoked when this subscriber becomes a <code>Dispatch</code>.","Record a set of values on a span.","","Adds an indication that <code>span</code> follows from the span with …","","Registers a new callsite with this subscriber, returning …","","Sets the <code>Subscriber</code> as the default for the current thread …","Sets this subscriber as the global default for the …","Returns an <code>Interest</code> indicating the subscriber is sometimes …","","","","Notifies the subscriber that a span ID has been dropped, …","","","","","","","","","","","","","Sets this <code>Subscriber</code> as the default for the current thread …"],"i":[1,0,1,0,1,0,0,0,0,0,1,0,1,1,5,3,6,1,5,3,6,1,3,5,6,1,5,6,1,13,6,1,13,6,0,0,6,0,13,13,13,13,13,6,6,5,13,6,13,6,0,13,6,5,3,1,1,3,1,0,0,0,13,6,0,13,0,13,6,0,3,3,20,20,5,3,6,1,1,5,3,6,6,1,1,1,1,1,1,5,1,72,0,0,0,72,5,3,6,1,13,13,13,13,6,3,3,1,1,3,0,3,1,1,13,3,3,3,6,13,6,6,13,1,1,20,13,6,13,6,13,6,0,0,0,0,3,5,6,1,1,0,0,13,6,5,3,6,1,5,3,6,1,5,3,6,1,0,0,0,0,0,0,15,15,15,15,15,15,0,15,0,0,15,15,15,15,15,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,69,33,33,33,19,42,33,50,44,45,48,19,42,33,50,44,45,48,42,33,33,45,48,33,45,48,19,0,0,19,33,50,19,33,50,19,19,19,42,42,33,33,50,44,45,45,48,19,42,33,50,44,45,48,33,19,42,33,50,44,45,48,19,44,19,42,19,19,42,33,19,44,20,42,50,45,48,34,34,34,34,34,34,34,34,34,33,45,48,19,42,33,45,19,42,33,50,44,45,48,19,42,33,50,44,45,48,19,42,33,50,44,45,48,0,0,0,0,61,29,61,29,61,29,61,29,61,29,61,29,61,29,72,61,29,61,29,61,29,61,29,72,61,29,61,29,61,29,61,29,29,29,61,29,61,29,61,29,61,29,73,73,17,17,17,0,17,0,0,17,17,17,66,17,66,17,66,17,66,17,17,17,17,17,17,17,66,66,17,17,17,66,17,17,17,17,17,17,17,17,66,17,17,17,17,17,17,17,17,66,17,66,17,66,17,66,17,66,0,0,0,0,0,0,0,74,68,67,8,32,35,68,67,8,32,35,5,32,8,8,32,35,5,67,68,67,5,5,8,8,67,5,32,68,67,8,32,35,5,68,67,8,32,35,8,8,5,8,5,67,5,68,67,8,32,35,8,8,32,5,32,35,5,32,35,5,32,5,32,35,5,5,32,5,5,32,5,32,35,5,8,68,67,8,32,35,68,67,8,32,35,68,67,8,32,35,32,5,0,0,0,0,0,36,40,39,36,71,40,39,36,71,36,71,36,71,13,13,71,13,39,13,13,71,13,71,13,71,13,13,71,40,40,39,36,71,40,39,36,71,40,39,36,71,36,36,36,13,36,71,13,71,13,13,71,13,71,13,71,0,0,36,36,71,40,13,40,39,36,71,40,39,36,71,40,39,36,71,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[5,5],[6,6],[1,1],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,8],8,[]],[[6,8],8],[[1,1],9],[-1,10,[]],[6,10],0,0,[[],6],0,[[-1,11],[[12,[7]]],[]],[13,[[12,[-1]]],14],[13,[[12,[-1]]],14],[13,[[12,[-1]]],14],[13,[[12,[-1]]],14],[6,[[12,[-1]]],14],[6,15],[5,7],[[-1,8],7,[]],[[6,8],7],[[-1,3],16,[]],[[6,3],16],0,[[-1,8],7,[]],[[6,8],7],[[5,5],16],[[3,3],16],[[1,17],16],[[1,1],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],0,0,0,[[-1,18],7,[]],[[6,18],7],0,[[-1,18],16,[]],0,[[-1,8],7,[]],[[6,8],7],0,[3,19],[3,[[12,[2]]]],[[20,21],[[23,[7,22]]]],[[20,21],[[23,[7,22]]]],[[5,21],24],[[3,21],[[23,[7,22]]]],[[6,21],[[23,[7,22]]]],[[1,21],[[23,[7,22]]]],[[1,21],[[23,[7,22]]]],[-1,-1,[]],[-1,-1,[]],[-1,6,[13,25,26]],[-1,-1,[]],[-1,-1,[]],[2,[[23,[1,27]]]],[[1,17],16],[[1,1],16],[[1,1],16],[[1,17],16],[[5,-1],7,28],[[1,-1],7,28],[-1,[[29,[-1]]],[]],0,0,0,[[-1,5],[[29,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,16],[13,16],[13,16],[13,16],[6,16],[3,16],[3,16],[[1,17],16],[[1,1],16],[3,1],0,[3,[[12,[30]]]],[[1,1],16],[[1,17],16],[-1,[[12,[17]]],[]],[3,[[12,[2]]]],[3,2],[[2,2,1,[12,[2]],[12,[30]],[12,[2]],19,31],3],[-1,6,[13,25,26]],[[-1,32],8,[]],[[6,32],8],[[],6],[[-1,6],7,[]],[[1,17],[[12,[9]]]],[[1,1],[[12,[9]]]],[[-1,33,34],7,[]],[[-1,8,35],7,[]],[[6,8,35],7],[[-1,8,8],7,[]],[[6,8,8],7],[[-1,3],36,[]],[[6,3],36],0,0,0,0,[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],0,0,[[-1,8],16,[]],[[6,8],16],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],7,[],[]],[[15,21],[[23,[7,22]]]],[-1,-1,[]],[-1,-2,38,[]],[-1,-2,[],[]],[6,39],[6,[[23,[7,40]]]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],[15,[[12,[6]]]],[[6,-1],-2,41,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,3,42],7,[[43,[[12,[8]]]]]],[[3,42],7],[18,44],[[18,21],[[23,[7,22]]]],[-1,-1,[]],[-1,-2,[],[]],[18,16],[18,16],[18,3],[[3,42],18],[[-1,3,42],18,[[43,[[12,[8]]]]]],[18,[[12,[8]]]],[[18,34],7],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,[[-1,3],[[12,[33]]],[]],[[33,3],[[12,[33]]]],[[33,3],[[12,[33]]]],[33,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,4],[33,4],[33,33],[[[45,[-1]]],[[45,[-1]]],[46,47]],[[[48,[-1]]],[[48,[-1]]],[46,49]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[19,33],16],[-1,[[48,[-1]]],49],[-1,[[45,[-1]]],47],[[19,19],16],[[33,33],16],[[50,50],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[19,-1],[[12,[33]]],[[51,[2]],52]],[[19,21],[[23,[7,22]]]],[[19,21],[[23,[7,22]]]],[[42,21],[[23,[7,22]]]],[[42,21],[[23,[7,22]]]],[[33,21],[[23,[7,22]]]],[[33,21],[[23,[7,22]]]],[[50,21],[[23,[7,22]]]],[[44,21],[[23,[7,22]]]],[[[45,[-1]],21],[[23,[7,22]]],47],[[[45,[-1]],21],[[23,[7,22]]],47],[[[48,[-1]],21],[[23,[7,22]]],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[33,-1],7,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19],[-1,-2,[],[]],[19,16],[42,16],[19,44],[19,53],[42,53],[33,2],[[[54,[2]],4],19],[44,[[12,[33]]]],[[-1,33,34],7,[]],[[42,34],7],[[50,33,34],7],[[[45,[-1]],33,34],7,47],[[[48,[-1]],33,34],7,49],[[-1,33,16],7,[]],[[-1,33,49],7,[]],[[-1,33,55],7,[]],[[-1,33,56],7,[]],[[-1,33,57],7,[]],[[-1,33,58],7,[]],[[-1,33,2],7,[]],[[-1,33,59],7,[]],[[-1,33,60],7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[61,[-1]]],[[61,[-1]]],46],[[[29,[-1]]],[[29,[-1]]],46],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[61,[-1]]],6,[]],[[[29,[-1]]],7,[]],[[[61,[-1]],21],24,49],[[[29,[-1]],21],24,49],[-1,-1,[]],[-1,-1,[]],[-1,[[29,[-1]]],[]],[[[61,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[[[61,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[[[62,[[61,[-1]]]]],[[62,[-1]]],[]],[[[62,[[29,[-1]]]]],[[62,[-1]]],[]],[[[62,[[61,[-1]]]]],[[62,[-1]]],[]],[[[62,[[29,[-1]]]]],[[62,[-1]]],[]],[[-1,5],[[29,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[61,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[[[62,[[61,[-1]]]],63],64,65],[[[62,[[29,[-1]]]],63],64,65],[[[29,[-1]]],5,[]],[[[29,[-1]]],5,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,[[61,[-1]]],[]],[[-1,-2],[[61,[-1]]],[],[[43,[6]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[66,66],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[17,17],9],[[],17],[[17,1],16],[[17,17],16],[[-1,-2],16,[],[]],[[17,21],[[23,[7,22]]]],[[17,21],[[23,[7,22]]]],[[66,21],[[23,[7,22]]]],[[66,21],[[23,[7,22]]]],[[[12,[1]]],17],[1,17],[-1,-1,[]],[-1,-1,[]],[1,17],[2,[[23,[17]]]],[[17,1],16],[[17,17],16],[[17,17],16],[[17,1],16],[[17,-1],7,28],[-1,-2,[],[]],[-1,-2,[],[]],[17,[[12,[1]]]],[[17,1],16],[[17,17],16],[[17,17],16],[[17,1],16],[[17,17],[[12,[9]]]],[[17,1],[[12,[9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[-1,37,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,[-1,[[12,[8]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,3,42],5,[[43,[[12,[8]]]]]],[[8,3,42],32],[8,8],[[-1,-2],7,[],[]],[[32,33],16],[[35,33],16],[[],5],[67,5],[68,7],[67,7],[5,68],[5,67],[[8,8],16],[[-1,-2],16,[],[]],[67,5],[[5,-1],[[12,[33]]],[69,52]],[32,19],[[68,21],24],[[67,21],24],[[8,21],[[23,[7,22]]]],[[32,21],[[23,[7,22]]]],[[35,21],[[23,[7,22]]]],[[5,-1],5,[[43,[[12,[8]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[70,8],[60,8],[[5,-1],16,[69,52]],[[8,-1],7,28],[5,[[12,[8]]]],[67,[[12,[8]]]],[[5,-1],-2,41,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,70],[8,60],[32,16],[5,16],[32,16],[35,16],[5,16],[32,16],[35,53],[5,[[12,[3]]]],[32,3],[[3,42],5],[[3,42],32],[42,35],[3,5],[[3,42],5],[[3,42],32],[[],5],[5,5],[32,[[12,[8]]]],[[5,-1,-2],5,[69,52],20],[[32,34],7],[[35,34],7],[[5,42],5],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[32,42],[[5,-1],[[12,[-2]]],41,[]],0,0,0,0,0,[[],36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[71,71],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,8],8,[]],[-1,10,[]],[[],71],[[-1,11],[[12,[7]]],[]],[39,7],[[-1,8],7,[]],[[-1,3],16,[]],[[71,3],16],[[-1,8],7,[]],[[71,8],7],[[-1,18],7,[]],[[71,18],7],[[-1,18],16,[]],[[-1,8],7,[]],[[71,8],7],[[40,21],[[23,[7,22]]]],[[40,21],[[23,[7,22]]]],[[39,21],[[23,[7,22]]]],[[36,21],[[23,[7,22]]]],[[71,21],[[23,[7,22]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,16],[36,16],[36,16],[-1,[[12,[17]]],[]],[[],36],[[],71],[[-1,32],8,[]],[[71,32],8],[[-1,6],7,[]],[[-1,8,35],7,[]],[[71,8,35],7],[[-1,8,8],7,[]],[[71,8,8],7],[[-1,3],36,[]],[[71,3],36],[-1,39,[13,25,26]],[-1,[[23,[7,40]]],[13,25,26]],[[],36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,37,[]],[[-1,8],16,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[-1,-2],-3,[13,25,26],41,[]]],"c":[46,47,549],"p":[[3,"Level",0],[15,"str"],[3,"Metadata",0],[3,"Identifier",607],[3,"Span",0],[3,"Dispatch",0],[15,"tuple"],[3,"Id",426],[4,"Ordering",608],[3,"Current",609],[3,"TypeId",610],[4,"Option",611],[8,"Subscriber",0],[8,"Any",610],[3,"WeakDispatch",159],[15,"bool"],[3,"LevelFilter",370],[3,"Event",179],[3,"FieldSet",198],[8,"Value",0],[3,"Formatter",612],[3,"Error",612],[4,"Result",613],[6,"Result",612],[8,"Send",614],[8,"Sync",614],[3,"ParseLevelError",615],[8,"Hasher",616],[3,"Instrumented",322],[15,"u32"],[3,"Kind",615],[3,"Attributes",426],[3,"Field",198],[8,"Visit",198],[3,"Record",426],[3,"Interest",526],[3,"String",617],[8,"FnMut",618],[3,"DefaultGuard",526],[3,"SetGlobalDefaultError",526],[8,"FnOnce",618],[3,"ValueSet",198],[8,"Into",619],[3,"Iter",198],[3,"DisplayValue",198],[8,"Clone",620],[8,"Display",612],[3,"DebugValue",198],[8,"Debug",612],[3,"Empty",198],[8,"Borrow",621],[8,"Sized",614],[15,"usize"],[15,"slice"],[8,"Error",622],[15,"f64"],[15,"i128"],[15,"i64"],[15,"u128"],[15,"u64"],[3,"WithDispatch",322],[3,"Pin",623],[3,"Context",624],[4,"Poll",625],[8,"Future",626],[3,"ParseLevelFilterError",370],[3,"EnteredSpan",426],[3,"Entered",426],[8,"AsField",198],[3,"NonZeroU64",627],[3,"NoSubscriber",526],[8,"Instrument",0],[8,"WithSubscriber",322],[8,"AsId",426]]},\
"tracing_core":{"doc":"Core primitives for <code>tracing</code>.","t":"IDDDCCDDDDILLLLLLLLLLLLLLLLLALLLLLLLLLLLLLALLKKLLLLLLLLLLAKLKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLAKOLKLLLLLKKLKAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDLLLLLLLLLLLLLLLLKLLFFLKLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLFFLLLLLLLLLLLLLFDLLLLLLLLLLDDDDDDIDILLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSDDDDSDDSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLLLLLLLLLLLLLKLKLKLLKLLLLLLLLLLLLLLLLLKLLKLKLLLLLLLLLLLLL","n":["Callsite","Dispatch","Event","Field","Interest","Kind","Level","LevelFilter","Metadata","Once","Subscriber","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_once","call_once_force","callsite","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_span","cmp","cmp","current_span","default","dispatcher","downcast_raw","drop_span","enabled","enter","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","event","event","event_enabled","exit","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","identify_callsite","into","into","into","into","into","into","into","is_completed","le","le","le","le","lt","lt","lt","lt","max_level_hint","metadata","metadata","metadata","new","new_span","on_register_dispatch","partial_cmp","partial_cmp","partial_cmp","partial_cmp","record","record_follows_from","register_callsite","set_interest","span","subscriber","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_close","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Callsite","DefaultCallsite","Identifier","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from","hash","interest","into","into","metadata","metadata","new","rebuild_interest_cache","register","register","set_interest","set_interest","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DefaultGuard","Dispatch","SetGlobalDefaultError","WeakDispatch","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","clone_span","current_span","downcast_ref","downgrade","drop","drop_span","enabled","enter","event","exit","fmt","fmt","fmt","fmt","from","from","from","get_default","into","into","into","is","new","new_span","none","record","record_follows_from","register_callsite","set_default","set_global_default","to_owned","to_string","try_close","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upgrade","with_default","Event","child_of","dispatch","fields","is_contextual","is_root","metadata","new","new_child_of","parent","record","DebugValue","DisplayValue","Empty","Field","FieldSet","Iter","Value","ValueSet","Visit","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","callsite","clone","clone","clone_into","clone_into","contains","debug","display","eq","eq","equivalent","equivalent","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","iter","len","len","name","new","next","record","record","record","record","record","record_bool","record_debug","record_error","record_f64","record_i128","record_i64","record_str","record_u128","record_u64","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DEBUG","DEBUG","ERROR","ERROR","EVENT","HINT","INFO","INFO","Kind","Level","LevelFilter","Metadata","OFF","ParseLevelError","ParseLevelFilterError","SPAN","TRACE","TRACE","WARN","WARN","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","callsite","clone","clone","clone_into","clone_into","current","eq","equivalent","fields","file","fmt","fmt","fmt","fmt","fmt","from","from","from","from_level","hint","into","into","into","into_level","is_event","is_event","is_hint","is_span","is_span","level","line","module_path","name","new","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Attributes","Current","Id","Record","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_of","clone","clone_into","contains","contains","eq","equivalent","fields","fmt","fmt","fmt","fmt","from","from","from","from","from_non_zero_u64","from_u64","hash","id","into","into","into","into","into_inner","into_non_zero_u64","into_u64","is_contextual","is_empty","is_empty","is_known","is_root","len","metadata","metadata","new","new","new","new_root","none","parent","record","record","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","values","Interest","NoSubscriber","Subscriber","always","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_span","current_span","default","downcast_raw","downcast_ref","downcast_ref","downcast_ref","downcast_ref","drop_span","enabled","enabled","enter","enter","event","event","event_enabled","exit","exit","fmt","fmt","from","from","into","into","is","is","is","is","is_always","is_never","is_sometimes","max_level_hint","never","new","new_span","new_span","on_register_dispatch","record","record","record_follows_from","record_follows_from","register_callsite","register_callsite","sometimes","to_owned","to_owned","try_close","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"tracing_core"],[158,"tracing_core::callsite"],[192,"tracing_core::dispatcher"],[248,"tracing_core::event"],[259,"tracing_core::field"],[364,"tracing_core::metadata"],[439,"tracing_core::span"],[508,"tracing_core::subscriber"],[573,"core::ops::function"],[574,"core::cmp"],[575,"core::any"],[576,"core::option"],[577,"core::fmt"],[578,"core::fmt"],[579,"core::marker"],[580,"core::marker"],[581,"alloc::string"],[582,"core::any"],[583,"core::clone"],[584,"core::fmt"],[585,"core::marker"],[586,"core::num::nonzero"]],"d":["Trait implemented by callsites.","<code>Dispatch</code> trace data to a <code>Subscriber</code>.","<code>Event</code>s represent single points in time where something …","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…","","","Describes the level of verbosity of a span or event.","A filter comparable to a verbosity <code>Level</code>.","Metadata describing a span or event.","A synchronization primitive which can be used to run a …","Trait representing the functions required to collect trace …","","","","","","","","","","","","","","","","Performs an initialization routine once and only once. The …","Performs the same function as <code>call_once()</code> except ignores …","Callsites represent the source locations from which spans …","","","","","","","","","Notifies the subscriber that a span ID has been cloned.","","","Returns a type representing this subscriber’s view of …","Returns the current default dispatcher","Dispatches trace events to <code>Subscriber</code>s.","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","<strong>This method is deprecated.</strong>","Returns true if a span or event with the specified metadata…","Records that a span has been entered.","","","","","","","","","","","Events represent single points in time during the …","Records that an <code>Event</code> has occurred.","Determine if an <code>Event</code> should be recorded.","Records that a span has been exited.","<code>Span</code> and <code>Event</code> key-value data.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Statically constructs an <code>Identifier</code> for the provided …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if some <code>call_once()</code> call has completed …","","","","","","","","","Returns the highest verbosity level that this <code>Subscriber</code> …","Metadata describing trace data.","Returns the metadata associated with the callsite.","Statically constructs new span metadata.","Creates a new <code>Once</code> value.","Visit the construction of a new span, returning a new span …","Invoked when this subscriber becomes a <code>Dispatch</code>.","","","","","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this subscriber, returning …","Sets the <code>Interest</code> for this callsite.","Spans represent periods of time in the execution of a …","Collectors collect and record trace data.","","","","","","","","Notifies the subscriber that a span ID has been dropped, …","","","","","","","","","","","","","","","","","","","","","","Trait implemented by callsites.","A default <code>Callsite</code> implementation.","Uniquely identifies a <code>Callsite</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the callsite’s cached <code>Interest</code>, or registers it …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the metadata associated with the callsite.","","Returns a new <code>DefaultCallsite</code> with the specified <code>Metadata</code>.","Clear and reregister interest on every <code>Callsite</code>","Register a new <code>Callsite</code> with the global registry.","Registers this callsite with the global callsite registry.","Sets the <code>Interest</code> for this callsite.","","","","","","","","","A guard that resets the current default dispatcher to the …","<code>Dispatch</code> trace data to a <code>Subscriber</code>.","Returned if setting the global dispatcher fails.","<code>WeakDispatch</code> is a version of <code>Dispatch</code> that holds a …","","","","","","","","","Notifies the subscriber that a span ID has been cloned.","Returns a type representing this subscriber’s view of …","Returns some reference to the <code>Subscriber</code> this <code>Dispatch</code> …","Creates a <code>WeakDispatch</code> from this <code>Dispatch</code>.","","Notifies the subscriber that a span ID has been dropped.","Returns true if a span with the specified metadata would be","Records that a span has been can_enter.","Records that an <code>Event</code> has occurred.","Records that a span has been exited.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Executes a closure with a reference to this thread’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>Dispatch</code> forwards to a <code>Subscriber</code> of …","Returns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.","Record the construction of a new span, returning a new ID …","Returns a new <code>Dispatch</code> that discards events and spans.","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this subscriber, returning …","Sets the dispatch as the default dispatch for the duration …","Sets this dispatch as the global default for the duration …","","","Notifies the subscriber that a span ID has been dropped, …","","","","","","","","","","Attempts to upgrade this <code>WeakDispatch</code> to a <code>Dispatch</code>.","Sets this dispatch as the default for the duration of a …","<code>Event</code>s represent single points in time where something …","Constructs a new <code>Event</code> with the specified metadata and set …","Constructs a new <code>Event</code> with the specified metadata and set …","Returns an iterator over the set of values on this <code>Event</code>.","Returns true if the new event’s parent should be …","Returns true if the new event should be a root.","Returns metadata describing this <code>Event</code>.","Returns a new <code>Event</code> in the current span, with the …","Returns a new <code>Event</code> as a child of the specified span, with …","Returns the new event’s explicitly-specified parent, if …","Visits all the fields on this <code>Event</code> with the specified …","A <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.","A <code>Value</code> which serializes using <code>fmt::Display</code>.","An empty field.","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…","Describes the fields present on a span.","An iterator over a set of fields.","A field value of an erased type.","A set of fields and values for a span.","Visits typed values.","","","","","","","","","","","","","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","","","","","Returns <code>true</code> if <code>self</code> contains the given <code>field</code>.","Wraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be","Wraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …","","","","","Returns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns whether or not this <code>FieldSet</code> has fields.","Returns true if this <code>ValueSet</code> contains <em>no</em> values.","Returns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.","Returns the number of fields in this <code>FieldSet</code>.","Returns the number of fields in this <code>ValueSet</code> that would …","Returns a string representing the name of the field.","Constructs a new <code>FieldSet</code> with the given array of field …","","Visits this value with the given <code>Visitor</code>.","Visits all the fields in this <code>ValueSet</code> with the provided …","","","","Visit a boolean value.","Visit a value implementing <code>fmt::Debug</code>.","Records a type implementing <code>Error</code>.","Visit a double-precision floating point value.","Visit a signed 128-bit integer value.","Visit a signed 64-bit integer value.","Visit a string value.","Visit an unsigned 128-bit integer value.","Visit an unsigned 64-bit integer value.","","","","","","","","","","","","","","","","","","","","","","","","The “debug” level.","The “debug” level.","The “error” level.","The “error” level.","<code>Event</code> callsite","<code>enabled!</code> callsite. <code>Subscriber</code>s can assume this <code>Kind</code> means …","The “info” level.","The “info” level.","Indicates whether the callsite is a span or event.","Describes the level of verbosity of a span or event.","A filter comparable to a verbosity <code>Level</code>.","Metadata describing a span or event.","The “off” level.","Returned if parsing a <code>Level</code> fails.","Indicates that a string could not be parsed to a valid …","<code>Span</code> callsite","The “trace” level.","The “trace” level.","The “warn” level.","The “warn” level.","Returns the string representation of the <code>Level</code>.","","","","","","","Returns an opaque <code>Identifier</code> that uniquely identifies the …","","","","","Returns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …","","","Returns the names of the fields on the described span or …","Returns the name of the source code file where the span …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>LevelFilter</code> that enables spans and events with …","Sets that this <code>Kind</code> is a hint.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the most verbose <code>Level</code> that this filter accepts, …","Returns true if the callsite kind is <code>Event</code>.","Return true if the callsite kind is <code>Event</code>","Return true if the callsite kind is <code>Hint</code>","Return true if the callsite kind is <code>Span</code>.","Return true if the callsite kind is <code>Span</code>","Returns the level of verbosity of the described span or …","Returns the line number in the source code file where the …","Returns the path to the Rust module where the span …","Returns the name of the span.","Construct new metadata for a span or event, with a name, …","Returns a string describing the part of the system where …","","","","","","","","","","","","","","Attributes provided to a <code>Subscriber</code> describing a new span …","Indicates what the <code>Subscriber</code> considers the “current” …","Identifies a span within the context of a subscriber.","A set of fields recorded by a span.","","","","","","","","","Returns <code>Attributes</code> describing a new child span of the …","","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …","Returns <code>true</code> if this <code>Record</code> contains a value for the given …","","","Returns the set of all fields defined by this span’s …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new span ID from the given <code>NonZeroU64</code>.","Constructs a new span ID from the given <code>u64</code>.","","Borrows the <code>Id</code> of the current span, if one exists and is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code> and returns the span <code>Id</code> and <code>Metadata</code> of the …","Returns the span’s ID as a <code>NonZeroU64</code>.","Returns the span’s ID as a <code>u64</code>.","Returns true if the new span’s parent should be …","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.","Returns true if this <code>Record</code> contains <em>no</em> values.","Returns <code>true</code> if the <code>Subscriber</code> that constructed this …","Returns true if the new span should be a root.","Returns the number of fields that would be visited from …","Returns a reference to the new span’s metadata.","Borrows the <code>Metadata</code> of the current span, if one exists …","Returns <code>Attributes</code> describing a new child span of the …","Constructs a new <code>Record</code> from a <code>ValueSet</code>.","Constructs a new <code>Current</code> that indicates the current …","Returns <code>Attributes</code> describing a new span at the root of …","Constructs a new <code>Current</code> that indicates the current …","Returns the new span’s explicitly-specified parent, if …","Records all the fields in this set of <code>Attributes</code> with the …","Records all the fields in this <code>Record</code> with the provided …","","","","","","","","","","","","","","Returns a reference to a <code>ValueSet</code> containing any values …","Indicates a <code>Subscriber</code>’s interest in a particular …","A no-op <code>Subscriber</code>.","Trait representing the functions required to collect trace …","Returns an <code>Interest</code> indicating the subscriber is always …","","","","","","","","","Notifies the subscriber that a span ID has been cloned.","Returns a type representing this subscriber’s view of …","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …","Returns some reference to this <code>Subscriber</code> value if it is …","Returns some reference to this <code>Subscriber</code> value if it is …","Returns some reference to this <code>[</code>Subscriber…","Returns some reference to this <code>Subscriber</code> value if it is …","<strong>This method is deprecated.</strong>","Returns true if a span or event with the specified metadata…","","Records that a span has been entered.","","Records that an <code>Event</code> has occurred.","","Determine if an <code>Event</code> should be recorded.","Records that a span has been exited.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.","Returns <code>true</code> if the subscriber is always interested in …","Returns <code>true</code> if the subscriber is never interested in …","Returns <code>true</code> if the subscriber is sometimes interested in …","Returns the highest verbosity level that this <code>Subscriber</code> …","Returns an <code>Interest</code> indicating that the subscriber is …","Returns a new <code>NoSubscriber</code>.","Visit the construction of a new span, returning a new span …","","Invoked when this subscriber becomes a <code>Dispatch</code>.","Record a set of values on a span.","","Adds an indication that <code>span</code> follows from the span with …","","Registers a new callsite with this subscriber, returning …","","Returns an <code>Interest</code> indicating the subscriber is sometimes …","","","Notifies the subscriber that a span ID has been dropped, …","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,14,6,16,1,7,8,3,14,6,16,1,7,8,3,3,3,0,6,1,7,8,6,1,7,8,21,7,8,21,6,0,21,21,21,21,14,1,7,7,8,8,14,1,7,8,0,21,21,21,0,14,6,16,1,1,7,7,8,8,3,14,6,6,16,1,7,8,8,8,3,7,8,7,7,8,8,7,7,8,8,1,7,8,0,14,6,16,1,7,8,3,3,7,7,8,8,7,7,8,8,21,0,32,0,3,21,21,7,7,8,8,21,21,21,32,0,0,6,1,7,8,1,7,8,21,14,6,16,1,7,8,3,14,6,16,1,7,8,3,14,6,16,1,7,8,3,0,0,0,30,31,30,31,30,30,30,30,30,31,30,31,30,31,30,31,32,31,31,0,0,31,32,31,30,30,31,30,31,30,31,0,0,0,0,36,33,35,36,33,35,33,33,6,6,6,6,35,6,6,6,6,6,36,36,33,35,36,33,35,0,36,33,35,6,6,6,6,6,6,6,0,0,33,36,6,36,33,35,36,33,35,36,33,35,33,0,0,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,47,38,48,40,42,45,47,38,48,40,42,45,38,1,42,45,42,45,47,0,0,47,48,47,48,47,47,47,38,38,51,51,48,40,42,42,45,47,38,48,40,42,45,47,38,48,40,42,45,47,40,47,38,47,47,38,1,47,40,51,38,48,42,45,41,41,41,41,41,41,41,41,41,42,45,47,38,42,47,38,48,40,42,45,47,38,48,40,42,45,47,38,48,40,42,45,7,8,7,8,60,60,7,8,0,0,0,0,8,0,0,60,7,8,7,8,7,60,61,24,60,61,24,14,60,61,60,61,8,60,60,14,14,60,61,61,24,24,60,61,24,8,60,60,61,24,8,14,60,60,14,60,14,14,14,14,14,14,60,61,61,24,60,61,24,60,61,24,60,61,24,0,0,0,0,9,26,27,11,9,26,27,11,26,9,9,26,27,9,9,26,9,26,27,11,9,26,27,11,9,9,9,11,9,26,27,11,11,9,9,26,26,27,11,26,27,26,11,26,27,11,26,11,26,26,27,9,9,26,27,11,9,26,27,11,9,26,27,11,26,0,0,0,28,28,64,28,64,28,64,28,64,21,21,64,21,21,21,21,21,21,21,64,21,64,21,64,21,21,64,28,64,28,64,28,64,21,21,21,21,28,28,28,21,28,64,21,64,21,21,64,21,64,21,64,28,28,64,21,28,64,28,64,28,64],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,-1],4,5],[[3,-1],4,5],0,[6,6],[1,1],[7,7],[8,8],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,9],9,[]],[[7,7],10],[[8,8],10],[-1,11,[]],[[],6],0,[[-1,12],[[13,[4]]],[]],[[-1,9],4,[]],[[-1,14],15,[]],[[-1,9],4,[]],[[14,14],15],[[1,1],15],[[7,8],15],[[7,7],15],[[8,7],15],[[8,8],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],0,[[-1,16],4,[]],[[-1,16],15,[]],[[-1,9],4,[]],0,[[14,17],18],[[6,17],18],[[16,17],18],[[1,17],18],[[1,17],18],[[7,17],18],[[7,17],18],[[8,17],18],[[8,17],18],[[3,17],[[20,[4,19]]]],[-1,-1,[]],[-1,-1,[]],[-1,6,[21,22,23]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[13,[7]]],8],[7,8],[-1,-1,[]],[-1,-1,[]],[2,[[20,[7,24]]]],[2,[[20,[8]]]],[[7,8],15],[[7,7],15],[[8,7],15],[[8,8],15],[[7,8],15],[[7,7],15],[[8,7],15],[[8,8],15],[[1,-1],4,25],[[7,-1],4,25],[[8,-1],4,25],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,15],[[7,7],15],[[7,8],15],[[8,8],15],[[8,7],15],[[7,8],15],[[7,7],15],[[8,8],15],[[8,7],15],[-1,[[13,[8]]],[]],0,[-1,14,[]],0,[[],3],[[-1,26],9,[]],[[-1,6],4,[]],[[7,8],[[13,[10]]]],[[7,7],[[13,[10]]]],[[8,8],[[13,[10]]]],[[8,7],[[13,[10]]]],[[-1,9,27],4,[]],[[-1,9,9],4,[]],[[-1,14],28,[]],[[-1,28],4,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[[-1,9],15,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[[-1,-2],4,[],[]],[[30,30],15],[[-1,-2],15,[],[]],[[30,17],18],[[31,17],18],[-1,-1,[]],[-1,-1,[]],[[30,-1],4,25],[31,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[31,14],[14,31],[[],4],[32,4],[31,28],[[-1,28],4,[]],[[31,28],4],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],4,[],[]],[[6,9],9],[6,11],[6,[[13,[-1]]],34],[6,33],[35,4],[[6,9],4],[[6,14],15],[[6,9],4],[[6,16],4],[[6,9],4],[[36,17],18],[[36,17],18],[[33,17],18],[[35,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,37,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,15],[-1,6,[21,22,23]],[[6,26],9],[[],6],[[6,9,27],4],[[6,9,9],4],[[6,14],28],[6,35],[6,[[20,[4,36]]]],[-1,-2,[],[]],[-1,29,[]],[[6,9],15],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[33,[[13,[6]]]],[[6,-1],-2,5,[]],0,[[-1,14,38],4,[[39,[[13,[9]]]]]],[[14,38],4],[16,40],[16,15],[16,15],[16,14],[[14,38],16],[[-1,14,38],16,[[39,[[13,[9]]]]]],[16,[[13,[9]]]],[[16,41],4],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,30],[1,30],[[[42,[-1]]],[[42,[-1]]],[43,44]],[[[45,[-1]]],[[45,[-1]]],[43,46]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[47,1],15],[-1,[[45,[-1]]],46],[-1,[[42,[-1]]],44],[[47,47],15],[[48,48],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[47,-1],[[13,[1]]],[[49,[2]],50]],[[47,17],18],[[47,17],18],[[38,17],18],[[38,17],18],[[51,17],18],[[51,17],18],[[48,17],18],[[40,17],18],[[[42,[-1]],17],18,44],[[[42,[-1]],17],18,44],[[[45,[-1]],17],18,46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47],[-1,-2,[],[]],[47,15],[38,15],[47,40],[47,52],[38,52],[1,2],[[[53,[2]],30],47],[40,[[13,[1]]]],[[-1,1,41],4,[]],[[38,41],4],[[48,1,41],4],[[[42,[-1]],1,41],4,44],[[[45,[-1]],1,41],4,46],[[-1,1,15],4,[]],[[-1,1,46],4,[]],[[-1,1,54],4,[]],[[-1,1,55],4,[]],[[-1,1,56],4,[]],[[-1,1,57],4,[]],[[-1,1,2],4,[]],[[-1,1,58],4,[]],[[-1,1,59],4,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[7,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,30],[60,60],[61,61],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],8],[[60,60],15],[[-1,-2],15,[],[]],[14,47],[14,[[13,[2]]]],[[60,17],18],[[61,17],18],[[61,17],18],[[24,17],18],[[24,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[7,8],[60,60],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,[[13,[7]]]],[14,15],[60,15],[60,15],[14,15],[60,15],[14,7],[14,[[13,[62]]]],[14,[[13,[2]]]],[14,2],[[2,2,7,[13,[2]],[13,[62]],[13,[2]],47,60],14],[14,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,14,38],26],[9,9],[[-1,-2],4,[],[]],[[26,1],15],[[27,1],15],[[9,9],15],[[-1,-2],15,[],[]],[26,47],[[9,17],18],[[26,17],18],[[27,17],18],[[11,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[63,9],[59,9],[[9,-1],4,25],[11,[[13,[9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,[[13,[[4,[9,14]]]]]],[9,63],[9,59],[26,15],[26,15],[27,15],[11,15],[26,15],[27,52],[26,14],[11,[[13,[14]]]],[[14,38],26],[38,27],[[9,14],11],[[14,38],26],[[],11],[26,[[13,[9]]]],[[26,41],4],[[27,41],4],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[26,38],0,0,0,[[],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[64,64],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,9],9,[]],[-1,11,[]],[[],64],[[-1,12],[[13,[4]]],[]],[21,[[13,[-1]]],34],[21,[[13,[-1]]],34],[21,[[13,[-1]]],34],[21,[[13,[-1]]],34],[[-1,9],4,[]],[[-1,14],15,[]],[[64,14],15],[[-1,9],4,[]],[[64,9],4],[[-1,16],4,[]],[[64,16],4],[[-1,16],15,[]],[[-1,9],4,[]],[[64,9],4],[[28,17],18],[[64,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,15],[21,15],[21,15],[21,15],[28,15],[28,15],[28,15],[-1,[[13,[8]]],[]],[[],28],[[],64],[[-1,26],9,[]],[[64,26],9],[[-1,6],4,[]],[[-1,9,27],4,[]],[[64,9,27],4],[[-1,9,9],4,[]],[[64,9,9],4],[[-1,14],28,[]],[[64,14],28],[[],28],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,9],15,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,12,[]],[-1,12,[]]],"c":[44,209,528],"p":[[3,"Field",0],[15,"str"],[3,"Once",0],[15,"tuple"],[8,"FnOnce",573],[3,"Dispatch",0],[3,"Level",0],[3,"LevelFilter",0],[3,"Id",439],[4,"Ordering",574],[3,"Current",439],[3,"TypeId",575],[4,"Option",576],[3,"Metadata",0],[15,"bool"],[3,"Event",0],[3,"Formatter",577],[6,"Result",577],[3,"Error",577],[4,"Result",578],[8,"Subscriber",0],[8,"Send",579],[8,"Sync",579],[3,"ParseLevelError",364],[8,"Hasher",580],[3,"Attributes",439],[3,"Record",439],[3,"Interest",508],[3,"String",581],[3,"Identifier",158],[3,"DefaultCallsite",158],[8,"Callsite",0],[3,"WeakDispatch",192],[8,"Any",575],[3,"DefaultGuard",192],[3,"SetGlobalDefaultError",192],[8,"FnMut",573],[3,"ValueSet",259],[8,"Into",582],[3,"Iter",259],[8,"Visit",259],[3,"DisplayValue",259],[8,"Clone",583],[8,"Display",577],[3,"DebugValue",259],[8,"Debug",577],[3,"FieldSet",259],[3,"Empty",259],[8,"Borrow",584],[8,"Sized",579],[8,"Value",259],[15,"usize"],[15,"slice"],[8,"Error",585],[15,"f64"],[15,"i128"],[15,"i64"],[15,"u128"],[15,"u64"],[3,"Kind",364],[3,"ParseLevelFilterError",364],[15,"u32"],[3,"NonZeroU64",586],[3,"NoSubscriber",508]]},\
"try_lock":{"doc":"A light-weight lock guarded by an atomic boolean.","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Locked","TryLock","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","from","into","into","into_inner","new","try_from","try_from","try_into","try_into","try_lock","try_lock_explicit","try_lock_explicit_unchecked","try_lock_order","type_id","type_id"],"q":[[0,"try_lock"],[28,"core::default"],[29,"core::fmt"],[30,"core::fmt"],[31,"core::option"],[32,"core::sync::atomic"],[33,"core::any"]],"d":["A locked value acquired from a <code>TryLock</code>.","A light-weight lock guarded by an atomic boolean.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Take the value back out of the lock when this is the sole …","Create a <code>TryLock</code> around the value.","","","","","Try to acquire the lock of this value.","Try to acquire the lock of this value using the specified …","Try to acquire the lock of this value using the specified …","Try to acquire the lock of this value using the lock and …","",""],"i":[0,0,3,1,3,1,1,3,3,3,3,1,3,1,3,1,1,1,3,1,3,1,1,1,1,1,3,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],2],[[[3,[-1]]],-1,[]],[[[3,[-1]]],-1,[]],[[[3,[-1]]],4,[]],[[[3,[-1]],5],6,7],[[[1,[-1]],5],6,7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,[]],[-1,[[1,[-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[[[1,[-1]]],[[9,[[3,[-1]]]]],[]],[[[1,[-1]],10,10],[[9,[[3,[-1]]]]],[]],[[[1,[-1]],10,10],[[9,[[3,[-1]]]]],[]],[[[1,[-1]],10,10],[[9,[[3,[-1]]]]],[]],[-1,11,[]],[-1,11,[]]],"c":[25],"p":[[3,"TryLock",0],[8,"Default",28],[3,"Locked",0],[15,"tuple"],[3,"Formatter",29],[6,"Result",29],[8,"Debug",29],[4,"Result",30],[4,"Option",31],[4,"Ordering",32],[3,"TypeId",33]]},\
"tungstenite":{"doc":"Lightweight, flexible WebSockets for Rust.","t":"CECCCNCNCCFFFFLLAACFFCALACLAALLLALDLLLLLLLLLLLLLLLLLLLLIFFFFKFNNENNNNNENNNNNNNNNNNNNNNNNNNNNNNENNGNNNNNENNNNNNNNNENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNEINDLLLLAFLLLLLLLLLALLALLLLLLLLLDGGLLLLFLLLLLLLRIGDGGDLLLLLLFFLLLLLLKLLLLLLLLLLLNNNCNENNENNDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLMLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLNNNNNENENENNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEEINNNNLLLLLLLLLLLLLLKLLLLLLLLLLLIIQKK","n":["ClientHandshake","Connector","Error","HandshakeError","Message","Plain","Result","Rustls","ServerHandshake","WebSocket","accept","accept_hdr","accept_hdr_with_config","accept_with_config","borrow","borrow_mut","buffer","client","client","client_tls","client_tls_with_config","connect","error","from","handshake","http","into","protocol","stream","try_from","try_into","type_id","util","vzip","ReadBuffer","advance","as_cursor","as_cursor_mut","borrow","borrow_mut","chunk","default","fmt","from","from_partially_read","into","into_vec","new","read_from","remaining","try_from","try_into","type_id","vzip","with_capacity","IntoClientRequest","client","client_with_config","connect","connect_with_config","into_client_request","uri_mode","AlreadyClosed","Capacity","CapacityError","ConnectionClosed","ControlFrameTooBig","CustomResponseSuccessful","EmptyHostName","Err","Error","ExpectedFragment","FragmentedControlFrame","HandshakeIncomplete","Http","HttpFormat","HttparseError","InvalidCloseSequence","InvalidDnsName","InvalidHeader","InvalidOpcode","Io","JunkAfterRequest","MaskedFrameFromServer","MessageTooLong","MissingConnectionUpgradeHeader","MissingSecWebSocketKey","MissingSecWebSocketVersionHeader","MissingUpgradeWebSocketHeader","NoHostName","NoPathOrQuery","NonZeroReservedBits","Ok","Protocol","ProtocolError","ReceivedAfterClosing","ResetWithoutClosingHandshake","Result","Rustls","SecWebSocketAcceptKeyMismatch","SendAfterClosing","SendQueueFull","Tls","TlsError","TlsFeatureNotEnabled","TooManyHeaders","UnableToConnect","UnexpectedContinueFrame","UnknownControlFrameType","UnknownDataFrameType","UnmaskedFrameFromClient","UnsupportedUrlScheme","Url","UrlError","Utf8","Webpki","WrongHttpMethod","WrongHttpVersion","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into_non_blocking","source","source","source","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","max_size","size","Failure","HandshakeError","HandshakeRole","Interrupted","MidHandshake","borrow","borrow","borrow_mut","borrow_mut","client","derive_accept_key","fmt","fmt","fmt","from","from","from","get_mut","get_ref","handshake","headers","into","into","server","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ClientHandshake","Request","Response","borrow","borrow_mut","fmt","from","generate_key","into","into_client_request","start","try_from","try_into","type_id","vzip","MAX_HEADERS","Callback","ErrorResponse","NoCallback","Request","Response","ServerHandshake","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_response","create_response_with_body","fmt","fmt","from","from","into","into","on_request","on_request","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binary","Client","Close","CloseFrame","Frame","Message","Ping","Pong","Role","Server","Text","WebSocket","WebSocketConfig","WebSocketContext","accept_unmasked_frames","binary","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_read","can_read","can_write","can_write","clone","clone","clone","clone_into","clone_into","clone_into","close","close","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","frame","from","from","from","from","from","from","from","from","from","from_partially_read","from_partially_read","from_raw_socket","get_config","get_config","get_mut","get_ref","into","into","into","into","into","into_data","into_text","is_binary","is_close","is_empty","is_ping","is_pong","is_text","len","max_frame_size","max_message_size","max_send_queue","new","read_message","read_message","set_config","set_config","text","to_owned","to_owned","to_owned","to_string","to_text","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","write_message","write_message","write_pending","write_pending","CloseFrame","Frame","FrameHeader","FrameSocket","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","close","code","coding","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","format","format","from","from","from","from","from_partially_read","from_payload","get_mut","get_ref","header","header_mut","into","into","into","into","into_data","into_inner","into_owned","into_string","is_empty","is_final","len","len","mask","message","new","opcode","parse","payload","payload_mut","ping","pong","read_frame","reason","rsv1","rsv2","rsv3","to_owned","to_owned","to_owned","to_string","to_string","to_text","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_frame","write_pending","Abnormal","Again","Away","Binary","Close","CloseCode","Continue","Control","Control","Data","Data","Error","Extension","Invalid","Normal","OpCode","Ping","Policy","Pong","Protocol","Reserved","Reserved","Restart","Size","Status","Text","Unsupported","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","is_allowed","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","MaybeTlsStream","Mode","NoDelay","Plain","Plain","Rustls","Tls","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","flush","fmt","fmt","from","from","into","into","read","set_nodelay","set_nodelay","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","NonBlockingError","NonBlockingResult","Result","into_non_blocking","no_block"],"q":[[0,"tungstenite"],[34,"tungstenite::buffer"],[55,"tungstenite::client"],[62,"tungstenite::error"],[206,"tungstenite::error::CapacityError"],[208,"tungstenite::handshake"],[241,"tungstenite::handshake::client"],[256,"tungstenite::handshake::headers"],[257,"tungstenite::handshake::server"],[289,"tungstenite::protocol"],[407,"tungstenite::protocol::frame"],[503,"tungstenite::protocol::frame::coding"],[597,"tungstenite::stream"],[630,"tungstenite::util"],[635,"core::result"],[636,"std::io"],[637,"std::io"],[638,"core::any"],[639,"alloc::vec"],[640,"std::io::cursor"],[641,"core::fmt"],[642,"core::fmt"],[643,"std::net::tcp"],[644,"http::uri"],[645,"http::header::value"],[646,"httparse"],[647,"http::uri"],[648,"http::error"],[649,"http::header::value"],[650,"http::header::name"],[651,"core::str::error"],[652,"std::io::error"],[653,"rustls::error"],[654,"core::error"],[655,"alloc::string"],[656,"http::response"],[657,"core::ops::function"],[658,"core::convert"],[659,"core::fmt"]],"d":["","A connector that can be used when establishing …","","","","Plain (non-TLS) connector.","","<code>rustls</code> TLS connector.","","","Accept the given Stream as a WebSocket.","Accept the given Stream as a WebSocket.","Accept the given Stream as a WebSocket.","Accept the given Stream as a WebSocket.","","","A buffer for reading data from the network.","Methods to connect to a WebSocket as a client.","","Creates a WebSocket handshake from a request and a stream, …","The same as <code>client_tls()</code> but one can specify a websocket …","","Error handling.","Returns the argument unchanged.","WebSocket handshake control.","","Calls <code>U::from(self)</code>.","Generic WebSocket message stream.","Convenience wrapper for streams to switch between plain …","","","","Helper traits to ease non-blocking handling.","","A FIFO buffer for reading packets from the network.","","Get a cursor to the data storage.","Get a cursor to the mutable data storage.","","","","","","Returns the argument unchanged.","Create a input buffer filled with previously read data.","Calls <code>U::from(self)</code>.","Consume the <code>ReadBuffer</code> and get the internal storage.","Create a new empty input buffer.","Read next portion of data from the given input stream.","","","","","","Create a new empty input buffer with a given <code>capacity</code>.","Trait for converting various types into HTTP requests used …","Do the client handshake over the given stream.","Do the client handshake over the given stream given a web …","Connect to the given WebSocket in blocking mode.","Connect to the given WebSocket in blocking mode.","Convert into a <code>Request</code> that can be used for a client …","Get the mode of the given URL.","Trying to work with already closed connection.","When reading: buffer capacity exhausted.When writing: your …","Indicates the specific type/cause of a capacity error.","WebSocket connection closed normally. This informs you of …","Control frames must have a payload of 125 bytes or less.","Custom responses must be unsuccessful.","The URL host name, though included, is empty.","Contains the error value","Possible WebSocket errors.","Received data while waiting for more fragments.","Control frames must not be fragmented.","No more data while still performing handshake.","HTTP error.","HTTP format error.","Wrapper around a <code>httparse::Error</code> value.","The payload for the closing frame is invalid.","DNS name resolution error.","Invalid header is passed. Or the header is missing in the …","Encountered an invalid opcode.","Input-output error. Apart from WouldBlock, these are …","Garbage data encountered after client request.","The client must close the connection when a masked frame …","Received header is too long. Message is bigger than the …","Missing <code>Connection: upgrade</code> HTTP header.","Missing <code>Sec-WebSocket-Key</code> HTTP header.","Missing <code>Sec-WebSocket-Version: 13</code> HTTP header.","Missing <code>Upgrade: websocket</code> HTTP header.","The URL does not include a host name.","The URL does not include a path/query.","Reserved bits in frame header are non-zero.","Contains the success value","Protocol violation.","Indicates the specific type/cause of a protocol error.","Remote sent data after sending a closing frame.","Connection closed without performing the closing handshake.","Result type of all Tungstenite library calls.","Rustls error.","The <code>Sec-WebSocket-Accept</code> header is either not present or …","Not allowed to send after having sent a closing frame.","Message send queue full.","TLS error.","TLS errors.","TLS is used despite not being compiled with the TLS …","Too many headers provided (see …","Failed to connect with this URL.","Received a continue frame despite there being nothing to …","Type of control frame not recognised.","Type of data frame not recognised.","The server must close the connection when an unmasked …","Unsupported URL scheme used (only <code>ws://</code> or <code>wss://</code> may be …","Invalid URL.","Indicates the specific type/cause of URL error.","UTF coding error.","Webpki error.","Use of the wrong HTTP method (the WebSocket protocol …","Wrong HTTP version used (the WebSocket protocol requires …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum allowed message size.","The size of the message.","Handshake failed.","A handshake result.","Handshake role.","Handshake was interrupted (would block).","A WebSocket handshake.","","","","","Client handshake machine.","Derive the <code>Sec-WebSocket-Accept</code> response header from a …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Allow mutable access to machine","Allow access to machine","Restarts the handshake process.","HTTP Request and response header handling.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Server handshake machine.","","","","","","","","","","Client handshake role.","Client request type.","Client response type.","","","","Returns the argument unchanged.","Generate a random key for the <code>Sec-WebSocket-Key</code> header.","Calls <code>U::from(self)</code>.","","Initiate a client handshake.","","","","","Limit for the number of header lines.","The callback trait.","Server error response type.","Stub for callback that does nothing.","Server request type.","Server response type.","Server handshake role.","","","","","","","Create a response for the request.","Create a response for the request with a custom body.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Called whenever the server read the request from the …","","Start server handshake. <code>callback</code> specifies a custom …","","","","","","","","","","A binary WebSocket message","This socket is a client","A close message with the optional close frame.","","Raw frame. Note, that you’re not going to get this value …","An enum representing the various forms of a WebSocket …","A ping message with the specified payload","A pong message with the specified payload","Indicates a Client or Server role of the websocket","This socket is a server","A text WebSocket message","WebSocket input-output stream.","The configuration for WebSocket connection.","A context for managing WebSocket stream.","When set to <code>true</code>, the server will accept and handle …","Create a new binary WebSocket message by converting to Vec.","","","","","","","","","","","Check if it is possible to read messages.","Check if it is possible to read messages.","Check if it is possible to write messages.","Check if it is possible to write messages.","","","","","","","Close the connection.","Close the connection.","","","","","","","","","","","","Utilities to work with raw WebSocket frames.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a raw socket into a WebSocket without performing a …","Create a WebSocket context that manages an post-handshake …","Convert a raw socket into a WebSocket without performing a …","Read the configuration.","Read the configuration.","Returns a mutable reference to the inner stream.","Returns a shared reference to the inner stream.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the WebSocket and return it as binary data.","Attempt to consume the WebSocket message and convert it to …","Indicates whether a message is a binary message.","Indicates whether a message ia s close message.","Returns true if the WebSocket message has no content. For …","Indicates whether a message is a ping message.","Indicates whether a message is a pong message.","Indicates whether a message is a text message.","Get the length of the WebSocket message.","The maximum size of a single message frame. <code>None</code> means no …","The maximum size of a message. <code>None</code> means no size limit. …","The size of the send queue. You can use it to turn on/off …","Create a WebSocket context that manages a post-handshake …","Read a message from stream, if possible.","Read a message from the provided stream, if possible.","Change the configuration.","Change the configuration.","Create a new text WebSocket message from a stringable.","","","","","Attempt to get a &amp;str from the WebSocket message, this …","","","","","","","","","","","","","","","","","","","","","Send a message to stream, if possible.","Send a message to the provided stream, if possible.","Flush the pending send queue.","Flush the pending send queue.","A struct representing the close command.","A struct representing a WebSocket frame.","A struct representing a WebSocket frame header.","A reader and writer for WebSocket frames.","","","","","","","","","","","","","","","Create a new Close control frame.","The reason as a code.","Various codes defined in RFC 6455.","","","","","","","","","","","","","","Format a header for given payload size.","Write a frame out to a buffer","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new frame socket from partially read data.","Create a frame from given header and data.","Returns a mutable reference to the inner stream.","Returns a shared reference to the inner stream.","Get a reference to the frame’s header.","Get a mutable reference to the frame’s header.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the frame into its payload as binary.","Extract a stream from the socket.","Convert into a owned string.","Consume the frame into its payload as string.","Check if the frame is empty.","Indicates that the frame is the last one of a possibly …","Get the size of the header formatted with given payload …","Get the length of the frame. This is the length of the …","A frame mask, if any.","Create a new data frame.","Create a new frame socket.","WebSocket protocol opcode.","Parse a header from an input stream. Returns <code>None</code> if …","Get a reference to the frame’s payload.","Get a mutable reference to the frame’s payload.","Create a new Ping control frame.","Create a new Pong control frame.","Read a frame from stream.","The reason as text string.","Reserved for protocol extensions.","Reserved for protocol extensions.","Reserved for protocol extensions.","","","","","","Get frame payload as <code>&amp;str</code>.","","","","","","","","","","","","","","","","","Write a frame to stream.","Complete pending write, if any.","Indicates an abnormal closure. If the abnormal closure was …","Indicates that the server is overloaded and the client …","Indicates that an endpoint is “going away”, such as a …","0x2 denotes a binary frame","0x8 denotes a connection close","Status code used to indicate why an endpoint is closing …","0x0 denotes a continuation frame","Control opcodes as in RFC 6455","Control message (close, ping, pong).","Data opcodes as in RFC 6455","Data (text or binary).","Indicates that a server is terminating the connection …","Indicates that an endpoint (client) is terminating the …","Indicates that an endpoint is terminating the connection …","Indicates a normal closure, meaning that the purpose for …","WebSocket message opcode as in RFC 6455.","0x9 denotes a ping","Indicates that an endpoint is terminating the connection …","0xa denotes a pong","Indicates that an endpoint is terminating the connection …","0x3-7 are reserved for further non-control frames","0xb-f are reserved for further control frames","Indicates that the server is restarting. A client may …","Indicates that an endpoint is terminating the connection …","Indicates that no status code was included in a closing …","0x1 denotes a text frame","Indicates that an endpoint is terminating the connection …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if this CloseCode is allowed.","","","","","","","","","","","","","","","","","","","","","","","","","A stream that might be protected with TLS.","Stream mode, either plain TCP or TLS.","Trait to switch TCP_NODELAY.","Unencrypted socket stream.","Plain mode (<code>ws://</code> URL).","Encrypted socket stream using <code>rustls</code>.","TLS mode (<code>wss://</code> URL).","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set the TCP_NODELAY option to the given value.","","","","","","","","","","","","Non-blocking IO handling.","Non-blocking IO wrapper.","Type of the converted result: <code>Result&lt;Option&lt;T&gt;, E&gt;</code>","Convert WouldBlock to None and don’t touch other errors.","Perform the non-block conversion."],"i":[0,0,0,0,0,17,0,17,0,0,0,0,0,0,17,17,0,0,0,0,0,0,0,17,0,0,17,0,0,17,17,17,0,17,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,16,0,36,36,0,36,33,33,35,15,0,33,33,33,36,36,33,33,37,33,33,36,33,33,32,33,33,33,33,35,35,33,15,36,0,33,33,0,37,33,33,36,36,0,35,32,35,33,33,33,33,35,36,0,36,37,33,33,36,32,33,35,37,36,32,33,35,37,32,33,32,33,32,33,35,32,33,35,36,36,32,32,33,33,35,35,37,37,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,32,33,33,35,37,37,37,36,32,33,35,37,36,36,33,37,32,33,36,32,33,35,37,36,32,33,35,37,36,32,33,35,37,36,32,33,35,37,36,32,33,35,37,79,79,4,0,0,4,0,4,53,4,53,0,0,4,4,53,4,4,53,53,53,53,0,4,53,0,4,4,53,4,53,4,53,4,53,0,0,0,14,14,14,14,0,14,29,14,14,14,14,14,0,0,0,0,0,0,0,2,3,2,3,2,2,0,0,2,3,2,3,2,3,8,2,3,2,2,3,2,3,2,3,2,3,61,64,61,0,61,0,61,61,0,64,61,0,0,0,9,61,61,64,9,1,63,61,64,9,1,63,1,63,1,63,61,64,9,61,64,9,1,63,9,61,64,61,64,61,61,64,9,1,63,0,61,61,61,61,61,64,9,1,63,1,63,1,1,63,1,1,61,64,9,1,63,61,61,61,61,61,61,61,61,61,9,9,9,63,1,63,1,63,61,61,64,9,61,61,61,64,9,1,63,61,64,9,1,63,61,64,9,1,63,61,64,9,1,63,1,63,1,63,0,0,0,0,65,68,69,70,65,68,69,70,65,68,69,65,68,69,69,65,0,68,65,68,69,65,68,69,65,65,68,69,69,70,68,69,65,68,69,70,70,69,70,70,69,69,65,68,69,70,69,70,65,69,69,68,68,69,68,69,70,68,68,69,69,69,69,70,65,68,68,68,65,68,69,65,69,69,65,68,69,70,65,68,69,70,65,68,69,70,65,68,69,70,70,70,76,76,76,74,75,0,74,0,72,0,72,76,76,76,76,0,75,76,75,76,74,75,76,76,76,74,76,72,74,75,76,72,74,75,76,72,74,75,76,72,74,75,76,72,74,75,76,72,74,75,76,72,72,74,74,75,75,76,76,72,72,74,75,76,76,72,74,75,76,76,72,74,75,76,72,74,75,76,72,74,75,76,72,74,75,76,72,74,75,76,72,74,75,76,0,0,0,11,31,11,31,11,31,11,31,31,31,11,11,31,11,31,11,31,11,78,11,31,11,31,11,31,11,31,11,31,11,0,0,80,81,80],"f":[0,0,0,0,0,0,0,0,0,0,[-1,[[5,[[1,[-1]],[4,[[3,[-1,2]]]]]]],[6,7]],[[-1,-2],[[5,[[1,[-1]],[4,[[3,[-1,-2]]]]]]],[6,7],8],[[-1,-2,[10,[9]]],[[5,[[1,[-1]],[4,[[3,[-1,-2]]]]]]],[6,7],8],[[-1,[10,[9]]],[[5,[[1,[-1]],[4,[[3,[-1,2]]]]]]],[6,7]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,-2],[[15,[[13,[[1,[[11,[-2]]]],12]],[4,[[14,[[11,[-2]]]]]]]]],16,[6,7]],[[-1,-2,[10,[9]],[10,[17]]],[[15,[[13,[[1,[[11,[-2]]]],12]],[4,[[14,[[11,[-2]]]]]]]]],16,[6,7]],0,0,[-1,-1,[]],0,0,[-1,-2,[],[]],0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],0,[-1,-2,[],[]],0,[[19,20],13],[19,[[23,[[22,[21]]]]]],[19,[[23,[[22,[21]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[19,[[24,[21]]]],[[],19],[[19,25],26],[-1,-1,[]],[[[22,[21]]],19],[-1,-2,[],[]],[19,[[22,[21]]]],[[],19],[[19,-1],[[27,[20]]],6],[19,20],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[20,19],0,[[-1,-2],[[5,[[13,[[1,[-2]],12]],[4,[[14,[-2]]]]]]],16,[6,7]],[[-1,-2,[10,[9]]],[[5,[[13,[[1,[-2]],12]],[4,[[14,[-2]]]]]]],16,[6,7]],[-1,[[15,[[13,[[1,[[11,[28]]]],12]]]]],16],[[-1,[10,[9]],21],[[15,[[13,[[1,[[11,[28]]]],12]]]]],16],[-1,[[15,[29]]],[]],[30,[[15,[31]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[33,33],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[32,32],34],[[33,33],34],[[35,35],34],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[36,25],26],[[36,25],26],[[32,25],26],[[32,25],26],[[33,25],26],[[33,25],26],[[35,25],26],[[35,25],26],[[37,25],26],[[37,25],26],[38,36],[-1,-1,[]],[35,36],[39,36],[40,36],[41,36],[42,36],[43,36],[33,36],[44,36],[32,36],[45,36],[46,36],[47,36],[37,36],[-1,-1,[]],[-1,-1,[]],[39,33],[-1,-1,[]],[-1,-1,[]],[48,37],[49,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,[[10,[36]]]],[36,[[10,[50]]]],[33,[[10,[50]]]],[37,[[10,[50]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[24,[21]]],51],[[[4,[-1]],25],26,52],[[[4,[-1]],25],26,52],[[[53,[-1]],25],26,[54,52]],[36,[[4,[-1]]],52],[-1,-1,[]],[-1,-1,[]],0,0,[[[53,[-1]]],[[5,[[4,[-1]]]]],52],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,51,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]],25],26,54],[-1,-1,[]],[[],51],[-1,-2,[],[]],[29,[[15,[29]]]],[[-1,29,[10,[9]]],[[15,[[53,[[14,[-1]]]]]]],[6,7]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],13,[],[]],[55,[[15,[56]]]],[[[57,[-1]],-2],[[15,[[58,[-1]]]]],[],59],[[2,25],26],[[[3,[-1,-2]],25],26,54,54],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,55,56],[[5,[56,60]]],[]],[[2,55,56],[[5,[56,60]]]],[[-1,-2,[10,[9]]],[[53,[[3,[-1,-2]]]]],[6,7],8],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,61,[[62,[[22,[21]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],34,[]],[63,34],[[[1,[-1]]],34,[]],[63,34],[61,61],[64,64],[9,9],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[1,[-1]],[10,[65]]],[[15,[13]]],[6,7]],[[63,-1,[10,[65]]],[[15,[13]]],[6,7]],[[],9],[[61,61],34],[[64,64],34],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[61,25],[[5,[13,66]]]],[[61,25],26],[[64,25],26],[[9,25],26],[[[1,[-1]],25],26,54],[[63,25],26],0,[51,61],[67,61],[-1,-1,[]],[[[24,[21]]],61],[[[22,[21]]],61],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,[22,[21]],64,[10,[9]]],[[1,[-1]]],[]],[[[22,[21]],64,[10,[9]]],63],[[-1,64,[10,[9]]],[[1,[-1]]],[]],[[[1,[-1]]],9,[]],[63,9],[[[1,[-1]]],-1,[]],[[[1,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,[[22,[21]]]],[61,[[15,[51]]]],[61,34],[61,34],[61,34],[61,34],[61,34],[61,34],[61,20],0,0,0,[[64,[10,[9]]],63],[[[1,[-1]]],[[15,[61]]],[6,7]],[[63,-1],[[15,[61]]],[6,7]],[[[1,[-1]],-2],13,[],59],[[63,-1],13,59],[-1,61,[[62,[51]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[61,[[15,[67]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]],61],[[15,[13]]],[6,7]],[[63,-1,61],[[15,[13]]],[6,7]],[[[1,[-1]]],[[15,[13]]],[6,7]],[[63,-1],[[15,[13]]],[6,7]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[68,68],[69,69],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[10,[65]]],69],0,0,[[],68],[[65,65],34],[[68,68],34],[[69,69],34],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[65,25],26],[[65,25],26],[[68,25],26],[[69,25],26],[[69,25],26],[[[70,[-1]],25],26,54],[[68,71,-1],[[15,[13]]],7],[[69,-1],[[15,[13]]],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,[22,[21]]],[[70,[-1]]],[]],[[68,[22,[21]]],69],[[[70,[-1]]],-1,[]],[[[70,[-1]]],-1,[]],[69,68],[69,68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,[[22,[21]]]],[[[70,[-1]]],[[13,[-1,[22,[21]]]]],[]],[65,65],[69,[[5,[51,44]]]],[69,34],0,[[68,71],20],[69,20],0,[[[22,[21]],72,34],69],[-1,[[70,[-1]]],[]],0,[[[23,[-1]]],[[15,[[10,[[13,[68,71]]]]]]],[[73,[[24,[21]]]]]],[69,[[22,[21]]]],[69,[[22,[21]]]],[[[22,[21]]],69],[[[22,[21]]],69],[[[70,[-1]],[10,[20]]],[[15,[[10,[69]]]]],6],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[-1,51,[]],[69,[[15,[67,46]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1]],69],[[15,[13]]],7],[[[70,[-1]]],[[15,[13]]],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[72,72],[74,74],[75,75],[76,76],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[72,72],34],[[74,74],34],[[75,75],34],[[76,76],34],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[-1,-2],34,[],[]],[[72,25],26],[[72,25],26],[[74,25],26],[[74,25],26],[[75,25],26],[[75,25],26],[[76,25],26],[[76,25],26],[21,72],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[77,76],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[[-1,-2],13,[],[]],[[[11,[-1]]],[[27,[13]]],[6,7]],[[[11,[-1]],25],26,[6,7,54]],[[31,25],26],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1]],[24,[21]]],[[27,[20]]],[6,7]],[[-1,34],[[27,[13]]],[]],[[[11,[-1]],34],[[27,[13]]],[6,7,78]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1]],[24,[21]]],[[27,[20]]],[6,7]],0,0,0,[-1,[[10,[-1]]],[]],[-1,[],[]]],"c":[],"p":[[3,"WebSocket",289],[3,"NoCallback",257],[3,"ServerHandshake",257],[4,"HandshakeError",208],[4,"Result",635],[8,"Read",636],[8,"Write",636],[8,"Callback",257],[3,"WebSocketConfig",289],[4,"Option",637],[4,"MaybeTlsStream",597],[6,"Response",241],[15,"tuple"],[3,"ClientHandshake",241],[6,"Result",62],[8,"IntoClientRequest",55],[4,"Connector",0],[3,"TypeId",638],[3,"ReadBuffer",34],[15,"usize"],[15,"u8"],[3,"Vec",639],[3,"Cursor",640],[15,"slice"],[3,"Formatter",641],[6,"Result",641],[6,"Result",642],[3,"TcpStream",643],[6,"Request",241],[3,"Uri",644],[4,"Mode",597],[4,"CapacityError",62],[4,"ProtocolError",62],[15,"bool"],[4,"UrlError",62],[4,"Error",62],[4,"TlsError",62],[3,"InvalidHeaderValue",645],[4,"Error",646],[3,"InvalidUri",644],[3,"InvalidStatusCode",647],[3,"Error",648],[3,"ToStrError",645],[3,"FromUtf8Error",649],[3,"InvalidHeaderName",650],[3,"Utf8Error",651],[3,"Error",642],[4,"Error",652],[4,"Error",653],[8,"Error",654],[3,"String",649],[8,"HandshakeRole",208],[3,"MidHandshake",208],[8,"Debug",641],[6,"Request",257],[6,"Response",257],[3,"Request",655],[3,"Response",656],[8,"FnOnce",657],[6,"ErrorResponse",257],[4,"Message",289],[8,"Into",658],[3,"WebSocketContext",289],[4,"Role",289],[3,"CloseFrame",407],[3,"Error",641],[15,"str"],[3,"FrameHeader",407],[3,"Frame",407],[3,"FrameSocket",407],[15,"u64"],[4,"OpCode",503],[8,"AsRef",658],[4,"Data",503],[4,"Control",503],[4,"CloseCode",503],[15,"u16"],[8,"NoDelay",597],[13,"MessageTooLong",206],[8,"NonBlockingResult",630],[8,"NonBlockingError",630]]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":"CCCDCDDCCCCCCCCCCCCCCAOOALLLLLLLLLLLLOALLLLLLLLLLLLLLLALLLAOALLLOLLLLLLLLLLLLAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCLLLCDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSISSSSSSSSSSIIIIISSSSSSIIKKKKKKKKKKKKKKKKKKKGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGIIISIIIIIIIIIIQQQQQQQQQQQQQQQQQIIIIIKKKKKKKKKKKKIGQQCIGDDCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ATerm","B0","B1","Equal","False","Greater","Less","N1","N2","NInt","P1","P2","PInt","TArr","True","U0","U1","U2","UInt","UTerm","Z0","array","assert_type","assert_type_eq","bit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","cmp","consts","default","default","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","int","into","into","into","marker_traits","op","operator_aliases","partial_cmp","partial_cmp","partial_cmp","tarr","to_ordering","to_ordering","to_ordering","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_operators","uint","ATerm","TArr","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","mul","mul","neg","neg","partial_cmp","partial_cmp","partial_div","partial_div","rem","rem","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","Bit","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","max","max","max","max","min","min","min","min","new","new","new","new","not","not","partial_cmp","partial_cmp","to_bool","to_bool","to_u8","to_u8","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","powi","powi","powi","Integer","NInt","PInt","Z0","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","default","default","default","div","div","div","div","div","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_div","partial_div","partial_div","powi","powi","powi","powi","powi","powi","powi","powi","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i16","to_i32","to_i32","to_i32","to_i64","to_i64","to_i64","to_i8","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_isize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BOOL","Bit","I16","I16","I32","I32","I64","I64","I8","I8","ISIZE","ISIZE","Integer","NonZero","Ord","PowerOfTwo","TypeArray","U16","U32","U64","U8","U8","USIZE","Unsigned","Zero","new","to_bool","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_ordering","to_u16","to_u32","to_u64","to_u8","to_u8","to_usize","AbsVal","Add1","And","Compare","Cube","Diff","Double","Eq","Exp","Gcf","Gr","GrEq","Le","LeEq","Length","Log2","Maximum","Minimum","Mod","Negate","NotEq","Or","PartialQuot","Prod","Quot","Shleft","Shright","Sqrt","Square","Sub1","Sum","Xor","Abs","Cmp","Gcd","INT","IsEqual","IsGreater","IsGreaterOrEqual","IsLess","IsLessOrEqual","IsNotEqual","Len","Logarithm2","Max","Min","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","PartialDiv","Pow","Same","SquareRoot","ToInt","is_equal","is_greater","is_greater_or_equal","is_less","is_less_or_equal","is_not_equal","len","max","min","partial_div","powi","to_int","GetBit","GetBitOut","Output","Output","PowerOfTwo","SetBit","SetBitOut","UInt","UTerm","Unsigned","add","add","add","add","add","add","add","add","add","add","add","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","max","max","min","min","mul","mul","mul","mul","mul","mul","mul","mul","new","new","partial_cmp","partial_cmp","partial_div","partial_div","powi","powi","rem","rem","set_bit","set_bit","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"typenum"],[79,"typenum::array"],[123,"typenum::bit"],[182,"typenum::consts"],[3466,"typenum::int"],[3613,"typenum::marker_traits"],[3657,"typenum::operator_aliases"],[3689,"typenum::type_operators"],[3737,"typenum::uint"],[3881,"core::cmp"],[3882,"core::fmt"],[3883,"core::fmt"],[3884,"core::option"],[3885,"core::result"],[3886,"core::any"],[3887,"core::ops::arith"],[3888,"core::clone"],[3889,"core::cmp"],[3890,"core::ops::arith"],[3891,"core::ops::bit"],[3892,"core::ops::bit"]],"d":["","","","A potential output from <code>Cmp</code>, this is the type equivalent …","","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …","","","","","","","","","","","","","","","A type-level array of type-level numbers.","Asserts that a type is <code>True</code>, aka <code>B1</code>.","Asserts that two types are the same.","Type-level bits.","","","","","","","","","","","","","A convenience macro for comparing type numbers. Use <code>op!</code> …","Type aliases for many constants.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Type-level signed integers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","All of the <strong>marker traits</strong> used in typenum.","Convenient type operations.","Aliases for the type operators used in this crate. Their …","","","","Create a new type-level array. Only usable on Rust 1.13.0 …","","","","","","","","","","","","","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","Type-level unsigned integers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Instantiates a singleton representing this bit.","","Instantiates a singleton representing this bitype-level signed integers with negative sign.","Type-level signed integers with positive sign.","The type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time bits.","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","The <strong>marker trait</strong> for type-level numbers which are a power …","The <strong>marker trait</strong> for type-level arrays of type-level …","","","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","A <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …","Instantiates a singleton representing this bit.","","","","","","","","","","","","","","","","","","","Alias for the associated type of <code>Abs</code>: …","Alias to make it easy to add 1: …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias to make it easy to cube. …","Alias for the associated type of <code>Sub</code>: …","Alias to make it easy to multiply by 2. …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>SquareRoot</code>: …","Alias to make it easy to square. …","Alias to make it easy to subtract 1: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>BitXor</code>: …","A <strong>type operator</strong> that returns the absolute value.","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","A <strong>type operator</strong> that computes the greatest common divisor …","The concrete value for the type. Can be used in <code>const</code> …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","A <strong>type operator</strong> for taking the integer binary logarithm of …","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","Should always be <code>Self</code>","The absolute value.","The result of the exponentiation.","The result of the comparison. It should only ever be one …","The length as a type-level unsigned integer.","The type of the result of the division","The type of the minimum of <code>Self</code> and <code>Rhs</code>","The type of the maximum of <code>Self</code> and <code>Rhs</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The result of the integer square root.","The result of the integer binary logarithm.","The greatest common divisor.","Division as a partial function. This <strong>type operator</strong> …","A <strong>type operator</strong> that provides exponentiation by repeated …","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>.","A <strong>type operator</strong> for taking a concrete integer value from a …","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","This function isn’t used in this crate, but may be …","Method returning the maximum","Method returning the minimum","Method for performing the division","This function isn’t used in this crate, but may be …","Method returning the concrete value for the type.","","","","","","A <strong>type operator</strong> that, when implemented for unsigned …","Alias for the result of calling <code>SetBit</code>: …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","The terminating type for <code>UInt</code>; it always comes after the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Instantiates a singleton representing this unsigned …","Instantiates a singleton representing this unsigned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,0,0,0,1,2,3,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,0,0,0,30,32,32,30,30,32,30,30,32,32,30,32,30,32,30,32,30,32,30,32,30,32,30,32,30,32,30,32,30,32,30,30,32,32,30,30,32,32,30,30,32,32,30,32,30,32,30,32,30,32,30,32,30,32,30,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,38,38,0,0,0,0,40,40,40,35,35,35,41,40,35,41,40,35,41,40,35,41,40,35,41,40,35,41,40,40,35,35,41,40,35,41,40,35,41,40,35,41,40,35,41,40,35,41,40,40,40,35,35,35,41,41,41,40,40,40,35,35,35,41,41,41,40,40,40,40,40,35,35,35,35,35,41,41,41,40,35,41,40,35,41,40,35,41,40,35,41,40,40,35,35,35,41,41,41,40,40,35,35,41,40,40,40,35,35,35,41,41,41,40,35,41,40,35,41,40,35,41,40,35,41,40,40,40,40,35,35,35,35,41,41,41,41,40,35,41,40,35,41,40,35,41,40,35,41,31,0,36,43,36,43,36,43,36,43,36,43,0,0,0,0,0,36,36,36,31,36,36,0,0,31,31,36,43,36,43,36,43,36,43,36,43,61,36,36,36,31,36,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,63,64,47,42,23,27,46,45,65,66,67,68,69,70,71,72,73,0,0,0,0,0,66,67,70,65,68,69,23,45,46,27,47,62,0,0,74,75,0,0,0,0,0,0,39,39,39,39,39,39,39,39,57,57,57,39,57,39,39,39,39,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,39,39,39,39,57,57,57,39,57,39,57,39,57,39,57,39,57,39,57,39,39,39,39,57,57,57,39,39,39,39,57,57,57,39,39,39,39,39,57,57,39,57,39,57,39,57,39,57,39,39,39,39,39,39,39,39,39,57,57,57,57,57,57,57,57,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57,39,57],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[1,1],4],[[2,2],4],[[3,3],4],0,0,[[],1],[[],2],[[],3],[[1,1],5],[[2,2],5],[[3,3],5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[1,-1],8,9],[[2,-1],8,9],[[3,-1],8,9],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[1,1],[[10,[4]]]],[[2,2],[[10,[4]]]],[[3,3],[[10,[4]]]],0,[[],4],[[],4],[[],4],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,0,[[13,13]],[[[14,[-2,-4]],[14,[-1,-3]]],[],[],[[15,[-1]]],[],[[15,[-3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[[14,[-1,-2]]],[[14,[-1,-2]]],16,16],[[13,13],4],[[[14,[-1,-2]],[14,[-1,-2]]],4,17,17],[[13,-1],[],[]],[[[14,[-2,-3]],-1],[],18,[[19,[-1]]],[[19,[-1]]]],[[13,13],5],[[[14,[-1,-2]],[14,[-1,-2]]],5,20,20],[[13,6],7],[[[14,[-1,-2]],6],7,21,21],[-1,-1,[]],[-1,-1,[]],[[13,-1],8,9],[[[14,[-1,-2]],-3],8,22,22,9],[-1,-2,[],[]],[-1,-2,[],[]],[13],[[[14,[-1,-2]]],[],[],23],[[13,-1],[],[]],[[[14,[-2,-3]],-1],[],18,[[24,[-1]]],[[24,[-1]]]],[13],[[[14,[-1,-2]]],[],25,25],[[13,13],[[10,[4]]]],[[[14,[-1,-2]],[14,[-1,-2]]],[[10,[4]]],26,26],[[13,-1],[],[]],[[[14,[-2,-3]],-1],[],18,[[27,[-1]]],[[27,[-1]]]],[[13,-1],[],[]],[[[14,[-2,-3]],-1],[],18,[[28,[-1]]],[[28,[-1]]]],[[13,13]],[[[14,[-2,-4]],[14,[-1,-3]]],[],[],[[29,[-1]]],[],[[29,[-3]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,[[30,-1],[],31],[[32,30]],[[32,32]],[[30,32]],[[30,30]],[[32,-1],[],31],[[30,32]],[[30,30]],[[32,30]],[[32,32]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[32,32],[[30,30],4],[[32,32],4],[[],30],[[],32],[[30,30],5],[[32,32],5],[[30,6],7],[[32,6],7],[-1,-1,[]],[-1,-1,[]],[[30,-1],8,9],[[32,-1],8,9],[-1,-2,[],[]],[-1,-2,[],[]],[[30,30],30],[[30,32],32],[[32,30],32],[[32,32],32],[[30,30],30],[[30,32],30],[[32,30],30],[[32,32],32],[[],30],[[],30],[[],32],[[],32],[30],[32],[[30,30],[[10,[4]]]],[[32,32],[[10,[4]]]],[[],5],[[],5],[[],33],[[],33],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,[35,[-1]]],[],[36,37]],[[38,[35,[[39,[-1,30]]]]],[],36],[[38,[35,[[39,[-1,32]]]]],[],36],0,0,0,0,[[[40,[-1]],41],[],[36,37]],[[[40,[-2]],[35,[-1]]],[],[36,37],[[42,[-1]],[0,[-1]],36,37]],[[[40,[-2]],[40,[-1]]],[],[36,37],[[15,[-1]],36,37]],[[[35,[-1]],41],[],[36,37]],[[[35,[-2]],[35,[-1]]],[],[36,37],[[15,[-1]],36,37]],[[[35,[-1]],[40,[-2]]],[],[36,37],[[42,[-1]],[0,[-1]],36,37]],[[41,-1],[],43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]]],[[40,[-1]]],[16,36,37]],[[[35,[-1]]],[[35,[-1]]],[16,36,37]],[41,41],[[[40,[-1]],[40,[-1]]],4,[17,36,37]],[[[35,[-1]],[35,[-1]]],4,[17,36,37]],[[41,41],4],[[],[[40,[-1]]],[44,36,37]],[[],[[35,[-1]]],[44,36,37]],[[],41],[[[40,[-2]],[35,[-1]]],[],[36,37],[[42,[-1]],36,37]],[[[40,[-2]],[40,[-1]]],[],[36,37],[[42,[-1]],36,37]],[[[35,[-2]],[40,[-1]]],[],[36,37],[[42,[-1]],36,37]],[[[35,[-2]],[35,[-1]]],[],[36,37],[[42,[-1]],36,37]],[[41,-1],[],[43,37]],[[[40,[-1]],[40,[-1]]],5,[20,36,37]],[[[35,[-1]],[35,[-1]]],5,[20,36,37]],[[41,41],5],[[[40,[-1]],6],7,[21,36,37]],[[[35,[-1]],6],7,[21,36,37]],[[41,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[40,[-1]],-2],8,[22,36,37],9],[[[35,[-1]],-2],8,[22,36,37],9],[[41,-1],8,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]],41],[],[36,37]],[[[40,[-2]],[40,[-1]]],[],[36,37],[36,37,[45,[-1]]]],[[[40,[-1]],[35,[-2]]],[],[36,37],[36,37]],[[[35,[-1]],41],[],[36,37]],[[[35,[-1]],[40,[-2]]],[],[36,37],[36,37]],[[[35,[-2]],[35,[-1]]],[],[36,37],[36,37,[46,[-1]]]],[[41,[35,[-1]]],[],[36,37]],[[41,41]],[[41,[40,[-1]]],[],[36,37]],[[[40,[-2]],[40,[-1]]],[],[36,37],[36,37,[46,[-1]]]],[[[40,[-1]],[35,[-2]]],[],[36,37],[36,37]],[[[40,[-1]],41],[],[36,37]],[[[35,[-1]],[40,[-2]]],[],[36,37],[36,37]],[[[35,[-2]],[35,[-1]]],[],[36,37],[36,37,[45,[-1]]]],[[[35,[-1]],41],[],[36,37]],[[41,[40,[-1]]],[],[36,37]],[[41,41]],[[41,[35,[-1]]],[],[36,37]],[[[40,[-2]],[40,[-1]]],[],[36,37],[[24,[-1]],36,37]],[[[40,[-1]],41],[],[36,37]],[[[40,[-1]],13],[],[36,37]],[[[40,[-2]],[35,[-1]]],[],[36,37],[[24,[-1]],36,37]],[[[40,[-1]],[14,[-2,-3]]],[],[36,37],[],[]],[[[35,[-1]],41],[],[36,37]],[[[35,[-2]],[35,[-1]]],[],[36,37],[[24,[-1]],36,37]],[[[35,[-1]],[14,[-2,-3]]],[],[36,37],[],[]],[[[35,[-2]],[40,[-1]]],[],[36,37],[[24,[-1]],36,37]],[[[35,[-1]],13],[],[36,37]],[[41,-1],[],43],[[41,[14,[-1,-2]]],[],[],[]],[[41,13]],[[[40,[-1]]],[],[36,37]],[[[35,[-1]]],[],[36,37]],[41],[[],[[40,[-1]]],[36,37]],[[],[[35,[-1]]],[36,37]],[[],41],[[[40,[-1]],[40,[-1]]],[[10,[4]]],[26,36,37]],[[[35,[-1]],[35,[-1]]],[[10,[4]]],[26,36,37]],[[41,41],[[10,[4]]]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[[40,[-2]],[40,[-1]]],[],[36,37],[[47,[-1]],36,37]],[[[40,[-1]],41],[],[36,37]],[[[35,[-2]],[40,[[39,[-1,32]]]]],[],36,[[47,[[39,[-1,32]]]],36,37]],[[[35,[-2]],[40,[[39,[-1,30]]]]],[],36,[[47,[[39,[-1,30]]]],36,37]],[[[35,[-1]],41],[],[36,37]],[[41,41]],[[41,[40,[-1]]],[],[36,37]],[[41,[35,[-1]]],[],[36,37]],[[[40,[-2]],[40,[-1]]],[],[36,37],[[28,[-1]],36,37]],[[[40,[-2]],[35,[-1]]],[],[36,37],[[28,[-1]],36,37]],[[[35,[-2]],[35,[-1]]],[],[36,37],[[28,[-1]],36,37]],[[[35,[-2]],[40,[-1]]],[],[36,37],[[28,[-1]],36,37]],[[41,-1],[],[43,37]],[[[40,[-1]],41],[],[36,37]],[[[40,[-2]],[35,[-1]]],[],[36,37],[[15,[-1]],36,37]],[[[40,[-2]],[40,[-1]]],[],[36,37],[[42,[-1]],[0,[-1]],36,37]],[[[35,[-2]],[40,[-1]]],[],[36,37],[[15,[-1]],36,37]],[[[35,[-1]],[35,[-2]]],[],[36,37],[[42,[-1]],[0,[-1]],36,37]],[[[35,[-1]],41],[],[36,37]],[[41,[40,[-1]]],[],[36,37]],[[41,[35,[-1]]],[],[36,37]],[[41,41]],[[],48],[[],48],[[],48],[[],49],[[],49],[[],49],[[],50],[[],50],[[],50],[[],51],[[],51],[[],51],[[],51],[[],49],[[],48],[[],50],[[],50],[[],51],[[],49],[[],48],[[],51],[[],50],[[],48],[[],49],[[],52],[[],52],[[],52],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[[],5],[[],48],[[],48],[[],49],[[],49],[[],50],[[],50],[[],51],[[],51],[[],52],[[],52],[[],4],[[],53],[[],54],[[],55],[[],33],[[],33],[[],56],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[-1,[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[],-1,[]],0,0,0,0,0,0,0,0,0,0,[[[39,[-1,-2]],57],[],36,31],[[[39,[-2,32]],[39,[-1,32]]],[],36,[[15,[-1]],36]],[[[39,[-2,30]],[39,[-1,30]]],[],36,[[15,[-1]],36]],[[[39,[-1,32]],32],[],[[15,[32]],36]],[[[39,[-1,-2]],30],[],36,31],[[[39,[-2,30]],[39,[-1,32]]],[],36,[[15,[-1]],36]],[[[39,[-1,30]],32],[],36],[[[39,[-2,32]],[39,[-1,30]]],[],36,[[15,[-1]],36]],[[57,32]],[[57,-1],[],36],[[57,30]],[[[39,[-1,-2]],-3],[],36,31,36],[[57,-1],[],36],[[[39,[-2,30]],[39,[-1,30]]],[],36,[[58,[-1]],36]],[[[39,[-2,30]],[39,[-1,32]]],[],36,[[58,[-1]],36]],[[[39,[-2,32]],[39,[-1,30]]],[],36,[[58,[-1]],36]],[[[39,[-2,32]],[39,[-1,32]]],[],36,[[58,[-1]],36]],[[[39,[-1,-2]],57],[],36,31],[[57,-1],[],36],[[[39,[-1,-2]],-3],[],36,31,36],[[57,-1],[],36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1,-2]]],[[39,[-1,-2]]],16,16],[57,57],[[[39,[-1,-2]],[39,[-1,-2]]],4,17,17],[[57,57],4],[[],[[39,[-1,-2]]],44,44],[[],57],[[[39,[-1,-2]],[39,[-3,-4]]],[],36,31,36,31],[[57,[39,[-1,-2]]],[],36,31],[[[39,[-1,-2]],[39,[-1,-2]]],5,20,20],[[57,57],5],[[[39,[-1,-2]],6],7,21,21],[[57,6],7],[-1,-1,[]],[-1,-1,[]],[[[39,[-1,-2]],-3],8,22,22,9],[[57,-1],8,9],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1,-2]]],[],[23,36],31],[57],[[[39,[-1,-2]],-3],[],36,31,36],[[57,-1],[],36],[[[39,[-1,-2]],-3],[],36,31,36],[[57,-1],[],36],[[[39,[-3,30]],[39,[-1,-2]]],[],36,31,[[24,[[39,[-1,-2]]]],36]],[[[39,[-1,-2]],57],[],36,31],[[[39,[-3,32]],[39,[-1,-2]]],[],36,31,[[24,[[39,[-1,-2]]]],36]],[[[39,[-1,-2]],30],[],36,31],[[[39,[-1,-2]],32],[],36,31],[[57,30]],[[57,-1],[],36],[[57,32]],[[],[[39,[-1,-2]]],36,31],[[],57],[[[39,[-1,-2]],[39,[-1,-2]]],[[10,[4]]],26,26],[[57,57],[[10,[4]]]],[[[39,[-1,-2]],[39,[-3,-4]]],[],36,31,36,31],[[57,[39,[-1,-2]]],[],36,31],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[[39,[-1,-2]],[39,[-3,-4]]],[],36,31,36,31],[[57,[39,[-1,-2]]],[],36,31],[[-1,-2,-3],[],[],[],[]],[[-1,-2,-3],[],[],[],[]],[[[39,[-1,-2]],[39,[-3,-4]]],[],36,31,36,31],[[[39,[-1,-2]],30],[],36,31],[[[39,[-1,-2]],57],[],36,31],[[[39,[-1,-2]],32],[],36,31],[[57,30]],[[57,-1],[],36],[[57,32]],[[[39,[-1,-2]],30],[],36,31],[[[39,[-3,-4]],[39,[-1,-2]]],[],36,31,[[60,[[59,[[39,[-1,-2]]]]]],36],31],[[[39,[-1,-2]],32],[],36,31],[[[39,[-1,-2]],57],[],36,31],[[57,30]],[[57,32]],[[57,-1],[],36],[[[39,[-1,-2]],30],[],36,31],[[[39,[-1,30]],32],[],[[29,[32]],36]],[[[39,[57,32]],32]],[[[39,[-1,-2]],-3],[],36,31,36],[[[39,[[39,[-1,-2]],32]],32],[],36,31],[[57,30]],[[57,57]],[[],48],[[],48],[[],49],[[],49],[[],50],[[],50],[[],51],[[],51],[[],54],[[],48],[[],50],[[],56],[[],53],[[],33],[[],49],[[],51],[[],55],[[],48],[[],54],[[],49],[[],55],[[],51],[[],53],[[],56],[[],33],[[],50],[[],52],[[],52],[[],53],[[],53],[[],54],[[],54],[[],55],[[],55],[[],33],[[],33],[[],56],[[],56],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]]],"c":[37],"p":[[3,"Greater",0],[3,"Less",0],[3,"Equal",0],[4,"Ordering",3881],[15,"bool"],[3,"Formatter",3882],[6,"Result",3882],[15,"tuple"],[8,"Hasher",3883],[4,"Option",3884],[4,"Result",3885],[3,"TypeId",3886],[3,"ATerm",79],[3,"TArr",79],[8,"Add",3887],[8,"Clone",3888],[8,"Ord",3881],[8,"Copy",3889],[8,"Div",3887],[8,"PartialEq",3881],[8,"Debug",3882],[8,"Hash",3883],[8,"Len",3689],[8,"Mul",3887],[8,"Neg",3887],[8,"PartialOrd",3881],[8,"PartialDiv",3689],[8,"Rem",3887],[8,"Sub",3887],[3,"B0",123],[8,"Bit",3613],[3,"B1",123],[15,"u8"],[6,"P1",182],[3,"NInt",3466],[8,"Unsigned",3613],[8,"NonZero",3613],[6,"N1",182],[3,"UInt",3737],[3,"PInt",3466],[3,"Z0",3466],[8,"Cmp",3689],[8,"Integer",3613],[8,"Default",3890],[8,"Max",3689],[8,"Min",3689],[8,"Pow",3689],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"usize"],[3,"UTerm",3737],[8,"BitOr",3891],[6,"Sub1",3657],[8,"Shr",3891],[8,"Ord",3613],[8,"ToInt",3689],[8,"Same",3689],[8,"Abs",3689],[8,"IsLess",3689],[8,"IsEqual",3689],[8,"IsGreater",3689],[8,"IsLessOrEqual",3689],[8,"IsNotEqual",3689],[8,"IsGreaterOrEqual",3689],[8,"SquareRoot",3689],[8,"Logarithm2",3689],[8,"Gcd",3689],[8,"GetBit",3737],[8,"SetBit",3737]]},\
"unicode_bidi":{"doc":"This crate implements the Unicode Bidirectional Algorithm …","t":"NNNNECDNENNNNDDNNNNCCGNNNNNNDDNNNNCNNRNFLLLLLLLLLLLLLLLLLAALMLLLLLLLLLLLLALLLLLLLLMLLLLLLLLAMLMLLLLLMMMMMMLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLIDKLLLLLLLLMMLLLLFRRRRRRRRRRRRERDRRNRLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AL","AN","B","BN","BidiClass","BidiDataSource","BidiInfo","CS","Direction","EN","ES","ET","FSI","HardcodedBidiData","InitialInfo","L","LRE","LRI","LRO","LTR_LEVEL","Level","LevelRun","Ltr","Mixed","NSM","ON","PDF","PDI","Paragraph","ParagraphInfo","R","RLE","RLI","RLO","RTL_LEVEL","Rtl","S","UNICODE_VERSION","WS","bidi_class","bidi_class","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data_source","deprecated","direction","end","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","format_chars","from","from","from","from","from","from","from","has_rtl","info","into","into","into","into","into","into","into","len","level","level","level_at","levels","new","new","new","new_with_data_source","new_with_data_source","original_classes","original_classes","para","paragraphs","paragraphs","range","reorder_line","reorder_visual","reordered_levels","reordered_levels_per_char","start","text","text","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visual_runs","BidiDataSource","BidiMatchedOpeningBracket","bidi_class","bidi_matched_opening_bracket","borrow","borrow_mut","clone","clone_into","fmt","from","into","is_open","opening","to_owned","try_from","try_into","type_id","visual_runs","ALM","FSI","LRE","LRI","LRM","LRO","PDF","PDI","RLE","RLI","RLM","RLO","Error","LTR_LEVEL","Level","MAX_EXPLICIT_DEPTH","MAX_IMPLICIT_DEPTH","OutOfRangeNumber","RTL_LEVEL","bidi_class","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","eq","eq","eq","equivalent","fmt","fmt","from","from","from","from_slice_unchecked","has_rtl","into","into","into","is_ltr","is_rtl","lower","ltr","max_explicit_depth","max_implicit_depth","new","new_explicit","new_explicit_next_ltr","new_explicit_next_rtl","new_lowest_ge_rtl","number","partial_cmp","raise","raise_explicit","rtl","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec"],"q":[[0,"unicode_bidi"],[136,"unicode_bidi::data_source"],[153,"unicode_bidi::deprecated"],[154,"unicode_bidi::format_chars"],[166,"unicode_bidi::level"],[220,"core::fmt"],[221,"core::fmt"],[222,"core::ops::range"],[223,"alloc::borrow"],[224,"alloc::vec"],[225,"core::result"],[226,"core::any"],[227,"core::cmp"],[228,"alloc::string"]],"d":["","","","","Represents values of the Unicode character property …","","Bidi information of the text.","","","","","","","Hardcoded Bidi data that ships with the unicode-bidi crate.","Initial bidi information of the text.","","","","","","","A maximal substring of characters with the same embedding …","","","","","","","Contains a reference of <code>BidiInfo</code> and one of its <code>paragraphs</code>.","Bidi information about a single paragraph","","","","","","","","The Unicode version of data","","Find the <code>BidiClass</code> of a single char.","","","","","","","","","","","","","","","","","","","This module holds deprecated assets only.","Returns if the paragraph is Left direction, right …","The upper bound of the range (exclusive).","","","","","","","","","","","","","Directional Formatting Characters","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If processed text has any computed RTL levels","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the length of the paragraph in the source text.","Bidi Embedding Level","The paragraph embedding level.","Returns the <code>Level</code> of a certain character in the paragraph.","The directional embedding level of each byte in the text.","Find the paragraphs and BidiClasses in a string of text.","Split the text into paragraphs and determine the bidi …","","Find the paragraphs and BidiClasses in a string of text, …","Split the text into paragraphs and determine the bidi …","The BidiClass of the character at each byte in the text. …","The BidiClass of the character at each byte in the text.","","The boundaries and level of each paragraph within the text.","The boundaries and paragraph embedding level of each …","The paragraphs boundaries within the text, as byte indices.","Re-order a line based on resolved levels and return the …","Reorders pre-calculated levels of a sequence of characters.","Re-order a line based on resolved levels and return only …","Re-order a line based on resolved levels and return only …","The lower bound of the range (inclusive).","The text","The text","","","","","","","","","","","","","","","","","","","","","","","Find the level runs within a line and return them in …","This trait abstracts over a data source that is able to …","This is the return value of …","","If this character is a bracket according to …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Whether or not the requested bracket was an opening …","The corresponding opening bracket in this bracket pair, …","","","","","Find the level runs within a line and return them in …","ARABIC LETTER MARK","FIRST STRONG ISOLATE","LEFT-TO-RIGHT EMBEDDING","LEFT‑TO‑RIGHT ISOLATE","LEFT-TO-RIGHT MARK","LEFT-TO-RIGHT OVERRIDE","POP DIRECTIONAL FORMATTING","POP DIRECTIONAL ISOLATE","RIGHT-TO-LEFT EMBEDDING","RIGHT‑TO‑LEFT ISOLATE","RIGHT-TO-LEFT MARK","RIGHT-TO-LEFT OVERRIDE","Errors that can occur on Level creation or mutation","","Embedding Level","During explicit level resolution, embedding level can go …","During implicit level resolution, embedding level can go …","Out-of-range (invalid) embedding level number.","","Generate a character type based on a level (as specified …","","","","","","","","","","","","","","","Returns the argument unchanged.","Create level by number","Returns the argument unchanged.","Converts a byte slice to a slice of Levels","If levels has any RTL (odd) level","Calls <code>U::from(self)</code>.","Convert to the level number","Calls <code>U::from(self)</code>.","If this level is left-to-right.","If this level is right-to-left.","Lower level by <code>amount</code>, fail if number goes below zero.","New LTR level with smallest number value (0).","Maximum depth of the directional status stack during …","Maximum depth of the directional status stack during …","Create new level, fail if number is larger than …","Create new level, fail if number is larger than <code>max_depth</code>.","The next LTR (even) level greater than this, or fail if …","The next RTL (odd) level greater than this, or fail if …","The lowest RTL (odd) level greater than or equal to this, …","The level number.","","Raise level by <code>amount</code>, fail if number is larger than …","Raise level by <code>amount</code>, fail if number is larger than …","New RTL level with smallest number value (1).","","","","","","","",""],"i":[2,2,2,2,0,0,0,2,0,2,2,2,2,0,0,2,2,2,2,0,0,0,6,6,2,2,2,2,0,0,2,2,2,2,0,6,2,0,2,0,3,3,2,6,8,9,10,5,3,2,6,8,9,10,5,2,2,0,0,5,24,2,6,8,9,10,2,2,6,8,9,10,5,0,3,2,6,8,9,10,5,10,5,3,2,6,8,9,10,5,8,0,8,5,10,9,10,5,9,10,9,10,5,9,10,8,10,10,10,10,24,9,10,2,3,2,6,8,9,10,5,3,2,6,8,9,10,5,3,2,6,8,9,10,5,10,0,0,17,17,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,14,14,28,14,28,14,14,14,14,14,14,28,14,14,28,14,14,28,14,0,14,14,28,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,28,14,28,14,28,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,1],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],4,[],[]],0,0,[5,6],0,[[2,2],7],[[6,6],7],[[8,8],7],[[9,9],7],[[10,10],7],[[-1,-2],7,[],[]],[[2,11],12],[[6,11],12],[[8,11],12],[[9,11],12],[[10,11],12],[[5,11],12],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,7],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,13],0,0,[[5,13],14],0,[[15,[16,[14]]],9],[[15,[16,[14]]],10],[[10,8],5],[[-1,15,[16,[14]]],9,17],[[-1,15,[16,[14]]],10,17],0,0,0,0,0,0,[[10,8,[18,[13]]],[[19,[15]]]],[[[20,[14]]],[[21,[13]]]],[[10,8,[18,[13]]],[[21,[14]]]],[[10,8,[18,[13]]],[[21,[14]]]],0,0,0,[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[10,8,[18,[13]]],[[4,[[21,[14]],[21,[24]]]]]],0,0,[[-1,1],2,[]],[[-1,1],[[16,[25]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],4,[],[]],[[25,11],12],[-1,-1,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[[[18,[13]],[20,[14]]],[[21,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[14,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],4,[],[]],[[14,14],26],[[14,27],7],[[14,14],7],[[14,15],7],[[28,28],7],[[-1,-2],7,[],[]],[[14,11],12],[[28,11],12],[-1,-1,[]],[29,14],[-1,-1,[]],[[[20,[29]]],[[20,[14]]]],[[[20,[14]]],7],[-1,-2,[],[]],[14,29],[-1,-2,[],[]],[14,7],[14,7],[[14,29],[[22,[4,28]]]],[[],14],[[],29],[[],29],[29,[[22,[14,28]]]],[29,[[22,[14,28]]]],[14,[[22,[14,28]]]],[14,[[22,[14,28]]]],[14,[[22,[14,28]]]],[14,29],[[14,14],[[16,[26]]]],[[14,29],[[22,[4,28]]]],[[14,29],[[22,[4,28]]]],[[],14],[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[[[20,[29]]],[[21,[14]]]]],"c":[153],"p":[[15,"char"],[4,"BidiClass",0],[3,"HardcodedBidiData",0],[15,"tuple"],[3,"Paragraph",0],[4,"Direction",0],[15,"bool"],[3,"ParagraphInfo",0],[3,"InitialInfo",0],[3,"BidiInfo",0],[3,"Formatter",220],[6,"Result",220],[15,"usize"],[3,"Level",166],[15,"str"],[4,"Option",221],[8,"BidiDataSource",136],[3,"Range",222],[4,"Cow",223],[15,"slice"],[3,"Vec",224],[4,"Result",225],[3,"TypeId",226],[6,"LevelRun",0],[3,"BidiMatchedOpeningBracket",136],[4,"Ordering",227],[3,"String",228],[4,"Error",166],[15,"u8"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]]},\
"unicode_normalization":{"doc":"Unicode character composition and decomposition utilities …","t":"DENNDDDRINLLLLLLLLLLAKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFLLLLKLLLLKLLLLKLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFF","n":["Decompositions","IsNormalized","Maybe","No","Recompositions","Replacements","StreamSafe","UNICODE_VERSION","UnicodeNormalization","Yes","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","cjk_compat_variants","cjk_compat_variants","cjk_compat_variants","cjk_compat_variants","cjk_compat_variants","clone","clone","clone","clone_into","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_nfc","is_nfc_quick","is_nfc_stream_safe","is_nfc_stream_safe_quick","is_nfd","is_nfd_quick","is_nfd_stream_safe","is_nfd_stream_safe_quick","is_nfkc","is_nfkc_quick","is_nfkd","is_nfkd_quick","next","next","next","next","nfc","nfc","nfc","nfc","nfc","nfd","nfd","nfd","nfd","nfd","nfkc","nfkc","nfkc","nfkc","nfkc","nfkd","nfkd","nfkd","nfkd","nfkd","size_hint","size_hint","stream_safe","stream_safe","stream_safe","stream_safe","stream_safe","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","canonical_combining_class","compose","decompose_canonical","decompose_cjk_compat_variants","decompose_compatible","is_combining_mark","is_public_assigned"],"q":[[0,"unicode_normalization"],[116,"unicode_normalization::char"],[123,"core::clone"],[124,"core::fmt"],[125,"core::fmt"],[126,"core::option"],[127,"alloc::string"],[128,"core::result"],[129,"core::any"],[130,"core::ops::function"]],"d":["External iterator for a string decomposition’s …","The QuickCheck algorithm can quickly determine if a text …","The text may be normalized.","The text is definitely not normalized.","External iterator for a string recomposition’s …","External iterator for replacements for a string’s …","UAX15-D4: This iterator keeps track of how many …","","Methods for iterating over strings while applying Unicode …","The text is definitely normalized.","","","","","","","","","","","Methods for composing and decomposing characters.","A transformation which replaces CJK Compatibility …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Authoritatively check if a string is in NFC.","Quickly check if a string is in NFC, potentially returning …","Authoritatively check if a string is Stream-Safe NFC.","Quickly check if a string is Stream-Safe NFC.","Authoritatively check if a string is in NFD.","Quickly check if a string is in NFD.","Authoritatively check if a string is Stream-Safe NFD.","Quickly check if a string is Stream-Safe NFD.","Authoritatively check if a string is in NFKC.","Quickly check if a string is in NFKC.","Authoritatively check if a string is in NFKD.","Quickly check if a string is in NFKD.","","","","","An Iterator over the string in Unicode Normalization Form C","","","","","Returns an iterator over the string in Unicode …","","","","","An Iterator over the string in Unicode Normalization Form …","","","","","Returns an iterator over the string in Unicode …","","","","","","","An Iterator over the string with Conjoining Grapheme …","","","","","","","","","","","","","","","","","","","","","","","","","","Look up the canonical combining class for a codepoint.","Compose two characters into a single character, if …","Compute canonical Unicode decomposition for character. See …","Compute standard-variation decomposition for character.","Compute canonical or compatible Unicode decomposition for …","Return whether the given character is a combining mark (…","Return whether the given character is assigned (…"],"i":[0,0,6,6,0,0,0,0,0,6,12,2,6,4,1,12,2,6,4,1,0,21,12,2,4,1,2,4,1,2,4,1,6,6,2,6,4,1,12,2,6,4,1,12,2,6,4,1,12,2,4,1,0,0,0,0,0,0,0,0,0,0,0,0,12,2,4,1,21,12,2,4,1,21,12,2,4,1,21,12,2,4,1,21,12,2,4,1,2,1,21,12,2,4,1,2,4,1,2,4,1,12,2,6,4,1,12,2,6,4,1,12,2,6,4,1,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],3],[[[1,[-1]]],[[1,[-1]]],3],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[6,6],7],[[-1,-2],7,[],[]],[[[2,[-1]],8],9,[10,3]],[[6,8],9],[[[4,[-1]],8],9,[10,3]],[[[1,[-1]],8],9,[10,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,7],[-1,6,10],[11,7],[-1,6,10],[11,7],[-1,6,10],[11,7],[-1,6,10],[11,7],[-1,6,10],[11,7],[-1,6,10],[[[12,[-1]]],[[14,[13]]],10],[[[2,[-1]]],[[14,[13]]],10],[[[4,[-1]]],[[14,[13]]],10],[[[1,[-1]]],[[14,[13]]],10],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[[2,[-1]]],[[5,[15,[14,[15]]]]],10],[[[1,[-1]]],[[5,[15,[14,[15]]]]],10],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[13,19],[[13,13],[[14,[13]]]],[[13,-1],5,20],[[13,-1],5,20],[[13,-1],5,20],[13,7],[13,7]],"c":[],"p":[[3,"Replacements",0],[3,"Decompositions",0],[8,"Clone",123],[3,"Recompositions",0],[15,"tuple"],[4,"IsNormalized",0],[15,"bool"],[3,"Formatter",124],[6,"Result",124],[8,"Iterator",125],[15,"str"],[3,"StreamSafe",0],[15,"char"],[4,"Option",126],[15,"usize"],[3,"String",127],[4,"Result",128],[3,"TypeId",129],[15,"u8"],[8,"FnMut",130],[8,"UnicodeNormalization",0]]},\
"universal_hash":{"doc":"Traits for Universal Hash Functions.","t":"GDGIGIIIILLLKLLACLLLKLLLLLCLKLKLKLLLLLCLLKLDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Block","Error","Key","KeyInit","ParBlocks","Reset","UhfBackend","UhfClosure","UniversalHash","blocks_needed_to_align","borrow","borrow_mut","call","clone","clone_into","consts","crypto_common","default","eq","equivalent","finalize","finalize_reset","fmt","fmt","from","generate_key","generic_array","into","new","new_from_slice","proc_block","proc_par_blocks","reset","to_owned","to_string","try_from","try_into","type_id","typenum","update","update_padded","update_with_backend","verify","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"universal_hash"],[43,"universal_hash::consts"],[3433,"core::clone"],[3434,"core::fmt"],[3435,"core::fmt"],[3436,"rand_core"],[3437,"rand_core"],[3438,"core::result"],[3439,"alloc::string"],[3440,"core::any"],[3441,"typenum::marker_traits"],[3442,"typenum::marker_traits"],[3443,"typenum::marker_traits"],[3444,"typenum::int"],[3445,"typenum::marker_traits"],[3446,"typenum::array"]],"d":["Block on which <code>BlockSizeUser</code> implementors operate.","Error type used by the <code>UniversalHash::verify</code> method to …","Key used by <code>KeySizeUser</code> implementors.","Types which can be initialized from key.","Parallel blocks on which <code>ParBlocksSizeUser</code> implementors …","Resettable types.","Trait implemented by UHF backends.","Trait for <code>UhfBackend</code> users.","The <code>UniversalHash</code> trait defines a generic interface for …","Returns the number of blocks that should be passed to …","","","Execute closure with the provided UHF backend.","","","Type aliases for many constants.","","","","","Retrieve result and consume hasher instance.","Obtain the [<code>Output</code>] of a <code>UniversalHash</code> computation and …","","","Returns the argument unchanged.","Generate random key using the provided <code>CryptoRng</code>.","","Calls <code>U::from(self)</code>.","Create new value from fixed size key.","Create new value from variable size key.","Process single block.","Process several blocks in parallel.","Reset state to its initial value.","","","","","","","Update hash function state with the provided block.","Input data into the universal hash function. If the length …","Update hash function state using the provided rank-2 …","Verify the <code>UniversalHash</code> of the processed input matches a …","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,4,4,21,4,4,0,0,4,4,4,42,42,4,4,4,43,0,4,43,43,3,3,8,4,4,4,4,4,0,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,24,26,26,24,24,26,24,24,26,26,24,26,22,24,26,22,24,26,22,24,26,22,24,26,22,24,26,22,22,24,26,22,24,26,22,24,26,22,24,26,22,24,26,22,24,26,22,24,24,26,26,22,22,22,24,24,26,26,22,22,22,22,22,22,22,24,24,26,26,22,24,26,24,26,22,22,22,22,22,22,22,22,22,24,26,22,22,22,22,22,22,22,22,22,24,26,22,24,26,24,26,22,24,26,22,24,26,22],"f":[0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],2,[],3],[4,4],[[-1,-2],2,[],[]],0,0,[[],4],[[4,4],5],[[-1,-2],5,[],[]],[-1,[[6,[-1]]],[]],[-1,[[6,[-1]]],[7,8]],[[4,9],10],[[4,9],10],[-1,-1,[]],[-1,[[12,[11]]],[13,14]],0,[-1,-2,[],[]],[[[12,[11]]],-1,[]],[[[15,[11]]],[[17,[-1,16]]],[]],[[-1,[6,[-1]]],2,[]],[[-1,[18,[-1]]],2,[]],[-1,2,[]],[-1,-2,[],[]],[-1,19,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,20,[]],0,[[-1,[15,[[6,[-1]]]]],2,[]],[[-1,[15,[11]]],2,[]],[[-1,-2],2,[],21],[[-1,[6,[-1]]],[[17,[2,4]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,-1],[],23],[[24,-1],[],25],[[26,26]],[[26,24]],[[24,24]],[[24,26]],[[26,-1],[],25],[[24,24]],[[24,26]],[[26,24]],[[26,26]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[26,26],[22,22],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[24,24],27],[[26,26],27],[[22,22],27],[[],24],[[],26],[[],22],[[22,-1],[],[23,28]],[[24,24],5],[[26,26],5],[[22,22],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[24,9],[[17,[2,29]]]],[[26,9],[[17,[2,29]]]],[[22,9],[[17,[2,29]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[24,-1],2,30],[[26,-1],2,30],[[22,-1],2,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[24,24],24],[[24,26],26],[[26,24],26],[[26,26],26],[[22,[31,[-1]]],[],[32,28]],[[22,[33,[-1]]],[],[32,28]],[[22,22]],[[24,26],24],[[24,24],24],[[26,26],26],[[26,24],24],[[22,22]],[[22,[31,[-1]]],[],[32,28]],[[22,[33,[-1]]],[],[32,28]],[[22,[34,[-1,-2]]],[],[],[]],[[22,35]],[[22,-1],[],23],[22],[[],24],[[],24],[[],26],[[],26],[[],22],[24],[26],[[24,24],[[36,[27]]]],[[26,26],[[36,[27]]]],[[22,22],[[36,[27]]]],[[-1,-2],[],[],[]],[[22,[33,[-1]]],[],[32,28]],[[22,22]],[[22,[31,[-1]]],[],[32,28]],[[22,-1],[],[23,28]],[[22,22]],[[22,[31,[-1]]],[],[32,28]],[[22,[33,[-1]]],[],[32,28]],[[],5],[[],5],[[],37],[[],38],[[],39],[[],40],[[],40],[[],37],[[],38],[[],39],[[],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],11],[[],11],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]]],"c":[],"p":[[15,"usize"],[15,"tuple"],[8,"UhfBackend",0],[3,"Error",0],[15,"bool"],[6,"Block",0],[8,"Clone",3433],[8,"Reset",0],[3,"Formatter",3434],[6,"Result",3434],[15,"u8"],[3,"GenericArray",3435],[8,"CryptoRng",3436],[8,"RngCore",3436],[15,"slice"],[3,"InvalidLength",3437],[4,"Result",3438],[6,"ParBlocks",0],[3,"String",3439],[3,"TypeId",3440],[8,"UhfClosure",0],[3,"Z0",43],[8,"Integer",3441],[3,"B0",43],[8,"Bit",3441],[3,"B1",43],[4,"Ordering",3442],[8,"NonZero",3441],[3,"Error",3434],[8,"Hasher",3443],[3,"NInt",3444],[8,"Unsigned",3441],[3,"PInt",3444],[3,"TArr",3445],[3,"ATerm",3445],[4,"Option",3446],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[8,"UniversalHash",0],[8,"KeyInit",0]]},\
"untrusted":{"doc":"untrusted.rs: Safe, fast, zero-panic, zero-crashing, …","t":"DDDLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLL","n":["EndOfInput","Input","Reader","as_slice_less_safe","at_end","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","eq","fmt","fmt","fmt","from","from","from","from","from","into","into","into","is_empty","len","new","peek","read_all","read_all_optional","read_byte","read_bytes","read_bytes_to_end","read_partial","skip","skip_to_end","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"untrusted"],[46,"core::fmt"],[47,"core::fmt"],[48,"core::ops::function"],[49,"core::option"],[50,"core::any"]],"d":["The error type used to indicate the end of the input was …","A wrapper around <code>&amp;&#39;a [u8]</code> that helps in writing panic-free …","A read-only, forward-only cursor into the data in an <code>Input</code>.","Access the input as a slice so it can be processed by …","Returns <code>true</code> if the reader is at the end of the input, and …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Construct a new <code>Input</code> for the given input <code>bytes</code>.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the input is empty and false otherwise.","Returns the length of the <code>Input</code>.","Construct a new Reader for the given input. Use <code>read_all</code> or","Returns <code>true</code> if there is at least one more byte in the …","Calls <code>read</code> with the given input as a <code>Reader</code>, ensuring that …","Calls <code>read</code> with the given input as a <code>Reader</code>, ensuring that …","Reads the next input byte.","Skips <code>num_bytes</code> of the input, returning the skipped input …","Skips the reader to the end of the input, returning the …","Calls <code>read()</code> with the given input as a <code>Reader</code>. On success, …","Skips <code>num_bytes</code> of the input.","Skips the reader to the end of the input.","","","","","","","","",""],"i":[0,0,0,1,4,4,1,6,4,1,6,1,6,6,4,1,6,4,1,1,1,6,4,1,6,1,1,4,4,1,0,4,4,4,4,4,4,4,1,6,4,1,6,4,1,6],"f":[0,0,0,[1,[[3,[2]]]],[4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[6,6],[[6,6],5],[[4,7],8],[[1,7],8],[[6,7],8],[-1,-1,[]],[[[3,[2]]],1],[-1,-1,[]],[[[3,[2]]],1],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,5],[1,9],[1,4],[[4,2],5],[[1,-1,-2],[[10,[-3,-1]]],[],11,[]],[[[12,[1]],-1,-2],[[10,[-3,-1]]],[],11,[]],[4,[[10,[2,6]]]],[[4,9],[[10,[1,6]]]],[4,1],[[4,-1],[[10,[[13,[1,-2]],-3]]],11,[],[]],[[4,9],[[10,[13,6]]]],[4,13],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]]],"c":[],"p":[[3,"Input",0],[15,"u8"],[15,"slice"],[3,"Reader",0],[15,"bool"],[3,"EndOfInput",0],[3,"Formatter",46],[6,"Result",46],[15,"usize"],[4,"Result",47],[8,"FnOnce",48],[4,"Option",49],[15,"tuple"],[3,"TypeId",50]]},\
"url":{"doc":"rust-url is an implementation of the URL Standard for the …","t":"NNNNNNNNNNNNNNNNNNNNNGNNNENNNNNNNNNNNDENEDDNENNNNENNNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AfterFragment","AfterHost","AfterPassword","AfterPath","AfterPort","AfterQuery","AfterScheme","AfterUsername","Backslash","BeforeFragment","BeforeHost","BeforePassword","BeforePath","BeforePort","BeforeQuery","BeforeScheme","BeforeUsername","C0SpaceIgnored","Domain","EmbeddedCredentials","EmptyHost","EncodingOverride","ExpectedDoubleSlash","ExpectedFileDoubleSlash","FileWithHostAndWindowsDrive","Host","IdnaError","InvalidDomainCharacter","InvalidIpv4Address","InvalidIpv6Address","InvalidPort","Ipv4","Ipv6","NonUrlCodePoint","None","NullInFragment","Opaque","OpaqueOrigin","Origin","Overflow","ParseError","ParseOptions","PathSegmentsMut","PercentDecode","Position","RelativeUrlWithCannotBeABaseBase","RelativeUrlWithoutBase","SetHostOnCannotBeABaseUrl","Some","SyntaxViolation","TabOrNewlineIgnored","Tuple","UnencodedAtSign","Url","UrlQuery","as_mut_string","as_ref","as_str","ascii_serialization","authority","base_url","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cannot_be_a_base","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","description","domain","drop","drop","encoding_override","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","form_urlencoded","fragment","from","from","from","from","from","from","from","from","from","from","from","from_directory_path","from_file_path","from_str","has_authority","has_host","hash","hash","hash","hash","host","host_str","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into_string","is_special","is_tuple","join","make_relative","new_opaque","options","origin","parse","parse","parse","parse_opaque","parse_with_params","partial_cmp","partial_cmp","password","path","path_segments","path_segments_mut","pop","pop_if_empty","port","port_or_known_default","push","query","query_pairs","query_pairs_mut","scheme","set_fragment","set_host","set_ip_host","set_password","set_path","set_port","set_query","set_scheme","set_username","socket_addrs","syntax_violation_callback","to_file_path","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode_serialization","username"],"q":[[0,"url"],[257,"alloc::string"],[258,"core::option"],[259,"core::clone"],[260,"core::cmp"],[261,"core::cmp"],[262,"core::fmt"],[263,"core::fmt"],[264,"idna::uts46"],[265,"core::result"],[266,"std::path"],[267,"core::hash"],[268,"core::hash"],[269,"core::ops::range"],[270,"form_urlencoded"],[271,"form_urlencoded"],[272,"core::net::socket_addr"],[273,"alloc::vec"],[274,"std::io::error"],[275,"core::ops::function"],[276,"std::path"]],"d":["","","","","","","","","","","","","","","","","","","A DNS domain name, as ‘.’ dot-separated labels. …","","","","","","","The host name of an URL.","","","","","","An IPv4 address. <code>Url::host_str</code> returns the serialization …","An IPv6 address. <code>Url::host_str</code> returns the serialization …","","No value.","","A globally unique identifier","Opaque identifier for URLs that have file or other schemes","The origin of an URL","","Errors that can occur during parsing.","Full configuration for the URL parser.","Exposes methods to manipulate the path of an URL that is …","","Indicates a position within a URL based on its components.","","","","Some value of type <code>T</code>.","Non-fatal syntax violations that can occur during parsing.","","Consists of the URL’s scheme, host and port","","A parsed URL record.","Implementation detail of <code>Url::query_pairs_mut</code>. Typically …","","","Return the serialization of this URL.","…","Return the authority of this URL as an ASCII string.","Change the base URL","","","","","","","","","","","","","","","","","","","","","Return whether this URL is a cannot-be-a-base URL, meaning …","Remove all segments in the path, leaving the minimal …","","","","","","","","","","","","","","","","","","","","If this URL has a host and it is a domain name (not an IP …","","","Override the character encoding of query strings. This is …","","","","","","","","","","","","","Append each segment from the given iterator at the end of …","","","","","","","","","","","","","","","","Return this URL’s fragment identifier, if any.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a directory name as <code>std::path::Path</code> into an URL in …","Convert a file name as <code>std::path::Path</code> into an URL in the …","","Return whether the URL has an ‘authority’, which can …","Equivalent to <code>url.host().is_some()</code>.","","","","","Return the parsed representation of the host for this URL. …","Return the string representation of the host (domain or IP …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the serialization of this URL.","Return whether the URL is special (has a special scheme)","Return whether this origin is a (scheme, host, port) tuple …","Parse a string as an URL, with this URL as the base URL.","Creates a relative URL if possible, with this URL as the …","Creates a new opaque origin that is only equal to itself.","Return a default <code>ParseOptions</code> that can fully configure the …","Return the origin of this URL (…","Parse a host: either an IPv6 address in [] square …","Parse an absolute URL from a string.","Parse an URL string with the configuration so far.","","Parse an absolute URL from a string and add params to its …","","","Return the password for this URL, if any, as a …","Return the path for this URL, as a percent-encoded ASCII …","Unless this URL is cannot-be-a-base, return an iterator of …","Return an object with methods to manipulate this URL’s …","Remove the last segment of this URL’s path.","Remove the last segment of this URL’s path if it is …","Return the port number for this URL, if any.","Return the port number for this URL, or the default port …","Append the given segment at the end of this URL’s path.","Return this URL’s query string, if any, as a …","Parse the URL’s query string, if any, as …","Manipulate this URL’s query string, viewed as a sequence …","Return the scheme of this URL, lower-cased, as an ASCII …","Change this URL’s fragment identifier.","Change this URL’s host.","Change this URL’s host to the given IP address.","Change this URL’s password.","Change this URL’s path.","Change this URL’s port number.","Change this URL’s query string.","Change this URL’s scheme.","Change this URL’s username.","Resolve a URL’s host and port number to <code>SocketAddr</code>.","Call the provided function or closure for a non-fatal …","Assuming the URL is in the <code>file</code> scheme or similar, convert …","","Return a copy of <code>self</code> that owns an allocated <code>String</code> but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","Return the username for this URL (typically the empty …"],"i":[15,15,15,15,15,15,15,15,14,15,15,15,15,15,15,15,15,14,10,14,13,0,14,14,14,0,13,13,13,13,13,10,10,14,19,14,5,0,0,13,0,0,0,14,0,13,13,13,19,0,14,5,14,0,0,1,3,3,5,3,6,10,5,12,13,14,9,15,3,6,1,10,5,12,13,14,9,15,3,6,1,3,9,10,5,12,13,14,15,3,6,10,5,12,13,14,15,3,6,10,3,14,3,9,1,6,10,5,12,13,14,3,10,5,12,13,14,3,9,1,10,10,5,12,13,13,14,14,9,15,3,3,1,0,3,10,5,12,13,13,14,9,15,3,6,1,3,3,3,3,3,10,5,12,3,3,3,3,3,3,3,10,5,12,13,14,9,15,3,6,1,3,3,5,3,3,5,3,3,10,3,6,10,3,10,3,3,3,3,3,9,9,3,3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,3,10,10,5,12,13,14,15,3,6,10,13,14,3,10,5,12,13,14,9,15,3,3,6,1,10,5,12,13,14,9,15,3,6,1,10,5,12,13,14,9,15,3,6,1,5,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[3,4],[5,2],[3,4],[[6,[7,[3]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,8],[9,9],[[[10,[-1]]],[[10,[-1]]],11],[5,5],[12,12],[13,13],[14,14],[15,15],[3,3],[6,6],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[[10,[-1]],[10,[-1]]],17,18],[[3,3],17],[14,4],[3,[[7,[4]]]],[9,16],[1,16],[[6,19],6],[[[10,[-2]],[10,[-1]]],8,[],[[20,[-1]]]],[[5,5],8],[[12,12],8],[[13,13],8],[[14,14],8],[[3,3],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[9,-1],9,21],[1,3],[[[10,[-1]],22],23,24],[[[10,[-1]],22],23,[[25,[4]]]],[[5,22],23],[[12,22],23],[[13,22],23],[[13,22],23],[[14,22],23],[[14,22],23],[[9,22],23],[[15,22],23],[[3,22],23],[[3,22],23],[[1,22],23],0,[3,[[7,[4]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[26,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[3,16]]],[[25,[28]]]],[-1,[[27,[3,16]]],[[25,[28]]]],[4,[[27,[3,13]]]],[3,8],[3,8],[[[10,[-1]],-2],16,29,30],[[5,-1],16,30],[[12,-1],16,30],[[3,-1],16,30],[3,[[7,[[10,[4]]]]]],[3,[[7,[4]]]],[[3,[31,[15]]],4],[[3,[32,[15]]],4],[[3,33],4],[[3,[34,[15]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,2],[3,8],[5,8],[[3,4],[[27,[3,13]]]],[[3,3],[[7,[2]]]],[[],5],[[],6],[3,5],[4,[[27,[[10,[2]],13]]]],[4,[[27,[3,13]]]],[[6,4],[[27,[3,13]]]],[4,[[27,[[10,[2]],13]]]],[[4,-1],[[27,[3,13]]],21],[[[10,[-1]],[10,[-1]]],[[7,[17]]],35],[[3,3],[[7,[17]]]],[3,[[7,[4]]]],[3,4],[3,[[7,[[37,[36]]]]]],[3,[[27,[9,16]]]],[9,9],[9,9],[3,[[7,[38]]]],[3,[[7,[38]]]],[[9,4],9],[3,[[7,[4]]]],[3,39],[3,[[40,[1]]]],[3,4],[[3,[7,[4]]],16],[[3,[7,[4]]],[[27,[16,13]]]],[[3,41],[[27,[16,16]]]],[[3,[7,[4]]],[[27,[16,16]]]],[[3,4],16],[[3,[7,[38]]],[[27,[16,16]]]],[[3,[7,[4]]],16],[[3,4],[[27,[16,16]]]],[[3,4],[[27,[16,16]]]],[[3,-1],[[44,[[43,[42]]]]],45],[[6,[7,[45]]],6],[3,[[27,[46,16]]]],[-1,-2,[],[]],[[[10,[4]]],[[10,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[4,[[27,[3]]]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[5,2],[3,4]],"c":[171],"p":[[3,"UrlQuery",0],[3,"String",257],[3,"Url",0],[15,"str"],[4,"Origin",0],[3,"ParseOptions",0],[4,"Option",258],[15,"bool"],[3,"PathSegmentsMut",0],[4,"Host",0],[8,"Clone",259],[3,"OpaqueOrigin",0],[4,"ParseError",0],[4,"SyntaxViolation",0],[4,"Position",0],[15,"tuple"],[4,"Ordering",260],[8,"Ord",260],[6,"EncodingOverride",0],[8,"PartialEq",260],[8,"IntoIterator",261],[3,"Formatter",262],[6,"Result",262],[8,"Debug",262],[8,"AsRef",263],[3,"Errors",264],[4,"Result",265],[3,"Path",266],[8,"Hash",267],[8,"Hasher",267],[3,"RangeTo",268],[3,"Range",268],[3,"RangeFull",268],[3,"RangeFrom",268],[8,"PartialOrd",260],[15,"char"],[3,"Split",269],[15,"u16"],[3,"Parse",270],[3,"Serializer",270],[4,"IpAddr",271],[4,"SocketAddr",272],[3,"Vec",273],[6,"Result",274],[8,"Fn",275],[3,"PathBuf",266],[3,"TypeId",276]]},\
"utf8":{"doc":"","t":"DEEDNNNNDRLLLLLLLLLLMMLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMM","n":["BufReadDecoder","BufReadDecoderError","DecodeError","Incomplete","Incomplete","Invalid","InvalidByteSequence","Io","LossyDecoder","REPLACEMENT_CHARACTER","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_len","clone","clone","clone_into","clone_into","decode","drop","empty","feed","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","is_empty","lossy","new","new","new","next_lossy","next_strict","read_to_string_lossy","source","to_owned","to_owned","to_string","to_string","try_complete","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","incomplete_suffix","invalid_sequence","remaining_input","valid_prefix","valid_prefix"],"q":[[0,"utf8"],[74,"utf8::DecodeError"],[79,"core::result"],[80,"core::ops::function"],[81,"core::fmt"],[82,"core::fmt"],[83,"std::io"],[84,"std::io::error"],[85,"alloc::string"],[86,"core::error"],[87,"core::any"]],"d":["Wraps a <code>std::io::BufRead</code> buffered byte stream and decode …","","","","Call the <code>incomplete_suffix.try_complete</code> method with more …","In lossy decoding insert <code>valid_prefix</code>, then <code>&quot;\\\\u{FFFD}&quot;</code>, …","Represents one UTF-8 error in the byte stream.","An I/O error from the underlying byte stream","A push-based, lossy decoder for UTF-8. Errors are replaced …","The replacement character, U+FFFD. In lossy decoding, …","","","","","","","","","","","","","","","","","","","","Feed one chunk of input into the decoder.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Replace UTF-8 errors with U+FFFD","Create a new decoder from a callback.","","","Same as <code>BufReadDecoder::next_strict</code>, but replace UTF-8 …","Decode and consume the next chunk of UTF-8 input.","This is to <code>Read::read_to_string</code> what …","","","","","","<code>None</code>: still incomplete, call <code>try_complete</code> again with more …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,10,10,0,0,8,15,10,1,2,8,15,10,1,2,2,2,1,2,1,2,0,8,2,8,10,10,1,1,2,8,15,10,1,2,8,15,10,1,2,2,10,8,15,2,15,15,15,10,1,2,10,1,2,8,15,10,1,2,8,15,10,1,2,8,15,10,1,2,22,23,23,23,22],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[5,[4]]],[[7,[6,1]]]],[[[8,[-1]]],3,9],[[],2],[[[8,[-1]],[5,[4]]],3,9],[[10,11],12],[[10,11],12],[[1,11],12],[[1,11],12],[[2,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,13],[10,[[7,[6,14]]]],[-1,[[8,[-1]]],9],[-1,[[15,[-1]]],16],[[[5,[4]]],2],[[[15,[-1]]],[[18,[[17,[6]]]]],16],[[[15,[-1]]],[[18,[[7,[6,10]]]]],16],[-1,[[17,[19]]],16],[10,[[18,[20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,19,[]],[-1,19,[]],[[2,[5,[4]]],[[18,[[3,[[7,[6,[5,[4]]]],[5,[4]]]]]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0],"c":[],"p":[[4,"DecodeError",0],[3,"Incomplete",0],[15,"tuple"],[15,"u8"],[15,"slice"],[15,"str"],[4,"Result",79],[3,"LossyDecoder",0],[8,"FnMut",80],[4,"BufReadDecoderError",0],[3,"Formatter",81],[6,"Result",81],[15,"bool"],[3,"Error",82],[3,"BufReadDecoder",0],[8,"BufRead",83],[6,"Result",82],[4,"Option",84],[3,"String",85],[8,"Error",86],[3,"TypeId",87],[13,"Incomplete",74],[13,"Invalid",74]]},\
"want":{"doc":"A Futures channel-like utility to signal when a value is …","t":"DDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLL","n":["Closed","Giver","SharedGiver","Taker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone_into","drop","fmt","fmt","fmt","fmt","from","from","from","from","give","into","into","into","into","is_canceled","is_canceled","is_wanting","is_wanting","new","poll_want","shared","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","want","want"],"q":[[0,"want"],[51,"core::fmt"],[52,"core::fmt"],[53,"core::result"],[54,"core::task::poll"],[55,"core::any"],[56,"core::future::future"]],"d":["The <code>Taker</code> has canceled its interest in a value.","An entity that gives a value when wanted.","A cloneable <code>Giver</code>.","An entity that wants a value.","","","","","","","","","Signal to the <code>Giver</code> that the want is canceled.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Mark the state as idle, if the Taker currently is wanting.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the <code>Taker</code> has canceled interest without parking a …","Check if the <code>Taker</code> has canceled interest without parking a …","Check if the <code>Taker</code> has called <code>want()</code> without parking a …","Check if the <code>Taker</code> has called <code>want()</code> without parking a …","Create a new <code>want</code> channel.","Poll whether the <code>Taker</code> has registered interest in another …","Converts this into a <code>SharedGiver</code>.","","","","","","","","","","","","","","Returns a <code>Future</code> that fulfills when the <code>Taker</code> has done …","Signal to the <code>Giver</code> that a value is wanted."],"i":[0,0,0,0,4,1,7,3,4,1,7,3,1,3,3,1,4,1,7,3,4,1,7,3,4,4,1,7,3,4,3,4,3,0,4,4,3,4,1,7,3,4,1,7,3,4,1,7,3,4,1],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,3],[[-1,-2],2,[],[]],[1,2],[[4,5],6],[[1,5],6],[[7,5],6],[[3,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,8],[3,8],[4,8],[3,8],[[],[[2,[4,1]]]],[[4,9],[[11,[[10,[2,7]]]]]],[4,3],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[4,[[0,[13]]]],[1,2]],"c":[],"p":[[3,"Taker",0],[15,"tuple"],[3,"SharedGiver",0],[3,"Giver",0],[3,"Formatter",51],[6,"Result",51],[3,"Closed",0],[15,"bool"],[3,"Context",52],[4,"Result",53],[4,"Poll",54],[3,"TypeId",55],[8,"Future",56]]},\
"webpki":{"doc":"webpki: Web PKI X.509 Certificate Validation.","t":"NNNNNNGGDDHHHHHDNENENNDNNNNNNHHHHHHHNDNGGDDDDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BadDer","BadDerTime","CaUsedAsEndEntity","CertExpired","CertNotValidForName","CertNotValidYet","DNSName","DNSNameRef","DnsName","DnsNameRef","ECDSA_P256_SHA256","ECDSA_P256_SHA384","ECDSA_P384_SHA256","ECDSA_P384_SHA384","ED25519","EndEntityCert","EndEntityUsedAsCa","Error","Error","ErrorExt","ExtensionValueInvalid","InvalidCertValidity","InvalidDnsNameError","InvalidSignatureForPublicKey","MaximumPathBuildCallsExceeded","MaximumSignatureChecksExceeded","MissingOrMalformedExtensions","NameConstraintViolation","PathLenConstraintViolated","RSA_PKCS1_2048_8192_SHA256","RSA_PKCS1_2048_8192_SHA384","RSA_PKCS1_2048_8192_SHA512","RSA_PKCS1_3072_8192_SHA384","RSA_PSS_2048_8192_SHA256_LEGACY_KEY","RSA_PSS_2048_8192_SHA384_LEGACY_KEY","RSA_PSS_2048_8192_SHA512_LEGACY_KEY","RequiredEkuNotFound","SignatureAlgorithm","SignatureAlgorithmMismatch","TLSClientTrustAnchors","TLSServerTrustAnchors","Time","TlsClientTrustAnchors","TlsServerTrustAnchors","TrustAnchor","UnknownIssuer","UnsupportedCertVersion","UnsupportedCriticalExtension","UnsupportedSignatureAlgorithm","UnsupportedSignatureAlgorithmForPublicKey","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_seconds_since_unix_epoch","hash","into","into","into","into","into","into","into","into","into","into","into","name_constraints","partial_cmp","spki","subject","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_ascii","try_from_ascii_str","try_from_cert_der","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_is_valid_for_at_least_one_dns_name","verify_is_valid_for_dns_name","verify_is_valid_tls_client_cert","verify_is_valid_tls_client_cert_ext","verify_is_valid_tls_server_cert","verify_is_valid_tls_server_cert_ext","verify_signature"],"q":[[0,"webpki"],[184,"core::fmt"],[185,"core::fmt"],[186,"core::hash"],[187,"core::cmp"],[188,"core::option"],[189,"alloc::string"],[190,"std::time"],[191,"core::any"],[192,"alloc::vec"],[193,"core::iter::traits::iterator"]],"d":["The encoding of some ASN.1 DER-encoded item is invalid.","The encoding of an ASN.1 DER-encoded time is invalid.","A CA certificate is being used as an end-entity …","The certificate is expired; i.e. the time it is being …","The certificate is not valid for the name it is being …","The certificate is not valid yet; i.e. the time it is …","","","Requires the <code>alloc</code> feature. A DNS Name suitable for use in …","A reference to a DNS Name suitable for use in the TLS …","ECDSA signatures using the P-256 curve and SHA-256.","ECDSA signatures using the P-256 curve and SHA-384. …","ECDSA signatures using the P-384 curve and SHA-256. …","ECDSA signatures using the P-384 curve and SHA-384.","ED25519 signatures according to RFC 8410","An end-entity certificate.","An end-entity certificate is being used as a CA …","An error that occurs during certificate validation or name …","","An error that occurs during certificate validation or name …","An X.509 extension is invalid.","The certificate validity period (notBefore, notAfter) is …","An error indicating that a <code>DnsNameRef</code> could not built …","The signature is invalid for the given public key.","The maximum number of internal path building calls has …","","The certificate extensions are missing or malformed.","The certificate violates one or more name constraints.","The certificate violates one or more path length …","RSA PKCS#1 1.5 signatures using SHA-256 for keys of …","RSA PKCS#1 1.5 signatures using SHA-384 for keys of …","RSA PKCS#1 1.5 signatures using SHA-512 for keys of …","RSA PKCS#1 1.5 signatures using SHA-384 for keys of …","RSA PSS signatures using SHA-256 for keys of 2048-8192 …","RSA PSS signatures using SHA-384 for keys of 2048-8192 …","RSA PSS signatures using SHA-512 for keys of 2048-8192 …","The certificate is not valid for the Extended Key Usage …","A signature algorithm.","The algorithm in the TBSCertificate “signature” field …","","","The time type.","Trust anchors which may be used for authenticating clients.","Trust anchors which may be used for authenticating servers.","A trust anchor (a.k.a. root CA).","A valid issuer for the certificate could not be found.","The certificate is not a v3 X.509 certificate.","The certificate contains an unsupported critical extension.","The signature algorithm for a signature is not in the set …","The signature’s algorithm does not match the algorithm …","","Returns a <code>DnsNameRef</code> that refers to this <code>DnsName</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>webpki::Time</code> from a unix timestamp.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The value of a DER-encoded NameConstraints, containing name","","The value of the <code>subjectPublicKeyInfo</code> field of the trust …","The value of the <code>subject</code> field of the trust anchor.","","","","Constructs a <code>DnsName</code> from this <code>DnsNameRef</code>","","","","","","Parse the ASN.1 DER-encoded X.509 encoding of the …","","","","","","","Create a <code>webpki::Time</code> from a <code>std::time::SystemTime</code>.","","","","","Constructs a <code>DnsNameRef</code> from the given input if the input …","Constructs a <code>DnsNameRef</code> from the given input if the input …","Interprets the given DER-encoded certificate as a …","","","","","","","","","","","","","","","","","","","","","","","Verifies that the certificate is valid for at least one of …","Verifies that the certificate is valid for the given DNS …","Backward-SemVer-compatible wrapper around …","Verifies that the end-entity certificate is valid for use …","Backward-SemVer-compatible wrapper around …","Verifies that the end-entity certificate is valid for use …","Verifies the signature <code>signature</code> of message <code>msg</code> using the …"],"i":[6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,0,18,0,6,6,0,6,18,18,6,6,6,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,6,6,6,6,6,1,1,3,24,18,29,6,1,3,7,8,15,16,17,24,18,29,6,1,3,7,8,15,16,17,6,1,3,7,8,6,1,3,7,8,6,1,7,8,1,7,6,6,1,3,7,7,8,15,16,17,24,18,18,29,6,1,1,3,7,8,15,16,17,8,1,24,18,29,6,1,3,7,8,15,16,17,15,8,15,15,6,1,3,3,7,8,6,7,24,24,18,29,6,1,3,7,8,8,15,16,17,3,3,15,24,18,29,6,1,3,7,8,15,16,17,24,18,29,6,1,3,7,8,15,16,17,24,24,24,24,24,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,3],[3,[[5,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[1,1],[3,3],[7,7],[8,8],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[6,6],10],[[1,1],10],[[7,7],10],[[8,8],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[6,11],12],[[6,11],12],[[1,11],12],[[3,11],[[14,[9,13]]]],[[7,11],12],[[7,11],12],[[8,11],12],[[15,11],12],[[16,11],12],[[17,11],12],[-1,-1,[]],[-1,-1,[]],[6,18],[-1,-1,[]],[-1,-1,[]],[3,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,8],[[1,-1],9,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[8,8],[[22,[21]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,[[14,[-2]]],[],[]],[[[5,[4]]],[[14,[24]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[25,[[14,[8]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[5,[4]]],[[14,[3,7]]]],[2,[[14,[3,7]]]],[[[5,[4]]],[[14,[15,6]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[[24,-1],[[14,[[27,[3]],6]]],28],[[24,3],[[14,[9,6]]]],[[24,[5,[29]],17,[5,[[5,[4]]]],8],[[14,[9,6]]]],[[24,[5,[29]],17,[5,[[5,[4]]]],8],[[14,[9,18]]]],[[24,[5,[29]],16,[5,[[5,[4]]]],8],[[14,[9,6]]]],[[24,[5,[29]],16,[5,[[5,[4]]]],8],[[14,[9,18]]]],[[24,29,[5,[4]],[5,[4]]],[[14,[9,6]]]]],"c":[6,7,39,40],"p":[[3,"DnsName",0],[15,"str"],[3,"DnsNameRef",0],[15,"u8"],[15,"slice"],[4,"Error",0],[3,"InvalidDnsNameError",0],[3,"Time",0],[15,"tuple"],[15,"bool"],[3,"Formatter",184],[6,"Result",184],[3,"Error",184],[4,"Result",185],[3,"TrustAnchor",0],[3,"TlsServerTrustAnchors",0],[3,"TlsClientTrustAnchors",0],[4,"ErrorExt",0],[15,"u64"],[8,"Hasher",186],[4,"Ordering",187],[4,"Option",188],[3,"String",189],[3,"EndEntityCert",0],[3,"SystemTime",190],[3,"TypeId",191],[3,"Vec",192],[8,"Iterator",193],[3,"SignatureAlgorithm",0]]},\
"webpki_roots":{"doc":"This library is automatically generated from the Mozilla …","t":"RDLLLLMMMLLL","n":["TLS_SERVER_ROOTS","TrustAnchor","borrow","borrow_mut","from","into","name_constraints","spki","subject","try_from","try_into","type_id"],"q":[[0,"webpki_roots"],[12,"core::result"],[13,"core::any"]],"d":["","A trust anchor (sometimes called a root) for validating …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]]],"c":[],"p":[[4,"Result",12],[3,"TypeId",13],[3,"TrustAnchor",0]]},\
"zeroize":{"doc":"Securely zero memory with a simple trait (<code>Zeroize</code>) built …","t":"IIIIDLLLLLLLLLLLLLLLLLLLLLKLKL","n":["DefaultIsZeroes","TryZeroize","Zeroize","ZeroizeOnDrop","Zeroizing","as_mut","as_ref","borrow","borrow_mut","clone","clone_from","clone_into","default","deref","deref_mut","drop","eq","fmt","from","from","from","into","new","to_owned","try_from","try_into","try_zeroize","type_id","zeroize","zeroize"],"q":[[0,"zeroize"],[30,"core::marker"],[31,"core::convert"],[32,"core::convert"],[33,"core::default"],[34,"core::cmp"],[35,"core::fmt"],[36,"core::fmt"],[37,"core::any"]],"d":["Marker trait for types whose <code>Default</code> is the desired …","Fallible trait for representing cases where zeroization …","Trait for securely erasing values from memory.","Marker trait signifying that this type will …","<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Move value inside a <code>Zeroizing</code> wrapper which ensures it …","","","","Try to zero out this object from memory using Rust …","","Zero out this object from memory using Rust intrinsics …",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,17,1,4,1],"f":[0,0,0,0,0,[[[1,[-2]]],-1,2,[[3,[-1]],4]],[[[1,[-2]]],-1,2,[[5,[-1]],4]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[4,6]],[[[1,[-1]],[1,[-1]]],7,[4,6]],[[-1,-2],7,[],[]],[[],[[1,[-1]]],[8,4]],[[[1,[-1]]],-1,4],[[[1,[-1]]],-1,4],[[[1,[-1]]],7,4],[[[1,[-1]],[1,[-1]]],9,[10,4]],[[[1,[-1]],11],12,[13,4]],[14,-1,[]],[-1,[[1,[-1]]],4],[-1,-1,[]],[-1,-2,[],[]],[-1,[[1,[-1]]],4],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,9,[]],[-1,16,[]],[-1,7,[]],[[[1,[-1]]],7,4]],"c":[],"p":[[3,"Zeroizing",0],[8,"Sized",30],[8,"AsMut",31],[8,"Zeroize",0],[8,"AsRef",31],[8,"Clone",32],[15,"tuple"],[8,"Default",33],[15,"bool"],[8,"PartialEq",34],[3,"Formatter",35],[6,"Result",35],[8,"Debug",35],[15,"never"],[4,"Result",36],[3,"TypeId",37],[8,"TryZeroize",0]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
